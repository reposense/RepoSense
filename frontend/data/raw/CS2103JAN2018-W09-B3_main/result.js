var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-W09-B3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"* *Email us* : You can also reach us at `codeducatorapp [at] gmail.com`"}],"authorContributionMap":{"demitycho":2,"-":4}},{"path":"docs/team/yapni.adoc","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"\u003d Yap Ni - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"yapni"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"\u003d\u003d PROJECT: Codeducator"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"---"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"Codeducator is a desktop address book application for private programming language tutors."},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"Users are able to track the progress of their students, manage their tutoring schedule and other important information about their students. +"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"Codeducator has a graphical user interface built with JavaFX but most of the user interactions are done using command line interface. It is written in Java and has about 10 kLoC. +"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"This project is based on the https://github.com/se-edu/addressbook-level4[AddressBook-Level4] created by the SE-EDU initiative."},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"* *Major enhancement*: added a *dashboard* feature"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"** What it does:"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"*** The dashboard aims to help tutors track the progress of each of their student."},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"*** Each student will have a dashboard."},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"*** Tutors are able to add milestones they want their students to achieve to their dashboards. Each milestone signifies a significant accomplishment in the development of the student\u0027s learning progress."},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"*** Tutors are able to add a list of tasks to each milestone. A task is a piece of work that needs to be done to be closer to achieving the milestone."},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"*** Tutors are able to mark each task as completed, which updates the progress of the milestone."},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"*** Tutors are able to delete milestone and delete task."},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"** Justification: Besides managing their student contacts, tutors will also need to manage the learning progress of their students so that they can tutor them better. If they have a large number of students they tutor,"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"it is hard to keep track of what needs to be done for each of them. Hence, this feature not only allows tutors to manage both their student contacts and student progress all in one place, it also provides them ease in documenting"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"and tracking their students\u0027 learning development."},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"* *Minor enhancement*: added a *favourites* feature"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"** What it does: Allows users to add students to favourites and view the list of students in favourites."},{"lineNumber":37,"author":{"gitID":"yapni"},"content":""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"** Justification: Tutors may have some students that they wish to take note of. This feature helps tutors highlight these students and access them easily."},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W09-B3/main/blob/master/collated/functional/yapni.md[Functional code]] [https://github.com/CS2103JAN2018-W09-B3/main/blob/master/collated/test/yapni.md[Test code]]"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"* *Other contributions*:"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"** Project management:"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"*** Managed release `v1.4` on GitHub"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"** Documentation:"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"*** Did cosmetic tweaks to existing contents of the Developer Guide: https://github.com/CS2103JAN2018-W09-B3/main/pull/167[#167]"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"** Community:"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"*** PR reviewed: https://github.com/CS2103JAN2018-W09-B3/main/pull/174[#174]"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"*** Reported bugs for another team: https://github.com/CS2103JAN2018-F09-B1/main/issues/77[1], https://github.com/CS2103JAN2018-F09-B1/main/issues/70[2], https://github.com/CS2103JAN2018-F09-B1/main/issues/81[3], https://github.com/CS2103JAN2018-F09-B1/main/issues/89[4]"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"** Others:"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"*** Refactored the name of some classes in the context of Codeducator (changed the name of `Person` to `Student` and `Subject` to `ProgrammingLanguage`): http://github.com/CS2103JAN2018-W09-B3/main/pull/27[#27]"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"include::../UserGuide.adoc[tag\u003ddashboard1]"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":66,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"include::../DeveloperGuide.adoc[tag\u003ddashboard]"}],"authorContributionMap":{"yapni":57,"-":11}},{"path":"docs/team/samuelloh.adoc","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"\u003d Samuel Loh- Project Portfolio"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"yapni"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"\u003d\u003d PROJECT: Codeducator"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"---"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"Codeducator is a desktop address book application for private programming language tutors."},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"Users are able to track the progress of their students, manage their tutoring schedule and other important information about their students. +"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"Codeducator has a graphical user interface built with JavaFX but most of the user interactions are done using command line interface. It is written in Java and has about 10 kLoC. +"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"This project is based on the https://github.com/se-edu/addressbook-level4[AddressBook-Level4] created by the SE-EDU initiative."},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"* *Major enhancement*: added *a separate profile page for students and the ability to edit their miscellaneous details.*"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"** What it does:"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"*** The profile page allows the tutor to view a student\u0027s full information paticulars on a separate page."},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"*** This profile page includes the main information of a student (also displayed on the student card), miscellaneous information and profile picture (both not displayed on the student card)"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"*** The tutor will be able to edit all of the student\u0027s information displayed on the profile page. This includes the profile picture which is done by proving a filepath to the new picture."},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"** Justification: A tutor would wish to learn as much details as he/she can of a student before taking one in. In the Codeducator app, there is a panel of cards to display each student\u0027s information."},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"However, it is relatively small. Moreover, some details like Next-Of-Kin contact is important, yet not required very often. Thus this enhancement aids the tutor in viewing and keeping track of the full details of each student."},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"** Highlights: This feature was implemented partially using HTML and JavaScript and hence further changes to it will have to consider both the source code and the HTML/JavaScript files."},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"* *Minor enhancement*: Added *a \u0027ProgrammingLanguage\u0027 field to the student model.*"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"** What it does: Allows the tutor to keep track of what programming language(s) are being used or taught to each student."},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"**Justification: A tutor would want to keep track of what programming language a student is learning with or about, in order to better prepare lessons for that student."},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W09-B3/main/blob/master/collated/functional/samuelloh.md[Functional code]] [https://github.com/CS2103JAN2018-W09-B3/main/blob/master/collated/test/samuelloh.md[Test code]]] _{give links to collated code files}_"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"* *Other contributions*:"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"** Project management:"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"*** Setup Github organisation and repositories for the team."},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"*** Managed release `v1.5rc` (1 release) on GitHub."},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"** Enhancements to existing features:"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"*** Added Programming Language field to student model."},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"** Documentation:"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"*** Corrected and improved on some language and grammar errors."},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"** Community:"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W11-B3/main/issues/125[1], https://github.com/CS2103JAN2018-W11-B3/main/issues/123[2], https://github.com/CS2103JAN2018-W11-B3/main/issues/113m[3], https://github.com/CS2103JAN2018-W11-B3/main/issues/105[4], https://github.com/CS2103JAN2018-W11-B3/main/issues/105[5])"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"Start of extract from [User Guide]"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"include::../UserGuide.adoc[tag\u003dprofilePage1]"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"include::../UserGuide.adoc[tag\u003dprofilePage2]"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"End of extract from [User Guide]"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":74,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"Start of extract from [Developer Guide]"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"include::../DeveloperGuide.adoc[tag\u003dprogrammingLanguage]"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"include::../DeveloperGuide.adoc[tag\u003dprofilePage1]"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"include::../DeveloperGuide.adoc[tag\u003dprofilePage2]"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"End of extract from [Developer Guide]"}],"authorContributionMap":{"yapni":18,"samuelloh":50,"-":14}},{"path":"docs/team/demitycho.adoc","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"\u003d Tan Wei Hao - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"yapni"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"\u003d\u003d PROJECT: Codeducator"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"---"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"Codeducator is a desktop address book application for private programming language tutors."},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"Users are able to track the progress of their students, manage their tutoring schedule and other important information about their students. +"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"Codeducator has a graphical user interface built with JavaFX but most of the user interactions are done using command line interface. It is written in Java and has about 10 kLoC. +"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"This project is based on the https://github.com/se-edu/addressbook-level4[AddressBook-Level4] created by the SE-EDU initiative."},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"* *Major enhancement*: added *Scheduling* functionality and *Google Services integration*."},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"** What it does: It allows a user to add lessons for students in their contact list."},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"*** Schedule helps tutors keep track of their lessons."},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"*** Lessons can be added to the schedule."},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"*** Users can upload contacts data and schedule data to Google Contacts and Calendar respectively."},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"*** Easy organisation of data: Data uploaded to Google Contact is uploaded under contact group label \"Students\". Data uploaded to Google Calendar is uploaded under calendar name \"Student List\". This make the process of utilising Google Accounts much easier."},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"** Justification: This feature improves the product significantly because:"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"*** The target user faces a big problem in keeping track of their timetable and schedule. This feature allows a user to easily add, remove and view the events specific to his part time teaching job."},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"*** Sync helps to push contacts and schedule to the cloud and be utilised by users in the cloud data context, e.g. viewing across devices"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"** Highlights: Scheduling required an addition of a major component not in the default AddressBook-level4."},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"It required an in-depth analysis of design alternatives."},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"The implementation too was challenging as it required fundamental changes the existing Model objects."},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"Relating lessons with students required a refactor of `Student` class"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"** Credits:"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"*** Uses the excellent link:https://github.com/dlemmermann/CalendarFX[CalendarFX] class that was thankfully open source at the time of implementation."},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"*** Uses Google APIs, which are very well documented and well developed. Made my life easier when exploring the option of Google Service integration."},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"* *Minor enhancement*: added a findTag command that allows the user to find Students by Tags."},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W09-B3/main/blob/master/collated/functional/demitycho.md[Functional code]] [https://github.com/CS2103JAN2018-W09-B3/main/blob/master/collated/test/demitycho.md[Test code]]"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"Both add up to around 3k lines of code."},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"* *Other contributions*:"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"** Project management:"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"*** Managed releases `v1.3` and `v1.5rc` (2 releases) on GitHub"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"** Enhancements to existing features:"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"*** Updated the current GUI color scheme (Pull requests https://github.com/CS2103JAN2018-W09-B3/main/pull/154[#154])"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"*** Refactored `AddressBook` into a relational database where students are related to lessons by a `Uniquekey`"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"** Documentation:"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"*** Refactored User guide with a more user-friendly tone, where it was more conversational and not so instructional. Gave the user guide a more personalised touch."},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/CS2103JAN2018-W09-B3/main/pull/174[#174]"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"** Community:"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103JAN2018-W09-B3/main/pull/167[#167]"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"*** Reported bugs for another team: https://github.com/CS2103JAN2018-W10-B4/main/issues/128[1], https://github.com/CS2103JAN2018-W10-B4/main/issues/131[2], https://github.com/CS2103JAN2018-W10-B4/main/issues/132[3], https://github.com/CS2103JAN2018-W10-B4/main/issues/133[4], https://github.com/CS2103JAN2018-W10-B4/main/issues/136[5], https://github.com/CS2103JAN2018-W10-B4/main/issues/138[6], https://github.com/CS2103JAN2018-W10-B4/main/issues/142[7], https://github.com/CS2103JAN2018-W10-B4/main/issues/146[8], https://github.com/CS2103JAN2018-W10-B4/main/issues/147[9]"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"** Tools:"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"*** Integrated a third party library (Google APIs) to the project (https://github.com/CS2103JAN2018-W09-B3/main/pull/95[#95])"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"|Given below are sections I contributed to the User Guide."},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":" They showcase my ability to write documentation targeting end-users."},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":" I wrote extensive documentation on my parts in my user and developer guides, but excluded them to fit within the page limit."},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"Start of extract from [User Guide]"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"\u003d\u003d Scheduling component"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"include::../UserGuide.adoc[tag\u003dschedule]"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"End of extract from [User Guide]"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"And more (Deleting lessons, syncing with Google)..."},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":80,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"Start of extract from [Developer Guide]"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"include::../DeveloperGuide.adoc[tag\u003dschedule]"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"End of extract from [Developer Guide]"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"yapni":9,"demitycho":69,"-":7}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"Codeducator was developed by the https://github.com/CS2103JAN2018-W09-B3/[W09-B3] team. +"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Samuel Loh Jie Wei"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"image::samuelloh.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"{empty}[https://github.com/samuelloh[github]] [https://cs2103jan2018-w09-b3.github.io/main/team/samuelloh[portfolio]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"Role: Deliverables and deadlines, In charge of UI"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Tan Chee Wee"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"image::chweeee.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"{empty}[https://github.com/chweeee[github]] [https://cs2103jan2018-w09-b3.github.io/main/team/TanCheeWee[portfolio]]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"Role: Integration, In charge of Logic"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Tan Wei Hao"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"image::demitycho.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"{empty}[https://github.com/demitycho[github]] [https://cs2103jan2018-w09-b3.github.io/main/team/demitycho[portfolio]]"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"Role: Scheduling and Google Services integration, In charge of Model, UI/UX design"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Yap Ni"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"image::yapni.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"{empty}[http://github.com/yapni[github]] [https://cs2103jan2018-w09-b3.github.io/main/team/yapni[portfolio]]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"Role: Documentation, In charge of Storage"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"yapni":17,"demitycho":1,"-":24}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"ifdef::env-github[]"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":"\u003d image:docs/images/CodeducatorTitle.png[width\u003d60px] Codeducator"},{"lineNumber":3,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"\u003d image:images/CodeducatorTitle.png[width\u003d60px] Codeducator"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"endif::[]"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W09-B3/main[image:https://travis-ci.org/CS2103JAN2018-W09-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/CS2103JAN2018-W09-B3/main[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W09-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W09-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/CS2103JAN2018-W09-B3/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103JAN2018-W09-B3/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":20,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"* Codeducator is a desktop address book application for private programming language tutors."},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"* As a programming language tutor, managing your student contacts and tracking their progress may be too much of a hassle. Codeducator helps alleviate your problems by providing features that make this tracking process more convenient, so that you can just focus on teaching your students."},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"* Codeducator has a GUI but the user input is done using a CLI (Command Line Interface)."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"* This project is forked from AddressBook-Level4, a project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":40,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":41,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"yapni":8,"demitycho":4,"-":32}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        Student[] expectedList \u003d SampleDataUtil.getSampleStudents();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertListMatching(getStudentListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"-":48}},{"path":"docs/team/TanCheeWee.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Tan Chee Wee - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"yapni"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"\u003d\u003d PROJECT: Codeducator"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"---"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"\u003d\u003d Overview"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"Codeducator is a desktop address book application for private programming language tutors."},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"Users are able to track the progress of their students, manage their tutoring schedule and other important information about their students. +"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"Codeducator has a graphical user interface built with JavaFX but most of the user interactions are done using command line interface. It is written in Java and has about 10 kLoC. +"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"This project is based on the https://github.com/se-edu/addressbook-level4[AddressBook-Level4] created by the SE-EDU initiative."},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* *Major enhancement*: Implementation of Natural Language Processing (NLP) in CLI"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"** What it does: It allows the user to enter conversational English into the command line and the *intention* of the input will be deciphered and the corresponding command will be called."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Justification: New users of Codeducator might find themselves constantly referring to the help document often, hence this enhancement is to allow intuitive usage of the commands."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Credits: The above-mentioned enhancement is implemented using IBM Watson™ Assistant service and the relevant methods documented in the API."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* *Minor enhancement*: Rendering of a student\u0027s address on Google Maps upon selection"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"** What it does: A Google Maps page with the selected student\u0027s address will be shown in the embedded brower upon selection of the student"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Justification: For ease of navigation planning to the student\u0027s house, the tutor would have the required information simply by just `Select` ing the student."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W09-B3/main/blob/master/collated/functional/chweeee.md[Functional code]] [https://github.com/CS2103JAN2018-W09-B3/main/blob/master/collated/test/chweeee.md[Test code]]"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** Improved the `select` command to show the location of the student on Google Maps"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":44,"author":{"gitID":"-"},"content":"*** Proofreading the User Guide and making alterations to make it more personal to the user."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":47,"author":{"gitID":"-"},"content":"*** Integrated a third party library (IBM Watson™ Assistant service) to the project (https://github.com/CS2103JAN2018-W09-B3/main/issues/#24)"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dNLP]"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dlocation]"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dnlp]"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"yapni":21,"-":46}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        /* Case: selects first card in student list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        selectStudent(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        /* Case: filters the student list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":96}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROGRAMMING_LANGUAGE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.AMY;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BOB;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.CARL;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.HOON;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.IDA;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        /* Case: add a student without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        Student toAdd \u003d AMY;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"                + \" \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        model.addStudent(toAdd);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with all fields same as another student in the address book except name -\u003e added */"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with all fields same as another student in the address book except phone -\u003e added */"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with all fields same as another student in the address book except email -\u003e added */"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with all fields same as another student in the address book except address -\u003e added */"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        deleteAllStudents();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        /* Case: add a student with tags, command with parameters in random order -\u003e added */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        /* Case: add a student, missing tags -\u003e added */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        /* Case: filters the student list before adding -\u003e added */"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"        /* ------------------------ Perform add operation while a student card is selected -------------------------- */"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"        /* Case: selects first card in the student list, add a student -\u003e added, card selection remains unchanged */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        //selectStudent(Index.fromOneBased(0));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        /* Case: add a duplicate student -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"        command \u003d StudentUtil.getAddCommand(HOON);"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"        /* Case: add a duplicate student except with different tags -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalStudents#ALICE"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        // AddressBook#addStudent(Student)"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"        command \u003d StudentUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"yapni"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //command \u003d \"adds \" + StudentUtil.getStudentDetails(toAdd);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        //assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":180,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":185,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":190,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":195,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"     * 4. {@code Model}, {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(Student toAdd) {"},{"lineNumber":214,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(StudentUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"yapni"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Student)}. Executes {@code command}"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":220,"author":{"gitID":"yapni"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Student)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(String command, Student toAdd) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":225,"author":{"gitID":"yapni"},"content":"            expectedModel.addStudent(toAdd);"},{"lineNumber":226,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"yapni"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Student)} except asserts that"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"yapni"},"content":"     * 2. {@code Model}, {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"yapni"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Student)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"yapni"},"content":"     * 4. {@code Model}, {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":75,"samuelloh":4,"-":191}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"//import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        getStudentListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":91}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"\u003d image:CodeducatorTitle.png[width\u003d60px] Codeducator - User Guide"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":":toclevels: 3"},{"lineNumber":7,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":":warning-caption: :warning:"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":":repoURL: https://github.com/CS2103JAN2018-W09-B3/main/releases"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":":contactsURL: https://contacts.google.com/"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":":calendarURL: https://calendar.google.com/calendar/r/week"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"By: `Team W09-B3`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"\u003d\u003d Welcome to Codeducator!"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"Codeducator is a desktop address book and scheduling application for private programming language tutors who *prefer to use a desktop app for managing the contacts of students*. +"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"You can also use Codeducator to track the progress of your students, manage your tutoring schedule and other important information about your students. More importantly, Codeducator is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Codeducator can get your contact management tasks done faster than traditional GUI apps. +"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. +"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"You may want to read \u003c\u003cQuick Overview\u003e\u003e to check out the User Interface, or \u003c\u003cHow to use this User Guide\u003e\u003e to find out about the format of our help guide"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"Enjoy using Codeducator!"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Quick Overview"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"Codeducator’s user interface is split into a few sections. These sections are highlighted in the image below."},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"image::CodeducatorTagged.png[width\u003d\"850\"]"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":". *Command Box* +"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"  Where you type your commands"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":". *Command Result Box* +"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"  The message result of executing your command"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":". *Contact List* +"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"  Where you keep your contacts"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":". *Infopanel* +"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"  A small but powerful multi-use window to view your Schedule, Full Information Page and Student Dashboards"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":". *Status Bar* +"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"  Tells you when you last updated Codeducator data"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"The Infopanel has three screens, depending on the task you are trying to execute."},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":". *Schedule* +"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"  Tasks related to your Schedule and Student Lessons"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"image::CodeducatorSchedule.png[width\u003d\"790\"]"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":". *Full Information Page* +"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"  Tasks related to assigning additional information to your student"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"image::CodeducatorMoreInfo.png[width\u003d\"790\"]"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":". *Student Dashboard* +"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"  Tasks related to assigning your Student milestones in terms of learning"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"image::CodeducatorDashboard.png[width\u003d\"790\"]"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d How to use this User Guide"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"Everything you need to know about Codeducator is in this user guide."},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"You can quickly navigate the user guide by clicking on the links found in the table of contents at the top of the user guide."},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"An example of the user guide for the features is shown below. You can identify the feature’s title, description, format and easy to follow step by step instructions. The instructions will follow this certain format"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"image::UserGuideTagged.png[width\u003d\"790\"]"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":". *Feature Title* +"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"  This is the name of the feature or command being explained"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":". *Description and use case* +"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"  This describes the potential situations that you might need to use this command."},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":". *Format of command* +"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"  The defined structure of the command. See \u003c\u003cThe Command Format\u003e\u003e for more information"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":". *Steps Taken* +"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"  A few example steps to show you how we might do things and what you will see"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"  You should have a similar user interface of Codeducator when following the step by step instructions."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer. You can download the latest Java release https://java.com/en/download/[here]."},{"lineNumber":92,"author":{"gitID":"-"},"content":"+"},{"lineNumber":93,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":94,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":95,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":96,"author":{"gitID":"-"},"content":"+"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":".  Download the latest `W09-B3-Coeducator.jar` link:{repoURL}/releases[here]."},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":".  Copy the file to the folder you want to use as the home folder for your Codeducator app."},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"[TIP]"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"You may use create a folder called `Codeducator` on your `Desktop`, or in `My Documents` folder"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":".  Double-click the file to start the app. You should see the application open in a appear in a few seconds."},{"lineNumber":104,"author":{"gitID":"-"},"content":"+"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"image::UI.png[width\u003d\"790\"]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"+"},{"lineNumber":107,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":108,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":109,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":112,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":113,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":114,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"Codeducator has many awesome features to help out coding tutors, it may be pretty scary for a first time user. +"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"Don\u0027t fret! This user guide will show you the many simple commands that will help you go from zero to a Codeducator hero! +"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"The subsequent sections of the user guide provides a step by step walk-through of all the commands that Codeducator has to offer."},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d The Command Format"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"* Words in `UPPER_CASE` are the _parameters_ to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"* Items in square brackets are _optional_ e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"* Items with `…`​ after them can be used multiple times. In addition, the item be left out completely. e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend` or `t/friend t/family` etc."},{"lineNumber":135,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":"Got it? Good! Let\u0027s get started on Codeducator! +"},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Basic User Interface Commands"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"Let\u0027s start slow. This are the basic commands that Codeducator offers."},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"Feeling lost and not sure what to do? Can\u0027t remember the usage of the command? +"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"You can type the help command and Codeducator will open this user guide in-application for your convenience. Don\u0027t be afraid to ask for help!"},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d Format: `help`"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to use the help command"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":". Type help into the command box, and press kbd:[Enter] to execute it. +"},{"lineNumber":154,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":155,"author":{"gitID":"demitycho"},"content":".Typing help into command box +"},{"lineNumber":156,"author":{"gitID":"demitycho"},"content":"image::helpStep1.png[width\u003d\"790\"]"},{"lineNumber":157,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":158,"author":{"gitID":"demitycho"},"content":". The help window will appear as shown. +"},{"lineNumber":159,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":160,"author":{"gitID":"demitycho"},"content":".Help box as shown."},{"lineNumber":161,"author":{"gitID":"demitycho"},"content":"image::helpResult.png[width\u003d\"790\"]"},{"lineNumber":162,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":163,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":164,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":165,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"If you wish to execute a command you have entered before, you can use the `history` command to lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":171,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":172,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":176,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":177,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":178,"author":{"gitID":"yapni"},"content":"If you have mistakenly entered a command and wish to revert it, you can use the `undo` command to restore the address book to the state before. +"},{"lineNumber":179,"author":{"gitID":"yapni"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":184,"author":{"gitID":"yapni"},"content":"* Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":185,"author":{"gitID":"yapni"},"content":"* The `undo` command currently does not supports reversing dashboard commands (`addMS`, `addTask`, `deleteMS`, `deleteTask` and `checkTask`)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":191,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":196,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":197,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":205,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":206,"author":{"gitID":"yapni"},"content":"If you have mistakenly used the `undo` command to revert a previous command, you can execute that command again by using the `redo` command. +"},{"lineNumber":207,"author":{"gitID":"yapni"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":225,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":229,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":230,"author":{"gitID":"yapni"},"content":"If you wish to exit Codeducator, you can use the `exit` command. +"},{"lineNumber":231,"author":{"gitID":"yapni"},"content":""},{"lineNumber":232,"author":{"gitID":"demitycho"},"content":"Format: `exit`"},{"lineNumber":233,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":234,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Saving the data"},{"lineNumber":235,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":236,"author":{"gitID":"yapni"},"content":"You will not need to save your address book and schedule data manually as Codeducator helps you save these data in the hard disk automatically after any command that changes those data. +"},{"lineNumber":237,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":238,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d AddressBook"},{"lineNumber":239,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Adding a student: `add`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"yapni"},"content":"If you wish to add a student to your address book, you can use the `add` command. +"},{"lineNumber":242,"author":{"gitID":"yapni"},"content":""},{"lineNumber":243,"author":{"gitID":"demitycho"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS pl/PROGRAMMING_LANGUAGE [t/TAG]...`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":246,"author":{"gitID":"yapni"},"content":"A student can have any number of tags (including 0)"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"demitycho"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 pl/Java`"},{"lineNumber":251,"author":{"gitID":"demitycho"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 pl/C t/criminal t/NoLife`"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Listing all students : `list`"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"yapni"},"content":"If you wish to view a list of all your students in the address book, you can use the `list` command. +"},{"lineNumber":256,"author":{"gitID":"yapni"},"content":""},{"lineNumber":257,"author":{"gitID":"yapni"},"content":"Format: `list [-f]`"},{"lineNumber":258,"author":{"gitID":"yapni"},"content":""},{"lineNumber":259,"author":{"gitID":"yapni"},"content":"[TIP]"},{"lineNumber":260,"author":{"gitID":"yapni"},"content":"Use the -f flag to view all student in favourites"},{"lineNumber":261,"author":{"gitID":"yapni"},"content":""},{"lineNumber":262,"author":{"gitID":"yapni"},"content":"Examples:"},{"lineNumber":263,"author":{"gitID":"yapni"},"content":""},{"lineNumber":264,"author":{"gitID":"yapni"},"content":"* `list -f` +"},{"lineNumber":265,"author":{"gitID":"yapni"},"content":"List only all student that you added to favourites"},{"lineNumber":266,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":267,"author":{"gitID":"yapni"},"content":"List all students"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to view all students in the address book:"},{"lineNumber":270,"author":{"gitID":"yapni"},"content":""},{"lineNumber":271,"author":{"gitID":"yapni"},"content":"*Step 1*: Type `list` into the command box and press kbd:[Enter] to execute it."},{"lineNumber":272,"author":{"gitID":"yapni"},"content":""},{"lineNumber":273,"author":{"gitID":"yapni"},"content":".Entering the `list` command"},{"lineNumber":274,"author":{"gitID":"yapni"},"content":"image::list1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":275,"author":{"gitID":"yapni"},"content":""},{"lineNumber":276,"author":{"gitID":"yapni"},"content":"*Step 2*: The result box will display \"Listed all students\"."},{"lineNumber":277,"author":{"gitID":"yapni"},"content":""},{"lineNumber":278,"author":{"gitID":"yapni"},"content":"*Step 3*: You will see at the left panel a list of every student contact in your address book. You can scroll down to view more contacts in the list."},{"lineNumber":279,"author":{"gitID":"yapni"},"content":""},{"lineNumber":280,"author":{"gitID":"yapni"},"content":".The left panel shows a list of every student contact"},{"lineNumber":281,"author":{"gitID":"yapni"},"content":"image::list2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":282,"author":{"gitID":"yapni"},"content":""},{"lineNumber":283,"author":{"gitID":"yapni"},"content":"*Steps taken to view all students in favourites*: +"},{"lineNumber":284,"author":{"gitID":"yapni"},"content":""},{"lineNumber":285,"author":{"gitID":"yapni"},"content":"*Step 1*: Type `list -f` into the command box and press kbd:[Enter] to execute it."},{"lineNumber":286,"author":{"gitID":"yapni"},"content":""},{"lineNumber":287,"author":{"gitID":"yapni"},"content":".Entering the `list -f` command to view the list of students in favourites"},{"lineNumber":288,"author":{"gitID":"yapni"},"content":"image::list3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":289,"author":{"gitID":"yapni"},"content":""},{"lineNumber":290,"author":{"gitID":"yapni"},"content":"*Step 2*: The result box will display \"Listed all favourite students\"."},{"lineNumber":291,"author":{"gitID":"yapni"},"content":""},{"lineNumber":292,"author":{"gitID":"yapni"},"content":"*Step 3*: You will see at the left panel a list of student contacts that are in your favourites. You can scroll down to view more contacts in this favourite list."},{"lineNumber":293,"author":{"gitID":"yapni"},"content":""},{"lineNumber":294,"author":{"gitID":"yapni"},"content":".The left panel shows a list of student contacts in favourites"},{"lineNumber":295,"author":{"gitID":"yapni"},"content":"image::list4_screenshot.png[width\u003d\"800\"]"},{"lineNumber":296,"author":{"gitID":"yapni"},"content":""},{"lineNumber":297,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Editing a student : `edit`"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"yapni"},"content":"If you wish to edit the information of your student in the address book, you can use the `edit` command. +"},{"lineNumber":300,"author":{"gitID":"yapni"},"content":""},{"lineNumber":301,"author":{"gitID":"demitycho"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [pl/PROGRAMMING_LANGUAGE] [t/TAG]...`"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"****"},{"lineNumber":304,"author":{"gitID":"yapni"},"content":"* Edits the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":305,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":306,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":307,"author":{"gitID":"yapni"},"content":"* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."},{"lineNumber":308,"author":{"gitID":"yapni"},"content":"* You can remove all the student\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":309,"author":{"gitID":"-"},"content":"****"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"yapni"},"content":"[NOTE]"},{"lineNumber":312,"author":{"gitID":"yapni"},"content":"The `edit` command currently does not support editing of student\u0027s dashboard."},{"lineNumber":313,"author":{"gitID":"yapni"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":317,"author":{"gitID":"yapni"},"content":"Edits the phone number and email address of the 1st student to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":318,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":319,"author":{"gitID":"yapni"},"content":"Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Locating students by name: `find`"},{"lineNumber":322,"author":{"gitID":"yapni"},"content":""},{"lineNumber":323,"author":{"gitID":"yapni"},"content":"If you wish to locate a student in your address book, you can use the `find` command to find and list students whose names contain any of the given keywords. +"},{"lineNumber":324,"author":{"gitID":"yapni"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"****"},{"lineNumber":328,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":330,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":331,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":332,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":333,"author":{"gitID":"-"},"content":"****"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"yapni"},"content":"[TIP]"},{"lineNumber":336,"author":{"gitID":"yapni"},"content":"If you wish to locate a student by their tag instead, you can use the `findTag` command (see \u003c\u003cLocating students by tags: `findTag`\u003e\u003e)"},{"lineNumber":337,"author":{"gitID":"yapni"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":341,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":342,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":343,"author":{"gitID":"yapni"},"content":"Returns any student having names `Betsy`, `Tim`, or `John`"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"demitycho"},"content":"// tag::findTag[]"},{"lineNumber":346,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Locating students by tags: `findTag`"},{"lineNumber":347,"author":{"gitID":"yapni"},"content":""},{"lineNumber":348,"author":{"gitID":"yapni"},"content":"If you wish to locate a student in your address book by their tag, you can use the `findTag` command. +"},{"lineNumber":349,"author":{"gitID":"yapni"},"content":""},{"lineNumber":350,"author":{"gitID":"demitycho"},"content":"Format: `findTag KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":351,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":352,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":353,"author":{"gitID":"demitycho"},"content":"* The search is case insensitive. e.g `Friends` will match `friends`"},{"lineNumber":354,"author":{"gitID":"yapni"},"content":"* The order of the keywords does not matter. e.g. ` friends owesMoney` will match `owesMoney` and `friends`"},{"lineNumber":355,"author":{"gitID":"demitycho"},"content":"* Only the tag is searched."},{"lineNumber":356,"author":{"gitID":"demitycho"},"content":"* Only full words will be matched e.g. `friend` will not match `friends`"},{"lineNumber":357,"author":{"gitID":"yapni"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `friends owesMoney` will return a"},{"lineNumber":358,"author":{"gitID":"yapni"},"content":"student with tags `friends` and `rich`, as well as a student with tags `owesMoney` and `poor`"},{"lineNumber":359,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":360,"author":{"gitID":"yapni"},"content":""},{"lineNumber":361,"author":{"gitID":"yapni"},"content":"[TIP]"},{"lineNumber":362,"author":{"gitID":"yapni"},"content":"If you wish to locate a student by their name instead, you can use the `find` command (see \u003c\u003cLocating students by name: `find`\u003e\u003e)"},{"lineNumber":363,"author":{"gitID":"yapni"},"content":""},{"lineNumber":364,"author":{"gitID":"demitycho"},"content":"Examples:"},{"lineNumber":365,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":366,"author":{"gitID":"yapni"},"content":"When your AddressBook has a student named John Doe, which you have tagged t/friends and t/owesMoney, and a student named Betsy which you have tagged t/owesMoney and t/poor,"},{"lineNumber":367,"author":{"gitID":"demitycho"},"content":"* `findTag friends` +"},{"lineNumber":368,"author":{"gitID":"demitycho"},"content":"Returns `John Doe`"},{"lineNumber":369,"author":{"gitID":"demitycho"},"content":"* `findTag friends owesMoney` +"},{"lineNumber":370,"author":{"gitID":"yapni"},"content":"Returns any student having tags `friends`, `owesMoney`, i.e. `John Doe` and `Betsy`"},{"lineNumber":371,"author":{"gitID":"demitycho"},"content":"// end::findTag[]"},{"lineNumber":372,"author":{"gitID":"yapni"},"content":""},{"lineNumber":373,"author":{"gitID":"yapni"},"content":"// tag::favUnfav[]"},{"lineNumber":374,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Adding a student to favourites : `fav`"},{"lineNumber":375,"author":{"gitID":"yapni"},"content":""},{"lineNumber":376,"author":{"gitID":"yapni"},"content":"If you wish to access a student quickly, you can simply add the student as \"favourite\" using the `fav` command."},{"lineNumber":377,"author":{"gitID":"yapni"},"content":""},{"lineNumber":378,"author":{"gitID":"yapni"},"content":"Format: `fav INDEX`"},{"lineNumber":379,"author":{"gitID":"yapni"},"content":""},{"lineNumber":380,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":381,"author":{"gitID":"yapni"},"content":"* `INDEX` refers to the index number of the student in the most recent listing."},{"lineNumber":382,"author":{"gitID":"yapni"},"content":"* `INDEX` *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":383,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":384,"author":{"gitID":"yapni"},"content":""},{"lineNumber":385,"author":{"gitID":"yapni"},"content":"[NOTE]"},{"lineNumber":386,"author":{"gitID":"yapni"},"content":"You can view the list of your favourite students using the command `list -f` (see \u003c\u003cListing all students : `list`\u003e\u003e)."},{"lineNumber":387,"author":{"gitID":"yapni"},"content":""},{"lineNumber":388,"author":{"gitID":"yapni"},"content":"Example:"},{"lineNumber":389,"author":{"gitID":"yapni"},"content":""},{"lineNumber":390,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":391,"author":{"gitID":"yapni"},"content":"`fav 1` +"},{"lineNumber":392,"author":{"gitID":"yapni"},"content":"Adds the 1st student in the address book to favourites."},{"lineNumber":393,"author":{"gitID":"yapni"},"content":""},{"lineNumber":394,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to add a student to favourites"},{"lineNumber":395,"author":{"gitID":"yapni"},"content":""},{"lineNumber":396,"author":{"gitID":"yapni"},"content":"*Step 1*: First, find the student you wish to add to favourites using the `list` command (see \u003c\u003cListing all students : `list`\u003e\u003e)."},{"lineNumber":397,"author":{"gitID":"yapni"},"content":""},{"lineNumber":398,"author":{"gitID":"yapni"},"content":"*Step 2*: Once you have found the student you want to add to your favourites, type `fav` into the command box, followed by the `INDEX` of the student in the list. Press kbd:[Enter] to execute it."},{"lineNumber":399,"author":{"gitID":"yapni"},"content":""},{"lineNumber":400,"author":{"gitID":"yapni"},"content":".Entering the `fav` command followed by the `INDEX` 1 of the student to add to favourites"},{"lineNumber":401,"author":{"gitID":"yapni"},"content":"image::fav1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":402,"author":{"gitID":"yapni"},"content":""},{"lineNumber":403,"author":{"gitID":"yapni"},"content":"*Step 3*: You have succeeded in adding the student as favourite when you see \"Student added to favourites: [STUDENT\u0027S NAME]\" in the result box and the student\u0027s name being highlighted in orange."},{"lineNumber":404,"author":{"gitID":"yapni"},"content":""},{"lineNumber":405,"author":{"gitID":"yapni"},"content":".Success in adding student \"Alex Yeoh\" at index 1 to favourites"},{"lineNumber":406,"author":{"gitID":"yapni"},"content":"image::fav2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":407,"author":{"gitID":"yapni"},"content":""},{"lineNumber":408,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":409,"author":{"gitID":"yapni"},"content":"The student `INDEX` provided must be valid. Otherwise, an error message \"The student index provided is invalid\" will be displayed in the result box at *Step 3*."},{"lineNumber":410,"author":{"gitID":"yapni"},"content":""},{"lineNumber":411,"author":{"gitID":"yapni"},"content":".Error message displayed when an invalid `INDEX` 10 is entered. There are less than 10 students in the student contact list."},{"lineNumber":412,"author":{"gitID":"yapni"},"content":"image::fav3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":413,"author":{"gitID":"yapni"},"content":""},{"lineNumber":414,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d Removing a student from favourites : `unfav`"},{"lineNumber":415,"author":{"gitID":"yapni"},"content":""},{"lineNumber":416,"author":{"gitID":"yapni"},"content":"If you want to remove a student from favourites, you can simply use the `unfav` command. +"},{"lineNumber":417,"author":{"gitID":"yapni"},"content":""},{"lineNumber":418,"author":{"gitID":"yapni"},"content":"Format: `unfav INDEX`"},{"lineNumber":419,"author":{"gitID":"yapni"},"content":""},{"lineNumber":420,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":421,"author":{"gitID":"yapni"},"content":"* `INDEX` refers to the index number of the student in the most recent listing."},{"lineNumber":422,"author":{"gitID":"yapni"},"content":"* `INDEX` *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":423,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":424,"author":{"gitID":"yapni"},"content":""},{"lineNumber":425,"author":{"gitID":"yapni"},"content":"Example:"},{"lineNumber":426,"author":{"gitID":"yapni"},"content":""},{"lineNumber":427,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":428,"author":{"gitID":"yapni"},"content":"`unfav 1` +"},{"lineNumber":429,"author":{"gitID":"yapni"},"content":"Removes the 1st student in the address book from favourites."},{"lineNumber":430,"author":{"gitID":"yapni"},"content":""},{"lineNumber":431,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to remove a student from favourites"},{"lineNumber":432,"author":{"gitID":"yapni"},"content":""},{"lineNumber":433,"author":{"gitID":"yapni"},"content":"*Step 1*: First, find the student you wish to remove from your favourites using the `list -f` command (see \u003c\u003cListing all students : `list`\u003e\u003e)."},{"lineNumber":434,"author":{"gitID":"yapni"},"content":""},{"lineNumber":435,"author":{"gitID":"yapni"},"content":"*Step 2*: Once you have found the student you want to remove from your favourites, type `unfav` into the command box, followed by the `INDEX` of the student in the list. Press kbd:[Enter] to execute it."},{"lineNumber":436,"author":{"gitID":"yapni"},"content":""},{"lineNumber":437,"author":{"gitID":"yapni"},"content":".Entering the `unfav` command followed by the `INDEX` 1 of the student to remove from favourites."},{"lineNumber":438,"author":{"gitID":"yapni"},"content":"image::unfav1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":439,"author":{"gitID":"yapni"},"content":""},{"lineNumber":440,"author":{"gitID":"yapni"},"content":"*Step 3*: You have succeeded in removing the student from favourites when you see \"Student removed from favourites: [STUDENT\u0027S NAME]\" in the result box."},{"lineNumber":441,"author":{"gitID":"yapni"},"content":""},{"lineNumber":442,"author":{"gitID":"yapni"},"content":".Success in removing student \"Alex Yeoh\" from favourites"},{"lineNumber":443,"author":{"gitID":"yapni"},"content":"image::unfav2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":444,"author":{"gitID":"yapni"},"content":""},{"lineNumber":445,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":446,"author":{"gitID":"yapni"},"content":"The student `INDEX` provided must be valid. Otherwise, an error message \"The student index provided is invalid\" will be displayed in the result box at *Step 3*."},{"lineNumber":447,"author":{"gitID":"yapni"},"content":""},{"lineNumber":448,"author":{"gitID":"yapni"},"content":".Error message displayed when an invalid `INDEX` 10 is entered. There are less than 10 students in the list of favourite students."},{"lineNumber":449,"author":{"gitID":"yapni"},"content":"image::unfav3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":450,"author":{"gitID":"yapni"},"content":""},{"lineNumber":451,"author":{"gitID":"yapni"},"content":"// end::favUnfav[]"},{"lineNumber":452,"author":{"gitID":"yapni"},"content":""},{"lineNumber":453,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":454,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":455,"author":{"gitID":"yapni"},"content":"If you wish to remove all your student contacts in your address book, you can use the `clear` command. +"},{"lineNumber":456,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":457,"author":{"gitID":"yapni"},"content":"Format: `clear`"},{"lineNumber":458,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":459,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Deleting a student : `delete`"},{"lineNumber":460,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":461,"author":{"gitID":"yapni"},"content":"If you wish to remove a student contact from the address book, you can use the `delete` command. +"},{"lineNumber":462,"author":{"gitID":"yapni"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"****"},{"lineNumber":466,"author":{"gitID":"yapni"},"content":"* Deletes the student at the specified `INDEX`."},{"lineNumber":467,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":468,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":469,"author":{"gitID":"-"},"content":"****"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":474,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":475,"author":{"gitID":"yapni"},"content":"Deletes the 2nd student in the address book."},{"lineNumber":476,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":477,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":478,"author":{"gitID":"yapni"},"content":"Deletes the 1st student in the results of the `find` command."},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Selecting a student : `select`"},{"lineNumber":481,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":482,"author":{"gitID":"yapni"},"content":"If you wish to view the address of your student on google map, you can use the `select` command. +"},{"lineNumber":483,"author":{"gitID":"yapni"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"****"},{"lineNumber":487,"author":{"gitID":"yapni"},"content":"* Selects the student at the specified `INDEX` and loads their location on Google Maps."},{"lineNumber":488,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":489,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":490,"author":{"gitID":"-"},"content":"****"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":495,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":496,"author":{"gitID":"yapni"},"content":"Selects the 2nd student in the address book."},{"lineNumber":497,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":498,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":499,"author":{"gitID":"yapni"},"content":"Selects the 1st student in the results of the `find` command."},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"demitycho"},"content":"// tag::schedule[]"},{"lineNumber":502,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Schedule"},{"lineNumber":503,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":504,"author":{"gitID":"demitycho"},"content":"Scheduling is a major feature of Codeducator. To help tutors manage their student lessons, Codeducator has implemented a Schedule component that keeps track of your student lessons on a weekly basis. Codeducator assumes you have regular lessons on a weekly basis. +"},{"lineNumber":505,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":506,"author":{"gitID":"demitycho"},"content":".What you will see as a Schedule +"},{"lineNumber":507,"author":{"gitID":"demitycho"},"content":"image::scheduleDiagramUG.png[width\u003d\"790\"]"},{"lineNumber":508,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":509,"author":{"gitID":"demitycho"},"content":"The Schedule comprises of Lessons. A Lesson represents the tutoring lesson session you will have with a Student in your Contacts List.  +"},{"lineNumber":510,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":511,"author":{"gitID":"demitycho"},"content":"The Lesson is displayed with +"},{"lineNumber":512,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":513,"author":{"gitID":"demitycho"},"content":". The displayed Lesson Index"},{"lineNumber":514,"author":{"gitID":"demitycho"},"content":". The Student with whom you wil be having the Lesson with."},{"lineNumber":515,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":516,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Viewing your Schedule"},{"lineNumber":517,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":518,"author":{"gitID":"demitycho"},"content":"A quick refresh of what lessons you have in the week is a simple command away. You can easily view your Schedule with a simple command. +"},{"lineNumber":519,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":520,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d Format: `schedule`"},{"lineNumber":521,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":522,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to view your schedule"},{"lineNumber":523,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":524,"author":{"gitID":"demitycho"},"content":". Type `schedule` into the command box. Press kbd:[enter] to execute."},{"lineNumber":525,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":526,"author":{"gitID":"demitycho"},"content":".Executing the `schedule` command +"},{"lineNumber":527,"author":{"gitID":"demitycho"},"content":"image::scheduleResult.png[width\u003d\"790\"]"},{"lineNumber":528,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":529,"author":{"gitID":"demitycho"},"content":". View your schedule in its entirety!"},{"lineNumber":530,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":531,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Adding a Lesson to your Schedule"},{"lineNumber":532,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":533,"author":{"gitID":"demitycho"},"content":"If your student needs extra lessons or you have new students that want lessons, Codeducator will allow you to add Lessons to your schedule."},{"lineNumber":534,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":535,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d Format: `addLesson INDEX [d/DAY] [st/START_TIME] [et/END_TIME]` +"},{"lineNumber":536,"author":{"gitID":"demitycho"},"content":"Adds a lesson for the Student identified by their `INDEX`, for a certain `DAY`, starting at `START_TIME` and ending at `END_TIME` +"},{"lineNumber":537,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":538,"author":{"gitID":"demitycho"},"content":"* Adds a lesson for the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":539,"author":{"gitID":"demitycho"},"content":"* The day for the input is the abbreviated first three letters (_non-case sensitive_) of the name of day, i.e. `mon` for Monday, `fri` for Friday."},{"lineNumber":540,"author":{"gitID":"yapni"},"content":"* The time input must be in the format `HH:MM`, seperated by a colon `:`"},{"lineNumber":541,"author":{"gitID":"demitycho"},"content":"* The time input must be a _valid 24-hour time_ within the range of `00:00` to `23:59`"},{"lineNumber":542,"author":{"gitID":"demitycho"},"content":"* Input lesson _cannot clash_ with existing lessons already in the `Schedule`"},{"lineNumber":543,"author":{"gitID":"yapni"},"content":"* Lessons will be added in chronological order to your `Schedule`"},{"lineNumber":544,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":545,"author":{"gitID":"demitycho"},"content":"[NOTE]"},{"lineNumber":546,"author":{"gitID":"demitycho"},"content":"--"},{"lineNumber":547,"author":{"gitID":"demitycho"},"content":"* Overnight lessons i.e. `st/23:30 et/00:30` cannot be held. It is assumed that people lead normal lives and work between 00:00 and 23:59 of the same day. +"},{"lineNumber":548,"author":{"gitID":"demitycho"},"content":"* If you need to add a lesson that ends at midnight, enter `23:59`."},{"lineNumber":549,"author":{"gitID":"demitycho"},"content":"--"},{"lineNumber":550,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":551,"author":{"gitID":"demitycho"},"content":"Examples:"},{"lineNumber":552,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":553,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":554,"author":{"gitID":"yapni"},"content":"`addLesson 1 d/mon st/10:00 et/10:30` +"},{"lineNumber":555,"author":{"gitID":"demitycho"},"content":"Adds a lesson for the 1st student of the `list` command. Lesson will be held on the day of `mon` and starting time will be `10:00` and ending time will be `10:30`."},{"lineNumber":556,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":557,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":558,"author":{"gitID":"yapni"},"content":"* `find Betsy` +"},{"lineNumber":559,"author":{"gitID":"yapni"},"content":"`addLesson 1 d/tue st/12:00 et/13:30` +"},{"lineNumber":560,"author":{"gitID":"demitycho"},"content":"Adds a lesson for the 1st student of the `find Betsy` command. Lesson will be held on the day of `tue` and starting time will be `12:00` and ending time will be `13:30`."},{"lineNumber":561,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":562,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to add a lesson"},{"lineNumber":563,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":564,"author":{"gitID":"demitycho"},"content":"Let\u0027s say that you may want to add a Lesson for Bernice (`index 2`). The lesson time slot would be Sunday, 10:00am to 12:00pm."},{"lineNumber":565,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":566,"author":{"gitID":"demitycho"},"content":". Type `schedule` into the command box. Press kbd:[enter] to execute."},{"lineNumber":567,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":568,"author":{"gitID":"demitycho"},"content":".Executing the `schedule` command +"},{"lineNumber":569,"author":{"gitID":"demitycho"},"content":"image::addLessonStep1.png[width\u003d\"790\"]"},{"lineNumber":570,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":571,"author":{"gitID":"demitycho"},"content":". Visually find a free time slot. Sunday, 10:00 to 12:00 looks free!"},{"lineNumber":572,"author":{"gitID":"demitycho"},"content":". Type `addLesson 2 d/sun st/10:00 et/12:00`. Press kbd:[enter] to execute the command"},{"lineNumber":573,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":574,"author":{"gitID":"demitycho"},"content":".Type out the command as shown"},{"lineNumber":575,"author":{"gitID":"demitycho"},"content":"image::addLessonStep2.png[width\u003d\"790\"]"},{"lineNumber":576,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":577,"author":{"gitID":"demitycho"},"content":". The lesson will be added to your Schedule!"},{"lineNumber":578,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":579,"author":{"gitID":"demitycho"},"content":".Result of the `addLesson` command"},{"lineNumber":580,"author":{"gitID":"demitycho"},"content":"image::addLessonResult.png[width\u003d\"790\"]"},{"lineNumber":581,"author":{"gitID":"demitycho"},"content":"// end::schedule[]"},{"lineNumber":582,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Deleting a Lesson in your Schedule"},{"lineNumber":583,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":584,"author":{"gitID":"demitycho"},"content":"You may wish to remove lessons because students drop out. Let\u0027s use Codeducator\u0027s `deleteLesson` command to do that for you."},{"lineNumber":585,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":586,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d Format: `deleteLesson INDEX` +"},{"lineNumber":587,"author":{"gitID":"demitycho"},"content":"Deletes an existing lesson in your schedule identified by the index number in the last schedule listing. of day, i.e. `mon` for Monday, `fri` for Friday."},{"lineNumber":588,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":589,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":590,"author":{"gitID":"demitycho"},"content":"* Deletes a lesson for the student at the specified `INDEX`."},{"lineNumber":591,"author":{"gitID":"demitycho"},"content":"* The index refers to the displayed Lesson Index shown in the title. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":592,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":593,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":594,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d Examples:"},{"lineNumber":595,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":596,"author":{"gitID":"demitycho"},"content":"* `deleteLesson 2` +"},{"lineNumber":597,"author":{"gitID":"demitycho"},"content":"Deletes the 2nd lesson listing in the schedule"},{"lineNumber":598,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":599,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to delete a lesson"},{"lineNumber":600,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":601,"author":{"gitID":"demitycho"},"content":"Let\u0027s say you want to delete Charlotte\u0027s Lesson, on Tuesday, 10:00am-12:00pm"},{"lineNumber":602,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":603,"author":{"gitID":"demitycho"},"content":". Type `schedule` into the command box. Press kbd:[enter] to execute."},{"lineNumber":604,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":605,"author":{"gitID":"demitycho"},"content":".After executing the `schedule` command. The Lesson is identified by `INDEX:2` +"},{"lineNumber":606,"author":{"gitID":"demitycho"},"content":"image::deleteLessonStep1.png[width\u003d\"790\"]"},{"lineNumber":607,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":608,"author":{"gitID":"demitycho"},"content":". Type `deleteLesson` into the command box. Press kbd:[enter] to execute the command"},{"lineNumber":609,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":610,"author":{"gitID":"demitycho"},"content":".Type out the command as shown"},{"lineNumber":611,"author":{"gitID":"demitycho"},"content":"image::deleteLessonStep2.png[width\u003d\"790\"]"},{"lineNumber":612,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":613,"author":{"gitID":"demitycho"},"content":". The lesson will be removed from your schedule!"},{"lineNumber":614,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":615,"author":{"gitID":"demitycho"},"content":".Result of executing the `deleteLesson` command"},{"lineNumber":616,"author":{"gitID":"demitycho"},"content":"image::deleteLessonResult.png[width\u003d\"790\"]"},{"lineNumber":617,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":618,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":619,"author":{"gitID":"demitycho"},"content":"// tag::sync[]"},{"lineNumber":620,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Syncing with your Google Account"},{"lineNumber":621,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":622,"author":{"gitID":"demitycho"},"content":"You probably want to view your contacts and schedule across your devices. With today\u0027s pervasive use of cloud services, Codeducator takes advantage of Google\u0027s Contacts and Calendar."},{"lineNumber":623,"author":{"gitID":"demitycho"},"content":"Outside of Codeducator, you may view your contacts and schedule data in Google\u0027s mobile and web applications."},{"lineNumber":624,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":625,"author":{"gitID":"demitycho"},"content":"Codeducator uploads both contact list and schedule data to your Google Account."},{"lineNumber":626,"author":{"gitID":"demitycho"},"content":"Your contact list is synced with Google Contacts: link:{contactsURL}[contacts.google.com]."},{"lineNumber":627,"author":{"gitID":"demitycho"},"content":"Your schedule is synced with Google Calendar: link:{calendarURL}[calendar.google.com]"},{"lineNumber":628,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":629,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Logging in to your Google Account"},{"lineNumber":630,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":631,"author":{"gitID":"demitycho"},"content":"Associate your Google account with Codeducator and authorise Codeducator to upload data to your Google account\u0027s cloud services"},{"lineNumber":632,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":633,"author":{"gitID":"demitycho"},"content":"[NOTE]"},{"lineNumber":634,"author":{"gitID":"demitycho"},"content":"Ensure you have a Google account! Take advantage of Google\u0027s cloud services"},{"lineNumber":635,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":636,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d Format: `login`"},{"lineNumber":637,"author":{"gitID":"demitycho"},"content":"Logs in to your Google Account. Authorizes your Google Account to communicate with our app and gives"},{"lineNumber":638,"author":{"gitID":"demitycho"},"content":"Codeducator permission to modify your data. +"},{"lineNumber":639,"author":{"gitID":"demitycho"},"content":"Opens a new window in your default browser to the Oauth2 screen +"},{"lineNumber":640,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":641,"author":{"gitID":"demitycho"},"content":"[NOTE]"},{"lineNumber":642,"author":{"gitID":"-"},"content":"You must first be logged out to log in"},{"lineNumber":643,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":644,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to log in to your Google Account"},{"lineNumber":645,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":646,"author":{"gitID":"demitycho"},"content":". Type `login` in the command box. We will use the `schedule` screen, but it will work from any screen."},{"lineNumber":647,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":648,"author":{"gitID":"demitycho"},"content":".Type `login` into the command box (Codeducator window)"},{"lineNumber":649,"author":{"gitID":"demitycho"},"content":"image::loginStep1.png[width\u003d\"790\"]"},{"lineNumber":650,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":651,"author":{"gitID":"demitycho"},"content":". Execute the command using kbd:[enter]."},{"lineNumber":652,"author":{"gitID":"demitycho"},"content":". Your default browser will redirect to Google\u0027s login screen. Follow the OAuth2 procedure by typing your Google username and password into the login screen."},{"lineNumber":653,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":654,"author":{"gitID":"demitycho"},"content":".Google\u0027s login screen (Your browser window)"},{"lineNumber":655,"author":{"gitID":"demitycho"},"content":"image::loginStep3.png[width\u003d\"790\"]"},{"lineNumber":656,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":657,"author":{"gitID":"demitycho"},"content":". After logging in, you will see this window. Authorise Codeducator by clicking \"Allow\""},{"lineNumber":658,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":659,"author":{"gitID":"demitycho"},"content":".Google\u0027s OAuth/authentication window (Your browser window)"},{"lineNumber":660,"author":{"gitID":"demitycho"},"content":"image::loginStep4.png[width\u003d\"790\"]"},{"lineNumber":661,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":662,"author":{"gitID":"demitycho"},"content":". If you have successfully logged in. Your browser will display this message as a sign of login success."},{"lineNumber":663,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":664,"author":{"gitID":"demitycho"},"content":".Google\u0027s login success message (Your browser window)"},{"lineNumber":665,"author":{"gitID":"demitycho"},"content":"image::loginStep5.png[width\u003d\"790\"]"},{"lineNumber":666,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":667,"author":{"gitID":"demitycho"},"content":". Open the Codeducator window again. You will see that the message displays that you are logged in"},{"lineNumber":668,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":669,"author":{"gitID":"demitycho"},"content":".Codeducator\u0027s login success message (Codeducator window)"},{"lineNumber":670,"author":{"gitID":"demitycho"},"content":"image::loginStep6.png[width\u003d\"790\"]"},{"lineNumber":671,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":672,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":673,"author":{"gitID":"demitycho"},"content":"You are now ready to sync your account! +"},{"lineNumber":674,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":675,"author":{"gitID":"demitycho"},"content":"[NOTE]"},{"lineNumber":676,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":677,"author":{"gitID":"demitycho"},"content":". There is a *45 second timeout* for the login process. If you do not login successfully (due to closing the window unexpectedly or poor network connection), the login process will timeout."},{"lineNumber":678,"author":{"gitID":"demitycho"},"content":". Authorising Codeducator is important! Denying access will stop Codeducator from uploading data to your account."},{"lineNumber":679,"author":{"gitID":"demitycho"},"content":". If you have already logged in before without logging out, you may skip the Google login process by just simply typing in `login`."},{"lineNumber":680,"author":{"gitID":"demitycho"},"content":". If you do not successfully login , don\u0027t worry! Just repeat the steps to login again."},{"lineNumber":681,"author":{"gitID":"demitycho"},"content":". Your stored credential may expire after a long period of not using Codeducator. Simply logout and re-login to re-authenticate. See \u003c\u003cLogging out of your Google Account\u003e\u003e"},{"lineNumber":682,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":683,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":684,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Syncing data with your Google Account"},{"lineNumber":685,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":686,"author":{"gitID":"demitycho"},"content":"Updates both Google Contacts and Google Calendar with Addressbook and Schedule. Deletes the old data that Codeducator"},{"lineNumber":687,"author":{"gitID":"demitycho"},"content":"has uploaded previously, and uploads the updated data, correct as of time of entering the `sync` command. +"},{"lineNumber":688,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":689,"author":{"gitID":"demitycho"},"content":"Google Contacts will create a new Contact Label group called \"Students\". Contacts from your Codeducator app will be uploaded here."},{"lineNumber":690,"author":{"gitID":"demitycho"},"content":"Your Student\u0027s Name, Phone Number and Address will be uploaded. +"},{"lineNumber":691,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":692,"author":{"gitID":"demitycho"},"content":"Google Calendar will create a Calendar group called \"Student Lessons\". Lessons from your Calendar will be uploaded here."},{"lineNumber":693,"author":{"gitID":"demitycho"},"content":"The name of the event will be \"Lesson with \u003cStudent\u003e\", using the Start and End times of the Lesson, location will be using the address associated with the Student."},{"lineNumber":694,"author":{"gitID":"demitycho"},"content":"The Calendar will only start syncing from the *first Lesson occurring after the current day* that you perform the sync. +"},{"lineNumber":695,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":696,"author":{"gitID":"demitycho"},"content":"[NOTE]"},{"lineNumber":697,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":698,"author":{"gitID":"demitycho"},"content":"If you have synced before, future syncs will +"},{"lineNumber":699,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":700,"author":{"gitID":"demitycho"},"content":".. Look for \"Students\" label in Google Contacts and delete contacts in those groups before reuploading your Student data"},{"lineNumber":701,"author":{"gitID":"demitycho"},"content":".. Look for \"Student Lessons\" calendar and delete the events in that Calendar before reuploading your Schedule data."},{"lineNumber":702,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":703,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":704,"author":{"gitID":"demitycho"},"content":"Currently, Google Calendar will create a recurring weekly event per lesson, repeated over 4 weeks. If you have no edits to your Schedule within the month, do a sync at the end of the month to refresh your Calendar data."},{"lineNumber":705,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":706,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":707,"author":{"gitID":"demitycho"},"content":"[WARNING]"},{"lineNumber":708,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":709,"author":{"gitID":"demitycho"},"content":". You must first be logged in to sync your data."},{"lineNumber":710,"author":{"gitID":"demitycho"},"content":". A stable internet connection is required to fully upload data. If cut, there is a high probability that it won\u0027t fully upload. Please try syncing again."},{"lineNumber":711,"author":{"gitID":"demitycho"},"content":". Do not change the name of the Students label. Codeducator will not be able to delete those contacts in future syncs."},{"lineNumber":712,"author":{"gitID":"demitycho"},"content":". Likewise, do not change the name of the Calendar \"Student Lessons\" as it will be similarly used for future syncs"},{"lineNumber":713,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":714,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":715,"author":{"gitID":"demitycho"},"content":"Format: `sync`"},{"lineNumber":716,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":717,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to sync data with your Google Account"},{"lineNumber":718,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":719,"author":{"gitID":"demitycho"},"content":". Ensure that you have logged in to your account. See \u003c\u003cLogging in to your Google Account\u003e\u003e"},{"lineNumber":720,"author":{"gitID":"demitycho"},"content":".. Example Google Calendar and Contacts, account, I\u0027ll be starting with empty Google Contacts and Calendar"},{"lineNumber":721,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":722,"author":{"gitID":"demitycho"},"content":".What my Google Contacts and Calendar look like before the sync"},{"lineNumber":723,"author":{"gitID":"demitycho"},"content":"image::syncStep00.png[width\u003d\"790]"},{"lineNumber":724,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":725,"author":{"gitID":"demitycho"},"content":". View the schedule that you want to sync. See \u003c\u003cViewing your schedule\u003e\u003e"},{"lineNumber":726,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":727,"author":{"gitID":"demitycho"},"content":".We will be using this example schedule"},{"lineNumber":728,"author":{"gitID":"demitycho"},"content":"image::syncStep0.png[width\u003d\"790]"},{"lineNumber":729,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":730,"author":{"gitID":"demitycho"},"content":". Type `sync` in the command box. Press kbd:[enter] to execute"},{"lineNumber":731,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":732,"author":{"gitID":"demitycho"},"content":".Type `sync` into the command box"},{"lineNumber":733,"author":{"gitID":"demitycho"},"content":"image::syncStep1.png[width\u003d\"790\"]"},{"lineNumber":734,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":735,"author":{"gitID":"demitycho"},"content":". Codeducator will now try to upload the current data. If you had previously used `sync`,"},{"lineNumber":736,"author":{"gitID":"demitycho"},"content":"Codeducator will delete the old data in you Google Contacts and Calendar"},{"lineNumber":737,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":738,"author":{"gitID":"demitycho"},"content":".Viewing your schedule in Week and Month View in link:{calendarURL}[calendar.google.com]. Note the new Calendar \"Student Lessons\""},{"lineNumber":739,"author":{"gitID":"demitycho"},"content":"image::syncResult1.png[width\u003d\"790\"]"},{"lineNumber":740,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":741,"author":{"gitID":"demitycho"},"content":".Viewing your contacts list in Google Contacts in link:{contactsURL}[contacts.google.com]. Note the new Label \"Students\""},{"lineNumber":742,"author":{"gitID":"demitycho"},"content":"image::syncResult2.png[width\u003d\"790\"]"},{"lineNumber":743,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":744,"author":{"gitID":"demitycho"},"content":".You will see this message if you successfully synced your account!"},{"lineNumber":745,"author":{"gitID":"demitycho"},"content":"image::syncResult3.png[width\u003d\"790\"]"},{"lineNumber":746,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":747,"author":{"gitID":"demitycho"},"content":". Your data has been synchronised! You are free to use them across your devices in anyway that Google Contacts and Calendar supports!"},{"lineNumber":748,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":749,"author":{"gitID":"demitycho"},"content":"[NOTE]"},{"lineNumber":750,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":751,"author":{"gitID":"demitycho"},"content":"If you have many contacts or lessons, it will take some time to synchronise your data. Be patient as Codeducator uploads your data!"},{"lineNumber":752,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":753,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":754,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Logging out of your Google Account"},{"lineNumber":755,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":756,"author":{"gitID":"demitycho"},"content":"For security purposes, Codeducator allows you to log out of your Google Account. Codeducator will ecurely delete the OAuth2 credential stored in the App. +"},{"lineNumber":757,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":758,"author":{"gitID":"demitycho"},"content":"[NOTE]"},{"lineNumber":759,"author":{"gitID":"demitycho"},"content":"You must first be logged in to log out."},{"lineNumber":760,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":761,"author":{"gitID":"demitycho"},"content":"Format: `logout`"},{"lineNumber":762,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":763,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to log out of your Google Account"},{"lineNumber":764,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":765,"author":{"gitID":"demitycho"},"content":". Ensure that you are logged in. See \u003c\u003cLogging in to your Google Account\u003e\u003e"},{"lineNumber":766,"author":{"gitID":"demitycho"},"content":".. If you are not logged in, you are already logged out!"},{"lineNumber":767,"author":{"gitID":"demitycho"},"content":". Type `logout` in the command box. Press kbd:[enter] to execute the command."},{"lineNumber":768,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":769,"author":{"gitID":"demitycho"},"content":".Type `logout` in the command box."},{"lineNumber":770,"author":{"gitID":"demitycho"},"content":"image::logoutStep1.png[width\u003d\"790\"]"},{"lineNumber":771,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":772,"author":{"gitID":"demitycho"},"content":". You should see the following window"},{"lineNumber":773,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":774,"author":{"gitID":"demitycho"},"content":".Result of executing `logout` command"},{"lineNumber":775,"author":{"gitID":"demitycho"},"content":"image::logoutResult.png[width\u003d\"790\"]"},{"lineNumber":776,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":777,"author":{"gitID":"demitycho"},"content":". You have successfully logged out of your account! Log in again if you want to sync your contacts and schedule."},{"lineNumber":778,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":779,"author":{"gitID":"demitycho"},"content":"// end::sync[]"},{"lineNumber":780,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":781,"author":{"gitID":"yapni"},"content":"// tag::dashboard[]"},{"lineNumber":782,"author":{"gitID":"yapni"},"content":"// tag::dashboard1[]"},{"lineNumber":783,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Dashboard"},{"lineNumber":784,"author":{"gitID":"yapni"},"content":""},{"lineNumber":785,"author":{"gitID":"yapni"},"content":"In Codeducator, you can *track the learning progress* of your students easily by utilising our Dashboard feature."},{"lineNumber":786,"author":{"gitID":"yapni"},"content":"Each of your student in your contact list has their own dashboard which you can view and manage easily. +"},{"lineNumber":787,"author":{"gitID":"yapni"},"content":""},{"lineNumber":788,"author":{"gitID":"yapni"},"content":"*What\u0027s in a dashboard?*"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"yapni"},"content":"* Milestones: +"},{"lineNumber":791,"author":{"gitID":"yapni"},"content":"Each dashboard will have a list of milestones. A milestone signifies a major step in the learning progress of your student."},{"lineNumber":792,"author":{"gitID":"yapni"},"content":"Codeducator allows you to create and add milestones in your students\u0027 dashboards so that you can keep track of learning objectives you have set for them."},{"lineNumber":793,"author":{"gitID":"yapni"},"content":""},{"lineNumber":794,"author":{"gitID":"yapni"},"content":"* Tasks: +"},{"lineNumber":795,"author":{"gitID":"yapni"},"content":"Each milestone can contain a list of tasks. A task signifies a piece of work to be done to meet the milestone\u0027s objective."},{"lineNumber":796,"author":{"gitID":"yapni"},"content":"Codeducator allows you to create and add tasks to each milestone so that you can keep track of what has already been done and what still needs to be done to reach the milestone."},{"lineNumber":797,"author":{"gitID":"yapni"},"content":""},{"lineNumber":798,"author":{"gitID":"yapni"},"content":".An example of a student\u0027s dashboard"},{"lineNumber":799,"author":{"gitID":"yapni"},"content":"image::DashboardScreenshot.png[width\u003d\"800\"]"},{"lineNumber":800,"author":{"gitID":"yapni"},"content":""},{"lineNumber":801,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d Showing the dashboard of a student: `showDB`"},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"yapni"},"content":"You can view the dashboard of a student by using the `showDB` command. +"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"yapni"},"content":"Format: `showDB STUDENT_INDEX`"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"****"},{"lineNumber":808,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` refers to the index number of the student shown in the most recent listing."},{"lineNumber":809,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":810,"author":{"gitID":"-"},"content":"****"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"yapni"},"content":"Example:"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":815,"author":{"gitID":"yapni"},"content":"`showDB 1` +"},{"lineNumber":816,"author":{"gitID":"yapni"},"content":"Shows the dashboard of the 1st student in the address book."},{"lineNumber":817,"author":{"gitID":"yapni"},"content":""},{"lineNumber":818,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to show the dashboard of a student"},{"lineNumber":819,"author":{"gitID":"yapni"},"content":""},{"lineNumber":820,"author":{"gitID":"yapni"},"content":"*Step 1*: First, find the student whose dashboard you wish to view using the `list` command (see \u003c\u003cListing all students : `list`\u003e\u003e)."},{"lineNumber":821,"author":{"gitID":"yapni"},"content":""},{"lineNumber":822,"author":{"gitID":"yapni"},"content":"*Step 2*: Once you have found the student, type `showDB` into the command box, followed by the `STUDENT_INDEX` of the student in the list. Press kbd:[Enter] to execute it."},{"lineNumber":823,"author":{"gitID":"yapni"},"content":""},{"lineNumber":824,"author":{"gitID":"yapni"},"content":".Entering the `showDB` command followed by the `STUDENT_INDEX` 1 of the student whose dashboard you wish to view"},{"lineNumber":825,"author":{"gitID":"yapni"},"content":"image::showDB1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":826,"author":{"gitID":"yapni"},"content":""},{"lineNumber":827,"author":{"gitID":"yapni"},"content":"*Step 3*: You have succeeded in viewing the student\u0027s dashboard if you see the message \"Selected Dashboard of Student: `STUDENT_INDEX` \" in the result box, with the dashboard containing the student\u0027s name appearing on the right panel."},{"lineNumber":828,"author":{"gitID":"yapni"},"content":""},{"lineNumber":829,"author":{"gitID":"yapni"},"content":".Success in showing the dashboard of Alex Yeoh who has the index 1 on the students list"},{"lineNumber":830,"author":{"gitID":"yapni"},"content":"image::showDB2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":831,"author":{"gitID":"yapni"},"content":""},{"lineNumber":832,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":833,"author":{"gitID":"yapni"},"content":"The student `INDEX` provided must be valid. Otherwise, an error message \"The student index provided is invalid\" will be displayed in the result box at *Step 3*."},{"lineNumber":834,"author":{"gitID":"yapni"},"content":""},{"lineNumber":835,"author":{"gitID":"yapni"},"content":".Error message displayed when an invalid `STUDENT_INDEX` 10 is entered. There are less than 10 students in the student contact list."},{"lineNumber":836,"author":{"gitID":"yapni"},"content":"image::showDB3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":837,"author":{"gitID":"yapni"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d Adding a milestone to a student\u0027s dashboard: `addMS`"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"yapni"},"content":"If you want to keep track of a learning objective you want your student to fulfil, you can add a milestone to your student\u0027s dashboard using the `addMS` command. +"},{"lineNumber":842,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":843,"author":{"gitID":"yapni"},"content":"Format: `addMS i/STUDENT_INDEX d/MILESTONE_DUE_DATE o/DESCRIPTION_OF_MILESTONE`"},{"lineNumber":844,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":845,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":846,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` refers to the index number of the student shown in the most recent listing."},{"lineNumber":847,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":848,"author":{"gitID":"yapni"},"content":"* `MILESTONE_DUE_DATE` must be in this format: *DD/MM/YYYY hh:mm* where DD/MM/YYYY is the calendar date and hh:mm is the time in 24-hour notation"},{"lineNumber":849,"author":{"gitID":"yapni"},"content":"* `MILESTONE_DUE_DATE` can be a date in the past (before the current day)"},{"lineNumber":850,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":851,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":852,"author":{"gitID":"yapni"},"content":"Example:"},{"lineNumber":853,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":854,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":855,"author":{"gitID":"yapni"},"content":"`showDB 1` +"},{"lineNumber":856,"author":{"gitID":"yapni"},"content":"`addMS i/1 d/23/05/2018 23:59 o/Learn Arrays` +"},{"lineNumber":857,"author":{"gitID":"yapni"},"content":"Adds a milestone to the dashboard of the 1st student in the address book. The milestone is due on 23/05/2018 23:59 and the objective is \"Learn Arrays\"."},{"lineNumber":858,"author":{"gitID":"yapni"},"content":""},{"lineNumber":859,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to add a milestone to a dashboard"},{"lineNumber":860,"author":{"gitID":"yapni"},"content":""},{"lineNumber":861,"author":{"gitID":"yapni"},"content":"*Step 1*: First, view the dashboard of the student where you want to add the milestone to (see \u003c\u003cShow the dashboard of a student: `showDB`\u003e\u003e)."},{"lineNumber":862,"author":{"gitID":"yapni"},"content":""},{"lineNumber":863,"author":{"gitID":"yapni"},"content":"*Step 2*: Once you can view the student\u0027s dashboard, type `addMS` in the command box, followed by the `STUDENT_INDEX`, `MILESTONE_DUE_DATE` and `DESCRIPTION_OF_MILESTONE`. Press kbd:[Enter] to execute it."},{"lineNumber":864,"author":{"gitID":"yapni"},"content":""},{"lineNumber":865,"author":{"gitID":"yapni"},"content":".Entering the `addMS` command, followed by the `STUDENT_INDEX` as \"1\", `MILESTONE_DUE_DATE` as \"23/05/2018 23:59\" and `DESCRIPTION_OF_MILESTONE` as \"Learn Arrays\""},{"lineNumber":866,"author":{"gitID":"yapni"},"content":"image::addMS1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":867,"author":{"gitID":"yapni"},"content":""},{"lineNumber":868,"author":{"gitID":"yapni"},"content":"*Step 3*: You have succeeded in adding the milestone to the student\u0027s dashboard if you see the message \"Milestone added to Student\u0027s Dashboard:\" followed by the description of the milestone you have added in the result box."},{"lineNumber":869,"author":{"gitID":"yapni"},"content":"The new milestone will also appear on the student\u0027s dashboard."},{"lineNumber":870,"author":{"gitID":"yapni"},"content":""},{"lineNumber":871,"author":{"gitID":"yapni"},"content":".Success in adding the milestone with the description \"Learn Arrays\" which is due on \"23/05/2018 23:59\" to the dashboard of Alex Yeoh. Alex Yeoh has the index 1 on the students list."},{"lineNumber":872,"author":{"gitID":"yapni"},"content":"image::addMS2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":873,"author":{"gitID":"yapni"},"content":""},{"lineNumber":874,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":875,"author":{"gitID":"yapni"},"content":"The `STUDENT_INDEX` provided must be valid. Otherwise, an error message \"The student index provided is invalid\" will be displayed in the result box at *Step 3*."},{"lineNumber":876,"author":{"gitID":"yapni"},"content":""},{"lineNumber":877,"author":{"gitID":"yapni"},"content":".Error message displayed when an invalid `STUDENT_INDEX` 10 is entered. There are less than 10 students in the student contact list."},{"lineNumber":878,"author":{"gitID":"yapni"},"content":"image::addMS3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":879,"author":{"gitID":"yapni"},"content":""},{"lineNumber":880,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":881,"author":{"gitID":"yapni"},"content":"The `MILESTONE_DUE_DATE` provided must have a valid calendar date and follows the specified format. Otherwise, an error message shown in the figure below will be displayed in the result box at *Step 3*. +"},{"lineNumber":882,"author":{"gitID":"yapni"},"content":""},{"lineNumber":883,"author":{"gitID":"yapni"},"content":".Error message displayed when an invalid `MILESTONE_DUE_DATE` \"31/02/2018 23:59\" is entered. There is no 31/02/2018 in the calendar."},{"lineNumber":884,"author":{"gitID":"yapni"},"content":"image::addMS4_screenshot.png[width\u003d\"800\"]"},{"lineNumber":885,"author":{"gitID":"yapni"},"content":""},{"lineNumber":886,"author":{"gitID":"yapni"},"content":""},{"lineNumber":887,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d Deleting a milestone from a student\u0027s dashboard: `deleteMS`"},{"lineNumber":888,"author":{"gitID":"yapni"},"content":""},{"lineNumber":889,"author":{"gitID":"yapni"},"content":"If you wish to remove a milestone you no longer need from a student\u0027s dashboard, you can use the `deleteMS` command. +"},{"lineNumber":890,"author":{"gitID":"yapni"},"content":""},{"lineNumber":891,"author":{"gitID":"yapni"},"content":"Format: `deleteMS i/STUDENT_INDEX m/MILESTONE_INDEX`"},{"lineNumber":892,"author":{"gitID":"yapni"},"content":""},{"lineNumber":893,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":894,"author":{"gitID":"yapni"},"content":"* The milestone is in the dashboard of a student at the specified `STUDENT_INDEX`"},{"lineNumber":895,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` refers to the index number of the student shown in the most recent listing."},{"lineNumber":896,"author":{"gitID":"yapni"},"content":"* `MILESTONE_INDEX` refers to the index number of the milestone in the dashboard shown in the most recent listing."},{"lineNumber":897,"author":{"gitID":"yapni"},"content":"* Both `STUDENT_INDEX` and `MILESTONE_INDEX` *must be positive integers* 1, 2, 3, ..."},{"lineNumber":898,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":899,"author":{"gitID":"yapni"},"content":""},{"lineNumber":900,"author":{"gitID":"yapni"},"content":"Examples:"},{"lineNumber":901,"author":{"gitID":"yapni"},"content":""},{"lineNumber":902,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":903,"author":{"gitID":"yapni"},"content":"`showDB 1` +"},{"lineNumber":904,"author":{"gitID":"yapni"},"content":"`deleteMS i/1 m/1` +"},{"lineNumber":905,"author":{"gitID":"yapni"},"content":"Deletes the 1st milestone from the dashboard of the 1st student in the address book."},{"lineNumber":906,"author":{"gitID":"yapni"},"content":""},{"lineNumber":907,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to delete a milestone from a dashboard"},{"lineNumber":908,"author":{"gitID":"yapni"},"content":""},{"lineNumber":909,"author":{"gitID":"yapni"},"content":"*Step 1*: First, view the dashboard of the student where you want to remove the milestone from (see \u003c\u003cShow the dashboard of a student: `showDB`\u003e\u003e)."},{"lineNumber":910,"author":{"gitID":"yapni"},"content":""},{"lineNumber":911,"author":{"gitID":"yapni"},"content":"*Step 2*: Once you can view the student\u0027s dashboard, type `deleteMS` in the command box, followed by the `STUDENT_INDEX` and `MILESTONE_INDEX`. Press kbd:[Enter] to execute it."},{"lineNumber":912,"author":{"gitID":"yapni"},"content":""},{"lineNumber":913,"author":{"gitID":"yapni"},"content":".Entering the `deleteMS` command, followed by the `STUDENT_INDEX` as \"1\" and `MILESTONE_INDEX` as \"1\""},{"lineNumber":914,"author":{"gitID":"yapni"},"content":"image::deleteMS1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":915,"author":{"gitID":"yapni"},"content":""},{"lineNumber":916,"author":{"gitID":"yapni"},"content":"*Step 3*: You have succeeded in deleting the milestone if you see the message \"Deleted milestone:\" followed by the description of the milestone in the result box. The milestone will also no longer be on the dashboard of the student."},{"lineNumber":917,"author":{"gitID":"yapni"},"content":""},{"lineNumber":918,"author":{"gitID":"yapni"},"content":".Success in deleting the milestone of index 1 in the dashboard of Alex Yeoh. Alex Yeoh has the index 1 on the students list."},{"lineNumber":919,"author":{"gitID":"yapni"},"content":"image::deleteMS2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":920,"author":{"gitID":"yapni"},"content":""},{"lineNumber":921,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":922,"author":{"gitID":"yapni"},"content":"The `STUDENT_INDEX` and `MILESTONE_INDEX` provided must be valid. Otherwise, an error message \"One or more of the provided indexes are invalid\" will be displayed in the result box at *Step 3*."},{"lineNumber":923,"author":{"gitID":"yapni"},"content":""},{"lineNumber":924,"author":{"gitID":"yapni"},"content":".Error message displayed when invalid `STUDENT_INDEX` \"10\" and `MILESTONE_INDEX` \"10\" are entered"},{"lineNumber":925,"author":{"gitID":"yapni"},"content":"image::deleteMS3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":926,"author":{"gitID":"yapni"},"content":""},{"lineNumber":927,"author":{"gitID":"yapni"},"content":"// end::dashboard1[]"},{"lineNumber":928,"author":{"gitID":"yapni"},"content":""},{"lineNumber":929,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d Adding a task to a milestone: `addTask`"},{"lineNumber":930,"author":{"gitID":"yapni"},"content":""},{"lineNumber":931,"author":{"gitID":"yapni"},"content":"If you wish to keep track of a piece of work that needs to be done to complete a milestone\u0027s objective, you can add a task to the milestone in the student\u0027s dashboard using the `addTask` command. +"},{"lineNumber":932,"author":{"gitID":"yapni"},"content":""},{"lineNumber":933,"author":{"gitID":"yapni"},"content":"Format: `addTask i/STUDENT_INDEX m/MILESTONE_INDEX n/NAME_OF_TASK o/DESCRIPTION_OF_TASK`"},{"lineNumber":934,"author":{"gitID":"yapni"},"content":""},{"lineNumber":935,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":936,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` refers to the index number of the student shown in the most recent listing."},{"lineNumber":937,"author":{"gitID":"yapni"},"content":"* `MILESTONE_INDEX` refers to the index number of the milestone in the dashboard shown in the most recent listing."},{"lineNumber":938,"author":{"gitID":"yapni"},"content":"* The milestone is in the dashboard of the student at the specified `STUDENT_INDEX`"},{"lineNumber":939,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` and `MILESTONE_INDEX` *must be positive integers* 1, 2, 3, ..."},{"lineNumber":940,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":941,"author":{"gitID":"yapni"},"content":""},{"lineNumber":942,"author":{"gitID":"yapni"},"content":"Examples:"},{"lineNumber":943,"author":{"gitID":"yapni"},"content":""},{"lineNumber":944,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":945,"author":{"gitID":"yapni"},"content":"`showDB 1` +"},{"lineNumber":946,"author":{"gitID":"yapni"},"content":"`addTask i/1 m/1 n/Learn Array Syntax o/Student to refer to the textbook` +"},{"lineNumber":947,"author":{"gitID":"yapni"},"content":"Adds a task to the 1st milestone in the dashboard of the 1st student in the address book. The name of the task is \"Learn Array Syntax\" and the description is \"Student to refer to the textbook\"."},{"lineNumber":948,"author":{"gitID":"yapni"},"content":""},{"lineNumber":949,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to add a task to a milestone"},{"lineNumber":950,"author":{"gitID":"yapni"},"content":""},{"lineNumber":951,"author":{"gitID":"yapni"},"content":"*Step 1*: First, view the dashboard of the student where you want to add the task to (see \u003c\u003cShow the dashboard of a student: `showDB`\u003e\u003e)."},{"lineNumber":952,"author":{"gitID":"yapni"},"content":""},{"lineNumber":953,"author":{"gitID":"yapni"},"content":"*Step 2*: Once you can view the student\u0027s dashboard, type `addTask` in the command box, followed by `STUDENT_INDEX`, `MILESTONE_INDEX`, `NAME_OF_TASK` and `DESCRIPTION_OF_TASK`. Press kbd:[Enter] to execute it."},{"lineNumber":954,"author":{"gitID":"yapni"},"content":""},{"lineNumber":955,"author":{"gitID":"yapni"},"content":".Entering the command `addTask`, followed by the `STUDENT_INDEX` as \"1\", `MILESTONE_INDEX` as \"1\", `NAME_OF_TASK` as \"Learn Array Syntax\"  and `DESCRIPTION_OF_TASK` as \"Student to refer to the textbook\""},{"lineNumber":956,"author":{"gitID":"yapni"},"content":"image::addTask1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":957,"author":{"gitID":"yapni"},"content":""},{"lineNumber":958,"author":{"gitID":"yapni"},"content":"*Step 3*: You have succeeded in adding the task to the milestone if you see the message \"New task added:\" followed by the description of the task you have added in the result box. The new task will also appear in the task list of the milestone."},{"lineNumber":959,"author":{"gitID":"yapni"},"content":""},{"lineNumber":960,"author":{"gitID":"yapni"},"content":".Success in adding a task with the name \"Learn Array Syntax\" and description \"Student to refer to the textbook\" to the 1st milestone in the dashboard of Alex Yeoh. Alex Yeoh has the index 1 on the students list."},{"lineNumber":961,"author":{"gitID":"yapni"},"content":"image::addTask2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":962,"author":{"gitID":"yapni"},"content":""},{"lineNumber":963,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":964,"author":{"gitID":"yapni"},"content":"The `STUDENT_INDEX` and `MILESTONE_INDEX` provided must be valid. Otherwise, an error message \"One or more of the provided indexes are invalid\" will be displayed in the result box at *Step 3*."},{"lineNumber":965,"author":{"gitID":"yapni"},"content":""},{"lineNumber":966,"author":{"gitID":"yapni"},"content":".Error message displayed when invalid `STUDENT_INDEX` \"10\" and `MILESTONE_INDEX` \"10\" are entered"},{"lineNumber":967,"author":{"gitID":"yapni"},"content":"image::addTask3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":968,"author":{"gitID":"yapni"},"content":""},{"lineNumber":969,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d Deleting a task from a milestone: `deleteTask`"},{"lineNumber":970,"author":{"gitID":"yapni"},"content":""},{"lineNumber":971,"author":{"gitID":"yapni"},"content":"If you wish to remove a task you no longer need in a milestone of a dashboard, you can use the `deleteTask` command. +"},{"lineNumber":972,"author":{"gitID":"yapni"},"content":""},{"lineNumber":973,"author":{"gitID":"yapni"},"content":"Format: `deleteTask i/STUDENT_INDEX m/MILESTONE_INDEX tk/TASK_INDEX`"},{"lineNumber":974,"author":{"gitID":"yapni"},"content":""},{"lineNumber":975,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":976,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` refers to the index number of the student shown in the most recent listing."},{"lineNumber":977,"author":{"gitID":"yapni"},"content":"* `MILESTONE_INDEX` refers to the index number of the milestone in the dashboard shown in the most recent listing."},{"lineNumber":978,"author":{"gitID":"yapni"},"content":"* `TASK_INDEX` refer to the index number of the task in the milestone shown in the most recent listing."},{"lineNumber":979,"author":{"gitID":"yapni"},"content":"* The task is in the milestone at the specified `MILESTONE_INDEX`"},{"lineNumber":980,"author":{"gitID":"yapni"},"content":"* The milestone is in the dashboard of a student at the specified `STUDENT_INDEX`"},{"lineNumber":981,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX`, `MILESTONE_INDEX` and `TASK_INDEX` *must be positive integers* 1, 2, 3, ..."},{"lineNumber":982,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":983,"author":{"gitID":"yapni"},"content":""},{"lineNumber":984,"author":{"gitID":"yapni"},"content":"Examples:"},{"lineNumber":985,"author":{"gitID":"yapni"},"content":""},{"lineNumber":986,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":987,"author":{"gitID":"yapni"},"content":"`showDB 1` +"},{"lineNumber":988,"author":{"gitID":"yapni"},"content":"`deleteTask i/1 m/1 tk/1` +"},{"lineNumber":989,"author":{"gitID":"yapni"},"content":"Deletes the 1st task in the 1st milestone. The milestone is in the dashboard of the 1st student in the address book."},{"lineNumber":990,"author":{"gitID":"yapni"},"content":""},{"lineNumber":991,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to delete a task from a milestone"},{"lineNumber":992,"author":{"gitID":"yapni"},"content":""},{"lineNumber":993,"author":{"gitID":"yapni"},"content":"*Step 1*: First, view the dashboard of the student where you want to delete the task from (see \u003c\u003cShow the dashboard of a student: `showDB`\u003e\u003e)."},{"lineNumber":994,"author":{"gitID":"yapni"},"content":""},{"lineNumber":995,"author":{"gitID":"yapni"},"content":"*Step 2*: Once you can view the student\u0027s dashboard, type `deleteTask` in the command box, followed by `STUDENT_INDEX`, `MILESTONE_INDEX` and `TASK_INDEX`. Press kbd:[Enter] to execute it."},{"lineNumber":996,"author":{"gitID":"yapni"},"content":""},{"lineNumber":997,"author":{"gitID":"yapni"},"content":".Entering the command `deleteTask`, followed by the `STUDENT_INDEX` as \"1\", `MILESTONE_INDEX` as \"1\" and `TASK_INDEX` as \"1\""},{"lineNumber":998,"author":{"gitID":"yapni"},"content":"image::deleteTask1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":999,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1000,"author":{"gitID":"yapni"},"content":"*Step 3*: You have succeeded in deleting the task from the milestone if you see the message: \"Deleted task:\" followed by the description of the task you deleted in the result box. The task will also no longer be in the task list of the milestone."},{"lineNumber":1001,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1002,"author":{"gitID":"yapni"},"content":".Success in deleting the task of index 1 from the 1st milestone in the dashboard of Alex Yeoh. Alex Yeoh has the index 1 on the students list."},{"lineNumber":1003,"author":{"gitID":"yapni"},"content":"image::deleteTask2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":1004,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1005,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":1006,"author":{"gitID":"yapni"},"content":"The `STUDENT_INDEX`, `MILESTONE_INDEX`, and `TASK_INDEX` provided must be valid. Otherwise, an error message \"One or more of the provided indexes are invalid\" will be displayed in the result box at *Step 3*."},{"lineNumber":1007,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1008,"author":{"gitID":"yapni"},"content":".Error message displayed when invalid `STUDENT_INDEX` \"10\", `MILESTONE_INDEX` \"10\" and `TASK_INDEX` \"10\" are entered"},{"lineNumber":1009,"author":{"gitID":"yapni"},"content":"image::deleteTask3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":1010,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1011,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d Marking a task as completed: `checkTask`"},{"lineNumber":1012,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1013,"author":{"gitID":"yapni"},"content":"If your student has completed a task and you wish to mark it as completed, you can use the `checkTask` command. +"},{"lineNumber":1014,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1015,"author":{"gitID":"yapni"},"content":"Format: `checkTask i/STUDENT_INDEX m/MILESTONE_INDEX tk/TASK_INDEX`"},{"lineNumber":1016,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1017,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":1018,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX` refers to the index number of the student shown in the most recent listing."},{"lineNumber":1019,"author":{"gitID":"yapni"},"content":"* `MILESTONE_INDEX` refers to the index number of the milestone in the dashboard shown in the most recent listing."},{"lineNumber":1020,"author":{"gitID":"yapni"},"content":"* `TASK_INDEX` refer to the index number of the task in the milestone shown in the most recent listing."},{"lineNumber":1021,"author":{"gitID":"yapni"},"content":"* The task is in the milestone at the specified `MILESTONE_INDEX`"},{"lineNumber":1022,"author":{"gitID":"yapni"},"content":"* The milestone is in the dashboard of a student at the specified `STUDENT_INDEX`"},{"lineNumber":1023,"author":{"gitID":"yapni"},"content":"* `STUDENT_INDEX`, `MILESTONE_INDEX` and `TASK_INDEX` *must be positive integers* 1, 2, 3, ..."},{"lineNumber":1024,"author":{"gitID":"yapni"},"content":"****"},{"lineNumber":1025,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1026,"author":{"gitID":"yapni"},"content":"[TIP]"},{"lineNumber":1027,"author":{"gitID":"yapni"},"content":"Marking a task as completed updates the progress of the milestone."},{"lineNumber":1028,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1029,"author":{"gitID":"yapni"},"content":"Examples:"},{"lineNumber":1030,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1031,"author":{"gitID":"yapni"},"content":"* `list` +"},{"lineNumber":1032,"author":{"gitID":"yapni"},"content":"`showDB 1` +"},{"lineNumber":1033,"author":{"gitID":"yapni"},"content":"`checkTask i/1 m/1 tk/1` +"},{"lineNumber":1034,"author":{"gitID":"yapni"},"content":"Marks the 1st task in the 1st milestone as completed. The milestone is in the dashboard of the 1st student in the address book."},{"lineNumber":1035,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1036,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to mark a task as completed"},{"lineNumber":1037,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1038,"author":{"gitID":"yapni"},"content":"*Step 1*: First, view the dashboard of the student where the task is (see \u003c\u003cShow the dashboard of a student: `showDB`\u003e\u003e)."},{"lineNumber":1039,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1040,"author":{"gitID":"yapni"},"content":"*Step 2*: Once you can view the student\u0027s dashboard, type `checkTask` in the command box, followed by `STUDENT_INDEX`, `MILESTONE_INDEX` and `TASK_INDEX`. Press kbd:[Enter] to execute it."},{"lineNumber":1041,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1042,"author":{"gitID":"yapni"},"content":".Entering the command `checkTask`, followed by the `STUDENT_INDEX` as \"1\", `MILESTONE_INDEX` as \"1\" and `TASK_INDEX` as \"1\""},{"lineNumber":1043,"author":{"gitID":"yapni"},"content":"image::checkTask1_screenshot.png[width\u003d\"800\"]"},{"lineNumber":1044,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1045,"author":{"gitID":"yapni"},"content":"*Step 3*: You have succeeded in marking the task as completed if you see the message \"Task `TASK_INDEX` marked as completed in milestone `MILESTONE_INDEX` \"."},{"lineNumber":1046,"author":{"gitID":"yapni"},"content":"The task\u0027s \"Completed\" field will become \"Yes\" and the progress of the milestone will be updated."},{"lineNumber":1047,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1048,"author":{"gitID":"yapni"},"content":".Success in marking the task of index 1 from the 1st milestone in the dashboard of Alex Yeoh as completed. Alex Yeoh has the index 1 on the students list. The task\u0027s \"Completed\" field is now \"Yes\" and the milestone\u0027s progress is updated to 100%."},{"lineNumber":1049,"author":{"gitID":"yapni"},"content":"image::checkTask2_screenshot.png[width\u003d\"800\"]"},{"lineNumber":1050,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1051,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":1052,"author":{"gitID":"yapni"},"content":"Marking an already completed task as complete will cause the message \"Task is already marked as completed\" to be displayed in the result box at *Step 3*."},{"lineNumber":1053,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1054,"author":{"gitID":"yapni"},"content":".Error message displayed when specified task is already marked as completed"},{"lineNumber":1055,"author":{"gitID":"yapni"},"content":"image::checkTask4_screenshot.png[width\u003d\"800\"]"},{"lineNumber":1056,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1057,"author":{"gitID":"yapni"},"content":"[WARNING]"},{"lineNumber":1058,"author":{"gitID":"yapni"},"content":"The `STUDENT_INDEX`, `MILESTONE_INDEX`, and `TASK_INDEX` provided must be valid. Otherwise, an error message \"One or more of the provided indexes are invalid\" will be displayed in the result box at *Step 3*."},{"lineNumber":1059,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1060,"author":{"gitID":"yapni"},"content":".Error message displayed when invalid `STUDENT_INDEX` \"10\", `MILESTONE_INDEX` \"10\" and `TASK_INDEX` \"10\" are entered"},{"lineNumber":1061,"author":{"gitID":"yapni"},"content":"image::checkTask3_screenshot.png[width\u003d\"800\"]"},{"lineNumber":1062,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1063,"author":{"gitID":"yapni"},"content":"// end::dashboard[]"},{"lineNumber":1064,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1065,"author":{"gitID":"samuelloh"},"content":"// tag::profilePage1[]"},{"lineNumber":1066,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Student Profile Page"},{"lineNumber":1067,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d\u003d Displaying profile page for each student : `moreInfo`"},{"lineNumber":1068,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1069,"author":{"gitID":"samuelloh"},"content":"Displays the full information of a student on the browser panel. The full information of a student consists of 3 elements, main information, miscellaneous information and his/her profile picture. You will be able to view his/her profile picture if one exists. +"},{"lineNumber":1070,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1071,"author":{"gitID":"samuelloh"},"content":"Format: `moreInfo INDEX`"},{"lineNumber":1072,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1073,"author":{"gitID":"samuelloh"},"content":"[WARNING]"},{"lineNumber":1074,"author":{"gitID":"samuelloh"},"content":"The `moreInfo` command _**cannot**_ work if there is no existing XML data of students. Should you encounter this warning,you can either: +"},{"lineNumber":1075,"author":{"gitID":"samuelloh"},"content":"1) Simply enter `clear` and start out with an empty student list. +"},{"lineNumber":1076,"author":{"gitID":"samuelloh"},"content":"2) Add, edit or delete a student using their corresponding commands to generate XML data of the students."},{"lineNumber":1077,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1078,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1079,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to display the profile page of a student"},{"lineNumber":1080,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1081,"author":{"gitID":"samuelloh"},"content":"Suppose you wish to view the profile page of the 1st student of the current student list"},{"lineNumber":1082,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1083,"author":{"gitID":"samuelloh"},"content":". Enter the command as shown below:"},{"lineNumber":1084,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1085,"author":{"gitID":"samuelloh"},"content":".Command to be entered to display the 1st student\u0027s profile page."},{"lineNumber":1086,"author":{"gitID":"samuelloh"},"content":"image::moreInfoCommand.png[width:400]"},{"lineNumber":1087,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1088,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1089,"author":{"gitID":"samuelloh"},"content":"[start\u003d2]"},{"lineNumber":1090,"author":{"gitID":"samuelloh"},"content":". You will then be able to view the profile page of the student. Enter the same command with a different number for viewing the profile page of other students (e.g. `moreInfo 2`)."},{"lineNumber":1091,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1092,"author":{"gitID":"samuelloh"},"content":".Executing the command `moreInfo 1` displays the 1st student (Alex Yeoh\u0027s) profile page"},{"lineNumber":1093,"author":{"gitID":"samuelloh"},"content":"image::moreInfoResult.png[width:400]"},{"lineNumber":1094,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1095,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1096,"author":{"gitID":"samuelloh"},"content":"[TIP]"},{"lineNumber":1097,"author":{"gitID":"samuelloh"},"content":"You will be able to attain the profile page style in `Figure 5` if your OS zoom scale is set to `125%`. The profile photo may seem of a different size for other configurations. Search you computer settings should you wish to change this."},{"lineNumber":1098,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1099,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1100,"author":{"gitID":"samuelloh"},"content":"****"},{"lineNumber":1101,"author":{"gitID":"samuelloh"},"content":"* Displays the full information of a student with the specified `INDEX`."},{"lineNumber":1102,"author":{"gitID":"demitycho"},"content":"* The index refers to the index number shown in the last schedule listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":1103,"author":{"gitID":"demitycho"},"content":"****"},{"lineNumber":1104,"author":{"gitID":"samuelloh"},"content":"// end::profilePage1[]"},{"lineNumber":1105,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Edit the profile picture of a student : `editPicture`"},{"lineNumber":1106,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1107,"author":{"gitID":"samuelloh"},"content":"Allows you to edit the current profile picture of a student to a new picture from a specific file path indicated by you. +"},{"lineNumber":1108,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1109,"author":{"gitID":"samuelloh"},"content":"Format: `editPicture i/STUDENT_INDEX pa/FILE_PATH_OF_PICTURE`"},{"lineNumber":1110,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1111,"author":{"gitID":"samuelloh"},"content":"[NOTE]"},{"lineNumber":1112,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1113,"author":{"gitID":"samuelloh"},"content":"The image file you wish to use must exist and have extensions either of `.jpg` or `.png`. +"},{"lineNumber":1114,"author":{"gitID":"samuelloh"},"content":"The file path you entered can be relative to the current folder of the `jar` file or the absolute path e.g. `C:/Users/User/Desktop/photo.jpg`"},{"lineNumber":1115,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":1116,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1117,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps taken to edit the profile picture of a student"},{"lineNumber":1118,"author":{"gitID":"samuelloh"},"content":"//tag::profilePage2[]"},{"lineNumber":1119,"author":{"gitID":"samuelloh"},"content":"Suppose you wish to have this picture, with the file name of `animal.jpg`  as a new profile picture as your student:"},{"lineNumber":1120,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1121,"author":{"gitID":"samuelloh"},"content":"image::animal.jpg[width:100]"},{"lineNumber":1122,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1123,"author":{"gitID":"samuelloh"},"content":". Enter the command as shown below:"},{"lineNumber":1124,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1125,"author":{"gitID":"samuelloh"},"content":".Command to be entered to edit a student\u0027s profile picture"},{"lineNumber":1126,"author":{"gitID":"samuelloh"},"content":"image::editPictureCommand.png[width:400]"},{"lineNumber":1127,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1128,"author":{"gitID":"samuelloh"},"content":"[start\u003d2]"},{"lineNumber":1129,"author":{"gitID":"samuelloh"},"content":". You will edit the profile picture of the 1st student of the latest student list to a picture existing in the same folder as the jar file with the name `animal.jpg`. You will then see the following:"},{"lineNumber":1130,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1131,"author":{"gitID":"samuelloh"},"content":".Command to edit the student\u0027s profile picture success!"},{"lineNumber":1132,"author":{"gitID":"samuelloh"},"content":"image::editPictureSuccess.png[width:400]"},{"lineNumber":1133,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1134,"author":{"gitID":"samuelloh"},"content":"[start\u003d3]"},{"lineNumber":1135,"author":{"gitID":"samuelloh"},"content":". By calling the `moreInfo` command (found in the section above), you will be able to view the student\u0027s profile page with the updated picture as shown below:"},{"lineNumber":1136,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1137,"author":{"gitID":"samuelloh"},"content":".The profile page of the selected student is shown with the new profile picture!"},{"lineNumber":1138,"author":{"gitID":"samuelloh"},"content":"image::editedPicture.png[width:600]"},{"lineNumber":1139,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1140,"author":{"gitID":"samuelloh"},"content":"[TIP]"},{"lineNumber":1141,"author":{"gitID":"samuelloh"},"content":"The ideal aspect ratio of the picture is 1.25 from height to width."},{"lineNumber":1142,"author":{"gitID":"samuelloh"},"content":"//end::profilePage2[]"},{"lineNumber":1143,"author":{"gitID":"samuelloh"},"content":"****"},{"lineNumber":1144,"author":{"gitID":"samuelloh"},"content":"* Changes the profile photo of a student with the specified `INDEX` to a new one which has a file path of `FILE_PATH_OF_PICTURE`"},{"lineNumber":1145,"author":{"gitID":"demitycho"},"content":"* The index refers to the index number shown in the last schedule listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":1146,"author":{"gitID":"samuelloh"},"content":"* The file path of the picture is either relative to the folder which the jar application is or can be speicifed from the hard drive."},{"lineNumber":1147,"author":{"gitID":"samuelloh"},"content":"****"},{"lineNumber":1148,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1149,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Edit the miscellaneous info of a student : `editMisc`"},{"lineNumber":1150,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1151,"author":{"gitID":"samuelloh"},"content":"Allows you to edit the miscellaneous information of a student. This includes his/her allergies, Next-Of-Kin name, Next-Of-Kin contact number and remarks for the student. +"},{"lineNumber":1152,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1153,"author":{"gitID":"samuelloh"},"content":"Format: `editMisc INDEX [al/ALLERGIES] [nokn/NEXT_OF_KIN_NAME] [nokp/NEXT_OF_KIN_PHONE] [r/REMARKS]`"},{"lineNumber":1154,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1155,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Steps Taken to edit the miscellaneous information of a student"},{"lineNumber":1156,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1157,"author":{"gitID":"samuelloh"},"content":"Suppose you wish to edit the allergies information of a student to `Allergic to nuts`."},{"lineNumber":1158,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1159,"author":{"gitID":"samuelloh"},"content":". Enter the command as shown below:"},{"lineNumber":1160,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1161,"author":{"gitID":"samuelloh"},"content":".Command to be entered to edit the allergies information of a student."},{"lineNumber":1162,"author":{"gitID":"samuelloh"},"content":"image::editMiscCommand.png[width 400]"},{"lineNumber":1163,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1164,"author":{"gitID":"samuelloh"},"content":"[start\u003d2]"},{"lineNumber":1165,"author":{"gitID":"samuelloh"},"content":". You will edit the `allergies` portion of the miscellaneous information of the 1st student of the student list to \"Allergic to nuts\". You will then see the following:"},{"lineNumber":1166,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1167,"author":{"gitID":"samuelloh"},"content":".Command to edit the allergies portion of the student\u0027s miscellaneous information success!"},{"lineNumber":1168,"author":{"gitID":"samuelloh"},"content":"image::editPictureSuccess.png[][width:400]"},{"lineNumber":1169,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1170,"author":{"gitID":"samuelloh"},"content":"[start\u003d3]"},{"lineNumber":1171,"author":{"gitID":"-"},"content":". By calling the `moreInfo` command (found in the section above), you will be able to view the student\u0027s profile page with the updated allergies information as shown below:"},{"lineNumber":1172,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1173,"author":{"gitID":"samuelloh"},"content":".The profile page of the selected student is shown with the newly updated allergies information!"},{"lineNumber":1174,"author":{"gitID":"samuelloh"},"content":"image::editMiscSuccess.png[width:600]"},{"lineNumber":1175,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1176,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1177,"author":{"gitID":"samuelloh"},"content":"****"},{"lineNumber":1178,"author":{"gitID":"demitycho"},"content":"* Edits the student\u0027s miscellaneous info at the specified `INDEX`. The index refers to the index number shown in the last student listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":1179,"author":{"gitID":"samuelloh"},"content":"* At least one optional field must be provided."},{"lineNumber":1180,"author":{"gitID":"samuelloh"},"content":"* Existing values will be updated to and overwritten by the input values."},{"lineNumber":1181,"author":{"gitID":"samuelloh"},"content":"****"},{"lineNumber":1182,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1183,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Coming in v2.0"},{"lineNumber":1186,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Track student\u0027s homework in the dashboard `[coming in v2.0]`"},{"lineNumber":1187,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1188,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d\u003d Find students by their miscellaneous information `[coming in v2.0]`"},{"lineNumber":1189,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1190,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Full pull and push data using sync"},{"lineNumber":1191,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"//tag::NLP[]"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"\u003d\u003d Interacting using free-form English"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"CodEducator also allows you to use features of the applications using everyday english sentences, without the need to remember specific command words."},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"An active internet connection is required for this to work."},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d How do i use this?"},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"You can refer to the table below to see which are the features that you are able to invoke using conversational English."},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"The examples below are just for your reference. Any phrase or sentence can be used, so long as your *intention* is precise and clear."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\",^2m,^2e\",options\u003d\"header\",]"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"| Command 2+| Examples"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"|`Clear`|\"I want everyone to be gone\" | \"Empty everything\""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"|`Redo`|\"do it again\" | \"reuse previous\""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"|`Undo`|\"revert back\" | \"negate the previous action\""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"|`Help`|\"I am lost\"| \"I need assistance\""},{"lineNumber":1213,"author":{"gitID":"-"},"content":"|`Exit`|\"I\u0027m done here\"| \"i wish to quit\""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"|`History`|\"what are my previous commands\"| \"archives of commands entered\""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"|`List`|\"Show me all my students\"| \"enumerate everyone\""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"|`Schedule`|\"what is my agenda\"|\"show me my timetable\""},{"lineNumber":1217,"author":{"gitID":"-"},"content":"|`Delete`| \"Erase Susan\"| \"Remove Jason\""},{"lineNumber":1218,"author":{"gitID":"-"},"content":"|`Select`| \"Choose Susan\"| \"Single out Jason\""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"Currently, the commands `Delete` and `Select` only detects English names!"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":".selecting one of your student, Jason"},{"lineNumber":1225,"author":{"gitID":"yapni"},"content":"image::Select(before).png[width\u003d\"500\"]"},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":".You should see this after execution of the `select` command is successful"},{"lineNumber":1230,"author":{"gitID":"yapni"},"content":"image::Select(after).png[width\u003d\"500\"]"},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Guidelines for using this feature"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"* Be sure to check for spelling errors in your sentences."},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"Spelling errors can be mis-interpreted and the wrong command might be invoked."},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"* Be as precise as possible in specifying your intentions in the sentences, to prevent mis-interpretation of commands."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"* If the wrong feature is invoked, you can always use the `undo` command revert any undesired changes."},{"lineNumber":1240,"author":{"gitID":"-"},"content":""},{"lineNumber":1241,"author":{"gitID":"-"},"content":"//end::NLP[]"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"demitycho"},"content":"[width\u003d\"60%\",cols\u003d\"20%,\u003c40%,\u003c40%\",options\u003d\"header\",]"},{"lineNumber":1250,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1251,"author":{"gitID":"demitycho"},"content":"| Purpose | Format | Example"},{"lineNumber":1252,"author":{"gitID":"demitycho"},"content":"3+| *_Contact List Commands_*"},{"lineNumber":1253,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1254,"author":{"gitID":"demitycho"},"content":"| Adding a student |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS pl/PROGRAMMING_LANGUAGE [t/TAG]...`|`add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 pl/HTML t/friend t/1stYear`"},{"lineNumber":1255,"author":{"gitID":"demitycho"},"content":"| Clearing your entire contact list 2+| `clear`"},{"lineNumber":1256,"author":{"gitID":"demitycho"},"content":"| Deleting a student | `delete INDEX` | `delete 3`"},{"lineNumber":1257,"author":{"gitID":"demitycho"},"content":"| Edit | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [pl/PROGRAMMING_LANGUAGE] [t/TAG]...` |"},{"lineNumber":1258,"author":{"gitID":"demitycho"},"content":"`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":1259,"author":{"gitID":"demitycho"},"content":"| Find | `find KEYWORD [MORE_KEYWORDS]` | `find James Jake`"},{"lineNumber":1260,"author":{"gitID":"demitycho"},"content":"| List 2+| `list`"},{"lineNumber":1261,"author":{"gitID":"demitycho"},"content":"| Help 2+| `help`"},{"lineNumber":1262,"author":{"gitID":"demitycho"},"content":"| Select | `select INDEX` | `select 2`"},{"lineNumber":1263,"author":{"gitID":"demitycho"},"content":"| History 2+| `history`"},{"lineNumber":1264,"author":{"gitID":"demitycho"},"content":"| Undo 2+| `undo`"},{"lineNumber":1265,"author":{"gitID":"demitycho"},"content":"| Redo 2+| `redo`"},{"lineNumber":1266,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1267,"author":{"gitID":"demitycho"},"content":"3+| *_Dashboard Commands_*"},{"lineNumber":1268,"author":{"gitID":"demitycho"},"content":"| Show Dashboard | `showDB INDEX` |"},{"lineNumber":1269,"author":{"gitID":"demitycho"},"content":"`showDB 3`"},{"lineNumber":1270,"author":{"gitID":"demitycho"},"content":"| Add Milestone | `addMS i/STUDENT_INDEX d/MILESTONE_DUE_DATE o/DESCRIPTION_OF_MILESTONE` |"},{"lineNumber":1271,"author":{"gitID":"demitycho"},"content":"`addMS i/1 d/23/11/2018 23:59 o/Arrays`"},{"lineNumber":1272,"author":{"gitID":"demitycho"},"content":"| Delete Milestone | `deleteMS i/STUDENT_INDEX m/MILESTONE_INDEX` |"},{"lineNumber":1273,"author":{"gitID":"yapni"},"content":"e.g. `deleteMS i/1 m/2`"},{"lineNumber":1274,"author":{"gitID":"demitycho"},"content":"| Add Task | `addTask i/STUDENT_INDEX m/MILESTONE_INDEX n/NAME_OF_TASK o/DESCRIPTION_OF_TASK` |"},{"lineNumber":1275,"author":{"gitID":"yapni"},"content":"e.g. `addTask i/1 m/2 n/Learn arrays syntax o/Refer to textbook`"},{"lineNumber":1276,"author":{"gitID":"demitycho"},"content":"| Delete Task | `deleteTask i/STUDENT_INDEX m/MILESTONE_INDEX tk/TASK_INDEX` |"},{"lineNumber":1277,"author":{"gitID":"yapni"},"content":"e.g. `deleteTask i/1 m/2 tk/3`"},{"lineNumber":1278,"author":{"gitID":"demitycho"},"content":"| Mark Task As Completed | `checkTask i/STUDENT_INDEX m/MILESTONE_INDEX tk/TASK_INDEX` |"},{"lineNumber":1279,"author":{"gitID":"yapni"},"content":"e.g. `checkTask i/STUDENT_INDEX m/MILESTONE_INDEX tk/TASK_INDEX`"},{"lineNumber":1280,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1281,"author":{"gitID":"demitycho"},"content":"3+| *_Schedule related commands_*"},{"lineNumber":1282,"author":{"gitID":"demitycho"},"content":"| View your Schedule 2+| `schedule`"},{"lineNumber":1283,"author":{"gitID":"demitycho"},"content":"| Add a Lesson | `addLesson INDEX [d/DAY] [st/START_TIME] [et/END_TIME]` |"},{"lineNumber":1284,"author":{"gitID":"yapni"},"content":"e.g. `addLesson 1 d/mon st/10:00 et/10:30`"},{"lineNumber":1285,"author":{"gitID":"demitycho"},"content":"| Delete a Lesson | `deleteLesson INDEX` |"},{"lineNumber":1286,"author":{"gitID":"yapni"},"content":"e.g. `deleteLesson 2`"},{"lineNumber":1287,"author":{"gitID":"demitycho"},"content":"| Login to your Google Account 2+| `login`"},{"lineNumber":1288,"author":{"gitID":"demitycho"},"content":"| Synchronize data with Google Account 2+| `sync`"},{"lineNumber":1289,"author":{"gitID":"demitycho"},"content":"| Logout of your Google Account 2+| `logout`"},{"lineNumber":1290,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1291,"author":{"gitID":"demitycho"},"content":"3+| *_Full information page Commands_*"},{"lineNumber":1292,"author":{"gitID":"demitycho"},"content":"| Full information page | `moreInfo INDEX` | `moreInfo 1`"},{"lineNumber":1293,"author":{"gitID":"demitycho"},"content":"| Edit the profile picture | `editPicture i/STUDENT_INDEX pa/FILE_PATH_OF_PICTURE` |"},{"lineNumber":1294,"author":{"gitID":"yapni"},"content":"e.g. `editPicture i/1 pa/C:/Users/User/Desktop/test.jpg`"},{"lineNumber":1295,"author":{"gitID":"demitycho"},"content":"| Edit the miscellaneous info of a student |  `editMisc INDEX [al/ALLERGIES] [nokn/NEXT_OF_KIN_NAME] [nokp/NEXT_OF_KIN_PHONE] [r/REMARKS] |"},{"lineNumber":1296,"author":{"gitID":"demitycho"},"content":"e.g. `editMisc 2 al/seafood` |"},{"lineNumber":1297,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d|"}],"authorContributionMap":{"yapni":472,"samuelloh":113,"demitycho":485,"-":227}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TestUtil.getStudent;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        /* Case: delete the first student in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST.getOneBased()"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"                + \"       \";"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        Student deletedStudent \u003d removeStudent(expectedModel, INDEX_FIRST);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        /* Case: delete the last student in the list -\u003e deleted */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        Index lastStudentIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(lastStudentIndex);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        /* Case: undo deleting the last student in the list -\u003e last student restored */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        /* Case: redo deleting the last student in the list -\u003e last student deleted again */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        removeStudent(modelBeforeDeletingLast, lastStudentIndex);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        /* Case: delete the middle student in the list -\u003e deleted */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        Index middleStudentIndex \u003d getMidIndex(getModel());"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(middleStudentIndex);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, delete index within bounds of address book and student list -\u003e deleted */"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        Index index \u003d INDEX_FIRST;"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, delete index within bounds of address book but out of bounds of student list"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        /* --------------------- Performing delete operation while a student card is selected ----------------------- */"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        /* Case: delete the selected student -\u003e student list panel selects the student before the deleted student */"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        showAllStudents();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        selectStudent(selectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        deletedStudent \u003d removeStudent(expectedModel, selectedIndex);"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"                getModel().getAddressBook().getStudentList().size() + 1);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Student} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"     * @return the removed student"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"    private Student removeStudent(Model model, Index index) {"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d getStudent(model, index);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"            model.deleteStudent(targetStudent);"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"targetStudent is retrieved from model.\");"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"        } catch (LessonNotFoundException lnfe) {"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError("},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"                    \"Lessons associated with targetStudent is retrieved from model.\");"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"        } catch (DuplicateLessonException dle) {"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"Lessons associated with targetStudent is retrieved from model.\", dle);"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"        } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"Lessons associated with targetStudent is retrieved from model.\", iltse);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"        return targetStudent;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"     * Deletes the student at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"        Student deletedStudent \u003d removeStudent(expectedModel, toDelete);"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"                expectedResultMessage);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"           // assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        //assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":50,"demitycho":10,"-":152}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.TypicalStudents;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        return TypicalStudents.getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    public StudentListPanelHandle getStudentListPanel() {"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        return mainWindowHandle.getStudentListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"     * Displays all students in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"    protected void showAllStudents() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        assertEquals(getModel().getAddressBook().getStudentList().size(), getModel().getFilteredStudentList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"     * Displays all students with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"    protected void showStudentsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"        assertTrue(getModel().getFilteredStudentList().size() \u003c getModel().getAddressBook().getStudentList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"     * Selects the student at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"    protected void selectStudent(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"        assertEquals(index.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"yapni"},"content":"     * Deletes all students in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"    protected void deleteAllStudents() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"        assertEquals(0, getModel().getAddressBook().getStudentList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"yapni"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same student objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"yapni"},"content":"     * and the student list panel displays the students in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"yapni"},"content":"        assertListMatching(getStudentListPanel(), expectedModel.getFilteredStudentList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"     * Calls {@code BrowserPanelHandle}, {@code StudentListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"yapni"},"content":"        getStudentListPanel().rememberSelectedStudentCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"yapni"},"content":"     * of the previously selected student."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"        assertFalse(getStudentListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"yapni"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the student in the student list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"yapni"},"content":"     * @see StudentListPanelHandle#isSelectedStudentCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"yapni"},"content":"        String selectedCardName \u003d getStudentListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, expectedUrl/*getBrowserPanel().getLoadedUrl()*/);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        //assertEquals(expectedSelectedCardIndex.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"yapni"},"content":"     * Asserts that the browser\u0027s url and the selected card in the student list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"yapni"},"content":"     * @see StudentListPanelHandle#isSelectedStudentCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"yapni"},"content":"        assertFalse(getStudentListPanel().isSelectedStudentCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        //assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":278,"author":{"gitID":"yapni"},"content":"            assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":31,"-":262}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.CARL;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.DANIEL;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"         * -\u003e 2 students found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        /* Case: repeat previous find command where student list is displaying the students we are finding"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"         * -\u003e 2 students found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        /* Case: find student where student list is not displaying the student we are finding -\u003e 1 student found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, 2 keywords -\u003e 2 students found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, 2 keywords in reversed order -\u003e 2 students found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, 2 keywords with 1 repeat -\u003e 2 students found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        /* Case: find multiple students in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"         * -\u003e 2 students found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        /* Case: find same students in address book after deleting 1 of them -\u003e 1 student found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        assertFalse(getModel().getAddressBook().getStudentList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, keyword is same as name but of different case -\u003e 1 student found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, keyword is substring of name -\u003e 0 students found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        /* Case: find student in address book, name is substring of keyword -\u003e 0 students found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        /* Case: find student not in address book -\u003e 0 students found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        /* Case: find phone number of student in address book -\u003e 0 students found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        /* Case: find address of student in address book -\u003e 0 students found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        /* Case: find email of student in address book -\u003e 0 students found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"        /* Case: find tags of student in address book -\u003e 0 students found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        /* Case: find while a student is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        showAllStudents();"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"        selectStudent(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        assertFalse(getStudentListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        /* Case: find student in empty address book -\u003e 0 students found */"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        deleteAllStudents();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"yapni"},"content":"     * box displays {@code Messages#MESSAGE_STUDENT_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"yapni"},"content":"                MESSAGE_STUDENT_LISTED_OVERVIEW, expectedModel.getFilteredStudentList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":33,"-":162}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_STUDENT_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        /* Case: select the first card in the student list, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \"   \";"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, INDEX_FIRST);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        /* Case: select the last card in the student list -\u003e selected */"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        Index studentCount \u003d Index.fromOneBased(getTypicalStudents().size());"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + studentCount.getOneBased();"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, studentCount);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        /* Case: select the middle card in the student list -\u003e selected */"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        Index middleIndex \u003d Index.fromOneBased(studentCount.getOneBased() / 2);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, select index within bounds of address book but out of bounds of student list"},{"lineNumber":56,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        //showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, select index within bounds of address book and student list -\u003e selected */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredStudentList().size());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":84,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":88,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        //deleteAllStudents();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        //assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased(),"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"     * {@code expectedSelectedCardIndex} of the selected student.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"     * 4. {@code Model}, {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"                MESSAGE_SELECT_STUDENT_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        int preExecutionSelectedCardIndex \u003d getStudentListPanel().getSelectedCardIndex();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        //assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"     * 4. {@code Model}, {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        //assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        //assertSelectedCardUnchanged();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        //assertCommandBoxShowsErrorStyle();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":24,"-":128}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private static final Predicate\u003cStudent\u003e PREDICATE_MATCHING_NO_STUDENTS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public static void setFilteredList(Model model, List\u003cStudent\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        Optional\u003cPredicate\u003cStudent\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(predicate.orElse(PREDICATE_MATCHING_NO_STUDENTS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static void setFilteredList(Model model, Student... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"     * Returns a predicate that evaluates to true if this {@code Student} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private static Predicate\u003cStudent\u003e getPredicateMatching(Student other) {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        return student -\u003e student.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":9,"-":30}},{"path":"src/test/java/systemtests/FindTagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.TAG_MATCHING_OWESMONEY;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"public class FindTagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    public void find() {"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"        /* Case: find a student in address book, command with leading spaces and trailing spaces"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"         * -\u003e 1 students found"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"        String command \u003d \"   \" + FindTagCommand.COMMAND_WORD + \" \" + TAG_MATCHING_OWESMONEY + \"   \";"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON); // Benson\u0027s tag is \"owesMoney\""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        /* Case: repeat previous find command where student list is displaying the tag we are finding"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"         * -\u003e 1 students found"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"         */"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + TAG_MATCHING_OWESMONEY;"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        /* Case: find student in address book, tag is same as name but of different case -\u003e 1 student found */"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" oWesMOney\";"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        /* Case: find student in address book, keyword is substring of tag -\u003e 0 students found */"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" owe\";"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"        /* Case: find student in address book, tag is substring of keyword -\u003e 0 students found */"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" owesMoneys\";"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        /* Case: find tag not in address book -\u003e 0 students found */"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" poor\";"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        /* Case: find phone number of student in address book -\u003e 0 students found */"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + BENSON.getPhone().value;"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"        /* Case: find address of student in address book -\u003e 0 students found */"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + BENSON.getAddress().value;"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        /* Case: find email of student in address book -\u003e 0 students found */"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"        command \u003d FindTagCommand.COMMAND_WORD + \" \" + BENSON.getEmail().value;"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        command \u003d \"FiNd owesMoney\";"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"     * box displays {@code Messages#MESSAGE_STUDENT_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"     * These verifications are done by"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"                MESSAGE_STUDENT_LISTED_OVERVIEW, expectedModel.getFilteredStudentList().size());"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"        executeCommand(command);"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"     * These verifications are done by"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"     * error style."},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"        executeCommand(command);"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":3,"demitycho":120,"-":4}},{"path":"src/test/java/seedu/address/ui/StudentCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStudent;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentCardHandle;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"public class StudentCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        Student studentWithNoTags \u003d new StudentBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        StudentCard studentCard \u003d new StudentCard(studentWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        uiPartRule.setUiPart(studentCard);"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        assertCardDisplay(studentCard, studentWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        Student studentWithTags \u003d new StudentBuilder().build();"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        studentCard \u003d new StudentCard(studentWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        uiPartRule.setUiPart(studentCard);"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        assertCardDisplay(studentCard, studentWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        Student student \u003d new StudentBuilder().build();"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        StudentCard studentCard \u003d new StudentCard(student, 0);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        // same student, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        StudentCard copy \u003d new StudentCard(student, 0);"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        assertTrue(studentCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertTrue(studentCard.equals(studentCard));"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        assertFalse(studentCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        assertFalse(studentCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        // different student, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        Student differentStudent \u003d new StudentBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        assertFalse(studentCard.equals(new StudentCard(differentStudent, 0)));"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        // same student, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        assertFalse(studentCard.equals(new StudentCard(student, 1)));"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"     * Asserts that {@code studentCard} displays the details of {@code expectedStudent} correctly and matches"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    private void assertCardDisplay(StudentCard studentCard, Student expectedStudent, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        StudentCardHandle studentCardHandle \u003d new StudentCardHandle(studentCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", studentCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        // verify student details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        assertCardDisplaysStudent(expectedStudent, studentCardHandle);"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":67,"-":5}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.AMY;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        Index index \u003d INDEX_FIRST;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, index, editedStudent);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last student in the list -\u003e last student restored. */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        /* Case: redo editing the last student in the list -\u003e last student edited again */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        model.updateStudent("},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"                getModel().getFilteredStudentList().get(INDEX_FIRST.getZeroBased()), editedStudent);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        /* Case: edit a student with new values same as existing values -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        Student studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(studentToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, index, editedStudent);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(studentToEdit).withTags().build();"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, index, editedStudent);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, edit index within bounds of address book and student list -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(studentToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, index, editedStudent);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        /* Case: filtered student list, edit index within bounds of address book but out of bounds of student list"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        showStudentsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        /* --------------------- Performing edit operation while a student card is selected ------------------------- */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        /* Case: selects first card in the student list, edit a student -\u003e edited, card selection remains unchanged but"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        showAllStudents();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        //selectStudent(index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"        // browser\u0027s url is updated to reflect the new student\u0027s name"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased()"},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased()"},{"lineNumber":162,"author":{"gitID":"yapni"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased()"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased()"},{"lineNumber":170,"author":{"gitID":"yapni"},"content":"                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased()"},{"lineNumber":174,"author":{"gitID":"yapni"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"yapni"},"content":""},{"lineNumber":176,"author":{"gitID":"yapni"},"content":"        /* Case: edit a student with new values same as another student\u0027s values -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"yapni"},"content":"        executeCommand(StudentUtil.getAddCommand(BOB));"},{"lineNumber":178,"author":{"gitID":"yapni"},"content":"        assertTrue(getModel().getAddressBook().getStudentList().contains(BOB));"},{"lineNumber":179,"author":{"gitID":"yapni"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":180,"author":{"gitID":"yapni"},"content":"        assertFalse(getModel().getFilteredStudentList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":183,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"yapni"},"content":"        /* Case: edit a student with new values same as another student\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"yapni"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Student, Index)} except that"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":195,"author":{"gitID":"yapni"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Student, Index)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent) {"},{"lineNumber":198,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(command, toEdit, editedStudent, null);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"     * 2. Asserts that the model related components are updated to reflect the student at index {@code toEdit} being"},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"     * updated to values specified {@code editedStudent}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent,"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"yapni"},"content":"            expectedModel.updateStudent("},{"lineNumber":214,"author":{"gitID":"yapni"},"content":"                    expectedModel.getFilteredStudentList().get(toEdit.getZeroBased()), editedStudent);"},{"lineNumber":215,"author":{"gitID":"yapni"},"content":"            expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":216,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException | StudentNotFoundException e) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":218,"author":{"gitID":"yapni"},"content":"                    \"editedStudent is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":222,"author":{"gitID":"yapni"},"content":"                String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent), expectedSelectedCardIndex);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":251,"author":{"gitID":"yapni"},"content":"        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            //assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":78,"-":204}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentCardHandle;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    public static void assertCardEquals(StudentCardHandle expectedCard, StudentCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"            assertEquals(expectedCard.getTagsColour(tag), actualCard.getTagsColour(tag)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedStudent}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public static void assertCardDisplaysStudent(Student expectedStudent, StudentCardHandle actualCard) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getName().fullName, actualCard.getName());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getPhone().value, actualCard.getPhone());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getEmail().value, actualCard.getEmail());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getAddress().value, actualCard.getAddress());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        assertTagEquals(expectedStudent, actualCard);"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"     * Checks if the tag colour matches the correct tag colour for {@code tagName}"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"     * @param expectedStudent"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"     * @param actualCard"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    private static void assertTagEquals(Student expectedStudent, StudentCardHandle actualCard) {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        List\u003cString\u003e expectedTags \u003d expectedStudent.getTags().stream()"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"                assertEquals(Arrays.asList(\"label\", getTagColourFor(tag)),"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"                        actualCard.getTagsColour(tag)));"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"    private static String getTagColourFor(String tagName) {"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"        switch(tagName) {"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"        case \"friends\":"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"            return \"cyan\";"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        case \"colleagues\":"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"        case \"neighbours\":"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"            return \"blue\";"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        case \"family\":"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"        case \"friend\":"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"            return \"yellow\";"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"        case \"classmates\":"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        case \"owesMoney\":"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"            return \"teal\";"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"        case \"husband\":"},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"            return \"olive\";"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        default :"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"            return \"\";"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"     * Asserts that the list in {@code studentListPanelHandle} displays the details of {@code students} correctly and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    public static void assertListMatching(StudentListPanelHandle studentListPanelHandle, Student... students) {"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        for (int i \u003d 0; i \u003c students.length;"},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"             i++) {"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"            assertCardDisplaysStudent(students[i], studentListPanelHandle.getStudentCardHandle(i));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     * Asserts that the list in {@code studentListPanelHandle} displays the details of {@code students} correctly and"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    public static void assertListMatching(StudentListPanelHandle studentListPanelHandle, List\u003cStudent\u003e students) {"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        assertListMatching(studentListPanelHandle, students.toArray(new Student[0]));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"     * Asserts the size of the list in {@code studentListPanelHandle} equals to {@code size}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"    public static void assertListSize(StudentListPanelHandle studentListPanelHandle, int size) {"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        int numberOfPeople \u003d studentListPanelHandle.getListSize();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":25,"samuelloh":46,"-":52}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.model.StudentInfoDisplayEvent;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.BrowserDisplayEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    private BrowserDisplayEvent browserEventStub;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    private StudentInfoDisplayEvent moreInfoEventStub;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        browserEventStub \u003d new BrowserDisplayEvent(new StudentCard(CARL, 0));"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        moreInfoEventStub \u003d new StudentInfoDisplayEvent(ALICE);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        // associated web page of a student"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        postNow(browserEventStub);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        URL expectedStudentUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + CARL.getAddress().urlstyle());"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"samuelloh":7,"-":37}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredStudentList());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"demitycho":2,"-":121}},{"path":"src/test/java/seedu/address/ui/StudentListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStudent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentCardHandle;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import guitests.guihandles.StudentListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class StudentListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private static final ObservableList\u003cStudent\u003e TYPICAL_STUDENTS \u003d"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"            FXCollections.observableList(getTypicalStudents());"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private StudentListPanelHandle studentListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        StudentListPanel studentListPanel \u003d new StudentListPanel(TYPICAL_STUDENTS);"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        uiPartRule.setUiPart(studentListPanel);"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        studentListPanelHandle \u003d new StudentListPanelHandle(getChildNode(studentListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"                StudentListPanelHandle.STUDENT_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_STUDENTS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            studentListPanelHandle.navigateToCard(TYPICAL_STUDENTS.get(i));"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            Student expectedStudent \u003d TYPICAL_STUDENTS.get(i);"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            StudentCardHandle actualCard \u003d studentListPanelHandle.getStudentCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            assertCardDisplaysStudent(expectedStudent, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        StudentCardHandle expectedCard \u003d studentListPanelHandle.getStudentCardHandle(INDEX_SECOND"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"                .getZeroBased());"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        StudentCardHandle selectedCard \u003d studentListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":35,"-":24}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"        String defaultConfigAsString \u003d \"App title : Codeducator\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"demitycho":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"        assertNotNull(AppUtil.getImage(\"/images/codeducator_32.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"demitycho":1,"-":46}},{"path":"src/test/java/seedu/address/commons/core/index/IndexTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertCreateOneBasedFailure(0);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCreateZeroBasedFailure(-1);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidZeroBasedIndex, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidOneBasedIndex, false);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            if (isZeroBased) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Index.fromZeroBased(invalidIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                Index.fromOneBased(invalidIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            fail(\"The expected IndexOutOfBoundsException was not thrown.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException ie) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // expected behaviour"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        assertFalse(fifthStudentIndex.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        assertFalse(fifthStudentIndex.equals(5.0f));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":86}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_LIST_ALL, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public void getFilteredStudentsList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        logic.getFilteredStudentList().remove(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"demitycho":2,"-":118}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.storage.XmlAdaptedDashboard;"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"import seedu.address.storage.XmlAdaptedMiscInfo;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.storage.XmlAdaptedStudent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    private static final File MISSING_STUDENT_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingStudentField.xml\");"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private static final File INVALID_STUDENT_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidStudentField.xml\");"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private static final File VALID_STUDENT_FILE \u003d new File(TEST_DATA_FOLDER + \"validStudent.xml\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    private static final String VALID_KEY \u003d \"ab1cd2\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"    private static final String VALID_SUBJECT \u003d \"English\";"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    private static final String VALID_FAVOURITE \u003d \"false\";"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"    private static final String VALID_PROFILEPICTUREPATH \u003d ProfilePicturePath.DEFAULT_PROFILE_PICTURE;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    private static final XmlAdaptedDashboard VALID_DASHBOARD \u003d new XmlAdaptedDashboard();"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"    private static final XmlAdaptedMiscInfo VALID_MISCELLANEOUS \u003d new XmlAdaptedMiscInfo();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        assertEquals(9, dataFromFile.getStudentList().size());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    public void xmlAdaptedStudentFromFile_fileWithMissingStudentField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"                MISSING_STUDENT_FIELD_FILE, XmlAdaptedStudentWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent(VALID_KEY,"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE,"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"                VALID_PROFILEPICTUREPATH, VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent, actualStudent);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"    public void xmlAdaptedStudentFromFile_fileWithInvalidStudentField_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"                INVALID_STUDENT_FIELD_FILE, XmlAdaptedStudentWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent(VALID_KEY,"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE,"},{"lineNumber":104,"author":{"gitID":"samuelloh"},"content":"                VALID_PROFILEPICTUREPATH, VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent, actualStudent);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"    public void xmlAdaptedStudentFromFile_fileWithValidStudent_validResult() throws Exception {"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"                VALID_STUDENT_FILE, XmlAdaptedStudentWithRootElement.class);"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent(VALID_KEY,"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE,"},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":"                VALID_PROFILEPICTUREPATH, VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedStudent, actualStudent);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"                builder.withStudent(new StudentBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"yapni"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedStudent}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"    @XmlRootElement(name \u003d \"student\")"},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"    private static class XmlAdaptedStudentWithRootElement extends XmlAdaptedStudent {}"},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":28,"samuelloh":9,"demitycho":4,"-":118}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentUtil;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        Student student \u003d new StudentBuilder().build();"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertEquals(new AddCommand(student), command);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        Student student \u003d new StudentBuilder().build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"                + StudentUtil.getStudentDetails(student));"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        assertEquals(new AddCommand(student), command);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST), command);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        Student student \u003d new StudentBuilder().build();"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"                + INDEX_FIRST.getOneBased() + \" \" + StudentUtil.getStudentDetails(student));"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"    public void parseCommand_findTag() throws Exception {"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"owesMoney\");"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand("},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"                FindTagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"        assertEquals(new FindTagCommand(new TagContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -f\") instanceof ListCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST), command);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":21,"demitycho":10,"-":129}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_SECOND;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_THIRD;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"                .build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":189,"author":{"gitID":"yapni"},"content":"                .build();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":196,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"        Index targetIndex \u003d INDEX_THIRD;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":28,"-":184}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":239}},{"path":"src/test/java/seedu/address/logic/parser/FindTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"public class FindTagCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    private FindTagCommandParser parser \u003d new FindTagCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"        assertParseFailure("},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"                parser, \"     \","},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        FindTagCommand expectedFindTagCommand \u003d"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"owesMoney\")));"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        assertParseSuccess(parser, \"friends owesMoney\", expectedFindTagCommand);"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        assertParseSuccess(parser, \" \\n friends \\n \\t owesMoney  \\t\", expectedFindTagCommand);"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":25,"-":11}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROGRAMMING_LANGUAGE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROGRAMMING_LANGUAGE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROGRAMMING_LANGUAGE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROGRAMMING_LANGUAGE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        Student expectedStudent \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"                + ADDRESS_DESC_BOB + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        // multiple subjects - last programmingLanguage accepted"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"                new AddCommand(expectedStudent));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        Student expectedStudentMultipleTags \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"                .withProgrammingLanguage(VALID_PROGRAMMING_LANGUAGE_BOB)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"                new AddCommand(expectedStudentMultipleTags));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        Student expectedStudent \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_AMY, new AddCommand(expectedStudent));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, expectedMessage);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, expectedMessage);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, expectedMessage);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, expectedMessage);"},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        // missing programmingLanguage prefix"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"                + VALID_PROGRAMMING_LANGUAGE_BOB, expectedMessage);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"                + VALID_PROGRAMMING_LANGUAGE_BOB, expectedMessage);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":154,"author":{"gitID":"yapni"},"content":"        // invalid programmingLanguage"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"                + INVALID_PROGRAMMING_LANGUAGE_DESC + TAG_DESC_HUSBAND + VALID_TAG_FRIEND,"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"                ProgrammingLanguage.MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"                + PROGRAMMING_LANGUAGE_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":45,"samuelloh":10,"-":113}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"\u003d Codeducator - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":":warning-caption: :warning:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W09-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team W09-B3`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d About Codeducator"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"Codeducator is an open source Command Line Interface (CLI) address book and scheduling desktop application."},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"We aim to provide a solution for private programming tutors to better manage their student contacts, tutoring schedule and track their students\u0027 learning progress."},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d How to Contribute"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"There are lots of ways to contribute to Codeducator: coding, testing or improving our build process and tools. This developer\u0027s guide provides information that will help you get started as a Codeducator contributor. Even if you are an experienced Codeducator developer, you will still find this guide to be useful to refer to. +"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"If you are ready to contribute, simply create a Pull Request (PR) on our main repository."},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"If you have found any bugs or have ideas to improve Codeducator, create an issue https://github.com/CS2103JAN2018-W09-B3/main/issues[here] or https://github.com/CS2103JAN2018-W09-B3/main/blob/master/docs/ContactUs.adoc[contact us] directly."},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"To contribute to Codeducator, you will need the following software:"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"* *JDK `1.8.0_60`* or later"},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"You can download the latest Java version https://java.com/en/download/[here]."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"* *IntelliJ* IDE"},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":50,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"You can download the latest Intellij IDE https://www.jetbrains.com/idea/download[here]."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"To set up the project in your computer, follow the steps below:"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":59,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":60,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":61,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":62,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":63,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":64,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":65,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":66,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"You will need to verify if your environment is set up correctly before you can start working on Codeducator. +"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"In Intellij,"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":76,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"You will need to configure and set up some tools we use before you can start making meaningful contributions to Codeducator."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":86,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":87,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":90,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":117,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":122,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"The *_Architecture Diagram_* given below explains the high-level design of the App. Given below is also a quick overview of each component."},{"lineNumber":125,"author":{"gitID":"yapni"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":127,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":130,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":135,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":146,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":147,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":152,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":157,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":160,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":165,"author":{"gitID":"demitycho"},"content":"image::SDforDeleteStudent.png[width\u003d\"800\"]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":168,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":173,"author":{"gitID":"demitycho"},"content":"image::SDforDeleteStudentEventHandling.png[width\u003d\"800\"]"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":176,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":184,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"demitycho"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":195,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":196,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":202,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":203,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":209,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":212,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":213,"author":{"gitID":"demitycho"},"content":".  The command execution can affect the `Model` (e.g. adding a student) and/or raise events."},{"lineNumber":214,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":219,"author":{"gitID":"demitycho"},"content":"image::DeleteStudentSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":222,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":225,"author":{"gitID":"samuelloh"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"yapni"},"content":".Structure of the Dashboard Class. This diagram shows finer details about the Dashboard Class."},{"lineNumber":228,"author":{"gitID":"yapni"},"content":"image::ModelComponentDashboardClassDiagram.png[width\u003d\"600\"]"},{"lineNumber":229,"author":{"gitID":"yapni"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":235,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":236,"author":{"gitID":"demitycho"},"content":"* exposes an unmodifiable `ObservableList\u003cStudent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":237,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":240,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":243,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":250,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":274,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":275,"author":{"gitID":"-"},"content":"----"},{"lineNumber":276,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":"}"},{"lineNumber":282,"author":{"gitID":"-"},"content":"----"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":285,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":286,"author":{"gitID":"-"},"content":"----"},{"lineNumber":287,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"}"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":"}"},{"lineNumber":302,"author":{"gitID":"-"},"content":"----"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"demitycho"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th student in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"demitycho"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new student."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":315,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"demitycho"},"content":"The user now decides that adding the student was a mistake, and decides to undo that action using `undo`."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":324,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":333,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1 \"options\u003d\"header\",]"},{"lineNumber":350,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":351,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":352,"author":{"gitID":"demitycho"},"content":".2+| Implementation of `UndoableCommand`"},{"lineNumber":353,"author":{"gitID":"demitycho"},"content":"| *Add a new abstract method `executeUndoableCommand()` (current choice)*"},{"lineNumber":354,"author":{"gitID":"demitycho"},"content":"| + : We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist. +"},{"lineNumber":355,"author":{"gitID":"demitycho"},"content":"   {empty} +"},{"lineNumber":356,"author":{"gitID":"demitycho"},"content":" - : Hard for new developers to understand the template pattern."},{"lineNumber":357,"author":{"gitID":"demitycho"},"content":"| Just override `execute()`"},{"lineNumber":358,"author":{"gitID":"demitycho"},"content":"| + : Does not involve the template pattern, easier for new developers to understand. +"},{"lineNumber":359,"author":{"gitID":"demitycho"},"content":"  {empty} +"},{"lineNumber":360,"author":{"gitID":"demitycho"},"content":"  - : Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"demitycho"},"content":".2+| How undo \u0026 redo executes"},{"lineNumber":363,"author":{"gitID":"demitycho"},"content":"| *Saves the entire address book. (current choice):*"},{"lineNumber":364,"author":{"gitID":"demitycho"},"content":"| + : Easy to implement. +"},{"lineNumber":365,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":366,"author":{"gitID":"demitycho"},"content":" - : May have performance issues in terms of memory usage."},{"lineNumber":367,"author":{"gitID":"demitycho"},"content":"| Individual command knows how to undo/redo by itself."},{"lineNumber":368,"author":{"gitID":"demitycho"},"content":"| + : Will use less memory (e.g. for `delete`, just save the student being deleted). +"},{"lineNumber":369,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":370,"author":{"gitID":"demitycho"},"content":" - : We must ensure that the implementation of each individual command are correct."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"demitycho"},"content":".2+| Type of commands that can be undone/redone +"},{"lineNumber":373,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":374,"author":{"gitID":"demitycho"},"content":"Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"demitycho"},"content":"| *Only include commands that modifies the address book (`add`, `clear`, `edit`). (current choice):*"},{"lineNumber":377,"author":{"gitID":"demitycho"},"content":"| + : We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost). +"},{"lineNumber":378,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":379,"author":{"gitID":"demitycho"},"content":" - : User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":380,"author":{"gitID":"demitycho"},"content":"| Include all commands."},{"lineNumber":381,"author":{"gitID":"demitycho"},"content":"| + : Might be more intuitive for the user. +"},{"lineNumber":382,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":383,"author":{"gitID":"demitycho"},"content":" - : User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":384,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":385,"author":{"gitID":"demitycho"},"content":".2+| Data structure to support the undo/redo commands"},{"lineNumber":386,"author":{"gitID":"demitycho"},"content":"| *Use separate stack for undo and redo (current choice)*"},{"lineNumber":387,"author":{"gitID":"demitycho"},"content":"| + : Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":388,"author":{"gitID":"demitycho"},"content":"  - : Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":389,"author":{"gitID":"demitycho"},"content":"| Use `HistoryManager` for undo/redo"},{"lineNumber":390,"author":{"gitID":"demitycho"},"content":"| + : We do not need to maintain a separate stack, and just reuse what is already in the codebase. +"},{"lineNumber":391,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":392,"author":{"gitID":"demitycho"},"content":" - : Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":393,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":394,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":401,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":402,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":407,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":408,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":409,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":412,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":417,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"demitycho"},"content":"A password must be implemented, used as secret key. Using `Java Cryptography Extension (JCE)` library, we can encrypt text in the xml files. +"},{"lineNumber":420,"author":{"gitID":"demitycho"},"content":"First we save as XML files, then we encrypt the text data in the XML to encrypted text, storing it somewhere, then deleting the XML file. +"},{"lineNumber":421,"author":{"gitID":"demitycho"},"content":"The reverse process is decrypting the encrypted data to XML, then reading data from there."},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d Features Implementation"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"yapni"},"content":"// tag::favourites[]"},{"lineNumber":428,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Favourites feature"},{"lineNumber":429,"author":{"gitID":"yapni"},"content":""},{"lineNumber":430,"author":{"gitID":"yapni"},"content":"The favourites feature allows users to remember/mark a student by adding them to favourites."},{"lineNumber":431,"author":{"gitID":"yapni"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"yapni"},"content":"To facilitate the favourite/unfavourite feature, an association with a new `Favourite` class is added to the `Student` class:"},{"lineNumber":435,"author":{"gitID":"yapni"},"content":""},{"lineNumber":436,"author":{"gitID":"yapni"},"content":".Structure of the atrributes of a `Student` in the Model component. The diagram shows that the `Student` class is associated with the `Favourite` class."},{"lineNumber":437,"author":{"gitID":"samuelloh"},"content":"image::StudentWithPLFeature.png[width\u003d\"500\"]"},{"lineNumber":438,"author":{"gitID":"yapni"},"content":""},{"lineNumber":439,"author":{"gitID":"yapni"},"content":"Since the implementation of the favourite and unfavourite command are similar, we will describe the implementation of the favourite command only."},{"lineNumber":440,"author":{"gitID":"yapni"},"content":""},{"lineNumber":441,"author":{"gitID":"yapni"},"content":"The following sequence diagram shows how the favourite command works:"},{"lineNumber":442,"author":{"gitID":"yapni"},"content":""},{"lineNumber":443,"author":{"gitID":"yapni"},"content":".Sequence diagram for the favourite command"},{"lineNumber":444,"author":{"gitID":"yapni"},"content":"image::FavouriteCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":445,"author":{"gitID":"yapni"},"content":""},{"lineNumber":446,"author":{"gitID":"yapni"},"content":". The `FavouriteCommandParser` parses the user input to obtain the target student index and constructs a new `FavouriteCommand` with this index."},{"lineNumber":447,"author":{"gitID":"yapni"},"content":". The logic portion of the favourite command will be executed by the `FavouriteCommand` class."},{"lineNumber":448,"author":{"gitID":"yapni"},"content":"To mark a `Student` object called \"studentToFavourite\" as favourite:"},{"lineNumber":449,"author":{"gitID":"yapni"},"content":".. The `preprocessUndoableCommand()` method calls `setTargetStudent()` which will set the \"studentToFavourite\" object based on the provided student index."},{"lineNumber":450,"author":{"gitID":"yapni"},"content":".. `preprocessUndoableCommand()` will then call the `createEditedStudent()` method which will create a `Student` object called \"editedStudent\". \"editedStudent\" will have the attributes of \"studentToFavourite\", except that its `Favourite` attribute will be set to \"true\". +"},{"lineNumber":451,"author":{"gitID":"yapni"},"content":"`createEditedStudent()` is implemented as such:"},{"lineNumber":452,"author":{"gitID":"yapni"},"content":""},{"lineNumber":453,"author":{"gitID":"yapni"},"content":"[source, java]"},{"lineNumber":454,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":455,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent() {"},{"lineNumber":456,"author":{"gitID":"yapni"},"content":"        assert targetStudent !\u003d null;"},{"lineNumber":457,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(target).withFavourite(true).build();"},{"lineNumber":458,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":459,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":460,"author":{"gitID":"yapni"},"content":"[start\u003d3]"},{"lineNumber":461,"author":{"gitID":"yapni"},"content":". In the `executeUndoableCommand()` method, `Model.updateStudent(Student, Student)` is called to replace \"studentToFavourite\" with \"editedStudent\" in the Address Book in-memory."},{"lineNumber":462,"author":{"gitID":"yapni"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":464,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1 \"options\u003d\"header\",]"},{"lineNumber":465,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":466,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":467,"author":{"gitID":"demitycho"},"content":".2+| Implementation of \u0027FavouriteCommand\u0027"},{"lineNumber":468,"author":{"gitID":"demitycho"},"content":"| *Add a `Favourite` attribute to `Student` (current choice)*"},{"lineNumber":469,"author":{"gitID":"demitycho"},"content":"| + : It is easy to mark a student as favourite since we can make use of the current `Model.updateStudent(Student, Student)` method by creating a copy of the target `Student` object, with the value of its `Favourite` attribute set to \"true\" +"},{"lineNumber":470,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":471,"author":{"gitID":"demitycho"},"content":"  - : Creating a copy of the `Student` object can be inefficient"},{"lineNumber":472,"author":{"gitID":"demitycho"},"content":"| Create a new `UniqueFavouriteStudentsList` that contains the list of students in favourites and store this list in the Address Book"},{"lineNumber":473,"author":{"gitID":"demitycho"},"content":"| + : Students that are currently in favourites can be managed more easily since there is a direct overview of which student is in favourites +"},{"lineNumber":474,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":475,"author":{"gitID":"demitycho"},"content":" - : Students in the `UniqueFavouriteStudentsList` have to be synced with the `UniqueStudentsList`. For example, we have to ensure that deleting a student in the `UniqueStudentList` deletes the student in the `UniqueFavouriteStudentsList` too"},{"lineNumber":476,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":477,"author":{"gitID":"yapni"},"content":""},{"lineNumber":478,"author":{"gitID":"yapni"},"content":"// end::favourites[]"},{"lineNumber":479,"author":{"gitID":"yapni"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"// tag::location[]"},{"lineNumber":481,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Location feature"},{"lineNumber":482,"author":{"gitID":"-"},"content":"Selecting a student using the `select` command will render their location on google maps."},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"The address of the student is extracted and converted in a string to be appended to the end of the `SEARCH_PAGE_URL` in the following function"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"----"},{"lineNumber":489,"author":{"gitID":"-"},"content":"    private void loadStudentPage(Student student) {"},{"lineNumber":490,"author":{"gitID":"-"},"content":"        Address location \u003d student.getAddress();"},{"lineNumber":491,"author":{"gitID":"-"},"content":"        String append \u003d location.urlstyle();"},{"lineNumber":492,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + append);"},{"lineNumber":493,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":494,"author":{"gitID":"-"},"content":"----"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"An example is provided below when `select 1` is entered as a command:"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"image::location_ss.png[width\u003d\"600\"]"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1 \"options\u003d\"header\",]"},{"lineNumber":503,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":504,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":505,"author":{"gitID":"demitycho"},"content":".2+| Implementation of displaying student locations"},{"lineNumber":506,"author":{"gitID":"demitycho"},"content":"| *Display it on the embedded browser (current choice)*"},{"lineNumber":507,"author":{"gitID":"demitycho"},"content":"| + : Easy to implement, simply alter the default webpage +"},{"lineNumber":508,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":509,"author":{"gitID":"demitycho"},"content":" - : Might not be able to display student information and location simultaneously"},{"lineNumber":510,"author":{"gitID":"demitycho"},"content":"| Creating a new window to display the location"},{"lineNumber":511,"author":{"gitID":"demitycho"},"content":"| + : This would allow concurrent display of locations of many students +"},{"lineNumber":512,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":513,"author":{"gitID":"demitycho"},"content":"  - : the UI would be messy and user has to navigate between 2 different windows"},{"lineNumber":514,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":515,"author":{"gitID":"-"},"content":"// end::location[]"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":518,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Programming Language Feature"},{"lineNumber":519,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":520,"author":{"gitID":"samuelloh"},"content":"The `programmingLanguage` field is part of the student model and helps to keep track of what programming language he/she is being taught with."},{"lineNumber":521,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"samuelloh"},"content":"The programming language feature involves having an additional class to the student model called `ProgrammingLanguage`."},{"lineNumber":525,"author":{"gitID":"samuelloh"},"content":"It stores the name of the programming language currently being taught to each student as a string."},{"lineNumber":526,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":527,"author":{"gitID":"samuelloh"},"content":"[NOTE]"},{"lineNumber":528,"author":{"gitID":"samuelloh"},"content":"The string for `ProgrammingLanguage` must contain visible characters."},{"lineNumber":529,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":530,"author":{"gitID":"samuelloh"},"content":"image::StudentWithPLFeature.png[width\u003d\"300\"]"},{"lineNumber":531,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":532,"author":{"gitID":"samuelloh"},"content":"As can be seen from the diagram, the field `ProgrammingLanuage` has been added to the student model."},{"lineNumber":533,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":534,"author":{"gitID":"samuelloh"},"content":"Concerning the Logic component, when the `add` command or `edit` command is called,"},{"lineNumber":535,"author":{"gitID":"samuelloh"},"content":"a `Student` object with attributes including `ProgrammingLanguage` will be created/edited depending on which command was entered."},{"lineNumber":536,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":537,"author":{"gitID":"samuelloh"},"content":"For example, adding a student would have the command string parsed for arguments in such a way:"},{"lineNumber":538,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":539,"author":{"gitID":"samuelloh"},"content":"[source, java]"},{"lineNumber":540,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":541,"author":{"gitID":"samuelloh"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":542,"author":{"gitID":"samuelloh"},"content":"        // ...Tokenize the String Input..."},{"lineNumber":543,"author":{"gitID":"samuelloh"},"content":"        // ...Check if prefixes are present..."},{"lineNumber":544,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":545,"author":{"gitID":"samuelloh"},"content":"            // ...Parses the other fields required of a Student..."},{"lineNumber":546,"author":{"gitID":"samuelloh"},"content":"            ProgrammingLanguage programmingLanguage \u003d ParserUtil.parseSubject(argMultimap"},{"lineNumber":547,"author":{"gitID":"samuelloh"},"content":"                    .getValue(PREFIX_PROGRAMMING_LANGUAGE)).get();"},{"lineNumber":548,"author":{"gitID":"samuelloh"},"content":"            Student student \u003d new Student(name, phone, email, address, programmingLanguage, tagList);"},{"lineNumber":549,"author":{"gitID":"samuelloh"},"content":"            return new AddCommand(student);"},{"lineNumber":550,"author":{"gitID":"samuelloh"},"content":"\t\t} catch (IllegalValueException ive) {"},{"lineNumber":551,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":552,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":553,"author":{"gitID":"samuelloh"},"content":"\t}"},{"lineNumber":554,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":555,"author":{"gitID":"samuelloh"},"content":"// tag::programmingLanguage[]"},{"lineNumber":556,"author":{"gitID":"samuelloh"},"content":"A new student would then be added. On the other hand, editing a student\u0027s programming language will be done by creating an edited student in such a way:"},{"lineNumber":557,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":558,"author":{"gitID":"samuelloh"},"content":"[source, java]"},{"lineNumber":559,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":560,"author":{"gitID":"samuelloh"},"content":"\tprivate static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"},{"lineNumber":561,"author":{"gitID":"samuelloh"},"content":"        assert studentToEdit !\u003d null;"},{"lineNumber":562,"author":{"gitID":"samuelloh"},"content":"        // ...Set other attributes of the prospective newly edited student..."},{"lineNumber":563,"author":{"gitID":"samuelloh"},"content":"        ProgrammingLanguage updatedProgrammingLanguage \u003d editStudentDescriptor.getProgrammingLanguage();"},{"lineNumber":564,"author":{"gitID":"samuelloh"},"content":"        return new Student(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedProgrammingLanguage,"},{"lineNumber":565,"author":{"gitID":"samuelloh"},"content":"                updatedTags);"},{"lineNumber":566,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":567,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":568,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":569,"author":{"gitID":"samuelloh"},"content":"The editedStudent will have the new programming language attribute and will hence be used to replace in the Address Book in-memory."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1 \"options\u003d\"header\",]"},{"lineNumber":574,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":575,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":576,"author":{"gitID":"demitycho"},"content":".2+| *How to store `ProgrammingLanguage` for a `Student`*"},{"lineNumber":577,"author":{"gitID":"demitycho"},"content":"| *Store as an attribute of Student. (current choice)*"},{"lineNumber":578,"author":{"gitID":"demitycho"},"content":"| + : Easy to keep track of as well as modify.  +"},{"lineNumber":579,"author":{"gitID":"samuelloh"},"content":"{empty} +"},{"lineNumber":580,"author":{"gitID":"demitycho"},"content":"- : Coupling increases as more classes (`ProgrammingLanguage` and `Student`) are associated with each other."},{"lineNumber":581,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":582,"author":{"gitID":"samuelloh"},"content":"| Store as a separate list and have each student index in the UniqueStudentsList be mapped to each item in the list."},{"lineNumber":583,"author":{"gitID":"demitycho"},"content":"| + : Less coupling so less need to refactor code +"},{"lineNumber":584,"author":{"gitID":"samuelloh"},"content":"{empty} +"},{"lineNumber":585,"author":{"gitID":"demitycho"},"content":"- : Might be messier to implement, especially if the UniqueStudentsList have it\u0027s students swapping indexes."},{"lineNumber":586,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":587,"author":{"gitID":"demitycho"},"content":".2+| *What command to add `ProgrammingLanguage` to `Student`*"},{"lineNumber":588,"author":{"gitID":"demitycho"},"content":"| *Implement it through the existing `add` command. (current choice)*"},{"lineNumber":589,"author":{"gitID":"demitycho"},"content":"| + : Intuitive and the user does not have to learn an additional command +"},{"lineNumber":590,"author":{"gitID":"samuelloh"},"content":"{empty} +"},{"lineNumber":591,"author":{"gitID":"demitycho"},"content":"- : User will have to type a longer string for add command to include the programming language used by the student."},{"lineNumber":592,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":593,"author":{"gitID":"samuelloh"},"content":"| Implement it as a new command."},{"lineNumber":594,"author":{"gitID":"demitycho"},"content":"| + : User will be able to add or modify `ProgrammingLanguage` one or possibly even a few students at their own discretion. +"},{"lineNumber":595,"author":{"gitID":"samuelloh"},"content":"{empty} +"},{"lineNumber":596,"author":{"gitID":"demitycho"},"content":"- : User will have to learn a new specific command and might also be slightly difficult to implement."},{"lineNumber":597,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":598,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":599,"author":{"gitID":"samuelloh"},"content":"// end::programmingLanguage[]"},{"lineNumber":600,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":601,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":602,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Profile Page feature"},{"lineNumber":603,"author":{"gitID":"samuelloh"},"content":"The profile page feature allows the user to view the full information of contacts(students) kept in their data. This page has each student\u0027s main info, miscellaneous info, and their profle picture."},{"lineNumber":604,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":606,"author":{"gitID":"samuelloh"},"content":"Users will also be able to edit the miscellaneous information of a student as well as his/her profile picture. The profile picture is changed by providing a file path to the actual picture file."},{"lineNumber":607,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":608,"author":{"gitID":"samuelloh"},"content":"[NOTE]"},{"lineNumber":609,"author":{"gitID":"samuelloh"},"content":"The picture file to be changed to must be a valid and existing file with extensions of `.png` or `.jpg`"},{"lineNumber":610,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":611,"author":{"gitID":"samuelloh"},"content":"The following diagram shows the student model including the primary attributes as well as the miscellaneous information attributes."},{"lineNumber":612,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":613,"author":{"gitID":"samuelloh"},"content":"image::StudentWithMiscInfoDiagram.png[width\u003d\"300\"]"},{"lineNumber":614,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":615,"author":{"gitID":"samuelloh"},"content":"When a student is added by the `addCommand`, the `MiscellaneousInfo` and `ProfilePicturePath` of the student will be set to these default values:"},{"lineNumber":616,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":617,"author":{"gitID":"samuelloh"},"content":"* Allergies, NextOfKinName, Remarks will be set to `Not updated`."},{"lineNumber":618,"author":{"gitID":"samuelloh"},"content":"* NextOfKinPhone will be set to `000`."},{"lineNumber":619,"author":{"gitID":"samuelloh"},"content":"* ProfilePicturePath will be set to the path of a profile photo placeholder within the app."},{"lineNumber":620,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":621,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":622,"author":{"gitID":"samuelloh"},"content":"This feature revolves mainly around 3 commands:"},{"lineNumber":623,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":624,"author":{"gitID":"samuelloh"},"content":". `moreInfo` : Shows the actual profile page on the web browser."},{"lineNumber":625,"author":{"gitID":"samuelloh"},"content":". `editMisc` : Edits the miscellaneous information of a student."},{"lineNumber":626,"author":{"gitID":"samuelloh"},"content":". `editPicture` : Edits the profile picture of a student with a valid picture file(refer to note above). The user will have to provide the filepath to this file."},{"lineNumber":627,"author":{"gitID":"samuelloh"},"content":"// tag::profilePage1[]"},{"lineNumber":628,"author":{"gitID":"samuelloh"},"content":"[large]*`moreInfo` Command*"},{"lineNumber":629,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":630,"author":{"gitID":"samuelloh"},"content":"For the command `moreInfo`, the model manager calls upon the data storage (addressbook) to raise an event for the Browser Panel to display the profile page of a student."},{"lineNumber":631,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":632,"author":{"gitID":"samuelloh"},"content":"[WARNING]"},{"lineNumber":633,"author":{"gitID":"samuelloh"},"content":"The `moreInfo` command *cannot* function if there is no real existing XML data of students. Thus, the sample student data provided at the initial start up will not work with this command. A warning will be mentioned if the command is called without existing data."},{"lineNumber":634,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":635,"author":{"gitID":"samuelloh"},"content":"The code below shows how the the method is called with the parameter of the required `Student` functions:"},{"lineNumber":636,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":637,"author":{"gitID":"samuelloh"},"content":"[source, java]"},{"lineNumber":638,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":639,"author":{"gitID":"samuelloh"},"content":"\tpublic void displayStudentDetailsOnBrowserPanel(Student target) throws StudentNotFoundException,"},{"lineNumber":640,"author":{"gitID":"samuelloh"},"content":"            StorageFileMissingException {"},{"lineNumber":641,"author":{"gitID":"demitycho"},"content":"        addressBook.checkForStudentInAddressBook(target);"},{"lineNumber":642,"author":{"gitID":"samuelloh"},"content":"        checkIfStorageFileExists();"},{"lineNumber":643,"author":{"gitID":"samuelloh"},"content":"        indicateRequiredStudentIndexChange(filteredStudents.indexOf(target));"},{"lineNumber":644,"author":{"gitID":"samuelloh"},"content":"        indicateBrowserPanelToDisplayStudent(target);"},{"lineNumber":645,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":646,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":647,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":648,"author":{"gitID":"samuelloh"},"content":"The method `checkIfStorageFileExists()` checks if there is any real XML data of students at the moment. If none exists, then an exception is thrown and the command will not perform (as mentioned in the note above)."},{"lineNumber":649,"author":{"gitID":"samuelloh"},"content":"The method `indicateRequiredStudentIndexChange(Index indexOfStudent)` calls the modifying of XML data of which student is needed to display his/her profile page. This is because the HTML files"},{"lineNumber":650,"author":{"gitID":"samuelloh"},"content":"can only read data from XML files and hence, an external XML file containing the index of the student whose profile page is required to be shown is needed."},{"lineNumber":651,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":652,"author":{"gitID":"samuelloh"},"content":"Lastly, indicating the browser panel to display a student will raise a `StudentInfoDisplayEvent` which is handled in the `BrowserPanel` with the following code:"},{"lineNumber":653,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":654,"author":{"gitID":"samuelloh"},"content":"[source, java]"},{"lineNumber":655,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":656,"author":{"gitID":"samuelloh"},"content":"\tprivate void handleStudentInfoDisplayEvent(StudentInfoDisplayEvent event) {"},{"lineNumber":657,"author":{"gitID":"samuelloh"},"content":"\t\t//... logging process..."},{"lineNumber":658,"author":{"gitID":"samuelloh"},"content":"\t\tloadStudentInfoPage();"},{"lineNumber":659,"author":{"gitID":"samuelloh"},"content":"\t\t//... raising event to switch panels..."},{"lineNumber":660,"author":{"gitID":"samuelloh"},"content":"\t}"},{"lineNumber":661,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":662,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":663,"author":{"gitID":"samuelloh"},"content":"The diagram below shows how the event is handled in the `BrowserPanel` :"},{"lineNumber":664,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":665,"author":{"gitID":"samuelloh"},"content":"image::moreInfoCommandSD.png[width:400]"},{"lineNumber":666,"author":{"gitID":"samuelloh"},"content":"//end::profilePage1[]"},{"lineNumber":667,"author":{"gitID":"samuelloh"},"content":"[large]*`editMisc` Command*"},{"lineNumber":668,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":669,"author":{"gitID":"samuelloh"},"content":"For the command `editMisc`, this is similar to the edit function, except it takes on different optional parameters. These are [ALLERGIES], [NEXTOFKINNAME], [NEXTOFKINPHONE], [REMARKS]."},{"lineNumber":670,"author":{"gitID":"samuelloh"},"content":"The code snippet below shows how the `studentToEdit` is created when the `editMisc command` is called."},{"lineNumber":671,"author":{"gitID":"samuelloh"},"content":"[source, java]"},{"lineNumber":672,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":673,"author":{"gitID":"samuelloh"},"content":"\tprivate static Student createEditedStudent(Student studentToEdit, EditMiscDescriptor editMiscDescriptor) {"},{"lineNumber":674,"author":{"gitID":"samuelloh"},"content":"\t\tassert studentToEdit !\u003d null;"},{"lineNumber":675,"author":{"gitID":"samuelloh"},"content":"\t\t//... main information of the student is copied over..."},{"lineNumber":676,"author":{"gitID":"samuelloh"},"content":"\t\tAllergies allergies \u003d editMiscDescriptor.getAllergies()"},{"lineNumber":677,"author":{"gitID":"samuelloh"},"content":"\t\t\t\t.orElse(studentToEdit.getMiscellaneousInfo().getAllergies());"},{"lineNumber":678,"author":{"gitID":"samuelloh"},"content":"\t\tNextOfKinName nextOfKinName \u003d editMiscDescriptor.getNextOfKinName()"},{"lineNumber":679,"author":{"gitID":"samuelloh"},"content":"\t\t\t\t.orElse(studentToEdit.getMiscellaneousInfo().getNextOfKinName());"},{"lineNumber":680,"author":{"gitID":"samuelloh"},"content":"\t\tNextOfKinPhone nextOfKinPhone \u003d editMiscDescriptor.getNextOfKinPhone()"},{"lineNumber":681,"author":{"gitID":"samuelloh"},"content":"\t\t\t\t.orElse(studentToEdit.getMiscellaneousInfo().getNextOfKinPhone());"},{"lineNumber":682,"author":{"gitID":"samuelloh"},"content":"\t\tRemarks remarks \u003d editMiscDescriptor.getRemarks()"},{"lineNumber":683,"author":{"gitID":"samuelloh"},"content":"\t\t\t\t.orElse(studentToEdit.getMiscellaneousInfo().getRemarks());"},{"lineNumber":684,"author":{"gitID":"samuelloh"},"content":"\t\tMiscellaneousInfo miscellaneousInfo \u003d new MiscellaneousInfo(allergies, nextOfKinName, nextOfKinPhone, remarks);"},{"lineNumber":685,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":686,"author":{"gitID":"samuelloh"},"content":"\t\treturn new Student(uniqueKey, name, phone, email, address,"},{"lineNumber":687,"author":{"gitID":"samuelloh"},"content":"\t\t\t\tprogrammingLanguage, tags, isFavourite, dashboard, profilePicturePath, miscellaneousInfo);"},{"lineNumber":688,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":689,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":690,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":691,"author":{"gitID":"samuelloh"},"content":"After that, the student will be updated with the new details for his/her miscellaneous information."},{"lineNumber":692,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":693,"author":{"gitID":"samuelloh"},"content":"//tag::profilePage2[]"},{"lineNumber":694,"author":{"gitID":"samuelloh"},"content":"[large]*`editPicture` Command*"},{"lineNumber":695,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":696,"author":{"gitID":"samuelloh"},"content":"For the command `editPicture`, the student\u0027s index will have to be provided by the user again. The next parameter for this is the required file path of the picture file."},{"lineNumber":697,"author":{"gitID":"samuelloh"},"content":"This can be in the form of an absolute file path (starting from a hardrive like `C:/Users/.../picture.png`) or relative to the folder that the jar application is in."},{"lineNumber":698,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":699,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":700,"author":{"gitID":"samuelloh"},"content":"This command uses the similar method of the `edit` command and the `editMisc` command where a new `Student` with the edited details is created to overwrite the current existing student."},{"lineNumber":701,"author":{"gitID":"samuelloh"},"content":"In this case, the `ProfilePicturePath` of the student is edited. When this command is called, a `ProfilePictureChangeEvent` will be raised and the Storage Manager will call a method to save the data of the profile picture from its original location to a location in the jar folder."},{"lineNumber":702,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":703,"author":{"gitID":"samuelloh"},"content":"The code below shows how the saving of the file is done:"},{"lineNumber":704,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":705,"author":{"gitID":"samuelloh"},"content":"[source, java]"},{"lineNumber":706,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":707,"author":{"gitID":"samuelloh"},"content":"\tpublic void saveProfilePicture(ProfilePicturePath pathToChangeTo, Student student) throws IOException {"},{"lineNumber":708,"author":{"gitID":"samuelloh"},"content":"\t\t//... ensuring that the picture\u0027s filepath exists"},{"lineNumber":709,"author":{"gitID":"samuelloh"},"content":"\t\t//... getting the extension of the provided filepath of the picture"},{"lineNumber":710,"author":{"gitID":"samuelloh"},"content":"\t\tdeleteExistingProfilePicture(studentPictureFilePath);"},{"lineNumber":711,"author":{"gitID":"samuelloh"},"content":"\t\tPath studentPictureFilePathWithExtension \u003d Paths.get(studentPictureFilePath.toString() + extension);"},{"lineNumber":712,"author":{"gitID":"samuelloh"},"content":"\t\tlogger.fine(\"Attempting to write to data file: data/\" + student.getUniqueKey().toString());"},{"lineNumber":713,"author":{"gitID":"samuelloh"},"content":"\t\tFiles.copy(newPath, studentPictureFilePathWithExtension);"},{"lineNumber":714,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":715,"author":{"gitID":"samuelloh"},"content":"----"},{"lineNumber":716,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":717,"author":{"gitID":"samuelloh"},"content":"Thus, the HTML file for displaying the student\u0027s profile page will be able to show the new image, which is copied to the local jar folder."},{"lineNumber":718,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":719,"author":{"gitID":"samuelloh"},"content":"The following sequence diagram illustrates the process of calling the `editPicture` command."},{"lineNumber":720,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":721,"author":{"gitID":"samuelloh"},"content":".Sequence diagram showing the important details of the process of the `editPicture` command"},{"lineNumber":722,"author":{"gitID":"samuelloh"},"content":"image::editPictureCommandSD.png[width:600]"},{"lineNumber":723,"author":{"gitID":"samuelloh"},"content":"//end::profilePage2[]"},{"lineNumber":724,"author":{"gitID":"samuelloh"},"content":"As seen from the above diagram, the `createFinalEditedStudent()` method ensures that the correct profile picture path is saved onto the student\u0027s XML data in order to be read by the HTML file which displays the student profile page."},{"lineNumber":725,"author":{"gitID":"samuelloh"},"content":"The method `createEditedStudent` creates the student wi"},{"lineNumber":726,"author":{"gitID":"yapni"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":728,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":729,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1 \"options\u003d\"header\",]"},{"lineNumber":730,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":731,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":732,"author":{"gitID":"demitycho"},"content":".2+|*Displaying and styling the profile page of a student*"},{"lineNumber":733,"author":{"gitID":"demitycho"},"content":"| *Have it as a JavaScript function in the HTML file of the student\u0027s profile page. | + Able to directly read the XML data of students from the file. (current choice)* +"},{"lineNumber":734,"author":{"gitID":"samuelloh"},"content":"{empty} +"},{"lineNumber":735,"author":{"gitID":"samuelloh"},"content":"- Have to export the required files and folder out of the jar file as the JavaScript is unable to retrieve files outside of the Jar folder."},{"lineNumber":736,"author":{"gitID":"samuelloh"},"content":"|  Have it as a JavaFX file."},{"lineNumber":737,"author":{"gitID":"demitycho"},"content":"| + : Able to read the student\u0027s data from the UniqueStudentList. +"},{"lineNumber":738,"author":{"gitID":"samuelloh"},"content":"{empty} +"},{"lineNumber":739,"author":{"gitID":"demitycho"},"content":"- : Might be more difficult and messy to implement in code."},{"lineNumber":740,"author":{"gitID":"demitycho"},"content":".2+|*Editing the profile picture*"},{"lineNumber":741,"author":{"gitID":"demitycho"},"content":"| *Copy the picture file into the local jar directory. (current choice)*"},{"lineNumber":742,"author":{"gitID":"demitycho"},"content":"| + : Ensures that the picture can still be loaded even when the original picture file is deleted. +"},{"lineNumber":743,"author":{"gitID":"samuelloh"},"content":"{empty} +"},{"lineNumber":744,"author":{"gitID":"samuelloh"},"content":"- Requires more code to copy the files over and ensure their validity"},{"lineNumber":745,"author":{"gitID":"samuelloh"},"content":"| Read from the direct location of the original picture file."},{"lineNumber":746,"author":{"gitID":"demitycho"},"content":"| + : Less code of copying is required and any modifications to the original photo is immediately updated. +"},{"lineNumber":747,"author":{"gitID":"samuelloh"},"content":"{empty} +"},{"lineNumber":748,"author":{"gitID":"demitycho"},"content":"- : If the picture is deleted or corrupted, the profile picture would not be able to display."},{"lineNumber":749,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":750,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":751,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":752,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":753,"author":{"gitID":"demitycho"},"content":"// tag::schedule[]"},{"lineNumber":754,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Schedule feature"},{"lineNumber":755,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":756,"author":{"gitID":"demitycho"},"content":"To get better control of one\u0027s weekly schedule, we will now attach a component called `Schedule` to `Model`."},{"lineNumber":757,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":758,"author":{"gitID":"demitycho"},"content":"At startup, a new `Schedule` object is instantiated in `ModelManager`."},{"lineNumber":759,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":760,"author":{"gitID":"demitycho"},"content":"A `Schedule` has a `LessonList`, it contains an `ObservableList\u003cLesson\u003e` internalList attribute, which stores all the `Lesson` objects that describes your schedule."},{"lineNumber":761,"author":{"gitID":"demitycho"},"content":"The UI is bounded to this `LessonList` so that it can automatically update when data changes."},{"lineNumber":762,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":763,"author":{"gitID":"demitycho"},"content":"A `Lesson` has a `UniqueKey` attribute, a `Day` attribute, a starting `TIME START_TIME` and an ending `TIME END_TIME` attribute."},{"lineNumber":764,"author":{"gitID":"demitycho"},"content":"`Lesson` objects are created by the `addLesson` command."},{"lineNumber":765,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":766,"author":{"gitID":"demitycho"},"content":"image::LessonClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":767,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":768,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of commands that edit your Schedule"},{"lineNumber":769,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":770,"author":{"gitID":"demitycho"},"content":"Commands that modify the schedule are `addLesson` and `deleteLesson`."},{"lineNumber":771,"author":{"gitID":"demitycho"},"content":"Editing a student\u0027s name will edit the name of the event in the schedule."},{"lineNumber":772,"author":{"gitID":"demitycho"},"content":"Deleting a student will also delete all his lessons in the schedule."},{"lineNumber":773,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":774,"author":{"gitID":"demitycho"},"content":"* Students have the `UniqueKey` field, which we will now use in `Lesson` to create a relation to Student objects."},{"lineNumber":775,"author":{"gitID":"demitycho"},"content":"* A `Lesson` object called `newLesson` will be created by `ModelManager.addLesson(UniqueKey key, Day day, Time startTime, Time endTime)`, which is implemented as such:"},{"lineNumber":776,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":777,"author":{"gitID":"demitycho"},"content":"[source, java]"},{"lineNumber":778,"author":{"gitID":"demitycho"},"content":"----"},{"lineNumber":779,"author":{"gitID":"demitycho"},"content":"    public void addLesson(Student studentToAddLesson, Day day, Time startTime, Time endTime) {"},{"lineNumber":780,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(studentToAddLesson, day, startTime, endTime);"},{"lineNumber":781,"author":{"gitID":"demitycho"},"content":"        UniqueKey studentKey \u003d studentToAddLesson.getUniqueKey();"},{"lineNumber":782,"author":{"gitID":"demitycho"},"content":"        Lesson newLesson \u003d new Lesson(studentKey, day, startTime, endTime);"},{"lineNumber":783,"author":{"gitID":"demitycho"},"content":"        schedule.addLesson(newLesson);"},{"lineNumber":784,"author":{"gitID":"demitycho"},"content":"        indicateScheduleChanged();"},{"lineNumber":785,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":786,"author":{"gitID":"demitycho"},"content":"----"},{"lineNumber":787,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":788,"author":{"gitID":"demitycho"},"content":"A sequence diagram of the result can be seen from the below diagram."},{"lineNumber":789,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":790,"author":{"gitID":"demitycho"},"content":".Sequence Diagram of `addLesson` command"},{"lineNumber":791,"author":{"gitID":"demitycho"},"content":"image::AddLessonSequenceDiagram.png[width\u003d\u0027800\u0027]"},{"lineNumber":792,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":793,"author":{"gitID":"demitycho"},"content":"The student will be selected by the Index of the last seen list of students."},{"lineNumber":794,"author":{"gitID":"demitycho"},"content":"The UniqueKey is then retrieved from the Student. A new `Lesson` will now be added for that student at the specific `Day`, `startTime` and `endTime`, associated with the Student by the `key`"},{"lineNumber":795,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":796,"author":{"gitID":"demitycho"},"content":"No `Lesson` objects can be created for students not in contact list."},{"lineNumber":797,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":798,"author":{"gitID":"demitycho"},"content":"[NOTE]"},{"lineNumber":799,"author":{"gitID":"demitycho"},"content":"If you have a future implementation that requires the addition of a new attribute in the `Schedule` class, you must take note of updating the `Model.addLesson(Student, Day, Time START_TIME, Time END_TIME)` method to reflect the new attribute."},{"lineNumber":800,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":801,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of viewing your Schedule"},{"lineNumber":802,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":803,"author":{"gitID":"demitycho"},"content":"The `schedule` command displays of a student’s dashboard. The `schedule` command is implemented this way:"},{"lineNumber":804,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":805,"author":{"gitID":"demitycho"},"content":".Sequence Diagram of `schedule` command"},{"lineNumber":806,"author":{"gitID":"demitycho"},"content":"image::ScheduleCommandSequenceDiagram.png[width\u003d\u0027800\u0027]"},{"lineNumber":807,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":808,"author":{"gitID":"demitycho"},"content":"From the following diagram,"},{"lineNumber":809,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":810,"author":{"gitID":"demitycho"},"content":". `InfoPanel` handles the `showScheduleEvent` event. It changes the view to the `CalendarPanel`, hiding `DashboardPanel` and `BrowserPanel`."},{"lineNumber":811,"author":{"gitID":"demitycho"},"content":". `InfoPanel` raises the `showScheduleEvent` which is also handled by `CalendarPanel` to display the lessons of the student in the schedule."},{"lineNumber":812,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":813,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":815,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1\"options\u003d\"header\",]"},{"lineNumber":816,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":817,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":818,"author":{"gitID":"demitycho"},"content":".2+| Implementation of `Lesson` in `Schedule`"},{"lineNumber":819,"author":{"gitID":"demitycho"},"content":"| *`Schedule` contains `Lesson` objects, schedule is made up of only one layer, with attributes directly attached to `Lesson` (current choice)*"},{"lineNumber":820,"author":{"gitID":"demitycho"},"content":"| + : It is easier implement, just add `Lesson` to a `Schedule`, which is a list of `Lessons` +"},{"lineNumber":821,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":822,"author":{"gitID":"demitycho"},"content":" - : Results in more coupling, attributes could have been furthur separated out. It is inefficient to search by `Day`. Searching for empty slot requires linear searching."},{"lineNumber":823,"author":{"gitID":"demitycho"},"content":"| `Lesson` contains two layers of classes, `Day` is attached to `Schedule` and `Lesson` is attached to `Day`"},{"lineNumber":824,"author":{"gitID":"demitycho"},"content":"| + : Less coupling and more cohesive design +"},{"lineNumber":825,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":826,"author":{"gitID":"demitycho"},"content":" - : Much harder to implement and gets overly complicated"},{"lineNumber":827,"author":{"gitID":"demitycho"},"content":" .2+| Data structure of `Schedule`"},{"lineNumber":828,"author":{"gitID":"demitycho"},"content":" | *Relational database related by a uniquekey attribute (current choice)*"},{"lineNumber":829,"author":{"gitID":"demitycho"},"content":" | + : Much better normalised design. Modifying contacts list in any way will not affect the Schedule database. +"},{"lineNumber":830,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":831,"author":{"gitID":"demitycho"},"content":" - : Another layer of abstraction. Harder to implement"},{"lineNumber":832,"author":{"gitID":"demitycho"},"content":" | Adding Student objects to lessons in schedule"},{"lineNumber":833,"author":{"gitID":"demitycho"},"content":" | + : Easier implementation. +"},{"lineNumber":834,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":835,"author":{"gitID":"demitycho"},"content":" - : Changes in contacts list data will require more workarounds to modify schedule data."},{"lineNumber":836,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":837,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":838,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":839,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Google Service Integration"},{"lineNumber":840,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":841,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":842,"author":{"gitID":"demitycho"},"content":"To sync with Google Contacts and Google Calendar, a `GServiceManager` class is implemented to handle the 2 services."},{"lineNumber":843,"author":{"gitID":"demitycho"},"content":"`GServiceManager` contains a `GContactsService` and `GCalendarService` objects. `GServiceManager.synchronize` calls `GContactsService.synchronize` and"},{"lineNumber":844,"author":{"gitID":"demitycho"},"content":"`GCalendarService.synchronize`"},{"lineNumber":845,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":846,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d\u003d Prerequisites/Dependencies"},{"lineNumber":847,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":848,"author":{"gitID":"demitycho"},"content":"Google Contacts and Calendar APIs require an external libaries. Remember to add the following to your dependencies"},{"lineNumber":849,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":850,"author":{"gitID":"demitycho"},"content":"[source, java]"},{"lineNumber":851,"author":{"gitID":"demitycho"},"content":"--------"},{"lineNumber":852,"author":{"gitID":"demitycho"},"content":"dependencies {"},{"lineNumber":853,"author":{"gitID":"demitycho"},"content":"    compile \u0027com.google.api-client:google-api-client:1.23.0\u0027"},{"lineNumber":854,"author":{"gitID":"demitycho"},"content":"    compile \u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027"},{"lineNumber":855,"author":{"gitID":"demitycho"},"content":"    compile \u0027com.google.apis:google-api-services-oauth2:v1-rev139-1.23.0\u0027"},{"lineNumber":856,"author":{"gitID":"demitycho"},"content":"    compile \u0027com.google.apis:google-api-services-calendar:v3-rev305-1.23.0\u0027"},{"lineNumber":857,"author":{"gitID":"demitycho"},"content":"    compile group: \u0027com.google.gdata\u0027, name: \u0027core\u0027, version: \u00271.47.1\u0027"},{"lineNumber":858,"author":{"gitID":"demitycho"},"content":"}"},{"lineNumber":859,"author":{"gitID":"demitycho"},"content":"--------"},{"lineNumber":860,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1\"options\u003d\"header\",]"},{"lineNumber":864,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":865,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":866,"author":{"gitID":"demitycho"},"content":".2+| Implementation of `GServiceManager` class"},{"lineNumber":867,"author":{"gitID":"demitycho"},"content":"| *Separate out 2 Google Services into two classes (current choice)*"},{"lineNumber":868,"author":{"gitID":"demitycho"},"content":"| + : Less coupling +"},{"lineNumber":869,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":870,"author":{"gitID":"demitycho"},"content":" - : More files and more code"},{"lineNumber":871,"author":{"gitID":"demitycho"},"content":"| All services are in `GServiceManager` class. Synchronize runs the upload for both Contacts and Calendar classes."},{"lineNumber":872,"author":{"gitID":"demitycho"},"content":"| + : Fewer files and code to read +"},{"lineNumber":873,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":874,"author":{"gitID":"demitycho"},"content":" - : More coupling"},{"lineNumber":875,"author":{"gitID":"demitycho"},"content":".2+| Implementation of flow of data for a sync"},{"lineNumber":876,"author":{"gitID":"demitycho"},"content":"| *Only Upload (current choice)*"},{"lineNumber":877,"author":{"gitID":"demitycho"},"content":"| As we have to store the IDs of contacts and events created offline, that would create a massive database issue."},{"lineNumber":878,"author":{"gitID":"demitycho"},"content":"+ : Reduces the complexity of the implementation of syncing data. +"},{"lineNumber":879,"author":{"gitID":"demitycho"},"content":"{empty}"},{"lineNumber":880,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":881,"author":{"gitID":"demitycho"},"content":"- : User cannot download updated data that he synced from another Codeducator instance"},{"lineNumber":882,"author":{"gitID":"demitycho"},"content":"| Upload and download"},{"lineNumber":883,"author":{"gitID":"demitycho"},"content":"| + : Much more convenient for the user to sync his data to the cloud. +"},{"lineNumber":884,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":885,"author":{"gitID":"demitycho"},"content":"- : Much harder to implement. At every session, need to keep track of which users were edited, added or deleted (similar to a diff program)"},{"lineNumber":886,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":887,"author":{"gitID":"demitycho"},"content":"// end::schedule[]"},{"lineNumber":888,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":889,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":890,"author":{"gitID":"yapni"},"content":"// tag::dashboard[]"},{"lineNumber":891,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Dashboard feature"},{"lineNumber":892,"author":{"gitID":"yapni"},"content":""},{"lineNumber":893,"author":{"gitID":"yapni"},"content":"The dashboard feature aims to help users keep track of their students\u0027 learning progress."},{"lineNumber":894,"author":{"gitID":"yapni"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"yapni"},"content":"To have a dashboard for each student, an association with a new `Dashboard` class is added to the `Student` class. We have also created new classes associated with the `Dashboard` class to facilitate the different capabilities of the dashboard."},{"lineNumber":898,"author":{"gitID":"yapni"},"content":"The following diagram shows the class diagram of the components that facilitate the dashboard feature:"},{"lineNumber":899,"author":{"gitID":"yapni"},"content":""},{"lineNumber":900,"author":{"gitID":"yapni"},"content":".Class diagram of the components that facilitate the dashboard feature"},{"lineNumber":901,"author":{"gitID":"yapni"},"content":"image::ModelComponentDashboardClassDiagram.png[width\u003d\"500\"]"},{"lineNumber":902,"author":{"gitID":"yapni"},"content":""},{"lineNumber":903,"author":{"gitID":"yapni"},"content":"Both `UniqueMilestoneList` and `UniqueTaskList` contain an attribute called \"internalList\" which are `ObservableList\u003cMilestone\u003e` and `ObservableList\u003cTask\u003e` respectively."},{"lineNumber":904,"author":{"gitID":"yapni"},"content":"This means that the UI can be bound to both of the lists so that it can automatically update when the data in any of the lists change."},{"lineNumber":905,"author":{"gitID":"yapni"},"content":""},{"lineNumber":906,"author":{"gitID":"yapni"},"content":"A new `Dashboard` object is created every time a new `Student` is being created. The `Dashboard` object will contain an empty milestone list until the user adds new milestones to the dashboard."},{"lineNumber":907,"author":{"gitID":"yapni"},"content":"This enforces 1-to-1 association between `Student` and `Dashboard`, as well as between `Dashboard` and `UniqueMilestoneList`."},{"lineNumber":908,"author":{"gitID":"yapni"},"content":""},{"lineNumber":909,"author":{"gitID":"yapni"},"content":"For example, the constructor for `Student` is implemented this way:"},{"lineNumber":910,"author":{"gitID":"yapni"},"content":"[source, java]"},{"lineNumber":911,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":912,"author":{"gitID":"yapni"},"content":"    public Student(Name name, Phone phone, Email email, Address address, ProgrammingLanguage programmingLanguage, Set\u003cTag\u003e tags) {"},{"lineNumber":913,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":914,"author":{"gitID":"yapni"},"content":"        this.name \u003d name;"},{"lineNumber":915,"author":{"gitID":"yapni"},"content":"        this.phone \u003d phone;"},{"lineNumber":916,"author":{"gitID":"yapni"},"content":"        // ... initialise the rest of the attributes ..."},{"lineNumber":917,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":918,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":919,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":920,"author":{"gitID":"yapni"},"content":""},{"lineNumber":921,"author":{"gitID":"yapni"},"content":"The constructor for `Dashboard` is implemented this way:"},{"lineNumber":922,"author":{"gitID":"yapni"},"content":"[source, java]"},{"lineNumber":923,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":924,"author":{"gitID":"yapni"},"content":"    public Dashboard() {"},{"lineNumber":925,"author":{"gitID":"yapni"},"content":"        milestoneList \u003d new UniqueMilestoneList();"},{"lineNumber":926,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":927,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":928,"author":{"gitID":"yapni"},"content":""},{"lineNumber":929,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation for commands that modify the Dashboard"},{"lineNumber":930,"author":{"gitID":"yapni"},"content":""},{"lineNumber":931,"author":{"gitID":"yapni"},"content":"The `AddMilestoneCommand`, `AddTaskCommand`, `CheckTaskCommand` and `ShowDashboardCommand` commands facilitate operations to the dashboard."},{"lineNumber":932,"author":{"gitID":"yapni"},"content":"A common implementation for commands that modify the dashboard (e.g. `AddMilestoneCommand`) is that a new copy of `Dashboard` is created with the new modification."},{"lineNumber":933,"author":{"gitID":"yapni"},"content":""},{"lineNumber":934,"author":{"gitID":"yapni"},"content":"For example, in the `AddMilestoneCommand`, to add a new milestone object to the dashboard of a `Student` Object called \"targetStudent\":"},{"lineNumber":935,"author":{"gitID":"yapni"},"content":""},{"lineNumber":936,"author":{"gitID":"yapni"},"content":". `AddMilestoneCommand.preprocessUndoableCommand()` calls the `AddMilestoneCommand.createEditedStudent()` method which will create a `Student` object called \"editedStudent\"."},{"lineNumber":937,"author":{"gitID":"yapni"},"content":"\"editedStudent\" is created with the same attributes of \"targetStudent\", but with a new `Dashboard` object containing the new milestone. +"},{"lineNumber":938,"author":{"gitID":"yapni"},"content":"`AddMilestoneCommand.createEditedStudent()` is implemented as such:"},{"lineNumber":939,"author":{"gitID":"yapni"},"content":""},{"lineNumber":940,"author":{"gitID":"yapni"},"content":"[source, java]"},{"lineNumber":941,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":942,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent() throws DuplicateMilestoneException {"},{"lineNumber":943,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(studentToEdit, newMilestone);"},{"lineNumber":944,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(targetStudent).withNewMilestone(newMilestone).build();"},{"lineNumber":945,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":946,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":947,"author":{"gitID":"yapni"},"content":"[start\u003d2]"},{"lineNumber":948,"author":{"gitID":"yapni"},"content":". In the `AddMilestoneCommand.executeUndoableCommand()` method, `Model.updateStudent(Student, Student)` is called to replace \"targetStudent\" with \"editedStudent\" in the Address Book in-memory."},{"lineNumber":949,"author":{"gitID":"yapni"},"content":""},{"lineNumber":950,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation for displaying the dashboard"},{"lineNumber":951,"author":{"gitID":"yapni"},"content":""},{"lineNumber":952,"author":{"gitID":"yapni"},"content":"The `ShowDashboardCommand` facilitates the displaying of a student\u0027s dashboard. The `ShowDashboardCommand.execute()` method is implemented this way:"},{"lineNumber":953,"author":{"gitID":"yapni"},"content":"[source, java]"},{"lineNumber":954,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":955,"author":{"gitID":"yapni"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":956,"author":{"gitID":"yapni"},"content":"        // ... check whether targetIndex is valid ..."},{"lineNumber":957,"author":{"gitID":"yapni"},"content":"        EventsCenter.getInstance().post(new ShowStudentDashboardEvent(lastShownList.get(targetIndex.getZeroBased())));"},{"lineNumber":958,"author":{"gitID":"yapni"},"content":"        // ... return command result ..."},{"lineNumber":959,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":960,"author":{"gitID":"yapni"},"content":"----"},{"lineNumber":961,"author":{"gitID":"yapni"},"content":"As seen from the above code snippet, `ShowDashboardCommand.execute()` raises a `ShowStudentDashboardEvent`. The sequence diagram below shows how the `EventsCenter` reacts to that event."},{"lineNumber":962,"author":{"gitID":"yapni"},"content":""},{"lineNumber":963,"author":{"gitID":"yapni"},"content":".Sequence diagram showing how the the `EventsCenter` and the Ui components react to the `ShowDashboardCommand`"},{"lineNumber":964,"author":{"gitID":"yapni"},"content":"image::ShowDashboardCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":965,"author":{"gitID":"yapni"},"content":""},{"lineNumber":966,"author":{"gitID":"yapni"},"content":"As seen from the above diagram,"},{"lineNumber":967,"author":{"gitID":"yapni"},"content":""},{"lineNumber":968,"author":{"gitID":"yapni"},"content":". `InfoPanel` handles the `ShowStudentInDashboard` event. +"},{"lineNumber":969,"author":{"gitID":"yapni"},"content":". `InfoPanel` then raises the `ShowStudentNameInDashboard` which is handled by `DashboardPanel` to display the name of the student in the dashboard. +"},{"lineNumber":970,"author":{"gitID":"yapni"},"content":". Finally, `InfoPanel` raises the `ShowMilestoneEvent` which is also handled by `DashboardPanel` to display the milestones of the student in the dashboard."},{"lineNumber":971,"author":{"gitID":"yapni"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1\"options\u003d\"header\",]"},{"lineNumber":975,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":976,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":977,"author":{"gitID":"demitycho"},"content":".2+| Aspect: Data structure to support the dashboard feature"},{"lineNumber":978,"author":{"gitID":"demitycho"},"content":"| *Add a `Dashboard` association to `Student` (current choice)*"},{"lineNumber":979,"author":{"gitID":"demitycho"},"content":"| + : Able to access the dashboard of a student easily. +"},{"lineNumber":980,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":981,"author":{"gitID":"demitycho"},"content":"- : Since `Student` is immutable, a new `Student` object has to be created each time its `Dashboard` is modified."},{"lineNumber":982,"author":{"gitID":"demitycho"},"content":"| Add a new `UniqueDashboardList` association to `AddressBook`"},{"lineNumber":983,"author":{"gitID":"demitycho"},"content":"| + : Able to modify the dashboard easily if it is not made immutable. +"},{"lineNumber":984,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":985,"author":{"gitID":"demitycho"},"content":" - : We will have to sync the `UniqueDashboardList` with the `UniqueStudentList` since `Dashboard` will be associated to a `Student`. |"},{"lineNumber":986,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":987,"author":{"gitID":"yapni"},"content":""},{"lineNumber":988,"author":{"gitID":"yapni"},"content":"// end::dashboard[]"},{"lineNumber":989,"author":{"gitID":"yapni"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"// tag::nlp[]"},{"lineNumber":991,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Natural Language Processing capabilities"},{"lineNumber":992,"author":{"gitID":"-"},"content":"Allows users to invoke features using free-form english, apart from keywords specific to each feature."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"An AI bot(agent) that is trained to process sentences based on the features integrated is into the application."},{"lineNumber":997,"author":{"gitID":"-"},"content":"Its primary goal is to identify the user\u0027s intention of the input and match it with a corresponding feature which the"},{"lineNumber":998,"author":{"gitID":"-"},"content":"user wishes to use."},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"A new class `ConversationCommand` is written to process sentences that do not match the syntax of any features."},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Making API calls via the REST API"},{"lineNumber":1003,"author":{"gitID":"-"},"content":"The method below, written using the IBM Watson™ Assistant service API, is used to make the API call to the agent."},{"lineNumber":1004,"author":{"gitID":"-"},"content":"The `userInput` field contains the sentence that the user inputs."},{"lineNumber":1005,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"    public static MessageResponse getMessageResponse(String userInput) {"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"        MessageResponse response \u003d null;"},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"        InputData input \u003d new InputData.Builder(userInput).build();"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"        MessageOptions option \u003d new MessageOptions.Builder(\"19f7b6f4-7944-419d-83a0-6bf9837ec333\").input(input).build();"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"        response \u003d service.message(option).execute();"},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"        return response;"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Intents and Entities"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"*Intents* refers to the intention behind the input of the user and *entities* refer to objects of interest e.g. name, address, location"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"The agent is integrated into the `AddressBookParser` class and the following code snippet deciphers the *intents*"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"and the *entity* embedded in the user\u0027s input."},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"            //processes the userInput"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"            response \u003d ConversationCommand.getMessageResponse(userInput);"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"            intents \u003d response.getIntents();"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"            entities \u003d response.getEntities();"},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"            for (int i \u003d 0; i \u003c intents.size(); i++) {"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"                intention \u003d intents.get(i).getIntent();"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"            if (entities.size() !\u003d 0) {"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"                for (int i \u003d 0; i \u003c intents.size(); i++) {"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"                    entity \u003d entities.get(i).getValue();"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":1037,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"Every single input always has an *intent*, but that is not the case for *entities*!"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"For further clarification, refer to the screenshot below:"},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":".Example of an intention and an entity, with its corresponding value. The intention is `Select` and the entity refers to the name of a person, which takes on a value of `Jason` in this particular case."},{"lineNumber":1046,"author":{"gitID":"-"},"content":"image::debug_message.PNG[width\u003d\"700\"]"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Matching the desired command"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"After identifying the *intent* and *entities* (if present) in the user\u0027s input, the corresponding features matching intent is called,"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"passing any *entities* as parameters to the feature\u0027s method."},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":".Following the example in Figure 12, the `select` command is invoked, passing `Jason` as a parameter, after the intent and entity is identified."},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"yapni"},"content":"image::Select(after).png[width\u003d\"650\"]"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"demitycho"},"content":"[width\u003d\"100%\", cols\u003d\"1, 1, 1\"options\u003d\"header\",]"},{"lineNumber":1059,"author":{"gitID":"samuelloh"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1060,"author":{"gitID":"demitycho"},"content":"| Aspect | Alternatives | Pros (+)/ Cons(-)"},{"lineNumber":1061,"author":{"gitID":"demitycho"},"content":".3+| Aspect: Selection of an appropriate third-party APIs to implement NLP"},{"lineNumber":1062,"author":{"gitID":"demitycho"},"content":"| *IBM Watson™ Assistant service (current choice)*"},{"lineNumber":1063,"author":{"gitID":"demitycho"},"content":"| + : Offers extensive NLP functions which are easy to implement. User-friendly interface allows ease of training of the model, which has high scalability +"},{"lineNumber":1064,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":1065,"author":{"gitID":"demitycho"},"content":" - : Lite version offers a limited number of API calls per month (10,000)."},{"lineNumber":1066,"author":{"gitID":"demitycho"},"content":"| Stanford CoreNLP"},{"lineNumber":1067,"author":{"gitID":"demitycho"},"content":"| + : Possesses a powerful and comprehensive API, comprising of a set of stable and well-tested natural language processing tools, widely used by various groups in academia, industry, and government. +"},{"lineNumber":1068,"author":{"gitID":"demitycho"},"content":"{empty} +"},{"lineNumber":1069,"author":{"gitID":"demitycho"},"content":"  - : Highly modularised and requires in-depth knowledge of Machine-learning and Deep-learning to use effectively."},{"lineNumber":1070,"author":{"gitID":"demitycho"},"content":"| Google Cloud Natural Language"},{"lineNumber":1071,"author":{"gitID":"demitycho"},"content":"| + : Offers a variety of functions (Syntax Analysis, Entity Recognition, Sentiment Analysis etc.) and integrates REST API,"},{"lineNumber":1072,"author":{"gitID":"demitycho"},"content":" powerful enough to analyse texts properly and texts can be uploaded in the request or integrated with Google Cloud Storage. +"},{"lineNumber":1073,"author":{"gitID":"demitycho"},"content":" {empty} +"},{"lineNumber":1074,"author":{"gitID":"demitycho"},"content":"  - : Difficult to implement and integrate properly into the application"},{"lineNumber":1075,"author":{"gitID":"demitycho"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"// end::nlp[]"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1088,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1101,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1102,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1103,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1142,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1143,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1144,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1148,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1157,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1181,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1182,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1183,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"* has a need to plan tuition slots for large number of students"},{"lineNumber":1196,"author":{"gitID":"samuelloh"},"content":"* wants to store students\u0027 profile information and pictures"},{"lineNumber":1197,"author":{"gitID":"samuelloh"},"content":"* wants to keep a progress log for students"},{"lineNumber":1198,"author":{"gitID":"samuelloh"},"content":"* is able to reference common important student details like contact number"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"*Value proposition*: improve the planning process for scheduling time slots for all tutees"},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1208,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1209,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1210,"author":{"gitID":"samuelloh"},"content":"*Samuel Loh:*"},{"lineNumber":1211,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1212,"author":{"gitID":"samuelloh"},"content":"* *(Minor)* Added programmingLanguage field to student model and modified add/edit commands to fit enhancement"},{"lineNumber":1213,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor to identify what programming language is being used by each student to learn coding."},{"lineNumber":1214,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1215,"author":{"gitID":"samuelloh"},"content":"* *(Major)* Create a profile page storing other important details of the students including a profile picture."},{"lineNumber":1216,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor store more information about students, which are not referenced as often, in another portion and thus are not displayed on the student card."},{"lineNumber":1217,"author":{"gitID":"samuelloh"},"content":"E.g. Next of kin contact and an optional profile picture"},{"lineNumber":1218,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1219,"author":{"gitID":"samuelloh"},"content":"*Tan Wei Hao:*"},{"lineNumber":1220,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1221,"author":{"gitID":"samuelloh"},"content":"* *(Minor)* Added a findTag command"},{"lineNumber":1222,"author":{"gitID":"samuelloh"},"content":"** This allows the tutor to find a student by tag labels."},{"lineNumber":1223,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1224,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1225,"author":{"gitID":"samuelloh"},"content":"* *(Major)* Syncing timetable with Google calendar"},{"lineNumber":1226,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor keep track of lessons better by syncing with his Google calendar. It also allows the use of Google calendar features."},{"lineNumber":1227,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1228,"author":{"gitID":"samuelloh"},"content":"*Tan Chee Wee:*"},{"lineNumber":1229,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1230,"author":{"gitID":"samuelloh"},"content":"* *(Minor)* Selecting a student via \u0027select\u0027 commands renders their location on google maps"},{"lineNumber":1231,"author":{"gitID":"samuelloh"},"content":"** This allows the tutor to easily plan a route to the student\u0027s home."},{"lineNumber":1232,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1233,"author":{"gitID":"samuelloh"},"content":"* *(Major)* Add a functionality that enables tutor to use free-form english to execute commands instead of conforming to the specific syntax"},{"lineNumber":1234,"author":{"gitID":"samuelloh"},"content":"** This makes the app more user-friendly without the need to memorise the syntax of respective commands and able to execute them more intuitively."},{"lineNumber":1235,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1236,"author":{"gitID":"yapni"},"content":"*Yap Ni:*"},{"lineNumber":1237,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1238,"author":{"gitID":"samuelloh"},"content":"* *(Minor)* Favourites feature where tutors can add or remove students from favourites and list students that are in their favourites"},{"lineNumber":1239,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor to remember or view the list of prominent students they want to take note of easily."},{"lineNumber":1240,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1241,"author":{"gitID":"samuelloh"},"content":"* *(Major)* Dashboard feature where each student has their own dashboard"},{"lineNumber":1242,"author":{"gitID":"samuelloh"},"content":"** This helps the tutor to better plan out lessons for each student and track their learning progress."},{"lineNumber":1243,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1244,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1246,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"samuelloh"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"demitycho"},"content":"[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1253,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1254,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |add a new student |"},{"lineNumber":1255,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1256,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor | be able to edit the miscellaneous information of a student |have the most updated version of a student\u0027s information"},{"lineNumber":1257,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1258,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |delete a student |remove entries that I no longer need"},{"lineNumber":1259,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1260,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |find a student by name |locate details of students without having to go through the entire list"},{"lineNumber":1261,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1262,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |find a student by programming language |locate details of students of a certain programming language"},{"lineNumber":1263,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"demitycho"},"content":"|`* * *` |tutor |search a student by label/tag |so I can easily categorize my students as per my personal preferences"},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"demitycho"},"content":"|`* * *` |tutor |indicate a student\u0027s programming language when adding one |so I can know which programming language to prepare before my lesson"},{"lineNumber":1269,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1270,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |view the address of a student in the maps |know where the student lives"},{"lineNumber":1271,"author":{"gitID":"-"},"content":""},{"lineNumber":1272,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |add a student to favourites |keep track of that student"},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |list students added to favourites |view students I\u0027m keeping tack"},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"demitycho"},"content":"|`* * *` |tutor |upload my contacts to Google Contacts|sync my contacts list with Google Contacts, being able to easily view my data across devices"},{"lineNumber":1277,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1278,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |be able to view misc info of my students on a different page |have an easier viewing of them"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |view the profile pictures of each student(if it exists) |learn to recognise them"},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |be able to add/change a profile picture for my students |"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |have a remarks column included in the misc info for each student |add specific remarks for each particular student that may be important to note"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |view timetable of lessons by week |easily view my schedule"},{"lineNumber":1287,"author":{"gitID":"-"},"content":""},{"lineNumber":1288,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |add a lesson for a student |"},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |delete a lesson for a student |remove lessons that the student cancels"},{"lineNumber":1291,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1292,"author":{"gitID":"demitycho"},"content":"|`* *` |tutor who adds lessons in odd hours(very early or very late)|see my schedule resize |can view my lessons in full and have a better user experience."},{"lineNumber":1293,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1294,"author":{"gitID":"demitycho"},"content":"|`* *` |tutor |check free slot |easily find a free timeslot to allocate to students"},{"lineNumber":1295,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1296,"author":{"gitID":"demitycho"},"content":"|`*` |tutor |edit a lesson for a student |make changes to lessons when required"},{"lineNumber":1297,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1298,"author":{"gitID":"demitycho"},"content":"|`* * *` |tutor |upload my lessons to Google Calendars|easily sync my schedule with Google Calendars, being able to view them across all my devices"},{"lineNumber":1299,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1300,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1301,"author":{"gitID":"demitycho"},"content":"|`* * *` |tutor |get an overview of my student\u0027s progress |can see what they don\u0027t know and tutor them better"},{"lineNumber":1302,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1303,"author":{"gitID":"yapni"},"content":"|`* * *` |tutor |type little but get the command I want |to save time"},{"lineNumber":1304,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1305,"author":{"gitID":"demitycho"},"content":"|`* *` |tutor |sort the contact list by programming language | easily recognise which and how many students are taking a particular programming language"},{"lineNumber":1306,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1307,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1308,"author":{"gitID":"yapni"},"content":"|`*` |tutor |send emails to my student |to send reminders for upcoming lessons or payments owed"},{"lineNumber":1309,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1310,"author":{"gitID":"yapni"},"content":"|`*` |tutor |submit feedback to the developers |to improve my user experience"},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"yapni"},"content":"|`*` |tutor with many students in the address book |sort students by name |locate a student easily"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"demitycho"},"content":"(For all use cases below, the *System* is `Codeducator` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete student"},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"1.  User requests to list students"},{"lineNumber":1326,"author":{"gitID":"demitycho"},"content":"2.  Codeducator shows a list of students"},{"lineNumber":1327,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific student in the list"},{"lineNumber":1328,"author":{"gitID":"demitycho"},"content":"4.  Schedule deletes the student"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1330,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1336,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1337,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1340,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1341,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1342,"author":{"gitID":"demitycho"},"content":"** 3a1. Codeducator shows an error message."},{"lineNumber":1343,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1347,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Use case: Adding a lesson"},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1350,"author":{"gitID":"-"},"content":""},{"lineNumber":1351,"author":{"gitID":"demitycho"},"content":". Schedule panel shows lessons and timeslots"},{"lineNumber":1352,"author":{"gitID":"demitycho"},"content":". User requests to add a lesson"},{"lineNumber":1353,"author":{"gitID":"demitycho"},"content":". Codeducator adds that lesson to that slot"},{"lineNumber":1354,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1355,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1360,"author":{"gitID":"demitycho"},"content":"* 2a. The schedule is empty."},{"lineNumber":1361,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1362,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1363,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1364,"author":{"gitID":"demitycho"},"content":"* 2b. The schedule is full. (Any attempt to add lessons will result in clashes)"},{"lineNumber":1365,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1366,"author":{"gitID":"demitycho"},"content":"** 3b1. Codeducator shows an error message."},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"demitycho"},"content":"* 3a. The given student index is invalid."},{"lineNumber":1369,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1370,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1371,"author":{"gitID":"demitycho"},"content":"** 3a1. Codeducator shows an error message."},{"lineNumber":1372,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1373,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1374,"author":{"gitID":"-"},"content":""},{"lineNumber":1375,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1376,"author":{"gitID":"samuelloh"},"content":"[discrete]"},{"lineNumber":1377,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Use Case: View a student\u0027s profile page"},{"lineNumber":1378,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1379,"author":{"gitID":"samuelloh"},"content":"*MSS*"},{"lineNumber":1380,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1381,"author":{"gitID":"samuelloh"},"content":"1.  User requests to list students."},{"lineNumber":1382,"author":{"gitID":"samuelloh"},"content":"2.  Student list panel shows a list of students."},{"lineNumber":1383,"author":{"gitID":"samuelloh"},"content":"3.  User requests to view profile page of a student."},{"lineNumber":1384,"author":{"gitID":"samuelloh"},"content":"4.  Browser panel shows profile page of student."},{"lineNumber":1385,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1386,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1387,"author":{"gitID":"-"},"content":""},{"lineNumber":1388,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1389,"author":{"gitID":"-"},"content":""},{"lineNumber":1390,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1391,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1392,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1393,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"samuelloh"},"content":"[none]"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1397,"author":{"gitID":"samuelloh"},"content":"** 3a1. Error message shown."},{"lineNumber":1398,"author":{"gitID":"samuelloh"},"content":"** 3a2. User enters another index."},{"lineNumber":1399,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1400,"author":{"gitID":"samuelloh"},"content":"Use case resumes at step 3."},{"lineNumber":1401,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1402,"author":{"gitID":"samuelloh"},"content":"* 3b. There is no XML data currently."},{"lineNumber":1403,"author":{"gitID":"samuelloh"},"content":"** 3b1. Error message shown."},{"lineNumber":1404,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1405,"author":{"gitID":"samuelloh"},"content":"Use case ends."},{"lineNumber":1406,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1407,"author":{"gitID":"samuelloh"},"content":"[discrete]"},{"lineNumber":1408,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Use Case: Edit a student\u0027s profile picture"},{"lineNumber":1409,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1410,"author":{"gitID":"samuelloh"},"content":"*MSS*"},{"lineNumber":1411,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1412,"author":{"gitID":"samuelloh"},"content":"1.  User requests to list students."},{"lineNumber":1413,"author":{"gitID":"samuelloh"},"content":"2.  Student list panel shows a list of students."},{"lineNumber":1414,"author":{"gitID":"samuelloh"},"content":"3.  User requests to edit a student\u0027s profile picture."},{"lineNumber":1415,"author":{"gitID":"samuelloh"},"content":"4.  Command box shows updated picture."},{"lineNumber":1416,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1417,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1422,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1423,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1424,"author":{"gitID":"samuelloh"},"content":"Use case ends"},{"lineNumber":1425,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1426,"author":{"gitID":"samuelloh"},"content":"[none]"},{"lineNumber":1427,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1428,"author":{"gitID":"samuelloh"},"content":"** 3a1. Error message shown."},{"lineNumber":1429,"author":{"gitID":"samuelloh"},"content":"** 3a2. User enters another index."},{"lineNumber":1430,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1431,"author":{"gitID":"samuelloh"},"content":"Use case resumes at step 3."},{"lineNumber":1432,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1433,"author":{"gitID":"samuelloh"},"content":"* 3b. The file path of the picture does not exist."},{"lineNumber":1434,"author":{"gitID":"samuelloh"},"content":"** 3b1. Error message shown."},{"lineNumber":1435,"author":{"gitID":"samuelloh"},"content":"** 3b2. User can enter another file path to the desired picture file."},{"lineNumber":1436,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1437,"author":{"gitID":"samuelloh"},"content":"Use case resumes at step 3."},{"lineNumber":1438,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1439,"author":{"gitID":"samuelloh"},"content":"* 3c The file path does not end with an extension of \u0027.png\u0027 or \u0027.jpg\u0027."},{"lineNumber":1440,"author":{"gitID":"samuelloh"},"content":"** 3c1. Error message shown."},{"lineNumber":1441,"author":{"gitID":"samuelloh"},"content":"** 3c2. User can enter another file path to the desired picture file."},{"lineNumber":1442,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1443,"author":{"gitID":"samuelloh"},"content":"Use case resumes at step 3."},{"lineNumber":1444,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1445,"author":{"gitID":"samuelloh"},"content":"* 4a User is at the profile page while entering `editPicture` command."},{"lineNumber":1446,"author":{"gitID":"samuelloh"},"content":"** 4a1. Profile picture on the profile page changes"},{"lineNumber":1447,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1448,"author":{"gitID":"samuelloh"},"content":"Use case ends."},{"lineNumber":1449,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1450,"author":{"gitID":"samuelloh"},"content":"[discrete]"},{"lineNumber":1451,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Use Case: Edit a student\u0027s miscellaneous information"},{"lineNumber":1452,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1453,"author":{"gitID":"samuelloh"},"content":"*MSS*"},{"lineNumber":1454,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1455,"author":{"gitID":"samuelloh"},"content":"1.  User requests to list students."},{"lineNumber":1456,"author":{"gitID":"samuelloh"},"content":"2.  Student list panel shows a list of students."},{"lineNumber":1457,"author":{"gitID":"samuelloh"},"content":"3.  User requests to edit a student\u0027s miscellaneous information."},{"lineNumber":1458,"author":{"gitID":"samuelloh"},"content":"4.  Command box shows command success."},{"lineNumber":1459,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1460,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1461,"author":{"gitID":"-"},"content":""},{"lineNumber":1462,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1463,"author":{"gitID":"-"},"content":""},{"lineNumber":1464,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1465,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1466,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1467,"author":{"gitID":"samuelloh"},"content":"Use case ends"},{"lineNumber":1468,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1469,"author":{"gitID":"samuelloh"},"content":"[none]"},{"lineNumber":1470,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1471,"author":{"gitID":"samuelloh"},"content":"** 3a1. Error message shown."},{"lineNumber":1472,"author":{"gitID":"samuelloh"},"content":"** 3a2. User enters another index."},{"lineNumber":1473,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1474,"author":{"gitID":"samuelloh"},"content":"Use case resumes at step 3."},{"lineNumber":1475,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1476,"author":{"gitID":"samuelloh"},"content":"* 3b. No fields are entered."},{"lineNumber":1477,"author":{"gitID":"samuelloh"},"content":"** 3b1. Error message shown."},{"lineNumber":1478,"author":{"gitID":"samuelloh"},"content":"** 3b2. User enters command with specific fields which are desired to edit."},{"lineNumber":1479,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1480,"author":{"gitID":"samuelloh"},"content":"Use case resumes at step 3."},{"lineNumber":1481,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1482,"author":{"gitID":"samuelloh"},"content":"* 3c The prefixes are wrong."},{"lineNumber":1483,"author":{"gitID":"samuelloh"},"content":"** 3c1. Error message shown."},{"lineNumber":1484,"author":{"gitID":"samuelloh"},"content":"** 3c2. User enters command with proper prefixes to changes desired"},{"lineNumber":1485,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1486,"author":{"gitID":"samuelloh"},"content":"Use case resumes at step 3."},{"lineNumber":1487,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1488,"author":{"gitID":"samuelloh"},"content":"* 4a User is at the profile page while entering `editMisc` command."},{"lineNumber":1489,"author":{"gitID":"samuelloh"},"content":"** 4a1. The miscellaneous information portion is updated."},{"lineNumber":1490,"author":{"gitID":"samuelloh"},"content":"+"},{"lineNumber":1491,"author":{"gitID":"samuelloh"},"content":"Use case ends."},{"lineNumber":1492,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1493,"author":{"gitID":"demitycho"},"content":"[discrete]"},{"lineNumber":1494,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Use case: Deleting a lesson"},{"lineNumber":1495,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1496,"author":{"gitID":"demitycho"},"content":"*MSS*"},{"lineNumber":1497,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1498,"author":{"gitID":"demitycho"},"content":".  Schedule panel shows lessons and timeslots."},{"lineNumber":1499,"author":{"gitID":"demitycho"},"content":".  User requests to delete a lesson identified by index."},{"lineNumber":1500,"author":{"gitID":"demitycho"},"content":".  Codeducator deletes that lesson from that slot."},{"lineNumber":1501,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1502,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1503,"author":{"gitID":"-"},"content":""},{"lineNumber":1504,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1505,"author":{"gitID":"-"},"content":""},{"lineNumber":1506,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1507,"author":{"gitID":"demitycho"},"content":"* 2a. The schedule is empty."},{"lineNumber":1508,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1509,"author":{"gitID":"demitycho"},"content":"Use case ends."},{"lineNumber":1510,"author":{"gitID":"demitycho"},"content":"[none]"},{"lineNumber":1511,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1512,"author":{"gitID":"demitycho"},"content":"* 2b. The given lesson index is invalid."},{"lineNumber":1513,"author":{"gitID":"demitycho"},"content":"** 2b1. Codeducator shows an error message."},{"lineNumber":1514,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1515,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1516,"author":{"gitID":"-"},"content":""},{"lineNumber":1517,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1518,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Use case: Logging in"},{"lineNumber":1519,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1520,"author":{"gitID":"demitycho"},"content":"*MSS*"},{"lineNumber":1521,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1522,"author":{"gitID":"demitycho"},"content":". User requests to log in to Google Accounts."},{"lineNumber":1523,"author":{"gitID":"demitycho"},"content":". A window opens in user\u0027s default browser."},{"lineNumber":1524,"author":{"gitID":"demitycho"},"content":". User logs in to Google Accounts."},{"lineNumber":1525,"author":{"gitID":"demitycho"},"content":". User authorizes Codeducator."},{"lineNumber":1526,"author":{"gitID":"demitycho"},"content":". Codeducator shows login success message"},{"lineNumber":1527,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1528,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1529,"author":{"gitID":"-"},"content":""},{"lineNumber":1530,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1531,"author":{"gitID":"-"},"content":""},{"lineNumber":1532,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1533,"author":{"gitID":"demitycho"},"content":"* 3a. User enters wrong password too many times."},{"lineNumber":1534,"author":{"gitID":"demitycho"},"content":"** 3a1. Codeducator goes into timeout after 45 seconds."},{"lineNumber":1535,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1536,"author":{"gitID":"demitycho"},"content":"Use case ends."},{"lineNumber":1537,"author":{"gitID":"demitycho"},"content":"[none]"},{"lineNumber":1538,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1539,"author":{"gitID":"demitycho"},"content":"* 3b. User closes his browser window."},{"lineNumber":1540,"author":{"gitID":"demitycho"},"content":"** 3b1. Codeducator goes into timeout after 45 seconds."},{"lineNumber":1541,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1542,"author":{"gitID":"demitycho"},"content":"* 4a. User does not authorise Codeducator."},{"lineNumber":1543,"author":{"gitID":"demitycho"},"content":"** 4a1. Codeducator shows authentication denied error."},{"lineNumber":1544,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1545,"author":{"gitID":"demitycho"},"content":"Use case ends."},{"lineNumber":1546,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1547,"author":{"gitID":"demitycho"},"content":"[discrete]"},{"lineNumber":1548,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Use case: Logging out"},{"lineNumber":1549,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1550,"author":{"gitID":"demitycho"},"content":"*MSS*"},{"lineNumber":1551,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1552,"author":{"gitID":"demitycho"},"content":". User requests to log out of Google accounts in Codeducator"},{"lineNumber":1553,"author":{"gitID":"demitycho"},"content":". Codeducator shows logout success message"},{"lineNumber":1554,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1555,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1556,"author":{"gitID":"-"},"content":""},{"lineNumber":1557,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1558,"author":{"gitID":"-"},"content":""},{"lineNumber":1559,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1560,"author":{"gitID":"demitycho"},"content":"* 1a. User was not logged in"},{"lineNumber":1561,"author":{"gitID":"demitycho"},"content":"** 1a1. Codeducator goes into timeout after 45 seconds."},{"lineNumber":1562,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1563,"author":{"gitID":"demitycho"},"content":"Use case ends."},{"lineNumber":1564,"author":{"gitID":"demitycho"},"content":"[none]"},{"lineNumber":1565,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1566,"author":{"gitID":"demitycho"},"content":"* 3a. User closes his browser window"},{"lineNumber":1567,"author":{"gitID":"demitycho"},"content":"** 3a1. Codeducator goes into timeout after 45 seconds."},{"lineNumber":1568,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1569,"author":{"gitID":"demitycho"},"content":"* 4a. User does not authorise Codeducator"},{"lineNumber":1570,"author":{"gitID":"demitycho"},"content":"** 4a1. Codeducator shows authentication denied error"},{"lineNumber":1571,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1572,"author":{"gitID":"demitycho"},"content":"Use case ends."},{"lineNumber":1573,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1574,"author":{"gitID":"demitycho"},"content":"[discrete]"},{"lineNumber":1575,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Use case: Syncing data"},{"lineNumber":1576,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1577,"author":{"gitID":"demitycho"},"content":"*MSS*"},{"lineNumber":1578,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":1579,"author":{"gitID":"demitycho"},"content":". User requests to sync data with Google services."},{"lineNumber":1580,"author":{"gitID":"demitycho"},"content":". Codeducator uploads data through network connection."},{"lineNumber":1581,"author":{"gitID":"demitycho"},"content":". Codeducator shows data sync success"},{"lineNumber":1582,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1583,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1584,"author":{"gitID":"-"},"content":""},{"lineNumber":1585,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1586,"author":{"gitID":"-"},"content":""},{"lineNumber":1587,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1588,"author":{"gitID":"demitycho"},"content":"* 2a. User\u0027s internet get cut"},{"lineNumber":1589,"author":{"gitID":"demitycho"},"content":"** 2a1. Codeducator goes into timeout after losing connection."},{"lineNumber":1590,"author":{"gitID":"demitycho"},"content":"+"},{"lineNumber":1591,"author":{"gitID":"demitycho"},"content":"Use case ends."},{"lineNumber":1592,"author":{"gitID":"-"},"content":""},{"lineNumber":1593,"author":{"gitID":"yapni"},"content":"[discrete]"},{"lineNumber":1594,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Use case: Show a student\u0027s dashboard"},{"lineNumber":1595,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1596,"author":{"gitID":"yapni"},"content":"*MSS*"},{"lineNumber":1597,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1598,"author":{"gitID":"yapni"},"content":"1. User requests view the dashboard of a student."},{"lineNumber":1599,"author":{"gitID":"yapni"},"content":"2. Codeducator shows the dashboard the student."},{"lineNumber":1600,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1601,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1602,"author":{"gitID":"-"},"content":""},{"lineNumber":1603,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1604,"author":{"gitID":"-"},"content":""},{"lineNumber":1605,"author":{"gitID":"yapni"},"content":"* 1a. The student index is invalid"},{"lineNumber":1606,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1607,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1608,"author":{"gitID":"yapni"},"content":"** 1a1. Codeducator shows an error message."},{"lineNumber":1609,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1610,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1611,"author":{"gitID":"yapni"},"content":"[discrete]"},{"lineNumber":1612,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Use case: Add a milestone to a dashboard"},{"lineNumber":1613,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1614,"author":{"gitID":"yapni"},"content":"*MSS*"},{"lineNumber":1615,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1616,"author":{"gitID":"yapni"},"content":"1. User requests view the dashboard of a student."},{"lineNumber":1617,"author":{"gitID":"yapni"},"content":"2. Codeducator shows the dashboard the student."},{"lineNumber":1618,"author":{"gitID":"yapni"},"content":"3. User requests to add a specific milestone to the dashboard of that student."},{"lineNumber":1619,"author":{"gitID":"yapni"},"content":"4. Codeducator adds the milestone to the dashboard of that student."},{"lineNumber":1620,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1621,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1622,"author":{"gitID":"-"},"content":""},{"lineNumber":1623,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1624,"author":{"gitID":"-"},"content":""},{"lineNumber":1625,"author":{"gitID":"yapni"},"content":"* 3a. The milestone is a duplicate of an existing milestone in the dashboard."},{"lineNumber":1626,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1627,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1628,"author":{"gitID":"yapni"},"content":"** 3a1. Codeducator shows an error message."},{"lineNumber":1629,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1630,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1631,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1632,"author":{"gitID":"yapni"},"content":"[discrete]"},{"lineNumber":1633,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Use case: Add a task to a milestone in a dashboard"},{"lineNumber":1634,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1635,"author":{"gitID":"yapni"},"content":"*MSS*"},{"lineNumber":1636,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1637,"author":{"gitID":"yapni"},"content":"1. User requests view the dashboard of a student."},{"lineNumber":1638,"author":{"gitID":"yapni"},"content":"2. Codeducator shows the dashboard the student."},{"lineNumber":1639,"author":{"gitID":"yapni"},"content":"3. User requests to add a specific task to a milestone in the dashboard of that student."},{"lineNumber":1640,"author":{"gitID":"yapni"},"content":"4. Codeducator adds the task to the milestone in the dashboard of that student."},{"lineNumber":1641,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1642,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1643,"author":{"gitID":"-"},"content":""},{"lineNumber":1644,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1645,"author":{"gitID":"-"},"content":""},{"lineNumber":1646,"author":{"gitID":"yapni"},"content":"* 3a. The task is a duplicate of an existing task in the milestone."},{"lineNumber":1647,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1648,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1649,"author":{"gitID":"yapni"},"content":"** 3a1. Codeducator shows an error message."},{"lineNumber":1650,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1651,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1654,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Use case: Delete a milestone in a dashboard"},{"lineNumber":1655,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1656,"author":{"gitID":"yapni"},"content":"*MSS*"},{"lineNumber":1657,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1658,"author":{"gitID":"yapni"},"content":"1. User requests view the dashboard of a student."},{"lineNumber":1659,"author":{"gitID":"yapni"},"content":"2. Codeducator shows the dashboard the student."},{"lineNumber":1660,"author":{"gitID":"yapni"},"content":"3. User requests to delete a milestone in the dashboard of that student."},{"lineNumber":1661,"author":{"gitID":"yapni"},"content":"4. Codeducator deletes the milestone in the dashboard of that student."},{"lineNumber":1662,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1663,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1664,"author":{"gitID":"-"},"content":""},{"lineNumber":1665,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1666,"author":{"gitID":"-"},"content":""},{"lineNumber":1667,"author":{"gitID":"yapni"},"content":"* 3a. The given student index is invalid"},{"lineNumber":1668,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1669,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1670,"author":{"gitID":"yapni"},"content":"** 3a1. Codeducator shows an error message."},{"lineNumber":1671,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1672,"author":{"gitID":"yapni"},"content":"* 3b. The given milestone index is invalid"},{"lineNumber":1673,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1674,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1675,"author":{"gitID":"yapni"},"content":"** 3b1. Codeducator shows an error message."},{"lineNumber":1676,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1677,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1678,"author":{"gitID":"-"},"content":""},{"lineNumber":1679,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1680,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Use case: Delete a task in a milestone in the dashboard"},{"lineNumber":1681,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1682,"author":{"gitID":"yapni"},"content":"*MSS*"},{"lineNumber":1683,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1684,"author":{"gitID":"yapni"},"content":"1. User requests view the dashboard of a student."},{"lineNumber":1685,"author":{"gitID":"yapni"},"content":"2. Codeducator shows the dashboard the student."},{"lineNumber":1686,"author":{"gitID":"yapni"},"content":"3. User requests to delete a task in a milestone in the dashboard of that student."},{"lineNumber":1687,"author":{"gitID":"yapni"},"content":"4. Codeducator deletes the task in the milestone in the dashboard of that student."},{"lineNumber":1688,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1689,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1690,"author":{"gitID":"-"},"content":""},{"lineNumber":1691,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1692,"author":{"gitID":"-"},"content":""},{"lineNumber":1693,"author":{"gitID":"yapni"},"content":"* 3a. The given student index is invalid"},{"lineNumber":1694,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1695,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1696,"author":{"gitID":"yapni"},"content":"** 3a1. Codeducator shows an error message."},{"lineNumber":1697,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1698,"author":{"gitID":"yapni"},"content":"* 3b. The given milestone index is invalid"},{"lineNumber":1699,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1700,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1701,"author":{"gitID":"yapni"},"content":"** 3b1. Codeducator shows an error message."},{"lineNumber":1702,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1703,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1704,"author":{"gitID":"-"},"content":""},{"lineNumber":1705,"author":{"gitID":"yapni"},"content":"* 3c. The given task index is invalid"},{"lineNumber":1706,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1707,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1708,"author":{"gitID":"yapni"},"content":"** 3c1. Codeducator shows an error message."},{"lineNumber":1709,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1710,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1711,"author":{"gitID":"-"},"content":""},{"lineNumber":1712,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1713,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Use case: Mark a task in a milestone as completed"},{"lineNumber":1714,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1715,"author":{"gitID":"yapni"},"content":"*MSS*"},{"lineNumber":1716,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1717,"author":{"gitID":"yapni"},"content":"1. User requests view the dashboard of a student."},{"lineNumber":1718,"author":{"gitID":"yapni"},"content":"2. Codeducator shows the dashboard the student."},{"lineNumber":1719,"author":{"gitID":"yapni"},"content":"3. User requests to mark a task in a milestone in the dashboard of that student as completed."},{"lineNumber":1720,"author":{"gitID":"yapni"},"content":"4. Codeducator marks the task in the milestone in the dashboard of that student as completed."},{"lineNumber":1721,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1722,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1723,"author":{"gitID":"-"},"content":""},{"lineNumber":1724,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1725,"author":{"gitID":"-"},"content":""},{"lineNumber":1726,"author":{"gitID":"yapni"},"content":"* 3a. The given student index is invalid"},{"lineNumber":1727,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1728,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1729,"author":{"gitID":"yapni"},"content":"** 3a1. Codeducator shows an error message."},{"lineNumber":1730,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1731,"author":{"gitID":"yapni"},"content":"* 3b. The given milestone index is invalid"},{"lineNumber":1732,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1733,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1734,"author":{"gitID":"yapni"},"content":"** 3b1. Codeducator shows an error message."},{"lineNumber":1735,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1736,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1737,"author":{"gitID":"-"},"content":""},{"lineNumber":1738,"author":{"gitID":"yapni"},"content":"* 3c. The given task index is invalid"},{"lineNumber":1739,"author":{"gitID":"yapni"},"content":"+"},{"lineNumber":1740,"author":{"gitID":"yapni"},"content":"[none]"},{"lineNumber":1741,"author":{"gitID":"yapni"},"content":"** 3c1. Codeducator shows an error message."},{"lineNumber":1742,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1743,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1744,"author":{"gitID":"-"},"content":""},{"lineNumber":1745,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1746,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1747,"author":{"gitID":"-"},"content":""},{"lineNumber":1748,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1749,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1750,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1751,"author":{"gitID":"-"},"content":".  Should receive feedback after executing commands."},{"lineNumber":1752,"author":{"gitID":"-"},"content":".  Should have correct error handling and not crash from unexpected behavior."},{"lineNumber":1753,"author":{"gitID":"samuelloh"},"content":".  Should have its functions and commands easily understood and readable for first time users."},{"lineNumber":1754,"author":{"gitID":"demitycho"},"content":".  Should be able to sync with any Google account ending with @gmail.com"},{"lineNumber":1755,"author":{"gitID":"-"},"content":""},{"lineNumber":1756,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1757,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1758,"author":{"gitID":"-"},"content":""},{"lineNumber":1759,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1760,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1761,"author":{"gitID":"-"},"content":""},{"lineNumber":1762,"author":{"gitID":"-"},"content":"[[timetable]] Timetable::"},{"lineNumber":1763,"author":{"gitID":"-"},"content":"A weekly timetable that shows status of all timeslots in one hour divisions"},{"lineNumber":1764,"author":{"gitID":"-"},"content":""},{"lineNumber":1765,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1766,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1767,"author":{"gitID":"-"},"content":""},{"lineNumber":1768,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1769,"author":{"gitID":"-"},"content":""},{"lineNumber":1770,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1771,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1772,"author":{"gitID":"-"},"content":""},{"lineNumber":1773,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1774,"author":{"gitID":"-"},"content":""},{"lineNumber":1775,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1776,"author":{"gitID":"-"},"content":""},{"lineNumber":1777,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1778,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1779,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1780,"author":{"gitID":"-"},"content":""},{"lineNumber":1781,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1782,"author":{"gitID":"-"},"content":""},{"lineNumber":1783,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1784,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1785,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1786,"author":{"gitID":"-"},"content":""},{"lineNumber":1787,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Deleting a student"},{"lineNumber":1788,"author":{"gitID":"-"},"content":""},{"lineNumber":1789,"author":{"gitID":"demitycho"},"content":". Deleting a student while all students are listed"},{"lineNumber":1790,"author":{"gitID":"-"},"content":""},{"lineNumber":1791,"author":{"gitID":"demitycho"},"content":".. Prerequisites: List all students using the `list` command. Multiple students in the list."},{"lineNumber":1792,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1793,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1794,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1795,"author":{"gitID":"demitycho"},"content":"   Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1796,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1797,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1798,"author":{"gitID":"-"},"content":""},{"lineNumber":1799,"author":{"gitID":"-"},"content":""},{"lineNumber":1800,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1801,"author":{"gitID":"-"},"content":""},{"lineNumber":1802,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1803,"author":{"gitID":"-"},"content":""},{"lineNumber":1804,"author":{"gitID":"demitycho"},"content":".. Delete the contents of /data. +"},{"lineNumber":1805,"author":{"gitID":"demitycho"},"content":"  Expected: Codeducator will start off with sample contacts and empty schedule, empty dashboards, empty moreinfo pages"},{"lineNumber":1806,"author":{"gitID":"-"},"content":""},{"lineNumber":1807,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1808,"author":{"gitID":"yapni"},"content":"//tag::favTest[]"},{"lineNumber":1809,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Adding a student to favourites"},{"lineNumber":1810,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1811,"author":{"gitID":"yapni"},"content":". Adding a student to favourites while all students are listed"},{"lineNumber":1812,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1813,"author":{"gitID":"yapni"},"content":".. Prerequisites: List all students using the `list` command and there are multiple students in the list. The first student contact is not in favourites."},{"lineNumber":1814,"author":{"gitID":"yapni"},"content":".. Test case: `fav 1` +"},{"lineNumber":1815,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1816,"author":{"gitID":"yapni"},"content":"* The name of the first student contact in the student list will turn orange in color."},{"lineNumber":1817,"author":{"gitID":"yapni"},"content":"* The name of the first student contact will be shown in the result box."},{"lineNumber":1818,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":1819,"author":{"gitID":"yapni"},"content":"* Executing the command `list -f` will show the student in the favourites list."},{"lineNumber":1820,"author":{"gitID":"yapni"},"content":".. Test case: `fav 0` +"},{"lineNumber":1821,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1822,"author":{"gitID":"yapni"},"content":"* No student is added to favourites due to the invalid student index."},{"lineNumber":1823,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1824,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1825,"author":{"gitID":"yapni"},"content":".. Other incorrect favourite commands to try: `fav`, `fav x` (where x is larger than the list size) +"},{"lineNumber":1826,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1827,"author":{"gitID":"yapni"},"content":"* Similar to the previous test case"},{"lineNumber":1828,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1829,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1830,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Removing a student from favourites"},{"lineNumber":1831,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1832,"author":{"gitID":"yapni"},"content":". Removing a student from favourites while all students are listed"},{"lineNumber":1833,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1834,"author":{"gitID":"yapni"},"content":".. Prerequisites: List all students using the `list` command and there are multiple students in the list. The first student contact is in favourites."},{"lineNumber":1835,"author":{"gitID":"yapni"},"content":".. Test case: `unfav 1` +"},{"lineNumber":1836,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1837,"author":{"gitID":"yapni"},"content":"* The name of the first student contact in the student list will no longer be orange in color."},{"lineNumber":1838,"author":{"gitID":"yapni"},"content":"* The name of the first student contact will be shown in the result box."},{"lineNumber":1839,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":1840,"author":{"gitID":"yapni"},"content":"* Executing the command `list -f` will no longer show the student in the favourites list."},{"lineNumber":1841,"author":{"gitID":"yapni"},"content":".. Test case: `unfav 0` +"},{"lineNumber":1842,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1843,"author":{"gitID":"yapni"},"content":"* No student is removed from favourites due to the invalid student index."},{"lineNumber":1844,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1845,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1846,"author":{"gitID":"yapni"},"content":".. Other incorrect unfavourite commands to try: `unfav`, `unfav x` (where x is larger than the list size) +"},{"lineNumber":1847,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1848,"author":{"gitID":"yapni"},"content":"* Similar to the previous test case"},{"lineNumber":1849,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1850,"author":{"gitID":"yapni"},"content":". Removing a student from favourites while only students in favourites are listed"},{"lineNumber":1851,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1852,"author":{"gitID":"yapni"},"content":".. Prerequisites: List only students in favourites using the `list -f` command and there are multiple students in the list."},{"lineNumber":1853,"author":{"gitID":"yapni"},"content":".. Test case: `unfav 1` +"},{"lineNumber":1854,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1855,"author":{"gitID":"yapni"},"content":"* First student contact in the favourites list will be removed."},{"lineNumber":1856,"author":{"gitID":"yapni"},"content":"* The name of the first student contact will be shown in the result box."},{"lineNumber":1857,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":1858,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1859,"author":{"gitID":"yapni"},"content":"//end::favTest[]"},{"lineNumber":1860,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1861,"author":{"gitID":"yapni"},"content":"//tag::dashboardTest[]"},{"lineNumber":1862,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Showing the dashboard of a student"},{"lineNumber":1863,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1864,"author":{"gitID":"yapni"},"content":". Showing the dashboard of a student while all students are listed and the right panel is showing the schedule"},{"lineNumber":1865,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1866,"author":{"gitID":"yapni"},"content":".. Prerequisites: List all students using the `list` command and there are multiple students in the list. The schedule is being displayed on the right panel using the `schedule` command."},{"lineNumber":1867,"author":{"gitID":"yapni"},"content":".. Test case: `showDB 1` +"},{"lineNumber":1868,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1869,"author":{"gitID":"yapni"},"content":"* The dashboard of the first student contact in the student list replaces the schedule in the right panel."},{"lineNumber":1870,"author":{"gitID":"yapni"},"content":"* The index 1 is shown in the result box."},{"lineNumber":1871,"author":{"gitID":"yapni"},"content":".. Test case: `showDB 0` +"},{"lineNumber":1872,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1873,"author":{"gitID":"yapni"},"content":"* The schedule remains in the right panel due to the invalid student index."},{"lineNumber":1874,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1875,"author":{"gitID":"yapni"},"content":".. Other incorrect show dashboard commands to try: `showDB`, `showDB x` (where x is larger than the list size) +"},{"lineNumber":1876,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1877,"author":{"gitID":"yapni"},"content":"* Similar to the previous test case."},{"lineNumber":1878,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1879,"author":{"gitID":"yapni"},"content":". Showing the dashboard of a student while all students are listed and the right panel is showing the browser panel"},{"lineNumber":1880,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1881,"author":{"gitID":"yapni"},"content":".. Prerequisites: List all students using the `list` command and there are multiple students in the list. The 1st student in the list is being selected and the browser is being displayed on the right panel using the `select` command."},{"lineNumber":1882,"author":{"gitID":"yapni"},"content":".. Test case: `showDB 1` +"},{"lineNumber":1883,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1884,"author":{"gitID":"yapni"},"content":"* The dashboard of the first student contact in the student list replaces the browser in the right panel."},{"lineNumber":1885,"author":{"gitID":"yapni"},"content":"* The index 1 is shown in the result box."},{"lineNumber":1886,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1887,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Adding a milestone to a student\u0027s dashboard"},{"lineNumber":1888,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1889,"author":{"gitID":"yapni"},"content":". Adding a milestone to a student\u0027s dashboard while the dashboard is being shown"},{"lineNumber":1890,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1891,"author":{"gitID":"yapni"},"content":".. Prerequisites: The dashboard of the 1st student in the list is being shown with the `showDB 1` command."},{"lineNumber":1892,"author":{"gitID":"yapni"},"content":".. Test case: `addMS i/1 d/23/05/2018 23:59 o/Learn Arrays` +"},{"lineNumber":1893,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1894,"author":{"gitID":"yapni"},"content":"* A milestone with the due date \"23/05/2018 23:59\" and description \"Learn Arrays\" is added to the dashboard."},{"lineNumber":1895,"author":{"gitID":"yapni"},"content":"* The milestone details is shown in the result box."},{"lineNumber":1896,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":1897,"author":{"gitID":"yapni"},"content":".. Test case: `addMS i/0 d/23/05/2018 23:59 o/Learn Arrays` +"},{"lineNumber":1898,"author":{"gitID":"yapni"},"content":"* Milestone is not added to the dashboard due to the invalid student index."},{"lineNumber":1899,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1900,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1901,"author":{"gitID":"yapni"},"content":".. Test case: `addMS i/1 d/31/02/2018 23:59 o/Learn Arrays` +"},{"lineNumber":1902,"author":{"gitID":"yapni"},"content":"* Milestone is not added to the dashboard due to the invalid date."},{"lineNumber":1903,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1904,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1905,"author":{"gitID":"yapni"},"content":".. Other incorrect add milestone commands to try: `addMS`, `addMS i/1`, `addMS d/23/05/2018`, `addMS o/Learn Arrays`, `addMS i/1 d/23/05/2018 23:59`, `addMS i/1 d/23/05/2018 o/Learn Arrays` +"},{"lineNumber":1906,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1907,"author":{"gitID":"yapni"},"content":"* Similar to the previous test case."},{"lineNumber":1908,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1909,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Deleting a milestone from a student\u0027s dashboard"},{"lineNumber":1910,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1911,"author":{"gitID":"yapni"},"content":". Deleting a milestone from a student\u0027s dashboard while the dashboard is being shown"},{"lineNumber":1912,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1913,"author":{"gitID":"yapni"},"content":".. Prerequisites: The dashboard of the 1st student in the list is being shown with the `showDB 1` command. The dashboard contains at least 1 milestone."},{"lineNumber":1914,"author":{"gitID":"yapni"},"content":".. Test case: `deleteMS i/1 m/1` +"},{"lineNumber":1915,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1916,"author":{"gitID":"yapni"},"content":"* The 1st milestone in the dashboard is being deleted."},{"lineNumber":1917,"author":{"gitID":"yapni"},"content":"* The milestone details is shown in the result box."},{"lineNumber":1918,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":1919,"author":{"gitID":"yapni"},"content":".. Test case: `deleteMS i/1 m/x` (where x is larger than the size of the milestone list)  +"},{"lineNumber":1920,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1921,"author":{"gitID":"yapni"},"content":"* No milestone is deleted due to the invalid milestone index."},{"lineNumber":1922,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1923,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1924,"author":{"gitID":"yapni"},"content":".. Other incorrect delete milestone commands to try: `deleteMS`, `deleteMS i/1`, `deleteMS m/1`, `deleteMS i/0 m/1`"},{"lineNumber":1925,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1926,"author":{"gitID":"yapni"},"content":"* Similar to the previous test case."},{"lineNumber":1927,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1928,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Adding a task to a milestone"},{"lineNumber":1929,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1930,"author":{"gitID":"yapni"},"content":". Adding a task to a milestone in a student\u0027s dashboard while the dashboard is being shown"},{"lineNumber":1931,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1932,"author":{"gitID":"yapni"},"content":".. Prerequisites: The dashboard of the 1st student in the list is being shown with the `showDB 1` command. The dashboard contains at least 1 milestone."},{"lineNumber":1933,"author":{"gitID":"yapni"},"content":".. Test case: `addTask i/1 m/1 n/Learn Array Syntax o/Student to refer to the textbook` +"},{"lineNumber":1934,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1935,"author":{"gitID":"yapni"},"content":"* A task with the name \"Learn Array Syntax\" and description \"Student to refer to the textbook\" is added to the 1st milestone in the dashboard."},{"lineNumber":1936,"author":{"gitID":"yapni"},"content":"* The task details are shown in the result box."},{"lineNumber":1937,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":1938,"author":{"gitID":"yapni"},"content":".. Test case: `addTask i/1 m/x n/Learn Array Syntax o/Student to refer to the textbook` (where x larger than the size of the milestone list) +"},{"lineNumber":1939,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1940,"author":{"gitID":"yapni"},"content":"* Task is not added to the milestone due to the invalid milestone index."},{"lineNumber":1941,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1942,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1943,"author":{"gitID":"yapni"},"content":".. Other incorrect add task commands to try: `addTask`, `addTask i/1 m/1`, `addTask i/1 m/1 n/Learn Array Syntax`, `addTask n/Learn Array Syntax o/Student to refer to the textbook` +"},{"lineNumber":1944,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1945,"author":{"gitID":"yapni"},"content":"* Similar to the previous test case."},{"lineNumber":1946,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1947,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Deleting a task from a milestone"},{"lineNumber":1948,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1949,"author":{"gitID":"yapni"},"content":". Deleting a task from a milestone in a student\u0027s dashboard while the dashboard is being shown"},{"lineNumber":1950,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1951,"author":{"gitID":"yapni"},"content":".. Prerequisites: The dashboard of the 1st student in the list is being shown with the `showDB 1` command. The dashboard contains at least 1 milestone with at least 1 task."},{"lineNumber":1952,"author":{"gitID":"yapni"},"content":".. Test case: `deleteTask i/1 m/1 tk/1` +"},{"lineNumber":1953,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1954,"author":{"gitID":"yapni"},"content":"* The 1st task in the 1st milestone is being deleted."},{"lineNumber":1955,"author":{"gitID":"yapni"},"content":"* The task details are shown in the result box."},{"lineNumber":1956,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":1957,"author":{"gitID":"yapni"},"content":".. Test case: `deleteTask i/1 m/1 tk/x` (where x is larger than the size of the task list) +"},{"lineNumber":1958,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1959,"author":{"gitID":"yapni"},"content":"* No task is deleted due to the invalid task index."},{"lineNumber":1960,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1961,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1962,"author":{"gitID":"yapni"},"content":".. Other incorrect delete task commands to try: `deleteTask`, `deleteTask tk/1`, `deleteTask m/1 tk/1`, `deleteTask i/0 m/1 tk/1`, `deleteTask i/1 m/0 tk/1` +"},{"lineNumber":1963,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1964,"author":{"gitID":"yapni"},"content":"* Similar to the previous test case."},{"lineNumber":1965,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1966,"author":{"gitID":"yapni"},"content":"\u003d\u003d\u003d Marking a task as completed"},{"lineNumber":1967,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1968,"author":{"gitID":"yapni"},"content":". Marking an _incomplete_ task from a milestone in a student\u0027s dashboard as completed while the dashboard is being shown"},{"lineNumber":1969,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1970,"author":{"gitID":"yapni"},"content":".. Prerequisites: The dashboard of the 1st student in the list is being shown with the `showDB 1` command. The dashboard contains at least 1 milestone with the 1st task not marked as completed."},{"lineNumber":1971,"author":{"gitID":"yapni"},"content":".. Test case: `checkTask i/1 m/1 tk/1` +"},{"lineNumber":1972,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1973,"author":{"gitID":"yapni"},"content":"* The 1st task in the 1st milestone is marked as completed with the \"Completed\" field turning from \"No\" to \"Yes\"."},{"lineNumber":1974,"author":{"gitID":"yapni"},"content":"* The progress of the 1st milestone is updated."},{"lineNumber":1975,"author":{"gitID":"yapni"},"content":"* The task index and milestone index are shown in the result box."},{"lineNumber":1976,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":1977,"author":{"gitID":"yapni"},"content":".. Test case: `checkTask i/1 m/1 tk/x` (where x is larger than the size of the task list) +"},{"lineNumber":1978,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1979,"author":{"gitID":"yapni"},"content":"* No task is marked as completed due to the invalid task index."},{"lineNumber":1980,"author":{"gitID":"yapni"},"content":"* Error details will be shown in the result box."},{"lineNumber":1981,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1982,"author":{"gitID":"yapni"},"content":".. Other incorrect marking task as completed command to try: `checkTask`, `checkTask tk/1`, `checkTask m/1 tk/1`, `checkTask i/0 m/1 tk/1`, `checkTask i/1 m/0 tk/1` +"},{"lineNumber":1983,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1984,"author":{"gitID":"yapni"},"content":"* Similar to the previous test case."},{"lineNumber":1985,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1986,"author":{"gitID":"yapni"},"content":". Marking a _completed_ task from a milestone in a student\u0027s dashboard as completed while the dashboard is being shown"},{"lineNumber":1987,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1988,"author":{"gitID":"yapni"},"content":".. Prerequisites: The dashboard of the 1st student in the list is being shown with the `showDB 1` command. The dashboard contains at least 1 milestone with the 1st task already marked as completed."},{"lineNumber":1989,"author":{"gitID":"yapni"},"content":".. Test case: `checkTask i/1 m/1 tk/1` +"},{"lineNumber":1990,"author":{"gitID":"yapni"},"content":"Expected:"},{"lineNumber":1991,"author":{"gitID":"yapni"},"content":"* The 1st task in the 1st milestone remains marked as completed with the \"Completed\" field being \"Yes\". +"},{"lineNumber":1992,"author":{"gitID":"yapni"},"content":"* The progress in the 1st milestone remains the same."},{"lineNumber":1993,"author":{"gitID":"yapni"},"content":"* A message saying that the task is already marked as completed will be shown in the result box."},{"lineNumber":1994,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":1995,"author":{"gitID":"yapni"},"content":""},{"lineNumber":1996,"author":{"gitID":"yapni"},"content":"//end::dashboardTest[]"},{"lineNumber":1997,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":1998,"author":{"gitID":"samuelloh"},"content":"//tag::profilePageTest[]"},{"lineNumber":1999,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Displaying the profile page of a student"},{"lineNumber":2000,"author":{"gitID":"samuelloh"},"content":". Showing the profile page of a student with the student list on the left and the browser panel is showing currently."},{"lineNumber":2001,"author":{"gitID":"samuelloh"},"content":".. Prerequisites: There is at least 1 student in the contacts data and the last shown filtered list. There exists XML data of that particular student."},{"lineNumber":2002,"author":{"gitID":"samuelloh"},"content":".. Test case: `moreInfo 1` +"},{"lineNumber":2003,"author":{"gitID":"samuelloh"},"content":"Expected:"},{"lineNumber":2004,"author":{"gitID":"samuelloh"},"content":"* The profile page of a student is shown."},{"lineNumber":2005,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s main information is shown, including `Name`, `Phone`, `Address` , `Email`, `ProgrammingLanguage` and `tags`."},{"lineNumber":2006,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s miscellaneous information is shown, including `Allergies`, `Next Of Kin Name`, `Next Of Kin Phone` and `Remarks`."},{"lineNumber":2007,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s profile picture is displayed. Note: if he/she does not have a custom profile picture, they are assigned a placeholder picture in its place."},{"lineNumber":2008,"author":{"gitID":"samuelloh"},"content":".. Test case: `moreInfo 0` +"},{"lineNumber":2009,"author":{"gitID":"samuelloh"},"content":"Expected:"},{"lineNumber":2010,"author":{"gitID":"samuelloh"},"content":"* There is no student whose index is 0. Thus the main panel on the right remains unchanged."},{"lineNumber":2011,"author":{"gitID":"samuelloh"},"content":"* An error message is shown in the command box."},{"lineNumber":2012,"author":{"gitID":"samuelloh"},"content":".. Test case: `moreInfo 1` with no XML data of Students +"},{"lineNumber":2013,"author":{"gitID":"samuelloh"},"content":"Expected:"},{"lineNumber":2014,"author":{"gitID":"samuelloh"},"content":"* No profile page will be shown as this command only works when there is existing XML data( as mentioned in the prerequisites)"},{"lineNumber":2015,"author":{"gitID":"samuelloh"},"content":"* An error message is shown in the command box."},{"lineNumber":2016,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":2017,"author":{"gitID":"samuelloh"},"content":". Showing the profile page of a student with the student list on the left and the dashboard panel is showing currently"},{"lineNumber":2018,"author":{"gitID":"samuelloh"},"content":".. Test case: `moreInfo 1` +"},{"lineNumber":2019,"author":{"gitID":"samuelloh"},"content":"Expected:"},{"lineNumber":2020,"author":{"gitID":"samuelloh"},"content":"* The dashboard panel is switched with the browser panel."},{"lineNumber":2021,"author":{"gitID":"samuelloh"},"content":"* The profile page of a student is loaded."},{"lineNumber":2022,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s main information is shown, including `Name`, `Phone`, `Address` , `Email`, `ProgrammingLanguage` and `tags`."},{"lineNumber":2023,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s miscellaneous information is shown, including `Allergies`, `Next Of Kin Name`, `Next Of Kin Phone` and `Remarks`."},{"lineNumber":2024,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s profile picture is displayed. Note: if he/she does not have a custom profile picture, they are assigned a placeholder picture in its place."},{"lineNumber":2025,"author":{"gitID":"samuelloh"},"content":".. Test case: `moreInfo 0` +"},{"lineNumber":2026,"author":{"gitID":"samuelloh"},"content":"Expected:"},{"lineNumber":2027,"author":{"gitID":"samuelloh"},"content":"* There is no student whose index is 0. Thus, the dashboard panel will still be on display and will not switch with the browser panel."},{"lineNumber":2028,"author":{"gitID":"samuelloh"},"content":"* An error message is shown in the command box."},{"lineNumber":2029,"author":{"gitID":"samuelloh"},"content":".. Test case: `moreInfo 1` with no XML data of Students +"},{"lineNumber":2030,"author":{"gitID":"samuelloh"},"content":"Expected:"},{"lineNumber":2031,"author":{"gitID":"samuelloh"},"content":"* No profile page will be shown as this command only works when there is existing XML data( as mentioned in the prerequisites)"},{"lineNumber":2032,"author":{"gitID":"samuelloh"},"content":"* The dashboard panel will still be on display and will not switch with the browser panel."},{"lineNumber":2033,"author":{"gitID":"samuelloh"},"content":"* An error message is shown in the command box."},{"lineNumber":2034,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":2035,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Editing the miscellaneous information of a student"},{"lineNumber":2036,"author":{"gitID":"samuelloh"},"content":". Editing the miscellaneous information of a student while the student\u0027s profile page is being shown on the main browser panel."},{"lineNumber":2037,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":2038,"author":{"gitID":"samuelloh"},"content":".. Test case: `editMisc 1 al/Nuts` +"},{"lineNumber":2039,"author":{"gitID":"samuelloh"},"content":"Expected"},{"lineNumber":2040,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s allergies portion of his/her miscellaneous information is overwritten with the string \"Nuts\"."},{"lineNumber":2041,"author":{"gitID":"samuelloh"},"content":"* The profile page refreshes and displays the latest updated information of the student."},{"lineNumber":2042,"author":{"gitID":"samuelloh"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":2043,"author":{"gitID":"samuelloh"},"content":".. Test case: `editMisc 1 al/Nuts r/Naughty`"},{"lineNumber":2044,"author":{"gitID":"samuelloh"},"content":"Expected"},{"lineNumber":2045,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s allergies portion, as well as the remarks portion, of his/her miscellaneous information is overwritten with \"Nuts\" and \"Naughty\" respectively."},{"lineNumber":2046,"author":{"gitID":"samuelloh"},"content":"* The profile page refreshes and displays the latest updated information of the student."},{"lineNumber":2047,"author":{"gitID":"samuelloh"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":2048,"author":{"gitID":"samuelloh"},"content":".. Test case: `editMisc 0 al/Nuts` +"},{"lineNumber":2049,"author":{"gitID":"samuelloh"},"content":"Expected"},{"lineNumber":2050,"author":{"gitID":"samuelloh"},"content":"* There is no student whose index is 0. Thus, the miscellaneous information of the student is not changed."},{"lineNumber":2051,"author":{"gitID":"samuelloh"},"content":"* Information of the student on the browser panel is not changed."},{"lineNumber":2052,"author":{"gitID":"samuelloh"},"content":"* An error message is shown in the command box."},{"lineNumber":2053,"author":{"gitID":"samuelloh"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":2054,"author":{"gitID":"samuelloh"},"content":".. Test case: `editMisc 1 al/ `"},{"lineNumber":2055,"author":{"gitID":"samuelloh"},"content":"Expected"},{"lineNumber":2056,"author":{"gitID":"samuelloh"},"content":"* Fields entered cannot take in empty values. Thus, the miscellaneous information of the student is not changed."},{"lineNumber":2057,"author":{"gitID":"samuelloh"},"content":"* Information of the student on the browser panel is not changed."},{"lineNumber":2058,"author":{"gitID":"samuelloh"},"content":"* An error message is shown in the command box."},{"lineNumber":2059,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":2060,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":2061,"author":{"gitID":"samuelloh"},"content":"\u003d\u003d\u003d Editing the profile picture of a student"},{"lineNumber":2062,"author":{"gitID":"samuelloh"},"content":". Editing the profile picture of a student while his/her profile page is on display on the browser panel."},{"lineNumber":2063,"author":{"gitID":"samuelloh"},"content":".. Test case: `editPicture i/1 pa/test.jpg` given \"test.jpg\" is a valid picture file that exists"},{"lineNumber":2064,"author":{"gitID":"samuelloh"},"content":"Expected"},{"lineNumber":2065,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s profile picture is overwritten with the new profile picture."},{"lineNumber":2066,"author":{"gitID":"samuelloh"},"content":"* The picture from the filepath indicated by the user is copied onto the local data folder."},{"lineNumber":2067,"author":{"gitID":"samuelloh"},"content":"* The profile page refreshes and displays the latest updated information of the student."},{"lineNumber":2068,"author":{"gitID":"samuelloh"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":2069,"author":{"gitID":"samuelloh"},"content":".. Test case: `editPicture i/1 pa/C:/Users/User/Desktop/test.jpg` given the file path is a valid picture file that exists"},{"lineNumber":2070,"author":{"gitID":"samuelloh"},"content":"Expected"},{"lineNumber":2071,"author":{"gitID":"samuelloh"},"content":"* The student\u0027s profile picture is overwritten with the new profile picture."},{"lineNumber":2072,"author":{"gitID":"samuelloh"},"content":"* The picture from the filepath indicated by the user is copied onto the local data folder."},{"lineNumber":2073,"author":{"gitID":"samuelloh"},"content":"* The profile page refreshes and displays the latest updated information of the student."},{"lineNumber":2074,"author":{"gitID":"samuelloh"},"content":"* Timestamp in the status bar is updated."},{"lineNumber":2075,"author":{"gitID":"samuelloh"},"content":".. Test case: `editPicture i/1 pa/missingFile.jpg` given the file path is a picture file that *does not* exists"},{"lineNumber":2076,"author":{"gitID":"samuelloh"},"content":"Expected"},{"lineNumber":2077,"author":{"gitID":"samuelloh"},"content":"* As the file does not exist, the profile picture of the student will not be modified."},{"lineNumber":2078,"author":{"gitID":"samuelloh"},"content":"* The profile picture of the student displayed on the browser panel is not changed."},{"lineNumber":2079,"author":{"gitID":"samuelloh"},"content":"* An error message is shown in the command box."},{"lineNumber":2080,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":2081,"author":{"gitID":"samuelloh"},"content":".. Test case: `editPicture i/1 pa/wrongFile.exe` given the file path is a *not* a picture file but it does exist."},{"lineNumber":2082,"author":{"gitID":"samuelloh"},"content":"Expected"},{"lineNumber":2083,"author":{"gitID":"samuelloh"},"content":"* As the file does not end with an extension of `.jpg` or `png`, the profile picture of the student will not be modified."},{"lineNumber":2084,"author":{"gitID":"samuelloh"},"content":"* The profile picture of the student displayed on the browser panel is not changed."},{"lineNumber":2085,"author":{"gitID":"samuelloh"},"content":"* An error message is shown in the command box."},{"lineNumber":2086,"author":{"gitID":"yapni"},"content":"* Timestamp in the status bar remains the same."},{"lineNumber":2087,"author":{"gitID":"samuelloh"},"content":"//end::profilePageTest[]"},{"lineNumber":2088,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":2089,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Adding a lesson"},{"lineNumber":2090,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":2091,"author":{"gitID":"demitycho"},"content":". Adding a lesson while all students are listed."},{"lineNumber":2092,"author":{"gitID":"demitycho"},"content":".. Prerequisites: View schedule using `schedule` command."},{"lineNumber":2093,"author":{"gitID":"demitycho"},"content":"List all students using the `list` command."},{"lineNumber":2094,"author":{"gitID":"demitycho"},"content":"Multiple students in the list."},{"lineNumber":2095,"author":{"gitID":"demitycho"},"content":"Your current schedule would preferably have no lessons starting before 7am or ending after 10pm."},{"lineNumber":2096,"author":{"gitID":"demitycho"},"content":".. Test case: `addLesson 1 d/mon st/10:00 et/12:00` +"},{"lineNumber":2097,"author":{"gitID":"demitycho"},"content":"   Expected:"},{"lineNumber":2098,"author":{"gitID":"demitycho"},"content":"* A lesson will be added for student at index 1, starting at 10:00am, ending at 12:00pm."},{"lineNumber":2099,"author":{"gitID":"demitycho"},"content":".. Test case: `addLesson 1 d/wed st/00:00 et/23:59` +"},{"lineNumber":2100,"author":{"gitID":"demitycho"},"content":"   Expected:"},{"lineNumber":2101,"author":{"gitID":"demitycho"},"content":"* A lesson will be added for student at index 1, on Wednesday, starting at 00:00pm, ending at 23:59pm (whole day)."},{"lineNumber":2102,"author":{"gitID":"demitycho"},"content":"* The schedule should resize (change start and end times) to show the lesson in the whole day."},{"lineNumber":2103,"author":{"gitID":"demitycho"},"content":".. Test case: `addLesson 0 d/mon st/10:00 et/12:00` +"},{"lineNumber":2104,"author":{"gitID":"demitycho"},"content":"   Expected:"},{"lineNumber":2105,"author":{"gitID":"demitycho"},"content":"* No lesson added."},{"lineNumber":2106,"author":{"gitID":"demitycho"},"content":"* Error message showing invalid student index."},{"lineNumber":2107,"author":{"gitID":"demitycho"},"content":". Adding a lesson with invalid time."},{"lineNumber":2108,"author":{"gitID":"demitycho"},"content":".. Test case: `addLesson 1 d/thu st/10:90 et/15:00` or `addLesson 1 d/thu st/24:00 et/26:00`"},{"lineNumber":2109,"author":{"gitID":"demitycho"},"content":"  Expected:"},{"lineNumber":2110,"author":{"gitID":"demitycho"},"content":"* No lesson added."},{"lineNumber":2111,"author":{"gitID":"demitycho"},"content":"* Error message shows invalid time format."},{"lineNumber":2112,"author":{"gitID":"demitycho"},"content":". Adding a lesson with invalid day"},{"lineNumber":2113,"author":{"gitID":"demitycho"},"content":".. Test case: `addLesson 1 d/monday st/10:00 et/15:00` or `addLesson 1 d/mo st/10:00 et/15:00`"},{"lineNumber":2114,"author":{"gitID":"demitycho"},"content":"  Expected:"},{"lineNumber":2115,"author":{"gitID":"demitycho"},"content":"* No lesson added."},{"lineNumber":2116,"author":{"gitID":"demitycho"},"content":"* Error message shows invalid day format."},{"lineNumber":2117,"author":{"gitID":"demitycho"},"content":". Adding a lesson for a filtered list after using `find` or `findTag` command."},{"lineNumber":2118,"author":{"gitID":"demitycho"},"content":".. Prerequisites: List a filtered list of students using the `find` or `findTag` command."},{"lineNumber":2119,"author":{"gitID":"demitycho"},"content":"Single or multiple students in the list. Your current schedule would preferably have no lessons starting before 7am or ending after 10pm."},{"lineNumber":2120,"author":{"gitID":"demitycho"},"content":".. Same test cases as when all students are listed, but should work for a smaller index range due to a smaller list of filtered students."},{"lineNumber":2121,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2122,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Deleting a Lesson"},{"lineNumber":2123,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2124,"author":{"gitID":"demitycho"},"content":". Deleting a lesson from schedule"},{"lineNumber":2125,"author":{"gitID":"demitycho"},"content":".. Prerequisites: Add a few lessons into the schedule. Take note of display lesson indexes of your lessons."},{"lineNumber":2126,"author":{"gitID":"demitycho"},"content":".. Test case: `deleteLesson 1` +"},{"lineNumber":2127,"author":{"gitID":"demitycho"},"content":"   Expected:"},{"lineNumber":2128,"author":{"gitID":"demitycho"},"content":"* The lesson with displayed lesson index 1 will be deleted."},{"lineNumber":2129,"author":{"gitID":"demitycho"},"content":"* Schedule will resize to between 07:00 and 22:00 if no lesson on any day ends later than that."},{"lineNumber":2130,"author":{"gitID":"demitycho"},"content":"* Message shows lesson deleted."},{"lineNumber":2131,"author":{"gitID":"demitycho"},"content":".. Test case: `deleteLesson 0` +"},{"lineNumber":2132,"author":{"gitID":"demitycho"},"content":"   Expected:"},{"lineNumber":2133,"author":{"gitID":"demitycho"},"content":"* No lesson will be added due to invalid student index. Error details shown in results screen."},{"lineNumber":2134,"author":{"gitID":"demitycho"},"content":".. Other incorrect `deleteLessons` commands to try: `deleteLesson`, `deleteLesson x` where x is larger than the index of the last lesson."},{"lineNumber":2135,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2136,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Logging in to Google Accounts"},{"lineNumber":2137,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2138,"author":{"gitID":"demitycho"},"content":"The testing will only include interactions with Codeducator. Login procedure to Google Accounts is handled by Google"},{"lineNumber":2139,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2140,"author":{"gitID":"demitycho"},"content":". Prerequisites: Valid Google account, you know your username and password, ending in @gmail.com"},{"lineNumber":2141,"author":{"gitID":"demitycho"},"content":". Test case: Successfully logging in after executing `login` command. +"},{"lineNumber":2142,"author":{"gitID":"demitycho"},"content":"   Expected:"},{"lineNumber":2143,"author":{"gitID":"demitycho"},"content":"* Message shows login success"},{"lineNumber":2144,"author":{"gitID":"demitycho"},"content":"* Now able to sync data."},{"lineNumber":2145,"author":{"gitID":"demitycho"},"content":"* Now able to logout."},{"lineNumber":2146,"author":{"gitID":"demitycho"},"content":"* Trying to login again results in error message that you are already logged in."},{"lineNumber":2147,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2148,"author":{"gitID":"demitycho"},"content":". Test case: Unable to login successfully to Google Accounts within 45 seconds. +"},{"lineNumber":2149,"author":{"gitID":"demitycho"},"content":"Expected"},{"lineNumber":2150,"author":{"gitID":"demitycho"},"content":"* Error message shows timeout."},{"lineNumber":2151,"author":{"gitID":"demitycho"},"content":"* Unable to sync data."},{"lineNumber":2152,"author":{"gitID":"demitycho"},"content":"* Unable to logout."},{"lineNumber":2153,"author":{"gitID":"demitycho"},"content":"* Able to login again."},{"lineNumber":2154,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2155,"author":{"gitID":"demitycho"},"content":". Test case: Ignoring the login screen for 45 seconds. +"},{"lineNumber":2156,"author":{"gitID":"demitycho"},"content":"Expected"},{"lineNumber":2157,"author":{"gitID":"demitycho"},"content":"* Same as unable to login successfully"},{"lineNumber":2158,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2159,"author":{"gitID":"demitycho"},"content":". Test case: Wrong Google account username and password. +"},{"lineNumber":2160,"author":{"gitID":"demitycho"},"content":"Expected"},{"lineNumber":2161,"author":{"gitID":"demitycho"},"content":"* Same as unable to login successfully"},{"lineNumber":2162,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2163,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Logging out of Google Accounts."},{"lineNumber":2164,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2165,"author":{"gitID":"demitycho"},"content":". Prerequisites: Valid Google account, you know your username and password, ending in @gmail.com. Already logged in"},{"lineNumber":2166,"author":{"gitID":"demitycho"},"content":". Test case: Successfully logging in after executing `logout` command"},{"lineNumber":2167,"author":{"gitID":"demitycho"},"content":"* Message shows logout success"},{"lineNumber":2168,"author":{"gitID":"demitycho"},"content":"* Unable to sync data."},{"lineNumber":2169,"author":{"gitID":"demitycho"},"content":"* Unable to logout."},{"lineNumber":2170,"author":{"gitID":"demitycho"},"content":"* Able to login again."},{"lineNumber":2171,"author":{"gitID":"demitycho"},"content":". Test case: Execute `logout` without logging in first. +"},{"lineNumber":2172,"author":{"gitID":"demitycho"},"content":"  Expected"},{"lineNumber":2173,"author":{"gitID":"demitycho"},"content":"* Error message shows not logged in"},{"lineNumber":2174,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2175,"author":{"gitID":"demitycho"},"content":"\u003d\u003d\u003d Syncing data"},{"lineNumber":2176,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":2177,"author":{"gitID":"demitycho"},"content":". Prerequisites:"},{"lineNumber":2178,"author":{"gitID":"demitycho"},"content":"* Valid Google account, you know your username and password, ending in @gmail.com. +"},{"lineNumber":2179,"author":{"gitID":"demitycho"},"content":"Expected:"},{"lineNumber":2180,"author":{"gitID":"demitycho"},"content":"* Already logged in"},{"lineNumber":2181,"author":{"gitID":"demitycho"},"content":"* Some contact data and schedule data"},{"lineNumber":2182,"author":{"gitID":"demitycho"},"content":". Test case: executing `sync` +"},{"lineNumber":2183,"author":{"gitID":"demitycho"},"content":"Expected:"},{"lineNumber":2184,"author":{"gitID":"demitycho"},"content":"* May take some time to sync"},{"lineNumber":2185,"author":{"gitID":"demitycho"},"content":"* In link:[contacts.google.com], you can see your contacts data synced. Codeducator contacts are grouped under the label \"Students\"."},{"lineNumber":2186,"author":{"gitID":"demitycho"},"content":"* In link:[calendar.google.com], you can see your schedule synced. Codeducator events are grouped under the calendar \"Student lessons\""},{"lineNumber":2187,"author":{"gitID":"demitycho"},"content":"* Message shows sync success."},{"lineNumber":2188,"author":{"gitID":"demitycho"},"content":"* Message"},{"lineNumber":2189,"author":{"gitID":"demitycho"},"content":". Test case: executing `sync` again after editing some data e.g. `add`, `edit`, `delete`, `addLesson`, `deleteLesson` +"},{"lineNumber":2190,"author":{"gitID":"demitycho"},"content":"Expected:"},{"lineNumber":2191,"author":{"gitID":"demitycho"},"content":"* May take some time to sync"},{"lineNumber":2192,"author":{"gitID":"demitycho"},"content":"* In link:[contacts.google.com], you can see your contacts data synced. Updated Codeducator contacts are grouped under the label \"Students\"."},{"lineNumber":2193,"author":{"gitID":"demitycho"},"content":"* In link:[calendar.google.com], you can see your schedule synced. Updated Codeducator events are grouped under the calendar \"Student lessons\""},{"lineNumber":2194,"author":{"gitID":"demitycho"},"content":"* Message shows sync success."},{"lineNumber":2195,"author":{"gitID":"demitycho"},"content":". Test case: Executing `sync` without logging in. +"},{"lineNumber":2196,"author":{"gitID":"demitycho"},"content":"Expected:"},{"lineNumber":2197,"author":{"gitID":"demitycho"},"content":"* Error message shows not logged in"}],"authorContributionMap":{"yapni":475,"samuelloh":440,"demitycho":477,"-":805}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    private Model model \u003d new ModelManager("},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"            getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        expectedModel.deleteStudent(studentToDelete);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        expectedModel.deleteStudent(studentToDelete);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        showNoStudent(expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        // delete -\u003e first student deleted"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all studentFs"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        // redo -\u003e same first student deleted again"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        expectedModel.deleteStudent(studentToDelete);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"     * 1. Deletes a {@code Student} from a filtered list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted student in the"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the student object regardless of indexing."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameStudentDeleted() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_SECOND);"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"        // delete -\u003e deletes second student in unfiltered student list / first student in filtered student list"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"        expectedModel.deleteStudent(studentToDelete);"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"        assertNotEquals(studentToDelete, model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased()));"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"        // redo -\u003e deletes same second student in unfiltered student list"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":155,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":162,"author":{"gitID":"yapni"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"yapni"},"content":"    private void showNoStudent(Model model) {"},{"lineNumber":192,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(p -\u003e false);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"yapni"},"content":"        assertTrue(model.getFilteredStudentList().isEmpty());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":48,"demitycho":7,"-":141}},{"path":"src/test/java/seedu/address/logic/parser/EditPictureCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROFILEPICTUREPATH_DESC;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILEPICTUREPATH_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILEPICTUREPATH_AMY;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE_PATH;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditPictureCommand;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"public class EditPictureCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPictureCommand.MESSAGE_USAGE);"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    private EditPictureCommandParser parser \u003d new EditPictureCommandParser();"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"        // no index specified"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, VALID_PROFILEPICTUREPATH_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        // no field specified"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, PREFIX_INDEX + \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"        // no index and no field specified"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"        //missing index prefix"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\" + PROFILEPICTUREPATH_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        // negative index"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, PREFIX_INDEX + \"-5\" + PROFILEPICTUREPATH_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"        // zero index"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, PREFIX_INDEX +  \"0\" + PROFILEPICTUREPATH_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, PREFIX_INDEX + \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, PREFIX_INDEX + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser,  \" \" + PREFIX_INDEX + \"1 \" +  PREFIX_PICTURE_PATH"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"                        + INVALID_PROFILEPICTUREPATH_DESC, ProfilePicturePath.MESSAGE_PICTURE_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":60}},{"path":"src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"public class EditStudentDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"                .withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":10,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/FavouriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":" * Contains integration tests (interaction with the Model) for {@code FavouriteCommand}."},{"lineNumber":24,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"public class FavouriteCommandTest {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        Student favouritedTargetStudent \u003d new StudentBuilder(targetStudent).withFavourite(true).build();"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        FavouriteCommand favouriteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(FavouriteCommand.MESSAGE_SUCCESS, favouritedTargetStudent.getName());"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, favouritedTargetStudent);"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(favouriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        FavouriteCommand favouriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(favouriteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    private FavouriteCommand prepareCommand(Index index) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(index);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        favouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        return favouriteCommand;"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":42,"demitycho":1,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder().build();"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedStudent);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastStudent, descriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(lastStudent, editedStudent);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, new EditStudentDescriptor());"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST,"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedStudent);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateStudentUnfilteredList_failure() {"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_THIRD, descriptor);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateStudentFilteredList_failure() {"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"        // edit student in filtered list into a duplicate in address book"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        Student studentInList \u003d model.getAddressBook().getStudentList().get(INDEX_THIRD.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST,"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"                new EditStudentDescriptorBuilder(studentInList).build());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"    public void execute_invalidStudentIndexUnfilteredList_failure() {"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"    public void execute_invalidStudentIndexFilteredList_failure() {"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":154,"author":{"gitID":"yapni"},"content":"                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder().build();"},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":168,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":169,"author":{"gitID":"demitycho"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"yapni"},"content":"        // edit -\u003e first student edited"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"yapni"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"yapni"},"content":"        // redo -\u003e same first student edited again"},{"lineNumber":179,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":189,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":193,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"yapni"},"content":"     * 1. Edits a {@code Student} from a filtered list."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":203,"author":{"gitID":"yapni"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited student in the"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the student object regardless of indexing."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"yapni"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameStudentEdited() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":212,"author":{"gitID":"yapni"},"content":"        Student editedStudent \u003d new StudentBuilder().build();"},{"lineNumber":213,"author":{"gitID":"yapni"},"content":"        EditCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"},{"lineNumber":214,"author":{"gitID":"yapni"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":215,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":216,"author":{"gitID":"demitycho"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_THIRD);"},{"lineNumber":219,"author":{"gitID":"yapni"},"content":"        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":220,"author":{"gitID":"yapni"},"content":"        // edit -\u003e edits third student in unfiltered student list / first student in filtered student list"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"yapni"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":228,"author":{"gitID":"yapni"},"content":"        assertNotEquals(model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased()), studentToEdit);"},{"lineNumber":229,"author":{"gitID":"yapni"},"content":"        // redo -\u003e edits same second student in unfiltered student list"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":235,"author":{"gitID":"yapni"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST, DESC_AMY);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":238,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"},{"lineNumber":239,"author":{"gitID":"yapni"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST, copyDescriptor);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":256,"author":{"gitID":"yapni"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":259,"author":{"gitID":"yapni"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"yapni"},"content":"    private EditCommand prepareCommand(Index index, EditCommand.EditStudentDescriptor descriptor) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":85,"demitycho":14,"-":171}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    private ListCommand listCommandAll;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private ListCommand listCommandFavOnly;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        listCommandAll \u003d new ListCommand(false);"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        listCommandAll.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        listCommandFavOnly \u003d new ListCommand(true);"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        listCommandFavOnly.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(listCommandAll, model, ListCommand.MESSAGE_SUCCESS_LIST_ALL, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(listCommandAll, model, ListCommand.MESSAGE_SUCCESS_LIST_ALL, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public void execute_listIsFilterd_showsFavouritesOnly() {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        expectedModel.updateFilteredStudentList(Model.PREDICATE_SHOW_FAVOURITE_STUDENTS);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(listCommandFavOnly, model, ListCommand.MESSAGE_SUCCESS_LIST_FAVOURITES, expectedModel);"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":19,"demitycho":3,"-":34}},{"path":"src/test/java/seedu/address/logic/parser/MoreInfoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.MoreInfoCommand;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"public class MoreInfoCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoreInfoCommand.MESSAGE_USAGE);"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    private MoreInfoCommandParser parser \u003d new MoreInfoCommandParser();"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        // negative index"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"        // zero index"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    public void parse_validArgs_returnsMoreInfoCommand() {"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, \"1\", new MoreInfoCommand(INDEX_FIRST));"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":46}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXTOFKINNAME;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXTOFKINPHONE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE_PATH;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"import seedu.address.testutil.EditMiscDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.EditStudentDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    public static final String VALID_KEY_AMY \u003d \"bdb76b\";"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    public static final String VALID_KEY_BOB \u003d \"f3f315\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    public static final String VALID_PROGRAMMING_LANGUAGE_AMY \u003d \"Java\";"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    public static final String VALID_PROGRAMMING_LANGUAGE_BOB \u003d \"Java\";"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_ALLERGIES_AMY \u003d \"milk\";"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_ALLERGIES_BOB \u003d \"nuts\";"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_NOKNAME_BOB \u003d \"Sam\";"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_NOKNAME_AMY \u003d \"Sam\";"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_NOKPHONE_AMY \u003d \"12345678\";"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_NOKPHONE_BOB \u003d \"87654321\";"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_REMARKS_AMY \u003d \"well behaved\";"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_REMARKS_BOB \u003d \"naughty\";"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_PROFILEPICTUREPATH_AMY \u003d ProfilePicturePath.DEFAULT_PROFILE_PICTURE;"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"    public static final String VALID_PROFILEPICTUREPATH_BOB \u003d \"src/main/resource/view/test.png\";"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"    public static final String PROFILEPICTUREPATH_DESC_AMY \u003d PREFIX_PICTURE_PATH + VALID_PROFILEPICTUREPATH_AMY;"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"    public static final String PROFILEPICTUREPATH_DESC_BOB \u003d PREFIX_PICTURE_PATH + VALID_PROFILEPICTUREPATH_BOB;"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"    public static final String INVALID_PROFILEPICTUREPATH_DESC \u003d \" \" + PREFIX_PICTURE_PATH + \"invalid\";"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a student"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"    public static final String PROGRAMMING_LANGUAGE_DESC_AMY \u003d \" \" + PREFIX_PROGRAMMING_LANGUAGE"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"            + VALID_PROGRAMMING_LANGUAGE_AMY;"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    public static final String PROGRAMMING_LANGUAGE_DESC_BOB \u003d \" \" + PREFIX_PROGRAMMING_LANGUAGE"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"            + VALID_PROGRAMMING_LANGUAGE_BOB;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    public static final String INVALID_PROGRAMMING_LANGUAGE_DESC \u003d \" \""},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_PROGRAMMING_LANGUAGE + \"\\t\"; // \u0027\\t\u0027 not allowed in Programming Language"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"    public static final String ALLERGIES_DESC_AMY \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGIES_AMY;"},{"lineNumber":97,"author":{"gitID":"samuelloh"},"content":"    public static final String ALLERGIES_DESC_BOB \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGIES_BOB;"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"    public static final String NOKNAME_DESC_BOB \u003d \" \" + PREFIX_NEXTOFKINNAME + VALID_NOKNAME_BOB;"},{"lineNumber":99,"author":{"gitID":"samuelloh"},"content":"    public static final String NOKNAME_DESC_AMY \u003d \" \" + PREFIX_NEXTOFKINNAME + VALID_NOKNAME_AMY;"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"    public static final String NOKPHONE_DESC_BOB \u003d \" \" + PREFIX_NEXTOFKINPHONE + VALID_NOKPHONE_BOB;"},{"lineNumber":101,"author":{"gitID":"samuelloh"},"content":"    public static final String NOKPHONE_DESC_AMY \u003d \" \" + PREFIX_NEXTOFKINPHONE + VALID_NOKPHONE_AMY;"},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":"    public static final String REMARKS_DESC_BOB \u003d \" \" + PREFIX_REMARKS + VALID_REMARKS_BOB;"},{"lineNumber":103,"author":{"gitID":"samuelloh"},"content":"    public static final String REMARKS_DESC_AMY \u003d \" \" + PREFIX_REMARKS + VALID_REMARKS_AMY;"},{"lineNumber":104,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":105,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":106,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":"    public static final String INVALID_ALLERGIES_DESC \u003d \" \" + PREFIX_ALLERGIES + \" \";"},{"lineNumber":108,"author":{"gitID":"samuelloh"},"content":"    public static final String INVALID_NOKNAME_DESC \u003d \" \" + PREFIX_NEXTOFKINNAME + \" \";"},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":"    public static final String INVALID_NOKPHONE_DESC \u003d \" \" + PREFIX_NEXTOFKINPHONE + \"hello\";"},{"lineNumber":110,"author":{"gitID":"samuelloh"},"content":"    public static final String INVALID_REMARKS_DESC \u003d \" \" + PREFIX_REMARKS + \" \";"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":113,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    public static final EditCommand.EditStudentDescriptor DESC_AMY;"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"    public static final EditCommand.EditStudentDescriptor DESC_BOB;"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":"    public static final EditMiscCommand.EditMiscDescriptor DESC_MISC_AMY;"},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":"    public static final EditMiscCommand.EditMiscDescriptor DESC_MISC_BOB;"},{"lineNumber":122,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"        DESC_AMY \u003d new EditStudentDescriptorBuilder().withKey(VALID_KEY_AMY).withName(VALID_NAME_AMY)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"                .withProgrammingLanguage(VALID_PROGRAMMING_LANGUAGE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"        DESC_BOB \u003d new EditStudentDescriptorBuilder().withKey(VALID_KEY_BOB).withName(VALID_NAME_BOB)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"                .withProgrammingLanguage(VALID_PROGRAMMING_LANGUAGE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"                .build();"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":"        DESC_MISC_AMY \u003d new EditMiscDescriptorBuilder().withAllergies(VALID_ALLERGIES_AMY)"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"                .withNextOfKinName(VALID_NOKNAME_AMY).withNextOfKinPhone(VALID_NOKPHONE_AMY)"},{"lineNumber":134,"author":{"gitID":"samuelloh"},"content":"                .withRemarks(VALID_REMARKS_AMY).build();"},{"lineNumber":135,"author":{"gitID":"samuelloh"},"content":"        DESC_MISC_BOB \u003d new EditMiscDescriptorBuilder().withAllergies(VALID_ALLERGIES_BOB)"},{"lineNumber":136,"author":{"gitID":"samuelloh"},"content":"                .withNextOfKinName(VALID_NOKNAME_BOB).withNextOfKinPhone(VALID_NOKPHONE_BOB)"},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":"                .withRemarks(VALID_REMARKS_BOB).build();"},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"     * - the address book and the filtered student list in the {@code actualModel} remain unchanged"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":166,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":175,"author":{"gitID":"yapni"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"yapni"},"content":"     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"yapni"},"content":"    public static void showStudentAtIndex(Model model, Index targetIndex) {"},{"lineNumber":184,"author":{"gitID":"yapni"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"},{"lineNumber":187,"author":{"gitID":"yapni"},"content":"        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"yapni"},"content":"        assertEquals(1, model.getFilteredStudentList().size());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"yapni"},"content":"     * Deletes the first student in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"yapni"},"content":"    public static void deleteFirstStudent(Model model) {"},{"lineNumber":197,"author":{"gitID":"yapni"},"content":"        Student firstStudent \u003d model.getFilteredStudentList().get(0);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":199,"author":{"gitID":"yapni"},"content":"            model.deleteStudent(firstStudent);"},{"lineNumber":200,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":201,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Student in filtered list must exist in model.\", pnfe);"},{"lineNumber":202,"author":{"gitID":"demitycho"},"content":"        } catch (LessonNotFoundException lnfe) {"},{"lineNumber":203,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"Lesson in Schedule to be deleted must exist in model.\", lnfe);"},{"lineNumber":204,"author":{"gitID":"demitycho"},"content":"        } catch (DuplicateLessonException dle) {"},{"lineNumber":205,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"Lesson in schedule must be unique.\", dle);"},{"lineNumber":206,"author":{"gitID":"demitycho"},"content":"        } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":207,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"Lesson in filtered list must not be clashing.\", iltse);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":34,"samuelloh":51,"demitycho":13,"-":130}},{"path":"src/test/java/seedu/address/logic/commands/UnfavouriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":" * Contains integration tests (interaction with the Model) for {@code UnfavouriteCommand}."},{"lineNumber":24,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"public class UnfavouriteCommandTest {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        Student unfavouriteTargetStudent \u003d new StudentBuilder(targetStudent).withFavourite(false).build();"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(UnfavouriteCommand.MESSAGE_SUCCESS, unfavouriteTargetStudent.getName());"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, unfavouriteTargetStudent);"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(unfavouriteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(unfavouriteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    private UnfavouriteCommand prepareCommand(Index index) {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        UnfavouriteCommand unfavouriteCommand \u003d new UnfavouriteCommand(index);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        unfavouriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        return unfavouriteCommand;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":41,"demitycho":1,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/MoreInfoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.commons.exceptions.StorageFileMissingException.STORAGE_FILE_MISSING;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"public class MoreInfoCommandTest {"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"     * NOTE: This test will succeed when there is no data around initially and hence no data folder."},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"     * If this test is failing at the moment, please delete any data in the local folder and try again."},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"    public void execute_storageFileMissing_failure() {"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"        MoreInfoCommand moreInfoCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"        String expectedMessage \u003d STORAGE_FILE_MISSING;"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(moreInfoCommand, model , expectedMessage);"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"    public void execute_storageFileMissing_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"        MoreInfoCommand moreInfoCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"        String expectedMessage \u003d MoreInfoCommand.MESSAGE_MOREINFO_STUDENT_SUCCESS.substring(0, 40)"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"                + \"Alice Pauline\";"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"        String pathOfDataFileToCreate \u003d \"data/addressBook.xml\";"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"        File dataFileToCreate \u003d new File(pathOfDataFileToCreate);"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"        Boolean fileCreated \u003d false;"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"        if (!dataFileToCreate.exists()) {"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"            new File(\"data\").mkdir();"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"            dataFileToCreate.createNewFile();"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"            fileCreated \u003d true;"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(moreInfoCommand, model , expectedMessage, model);"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"        if (fileCreated \u003d\u003d true) {"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"            File parent \u003d dataFileToCreate.getParentFile();"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"            dataFileToCreate.delete();"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"            parent.delete();"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"    public void equals() throws Exception {"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        final MoreInfoCommand standardCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"        // same values -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"        Index sameIndex \u003d INDEX_FIRST;"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        MoreInfoCommand commandWithSameValues \u003d prepareCommand(sameIndex);"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"        commandWithSameValues.preProcessStudent();"},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"        // different index -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(new MoreInfoCommand(INDEX_SECOND)));"},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"samuelloh"},"content":"     * Returns a {@code MoreInfo} with parameters {@code index}"},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"samuelloh"},"content":"    private MoreInfoCommand prepareCommand(Index index) {"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"        MoreInfoCommand moreInfoCommand \u003d new MoreInfoCommand(index);"},{"lineNumber":99,"author":{"gitID":"samuelloh"},"content":"        moreInfoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"        return moreInfoCommand;"},{"lineNumber":101,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":103,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":104,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":104}},{"path":"src/test/java/seedu/address/logic/commands/FindAndDeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ELLE;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Chweeee"},"content":"//@@author chweeee"},{"lineNumber":27,"author":{"gitID":"Chweeee"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"Chweeee"},"content":" * Contains integration tests (interaction with the Model) for {@code FindAndSelectCommand}."},{"lineNumber":29,"author":{"gitID":"Chweeee"},"content":" */"},{"lineNumber":30,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":31,"author":{"gitID":"Chweeee"},"content":"public class FindAndDeleteCommandTest {"},{"lineNumber":32,"author":{"gitID":"Chweeee"},"content":"    private Model model;"},{"lineNumber":33,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":34,"author":{"gitID":"Chweeee"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"Chweeee"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"Chweeee"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":37,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":39,"author":{"gitID":"Chweeee"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Chweeee"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitID":"Chweeee"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":42,"author":{"gitID":"Chweeee"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":43,"author":{"gitID":"Chweeee"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":44,"author":{"gitID":"Chweeee"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":45,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":46,"author":{"gitID":"Chweeee"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitID":"Chweeee"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":48,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":49,"author":{"gitID":"Chweeee"},"content":"        // same object -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"Chweeee"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":51,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":52,"author":{"gitID":"Chweeee"},"content":"        // same values -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"Chweeee"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":54,"author":{"gitID":"Chweeee"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":55,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":56,"author":{"gitID":"Chweeee"},"content":"        // different types -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"Chweeee"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":58,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":59,"author":{"gitID":"Chweeee"},"content":"        // null -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"Chweeee"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":61,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":62,"author":{"gitID":"Chweeee"},"content":"        // different student -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"Chweeee"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":64,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":66,"author":{"gitID":"Chweeee"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"Chweeee"},"content":"    public void execute_zeroKeywords_noStudentFound() {"},{"lineNumber":68,"author":{"gitID":"Chweeee"},"content":"        String expectedMessage \u003d \"Student to be deleted cannot be found.\";"},{"lineNumber":69,"author":{"gitID":"Chweeee"},"content":"        FindAndDeleteCommand command \u003d prepareFadCommand(\" \");"},{"lineNumber":70,"author":{"gitID":"Chweeee"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"Chweeee"},"content":"            assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":72,"author":{"gitID":"Chweeee"},"content":"        } catch (CommandException e) {"},{"lineNumber":73,"author":{"gitID":"Chweeee"},"content":"            assertTrue(e.getMessage().equals(expectedMessage));"},{"lineNumber":74,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":77,"author":{"gitID":"Chweeee"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"Chweeee"},"content":"    public void execute_studentDeleted() {"},{"lineNumber":79,"author":{"gitID":"Chweeee"},"content":"        String expectedMessage \u003d \"Deleted Student: \" + ELLE.getName() + \" Phone: \" + ELLE.getPhone()"},{"lineNumber":80,"author":{"gitID":"Chweeee"},"content":"                + \" Email: \" + ELLE.getEmail() + \" Address: \""},{"lineNumber":81,"author":{"gitID":"Chweeee"},"content":"                + ELLE.getAddress() + \" Programming Language: \" + ELLE.getProgrammingLanguage() + \" Tags: [friends]\""},{"lineNumber":82,"author":{"gitID":"Chweeee"},"content":"                + \" Favourite: \" + ELLE.getFavourite() + \" Profile Picture Path: \""},{"lineNumber":83,"author":{"gitID":"Chweeee"},"content":"                + ELLE.getProfilePicturePath() + \" Miscellaneous Info: \""},{"lineNumber":84,"author":{"gitID":"Chweeee"},"content":"                + ELLE.getMiscellaneousInfo() + \" Dashboard: \" + ELLE.getDashboard();"},{"lineNumber":85,"author":{"gitID":"Chweeee"},"content":"        FindAndDeleteCommand command \u003d prepareFadCommand(\"ELLE\");"},{"lineNumber":86,"author":{"gitID":"Chweeee"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"Chweeee"},"content":"            assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":88,"author":{"gitID":"Chweeee"},"content":"        } catch (CommandException e) {"},{"lineNumber":89,"author":{"gitID":"Chweeee"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":90,"author":{"gitID":"Chweeee"},"content":"            assertTrue(e.getMessage().equals(expectedMessage));"},{"lineNumber":91,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":94,"author":{"gitID":"Chweeee"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Chweeee"},"content":"     * Parses {@code userInput} into a {@code FindAndSelectCommand}."},{"lineNumber":96,"author":{"gitID":"Chweeee"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"Chweeee"},"content":"    private FindAndDeleteCommand prepareFadCommand(String userInput) {"},{"lineNumber":98,"author":{"gitID":"Chweeee"},"content":"        FindAndDeleteCommand command \u003d"},{"lineNumber":99,"author":{"gitID":"Chweeee"},"content":"                new FindAndDeleteCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":100,"author":{"gitID":"Chweeee"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":101,"author":{"gitID":"Chweeee"},"content":"        return command;"},{"lineNumber":102,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":104,"author":{"gitID":"Chweeee"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"Chweeee"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"Chweeee"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"Chweeee"},"content":"     *     - the {@code FilteredList\u003cStudent\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"Chweeee"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":109,"author":{"gitID":"Chweeee"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"Chweeee"},"content":"    private void assertCommandSuccess(FindAndDeleteCommand command, String expectedMessage,"},{"lineNumber":111,"author":{"gitID":"Chweeee"},"content":"                                      List\u003cStudent\u003e expectedList) throws CommandException {"},{"lineNumber":112,"author":{"gitID":"Chweeee"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":113,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":114,"author":{"gitID":"Chweeee"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":115,"author":{"gitID":"Chweeee"},"content":"        assertEquals(expectedList, model.getFilteredStudentList());"},{"lineNumber":116,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Chweeee"},"content":"}"}],"authorContributionMap":{"yapni":5,"demitycho":1,"-":19,"Chweeee":92}},{"path":"src/test/java/seedu/address/logic/commands/AddTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEXES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.MilestoneBuilder;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.TypicalTasks;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":" * Contains integration tests (interaction with the Model) for {@code AddTaskCommand}."},{"lineNumber":34,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"public class AddTaskCommandTest {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public void execute_newTaskUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        Task validTask \u003d TypicalTasks.TASK_4;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        Milestone validUpdatedTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTask).build();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        Student updatedTargetStudent \u003d new StudentBuilder().withNewMilestone(validUpdatedTargetMilestone).build();"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"                new Schedule());"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, updatedTargetStudent);"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(Index.fromOneBased(expectedModel.getFilteredStudentList().size()),"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"                INDEX_FIRST, validTask, model), model,"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"                String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), expectedModel);"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    public void execute_newTaskFilteredList_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        Task validTask \u003d TypicalTasks.TASK_4;"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        Milestone validUpdatedTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTask).build();"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":""},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        Student updatedTargetStudent \u003d new StudentBuilder().withNewMilestone(validUpdatedTargetMilestone).build();"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        Index unfilteredTargetStudentIndex \u003d INDEX_EIGHTH;"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, unfilteredTargetStudentIndex);"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"                new Schedule());"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(expectedModel, unfilteredTargetStudentIndex);"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(expectedModel.getFilteredStudentList().get(0), updatedTargetStudent);"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(INDEX_FIRST, INDEX_FIRST, validTask, model), model,"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"                String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), expectedModel);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":""},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateTask_failure() throws Exception {"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        Task validTask \u003d TypicalTasks.TASK_4;"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTask).build();"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(INDEX_EIGHTH, INDEX_FIRST, validTask, model), model,"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"                AddTaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":""},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    public void execute_invalidStudentIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        Task validTask \u003d TypicalTasks.TASK_4;"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        Index validTargetMilestoneIndex \u003d Index.fromOneBased(1);"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":""},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":""},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(outOfBoundIndex, validTargetMilestoneIndex, validTask, model), model,"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_INDEXES);"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":""},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"    public void  execute_invalidStudentIndexFilteredList_failure() throws Exception {"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        Task validTask \u003d TypicalTasks.TASK_4;"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        Index validTargetMilestoneIndex \u003d Index.fromOneBased(1);"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":""},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":""},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_EIGHTH);"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        Index outOfBoundStudentIndex \u003d INDEX_SECOND;"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        assertTrue(outOfBoundStudentIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":""},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(outOfBoundStudentIndex, validTargetMilestoneIndex, validTask, model), model,"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_INDEXES);"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":""},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"    public void execute_invalidMilestoneIndex_failure() {"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"        Task validTask \u003d TypicalTasks.TASK_4;"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":""},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        // INDEX_FIRST student has 0 milestones"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(INDEX_FIRST, INDEX_FIRST, validTask, model), model,"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_INDEXES);"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":""},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"     * Generates a new {@code AddTaskCommand} which upon execution, adds {@code task} to the {@code milestone}"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"     * in the {@code dashboard} of the {@code student} in the {@code model}."},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"    private AddTaskCommand prepareCommand(Index studentIndex, Index milestoneIndex, Task newTask, Model model) {"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"        AddTaskCommand command \u003d new AddTaskCommand(studentIndex, milestoneIndex, newTask);"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"        return command;"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":137,"demitycho":2,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/CheckTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEXES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Progress;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.MilestoneBuilder;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.TypicalTasks;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":" * Contains integration tests (interaction with the Model) for {@code CheckTaskCommand}."},{"lineNumber":34,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"public class CheckTaskCommandTest {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public void execute_checkTaskNotCompleted_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        Task validTaskNotCompleted \u003d TypicalTasks.TASK_4;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTaskNotCompleted).build();"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        Milestone validUpdatedTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTaskNotCompleted)"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"                .withTaskCompleted(INDEX_FOURTH).build();"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        Student updatedTargetStudent \u003d new StudentBuilder().withNewMilestone(validUpdatedTargetMilestone).build();"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"                new Schedule());"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, updatedTargetStudent);"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(INDEX_EIGHTH, INDEX_FIRST, INDEX_FOURTH, model), model,"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"                String.format(CheckTaskCommand.MESSAGE_SUCCESS, INDEX_FOURTH.getOneBased(), INDEX_FIRST.getOneBased()),"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"                expectedModel);"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    public void execute_checkTaskAlreadyCompleted_messageTaskAlreadyCompleted() throws Exception {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        Task validTaskAlreadyCompleted \u003d new TaskBuilder(TypicalTasks.TASK_4).asCompleted().build();"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTaskAlreadyCompleted)"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"                .withProgress(new Progress(\"1/4\")).build();"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"                new Schedule());"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(INDEX_EIGHTH, INDEX_FIRST, INDEX_FOURTH, model), model,"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"                CheckTaskCommand.MESSAGE_TASK_ALREADY_COMPLETED, expectedModel);"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    public void execute_invalidMilestoneIndex_failure() throws Exception {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        Task validTaskNotCompleted \u003d TypicalTasks.TASK_4;"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTaskNotCompleted).build();"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":""},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        // targetStudent only has 1 milestone (which contains 4 tasks)"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(INDEX_EIGHTH, INDEX_SECOND, INDEX_FOURTH, model), model,"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_INDEXES);"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":""},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"    public void execute_invalidTaskIndex_failure() throws Exception {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":""},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":""},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        // targetStudent only has 3 tasks in the INDEX_FIRST milestone"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(INDEX_EIGHTH, INDEX_FIRST, INDEX_FOURTH, model), model,"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_INDEXES);"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":""},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     * Generates a new {@code CheckTaskCommand} which upon execution marks {@code task}, which is from the"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"     * {@code milestone} in the {@code dashboard} of the {@code student} in the {@code model}, as completed."},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    private CheckTaskCommand prepareCommand(Index studentIndex, Index milestoneIndex, Index taskIndex, Model model) {"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        CheckTaskCommand command \u003d new CheckTaskCommand(studentIndex, milestoneIndex, taskIndex);"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        return command;"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":102,"demitycho":2,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        model \u003d new ModelManager("},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"                getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public void execute_newStudent_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        Student validStudent \u003d new StudentBuilder().build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        expectedModel.addStudent(validStudent);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(validStudent, model), model,"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateStudent_throwsCommandException() {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        Student studentInList \u003d model.getAddressBook().getStudentList().get(0);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(studentInList, model), model, AddCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code student} into the {@code model}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    private AddCommand prepareCommand(Student student, Model model) {"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        AddCommand command \u003d new AddCommand(student);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":14,"demitycho":4,"-":39}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":6,"demitycho":4,"-":48}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"demitycho":2,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        // undo() should cause the model\u0027s filtered list to show all students"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        // redo() should cause the model\u0027s filtered list to show all students"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     * Deletes the first student in the model\u0027s filtered list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"            Student studentToDelete \u003d model.getFilteredStudentList().get(0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"                model.deleteStudent(studentToDelete);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"            } catch (StudentNotFoundException pnfe) {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"                fail(\"Impossible: studentToDelete was retrieved from model.\");"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"            } catch (LessonNotFoundException pnfe) {"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"                fail(\"Impossible: Lessons associated with studentToDelete was retrieved from model.\");"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"            } catch (DuplicateLessonException dle) {"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"                fail(\"Impossible: Lessons associated with studentToDelete\""},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"                        + \" was retrieved from model, cannot be duplicate\");"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"            } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"                fail(\"Impossible: Lessons associated with studentToDelete\""},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"                        + \" was retrieved from model, cannot be clashing.\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":17,"demitycho":15,"-":48}},{"path":"src/test/java/seedu/address/logic/commands/AddLessonCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SIXTH;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.ALICE_WED_15_17;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.FIONA_SAT_15_17;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.getTypicalSchedule;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":" * Contains integration tests (interaction with the Model) for {@code AddLessonCommand}."},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"public class AddLessonCommandIntegrationTest {"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        model \u003d new ModelManager("},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"                getTypicalAddressBook(), new UserPrefs(), getTypicalSchedule());"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    public void execute_newStudent_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        Lesson lesson \u003d FIONA_SAT_15_17;"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getSchedule());"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        Student student \u003d expectedModel.getAddressBook().getStudentList().get(INDEX_SIXTH.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        expectedModel.addLesson(student, lesson.getDay(), lesson.getStartTime(), lesson.getEndTime());"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(prepareCommand(INDEX_SIXTH, lesson), model,"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"                String.format(AddLessonCommand.MESSAGE_SUCCESS, student.getName()), expectedModel);"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    public void execute_clashingLesson_throwsCommandException() {"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        assertCommandFailure(prepareCommand(Index.fromOneBased(1),"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"                ALICE_WED_15_17), model, AddLessonCommand.MESSAGE_INVALID_TIME_SLOT);"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code student} into the {@code model}."},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    private AddLessonCommand prepareCommand(Index index, Lesson lesson) {"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        AddLessonCommand command \u003d new AddLessonCommand("},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"                index, lesson.getDay(), lesson.getStartTime(), lesson.getEndTime());"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        return command;"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":1,"demitycho":50,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":43,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        deleteFirstStudent(expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":8,"demitycho":3,"-":48}},{"path":"src/test/java/seedu/address/logic/commands/DeleteLessonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.getTypicalSchedule;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":" * {@code DeleteLessonCommand}."},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"public class DeleteLessonCommandTest {"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    private Model model \u003d new ModelManager("},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"            getTypicalAddressBook(), new UserPrefs(), getTypicalSchedule());"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    public void execute_validIndex_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        Lesson lessonToDelete \u003d model.getSchedule().getSchedule().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        DeleteLessonCommand deleteLessonCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        String expectedMessage \u003d String.format(DeleteLessonCommand.MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete);"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), getTypicalSchedule());"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        expectedModel.deleteLesson(lessonToDelete);"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(deleteLessonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSchedule().getSchedule().size() + 1);"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        DeleteLessonCommand deleteLessonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        assertCommandFailure(deleteLessonCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"    public void executeUndoRedo_validIndex_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        Lesson lessonToDelete \u003d model.getSchedule().getSchedule().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        DeleteLessonCommand deleteLessonCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), getTypicalSchedule());"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"        // delete -\u003e first student deleted"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"        deleteLessonCommand.execute();"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        undoRedoStack.push(deleteLessonCommand);"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all studentFs"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        // redo -\u003e same first student deleted again"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        expectedModel.deleteLesson(lessonToDelete);"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"    public void equals() throws Exception {"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        DeleteLessonCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"        DeleteLessonCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND);"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"        DeleteLessonCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"        // different types -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"        // null -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"        // different student -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"     * Returns a {@code DeleteLessonCommand} with the parameter {@code index}."},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"    private DeleteLessonCommand prepareCommand(Index index) {"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(index);"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"        deleteLessonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"        return deleteLessonCommand;"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":3,"demitycho":92,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.CARL;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ELLE;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.FIONA;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    public void execute_zeroKeywords_noStudentFound() {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(MESSAGE_STUDENT_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    public void execute_multipleKeywords_multipleStudentsFound() {"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(MESSAGE_STUDENT_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"     *     - the {@code FilteredList\u003cStudent\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cStudent\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        assertEquals(expectedList, model.getFilteredStudentList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":15,"demitycho":2,"-":82}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        Index lastStudentIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        assertExecutionSuccess(INDEX_FIRST);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        assertExecutionSuccess(INDEX_THIRD);"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertExecutionSuccess(lastStudentIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        assertExecutionSuccess(INDEX_FIRST);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_STUDENT_SUCCESS, index.getOneBased()),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":22,"demitycho":2,"-":118}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.util.ServiceException;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.external.exceptions.CredentialsException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public void constructor_nullStudent_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        Student validStudent \u003d new StudentBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        CommandResult commandResult \u003d getAddCommandForStudent(validStudent, modelStub).execute();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.feedbackToUser);"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateStudent_throwsCommandException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateStudentException();"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        Student validStudent \u003d new StudentBuilder().build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        getAddCommandForStudent(validStudent, modelStub).execute();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"     * Generates a new AddCommand with the details of the given student."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    private AddCommand getAddCommandForStudent(Student student, Model model) {"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        AddCommand command \u003d new AddCommand(student);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        public void addStudent(Student student) throws DuplicateStudentException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlySchedule schedule) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"        public void deleteStudent(Student target) throws StudentNotFoundException, LessonNotFoundException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"        public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"                throws DuplicateStudentException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":""},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":"        public void displayStudentDetailsOnBrowserPanel(Student target) throws StudentNotFoundException {"},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"        public void updateProfilePicture(Student target, Student editedStudent, Student finalEditedStudent)"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"                throws DuplicateStudentException, StudentNotFoundException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"demitycho"},"content":"        public void addLesson(Student student, Day day, Time start, Time end)"},{"lineNumber":170,"author":{"gitID":"demitycho"},"content":"                throws DuplicateLessonException, StudentNotFoundException, InvalidLessonTimeSlotException {"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":174,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"demitycho"},"content":"        public void deleteLesson(Lesson lesson) throws LessonNotFoundException {"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":177,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":179,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"demitycho"},"content":"        public Schedule getSchedule() {"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":182,"author":{"gitID":"demitycho"},"content":"            return null;"},{"lineNumber":183,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":185,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"demitycho"},"content":"        public void loginGoogleAccount() throws CredentialsException {"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":188,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":190,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"demitycho"},"content":"        public void logoutGoogleAccount() throws CredentialsException {"},{"lineNumber":192,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":193,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":195,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"demitycho"},"content":"        public void synchronize() throws ServiceException, IOException {"},{"lineNumber":197,"author":{"gitID":"samuelloh"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"yapni"},"content":"     * A Model stub that always throw a DuplicateStudentException when trying to add a student."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"    private class ModelStubThrowingDuplicateStudentException extends ModelStub {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"yapni"},"content":"        public void addStudent(Student student) throws DuplicateStudentException {"},{"lineNumber":207,"author":{"gitID":"yapni"},"content":"            throw new DuplicateStudentException();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":215,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"demitycho"},"content":"        public Schedule getSchedule() {"},{"lineNumber":217,"author":{"gitID":"demitycho"},"content":"            return new Schedule();"},{"lineNumber":218,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"yapni"},"content":"     * A Model stub that always accept the student being added."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"yapni"},"content":"    private class ModelStubAcceptingStudentAdded extends ModelStub {"},{"lineNumber":225,"author":{"gitID":"yapni"},"content":"        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"yapni"},"content":"        public void addStudent(Student student) throws DuplicateStudentException {"},{"lineNumber":229,"author":{"gitID":"yapni"},"content":"            requireNonNull(student);"},{"lineNumber":230,"author":{"gitID":"yapni"},"content":"            studentsAdded.add(student);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":238,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":239,"author":{"gitID":"demitycho"},"content":"        public Schedule getSchedule() {"},{"lineNumber":240,"author":{"gitID":"demitycho"},"content":"            return new Schedule();"},{"lineNumber":241,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":38,"samuelloh":15,"demitycho":53,"-":138}},{"path":"src/test/java/seedu/address/logic/commands/FindTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_STUDENT_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"public class FindTagCommandTest {"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        FindTagCommand findFirstTagCommand \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        FindTagCommand findSecondTagCommand \u003d new FindTagCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        assertTrue(findFirstTagCommand.equals(findFirstTagCommand));"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        FindTagCommand findFirstCommandCopy \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"        assertTrue(findFirstTagCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        assertFalse(findFirstTagCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        assertFalse(findFirstTagCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"        // different student -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        assertFalse(findFirstTagCommand.equals(findSecondTagCommand));"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"    public void execute_zeroKeywords_noStudentFound() {"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        String expectedMessage \u003d String.format(MESSAGE_STUDENT_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        FindTagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    public void execute_multipleKeywords_multipleStudentsFound() {"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        String expectedMessage \u003d String.format(MESSAGE_STUDENT_LISTED_OVERVIEW, 1);"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        FindTagCommand command \u003d prepareCommand(\"owesMoney\");"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"    private FindTagCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        FindTagCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"     *     - the {@code FilteredList\u003cStudent\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"    private void assertCommandSuccess(FindTagCommand command, String expectedMessage, List\u003cStudent\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"        assertEquals(expectedList, model.getFilteredStudentList());"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":4,"demitycho":77,"-":17}},{"path":"src/test/java/seedu/address/logic/parser/EditMiscCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGIES_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGIES_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGIES_DESC;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOKNAME_DESC;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOKPHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMARKS_DESC;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NOKNAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NOKNAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NOKPHONE_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NOKPHONE_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARKS_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARKS_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGIES_AMY;"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGIES_BOB;"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NOKNAME_AMY;"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NOKNAME_BOB;"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NOKPHONE_AMY;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NOKPHONE_BOB;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_AMY;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_BOB;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"import org.junit.Test;"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditMiscCommand;"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Allergies;"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinName;"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinPhone;"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Remarks;"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"import seedu.address.testutil.EditMiscDescriptorBuilder;"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"public class EditMiscCommandParserTest {"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMiscCommand.MESSAGE_USAGE);"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    private EditMiscCommandParser parser \u003d new EditMiscCommandParser();"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        // no index specified"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, VALID_ALLERGIES_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        // no field specified"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\", EditMiscCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"        // no index and no field specified"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"        // negative index"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"-5\" + ALLERGIES_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"        // zero index"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"0\" + ALLERGIES_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ALLERGIES_DESC,"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"                Allergies.MESSAGE_ALLERGIES_CONSTRAINTS); // invalid allergies"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NOKNAME_DESC,"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"                NextOfKinName.MESSAGE_NEXTOFKINNAME_CONSTRAINTS); // invalid next-of-kin name"},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NOKPHONE_DESC,"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"                NextOfKinPhone.MESSAGE_NEXTOFKINPHONE_CONSTRAINTS); // invalid next-of-kin phone"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_REMARKS_DESC,"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"                Remarks.MESSAGE_REMARKS_CONSTRAINTS); // invalid remarks"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"        // invalid allergies followed by valid remarks"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ALLERGIES_DESC + NOKNAME_DESC_AMY,"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":"                Allergies.MESSAGE_ALLERGIES_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"        // valid allergies followed by invalid allergies. The test case for invalid allergies followed by"},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":"        // valid allergies is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\" + ALLERGIES_DESC_AMY + INVALID_ALLERGIES_DESC,"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"                Allergies.MESSAGE_ALLERGIES_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":97,"author":{"gitID":"samuelloh"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ALLERGIES_DESC + INVALID_NOKNAME_DESC"},{"lineNumber":99,"author":{"gitID":"samuelloh"},"content":"                + REMARKS_DESC_AMY, Allergies.MESSAGE_ALLERGIES_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"samuelloh"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":104,"author":{"gitID":"samuelloh"},"content":"        Index targetIndex \u003d INDEX_SECOND;"},{"lineNumber":105,"author":{"gitID":"samuelloh"},"content":"        String userInput \u003d targetIndex.getOneBased() + ALLERGIES_DESC_AMY + NOKNAME_DESC_AMY"},{"lineNumber":106,"author":{"gitID":"samuelloh"},"content":"                + NOKPHONE_DESC_AMY + REMARKS_DESC_AMY;"},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":108,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand.EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder()"},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":"                .withAllergies(VALID_ALLERGIES_AMY).withNextOfKinName(VALID_NOKNAME_AMY)"},{"lineNumber":110,"author":{"gitID":"samuelloh"},"content":"                .withNextOfKinPhone(VALID_NOKPHONE_AMY).withRemarks(VALID_REMARKS_AMY).build();"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":113,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":116,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"samuelloh"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"        Index targetIndex \u003d INDEX_SECOND;"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"        String userInput \u003d targetIndex.getOneBased() + ALLERGIES_DESC_AMY + NOKNAME_DESC_AMY;"},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand.EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder()"},{"lineNumber":122,"author":{"gitID":"samuelloh"},"content":"                .withAllergies(VALID_ALLERGIES_AMY).withNextOfKinName(VALID_NOKNAME_AMY).build();"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":125,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":128,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"samuelloh"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":130,"author":{"gitID":"samuelloh"},"content":"        // allergies"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":"        Index targetIndex \u003d INDEX_THIRD;"},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":"        String userInput \u003d targetIndex.getOneBased() + ALLERGIES_DESC_AMY;"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand.EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder()"},{"lineNumber":134,"author":{"gitID":"samuelloh"},"content":"                .withAllergies(VALID_ALLERGIES_AMY).build();"},{"lineNumber":135,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":136,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":"        // next-of-kin name"},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":"        userInput \u003d targetIndex.getOneBased() + NOKNAME_DESC_AMY;"},{"lineNumber":140,"author":{"gitID":"samuelloh"},"content":"        descriptor \u003d new EditMiscDescriptorBuilder().withNextOfKinName(VALID_NOKNAME_AMY).build();"},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":"        expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":144,"author":{"gitID":"samuelloh"},"content":"        // next-of-kin phone"},{"lineNumber":145,"author":{"gitID":"samuelloh"},"content":"        userInput \u003d targetIndex.getOneBased() + NOKPHONE_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"samuelloh"},"content":"        descriptor \u003d new EditMiscDescriptorBuilder().withNextOfKinPhone(VALID_NOKPHONE_AMY).build();"},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"        expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"        // remarks"},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":"        userInput \u003d targetIndex.getOneBased() + REMARKS_DESC_AMY;"},{"lineNumber":152,"author":{"gitID":"samuelloh"},"content":"        descriptor \u003d new EditMiscDescriptorBuilder().withRemarks(VALID_REMARKS_AMY).build();"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":"        expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"        String userInput \u003d targetIndex.getOneBased()  + ALLERGIES_DESC_AMY + NOKNAME_DESC_AMY + NOKPHONE_DESC_AMY"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"                + REMARKS_DESC_AMY + ALLERGIES_DESC_AMY + ALLERGIES_DESC_BOB + NOKNAME_DESC_BOB + NOKNAME_DESC_BOB"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"                + NOKPHONE_DESC_BOB + REMARKS_DESC_BOB;"},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand.EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder()"},{"lineNumber":165,"author":{"gitID":"samuelloh"},"content":"                .withAllergies(VALID_ALLERGIES_BOB).withNextOfKinName(VALID_NOKNAME_BOB)"},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"                .withNextOfKinPhone(VALID_NOKPHONE_BOB).withRemarks(VALID_REMARKS_BOB)"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"                .build();"},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":169,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":170,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":173,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"        // no other valid values specified"},{"lineNumber":177,"author":{"gitID":"samuelloh"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_ALLERGIES_DESC + ALLERGIES_DESC_BOB;"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand.EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder()"},{"lineNumber":180,"author":{"gitID":"samuelloh"},"content":"                .withAllergies(VALID_ALLERGIES_BOB).build();"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":183,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":"        // other valid values specified"},{"lineNumber":185,"author":{"gitID":"samuelloh"},"content":"        userInput \u003d targetIndex.getOneBased() + NOKNAME_DESC_BOB + INVALID_ALLERGIES_DESC + NOKPHONE_DESC_BOB"},{"lineNumber":186,"author":{"gitID":"samuelloh"},"content":"                + ALLERGIES_DESC_BOB;"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"        descriptor \u003d new EditMiscDescriptorBuilder().withNextOfKinName(VALID_NOKNAME_BOB)"},{"lineNumber":188,"author":{"gitID":"samuelloh"},"content":"                .withAllergies(VALID_ALLERGIES_BOB)"},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":"                .withNextOfKinPhone(VALID_NOKPHONE_BOB).build();"},{"lineNumber":190,"author":{"gitID":"samuelloh"},"content":"        expectedCommand \u003d new EditMiscCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":194,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":195,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":196,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":197,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":198}},{"path":"src/test/java/seedu/address/logic/commands/AddMilestoneCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.MilestoneBuilder;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":" * Contains integration tests (interaction with the Model) for {@code AddMilestoneCommand}."},{"lineNumber":32,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"public class AddMilestoneCommandTest {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public void execute_newMilestoneUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        Milestone validMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().build();"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        Student updatedTargetStudent \u003d new StudentBuilder().withNewMilestone(validMilestone).build();"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"                new Schedule());"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, updatedTargetStudent);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(Index.fromOneBased(expectedModel.getFilteredStudentList().size()),"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"                validMilestone, model), model, String.format(AddMilestoneCommand.MESSAGE_SUCCESS, validMilestone),"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"                expectedModel);"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    public void execute_newMilestoneFilteredList_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        Milestone validMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().build();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        Student updatedTargetStudent \u003d new StudentBuilder().withNewMilestone(validMilestone).build();"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        Index unfilteredTargetStudentIndex \u003d INDEX_EIGHTH;"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, unfilteredTargetStudentIndex);"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":""},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"                new Schedule());"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(expectedModel, unfilteredTargetStudentIndex);"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(expectedModel.getFilteredStudentList().get(0), updatedTargetStudent);"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(INDEX_FIRST, validMilestone, model), model,"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"                String.format(AddMilestoneCommand.MESSAGE_SUCCESS, validMilestone), expectedModel);"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":""},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    public void execute_duplicateMilestone_throwsCommandException() throws Exception {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        Milestone duplicateMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(duplicateMilestone).build();"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(Index.fromOneBased(model.getFilteredStudentList().size()),"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"                duplicateMilestone, model), model, AddMilestoneCommand.MESSAGE_DUPLICATE_MILESTONE);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":""},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    public void execute_invalidStudentIndexUnfilteredList_failure() {"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        Milestone validMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":""},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(outOfBoundIndex, validMilestone, model), model,"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":""},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"    public void execute_invalidStudentIndexFilteredList_failure() {"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        Milestone validMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":""},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(outOfBoundIndex, validMilestone, model), model,"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":""},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"     * Generates a new {@code AddMilestoneCommand} which upon execution, adds {@code milestone} in the {@code dashboard}"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"     * of the {@code student} at {@code studentIndex} in the {@code model}."},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"    private AddMilestoneCommand prepareCommand(Index studentIndex, Milestone milestone, Model model) {"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        AddMilestoneCommand command \u003d new AddMilestoneCommand(studentIndex, milestone);"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        return command;"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":105,"demitycho":2,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/DeleteMilestoneCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEXES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.MilestoneBuilder;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":" * Contains integration tests (interaction with the Model) for {@code DeleteMilestoneCommand}."},{"lineNumber":29,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"public class DeleteMilestoneCommandTest {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    private Model model;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public void execute_validMilestoneIndex_success() throws Exception {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        Milestone validMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validMilestone).build();"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        Student updatedTargetStudent \u003d new StudentBuilder().build();"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"                new Schedule());"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, updatedTargetStudent);"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(INDEX_EIGHTH, INDEX_FIRST, model), model,"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"                String.format(DeleteMilestoneCommand.MESSAGE_DELETE_MILESTONE_SUCCESS, validMilestone), expectedModel);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    public void execute_invalidMilestoneIndex_failure() throws Exception {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        Milestone validMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validMilestone).build();"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        // targetStudent has only 1 milestone"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(INDEX_EIGHTH, INDEX_SECOND, model), model, MESSAGE_INVALID_INDEXES);"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"     * Generates a new {@code DeleteMilestoneCommand} which upon execution, deletes {@code milestone} from the"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"     * {@code dashboard} of the {@code student} in the {@code model}."},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    private DeleteMilestoneCommand prepareCommand(Index studentIndex, Index milestoneIndex, Model model) {"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        DeleteMilestoneCommand command \u003d new DeleteMilestoneCommand(studentIndex, milestoneIndex);"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        return command;"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":""},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":64,"demitycho":2,"-":11}},{"path":"src/test/java/seedu/address/storage/XmlRequiredIndexStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.storage.XmlRequiredIndexStorage.updateData;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.RequiredStudentIndex;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"public class XmlRequiredIndexStorageTest {"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"    public void saveRequiredIndexStorage_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        updateData(1, null);"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"    public void saveRequiredIndexStorage_invalidFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        updateData(1, \"invalid\");"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    public void saveRequiredIndexStorage_allInOrder_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempRequiredIndexStorage.xml\";"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"        FileUtil.createIfMissing(new File(filePath));"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"        RequiredStudentIndex original \u003d new RequiredStudentIndex(1);"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        XmlRequiredIndexStorage xmlRequiredIndexStorage \u003d new XmlRequiredIndexStorage(filePath);"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"        //save in new file and read back"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"        xmlRequiredIndexStorage.updateData(1, filePath);"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"        RequiredStudentIndex readBack \u003d xmlRequiredIndexStorage.getData(filePath);"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        assertEquals(original.getRequiredStudentIndex(), readBack.getRequiredStudentIndex());"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":55}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedStudentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.storage.XmlAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"public class XmlAdaptedStudentTest {"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    private static final String INVALID_KEY \u003d \"bcdefg\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    private static final String INVALID_SUBJECT \u003d \"\\t\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    private static final String INVALID_PROFILEPICTUREPATH \u003d \"invalid\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    private static final String VALID_KEY \u003d BENSON.getUniqueKey().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    private static final String VALID_SUBJECT \u003d BENSON.getProgrammingLanguage().toString();"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    private static final String VALID_FAVOURITE \u003d BENSON.getFavourite().toString();"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"    private static final String VALID_PROFILEPICTUREPATH \u003d BENSON.getProfilePicturePath().toString();"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"    private static final XmlAdaptedMiscInfo VALID_MISCELLANEOUS \u003d new XmlAdaptedMiscInfo(BENSON.getMiscellaneousInfo());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    private static final XmlAdaptedDashboard VALID_DASHBOARD \u003d new XmlAdaptedDashboard(BENSON.getDashboard());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(BENSON);"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertEquals(BENSON, student.toModelType());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    //@@author demitycho"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    public void toModelType_invalidKey_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"                new XmlAdaptedStudent(INVALID_KEY, VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"                        VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"                        VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        String expectedMessage \u003d UniqueKey.MESSAGE_UNIQUE_KEY_CONSTRAINTS;"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    //@@author"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"                new XmlAdaptedStudent(VALID_KEY, INVALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"                        VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"                        VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"                VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, INVALID_PHONE, VALID_EMAIL,"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"                VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":95,"author":{"gitID":"samuelloh"},"content":"                VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"                new XmlAdaptedStudent(VALID_KEY, VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":105,"author":{"gitID":"samuelloh"},"content":"                        VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":106,"author":{"gitID":"samuelloh"},"content":"                        VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, VALID_PHONE, null,"},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":"                VALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":"                INVALID_ADDRESS, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":"                null, VALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":"    public void toModelType_invalidSubject_throwsIllegalValueException() {"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":"                VALID_ADDRESS, INVALID_SUBJECT, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d ProgrammingLanguage.MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS;"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":145,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":"    public void toModelType_nullSubject_throwsIllegalValueException() {"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"                VALID_ADDRESS, null, VALID_TAGS, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ProgrammingLanguage.class.getSimpleName());"},{"lineNumber":153,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":154,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":160,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"                VALID_ADDRESS, VALID_SUBJECT, invalidTags, VALID_FAVOURITE, VALID_PROFILEPICTUREPATH,"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalValueException.class, student::toModelType);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"    //@@author samuelloh"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":"    public void toModelType_nullPicturePath_throwsIllegalValueException() {"},{"lineNumber":169,"author":{"gitID":"samuelloh"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_KEY, VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":170,"author":{"gitID":"samuelloh"},"content":"                VALID_ADDRESS, null, VALID_TAGS, VALID_FAVOURITE, INVALID_PROFILEPICTUREPATH,"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"                VALID_DASHBOARD, VALID_MISCELLANEOUS);"},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ProgrammingLanguage.class.getSimpleName());"},{"lineNumber":173,"author":{"gitID":"samuelloh"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"}"}],"authorContributionMap":{"yapni":29,"samuelloh":44,"demitycho":26,"-":76}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        ScheduleStorage scheduleStorage \u003d new XmlScheduleStorage(getTempFilePath(\"schedule\"));"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, scheduleStorage);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":50,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"                new JsonUserPrefsStorage(\"dummy\"), new XmlScheduleStorage(\"dummy\"));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"demitycho":3,"-":98}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.TypicalStudents;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    private static final File TYPICAL_STUDENTS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalStudentAddressBook.xml\");"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private static final File INVALID_STUDENT_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidStudentAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public void toModelType_typicalStudentsFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_STUDENTS_FILE,"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        AddressBook typicalStudentsAddressBook \u003d TypicalStudents.getTypicalAddressBook();"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        assertEquals(addressBookFromFile, typicalStudentsAddressBook);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_STUDENT_FILE,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":9,"-":42}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.HOON;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.IDA;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    public void readAddressBook_invalidStudentAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        readAddressBook(\"invalidStudentAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    public void readAddressBook_invalidAndValidStudentAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        readAddressBook(\"invalidAndValidStudentAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        original.addStudent(HOON);"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        original.removeStudent(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        original.addStudent(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":11,"-":114}},{"path":"src/test/java/seedu/address/model/student/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":40}},{"path":"src/test/java/seedu/address/model/student/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":40}},{"path":"src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        // different student -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":10,"-":65}},{"path":"src/test/java/seedu/address/model/student/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":61}},{"path":"src/test/java/seedu/address/logic/commands/FindAndSelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ELLE;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Chweeee"},"content":"//@@author chweeee"},{"lineNumber":29,"author":{"gitID":"Chweeee"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"Chweeee"},"content":" * Contains integration tests (interaction with the Model) for {@code FindAndSelectCommand}."},{"lineNumber":31,"author":{"gitID":"Chweeee"},"content":" */"},{"lineNumber":32,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":33,"author":{"gitID":"Chweeee"},"content":"public class FindAndSelectCommandTest {"},{"lineNumber":34,"author":{"gitID":"Chweeee"},"content":"    private Model model;"},{"lineNumber":35,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":36,"author":{"gitID":"Chweeee"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"Chweeee"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"Chweeee"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":39,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":41,"author":{"gitID":"Chweeee"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Chweeee"},"content":"    public void equals() {"},{"lineNumber":43,"author":{"gitID":"Chweeee"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":44,"author":{"gitID":"Chweeee"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":45,"author":{"gitID":"Chweeee"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":46,"author":{"gitID":"Chweeee"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":47,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":48,"author":{"gitID":"Chweeee"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"Chweeee"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":50,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":51,"author":{"gitID":"Chweeee"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"Chweeee"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":53,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":54,"author":{"gitID":"Chweeee"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"Chweeee"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":56,"author":{"gitID":"Chweeee"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":57,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":58,"author":{"gitID":"Chweeee"},"content":"        // different types -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"Chweeee"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":60,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":61,"author":{"gitID":"Chweeee"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"Chweeee"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":63,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":64,"author":{"gitID":"Chweeee"},"content":"        // different student -\u003e returns false"},{"lineNumber":65,"author":{"gitID":"Chweeee"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":66,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":68,"author":{"gitID":"Chweeee"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"Chweeee"},"content":"    public void execute_zeroKeywords_noStudentFound() {"},{"lineNumber":70,"author":{"gitID":"Chweeee"},"content":"        String expectedMessage \u003d \"Student to be selected cannot be found.\";"},{"lineNumber":71,"author":{"gitID":"Chweeee"},"content":"        FindAndSelectCommand command \u003d prepareFasCommand(\" \");"},{"lineNumber":72,"author":{"gitID":"Chweeee"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"Chweeee"},"content":"            assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":74,"author":{"gitID":"Chweeee"},"content":"        } catch (CommandException e) {"},{"lineNumber":75,"author":{"gitID":"Chweeee"},"content":"            assertTrue(e.getMessage().equals(expectedMessage));"},{"lineNumber":76,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":79,"author":{"gitID":"Chweeee"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Chweeee"},"content":"    public void execute_studentFound() {"},{"lineNumber":81,"author":{"gitID":"Chweeee"},"content":"        String expectedMessage \u003d \"Selected Student: 1\";"},{"lineNumber":82,"author":{"gitID":"Chweeee"},"content":"        FindAndSelectCommand command \u003d prepareFasCommand(\"ELLE\");"},{"lineNumber":83,"author":{"gitID":"Chweeee"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"Chweeee"},"content":"            assertCommandSuccess(command, expectedMessage, Arrays.asList(ELLE));"},{"lineNumber":85,"author":{"gitID":"Chweeee"},"content":"        } catch (CommandException e) {"},{"lineNumber":86,"author":{"gitID":"Chweeee"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":87,"author":{"gitID":"Chweeee"},"content":"            assertTrue(e.getMessage().equals(expectedMessage));"},{"lineNumber":88,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":91,"author":{"gitID":"Chweeee"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"Chweeee"},"content":"     * Parses {@code userInput} into a {@code FindAndSelectCommand}."},{"lineNumber":93,"author":{"gitID":"Chweeee"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"Chweeee"},"content":"    private FindAndSelectCommand prepareFasCommand(String userInput) {"},{"lineNumber":95,"author":{"gitID":"Chweeee"},"content":"        FindAndSelectCommand command \u003d"},{"lineNumber":96,"author":{"gitID":"Chweeee"},"content":"                new FindAndSelectCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":97,"author":{"gitID":"Chweeee"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"Chweeee"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":101,"author":{"gitID":"Chweeee"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Chweeee"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"Chweeee"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"Chweeee"},"content":"     *     - the {@code FilteredList\u003cStudent\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"Chweeee"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":106,"author":{"gitID":"Chweeee"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"Chweeee"},"content":"    private void assertCommandSuccess(FindAndSelectCommand command, String expectedMessage,"},{"lineNumber":108,"author":{"gitID":"Chweeee"},"content":"                                      List\u003cStudent\u003e expectedList) throws CommandException {"},{"lineNumber":109,"author":{"gitID":"Chweeee"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":110,"author":{"gitID":"Chweeee"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":111,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":112,"author":{"gitID":"Chweeee"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":113,"author":{"gitID":"Chweeee"},"content":"        assertEquals(expectedList, model.getFilteredStudentList());"},{"lineNumber":114,"author":{"gitID":"Chweeee"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":115,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Chweeee"},"content":"}"}],"authorContributionMap":{"yapni":5,"demitycho":1,"-":21,"Chweeee":89}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEXES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHTH;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.MilestoneBuilder;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.TypicalTasks;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":" * Contains integration tests (interaction with the Model) for {@code DeleteTaskCommand}."},{"lineNumber":32,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"public class DeleteTaskCommandTest {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    private Model model;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public void execute_validTaskAndMilestoneIndex_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        Task validTask \u003d TypicalTasks.TASK_4;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTask).build();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        Milestone validUpdatedTargetedMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        Student updatedTargetStudent \u003d new StudentBuilder().withNewMilestone(validUpdatedTargetedMilestone).build();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"                new Schedule());"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        expectedModel.updateStudent(targetStudent, updatedTargetStudent);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        assertCommandSuccess(prepareCommand(INDEX_EIGHTH, INDEX_FIRST, INDEX_FOURTH, model), model,"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"                String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, validTask), expectedModel);"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    public void execute_invalidTaskIndex_failure() throws Exception {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().build();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        // targetStudent only have 3 tasks in the INDEX_FIRST milestone"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(INDEX_EIGHTH, INDEX_FIRST, INDEX_FOURTH, model), model,"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_INDEXES);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    public void execute_invalidMilestoneIndex_failure() throws Exception {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        Task validTask \u003d TypicalTasks.TASK_4;"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        Milestone validTargetMilestone \u003d new MilestoneBuilder().withNewTask(validTask).build();"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        Student targetStudent \u003d new StudentBuilder().withNewMilestone(validTargetMilestone).build();"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        model.addStudent(targetStudent);"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":""},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        // targetStudent only has 1 milestone (that contains 4 tasks)"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        assertCommandFailure(prepareCommand(INDEX_EIGHTH, INDEX_SECOND, INDEX_FIRST, model), model,"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"                MESSAGE_INVALID_INDEXES);"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     * Generates a new {@code DeleteTaskCommand} which upon execution, deletes {@code task} from the {@code milestone}"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     * in the {@code dashboard} of the {@code student} in the {@code model}."},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    private DeleteTaskCommand prepareCommand(Index studentIndex, Index milestoneIndex, Index taskIndex, Model model) {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        DeleteTaskCommand command \u003d new DeleteTaskCommand(studentIndex, milestoneIndex, taskIndex);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        return command;"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":81,"demitycho":2,"-":11}},{"path":"src/test/java/seedu/address/model/student/dashboard/UniqueTaskListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"public class UniqueTaskListTest {"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"    @Rule"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"        uniqueTaskList.asObservableList().remove(0);"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":14,"-":4}},{"path":"src/test/java/seedu/address/model/student/dashboard/ProgressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class ProgressTest {"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Progress(null));"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        String invalidProgress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Progress(invalidProgress));"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public void isValidProgress() {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        // null progress"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Progress.isValidProgress(null));"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        // invalid format"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        assertFalse(Progress.isValidProgress(\"1/\"));"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        assertFalse(Progress.isValidProgress(\"/1\"));"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        assertFalse(Progress.isValidProgress(\"1\"));"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        // invalid values"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        assertFalse(Progress.isValidProgress(\"2/1\")); // number completed more than total completed"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        assertFalse(Progress.isValidProgress(\"2/0\")); // number completed more than total completed"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        assertFalse(Progress.isValidProgress(\"-2/2\")); // negative number completed"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        assertFalse(Progress.isValidProgress(\"-2/-1\")); // negative number completed and total completed"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        // valid progress"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        assertTrue(Progress.isValidProgress(\"1/2\"));"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertTrue(Progress.isValidProgress(\"0/2\"));"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        assertTrue(Progress.isValidProgress(\"0/0\"));"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":38,"-":8}},{"path":"src/test/java/seedu/address/model/student/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":36}},{"path":"src/test/java/seedu/address/model/student/dashboard/DateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class DateTest {"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        String invalidDate \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public void isValidDate() {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        // null date"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        // missing parts"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/2018\")); // missing time"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"22:11\")); // missing date"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02 22:11\")); // missing year"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/2018 22:11\")); // missing day"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        // incorrect number of digits"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"1/02/2018 22:11\")); // day with 1 digit"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"111/02/2018 22:11\")); // day with 3 digits"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/2/2018 22:11\")); // month with 1 digit"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/222/2018 22:11\")); // month with 3 digit"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/18 22:11\")); // year with 2 digits"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/18181 22:11\")); // year with 5 digits"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/2018 2:11\")); // hour with 1 digit"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/2018 2222:11\")); // hour with 3 digits"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/2018 22:1\")); // minute with 1 digit"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/2018 22:111\")); // minute with 3 digits"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        // invalid calendar date"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"32/02/2018 22:11\")); // invalid day"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/13/2018 22:11\")); // invalid month"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"29/02/2018 22:11\")); // non-existent day"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        // invalid time"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/2018 24:11\")); // invalid hour"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        assertFalse(Date.isValidDate(\"01/02/2018 22:61\")); // invalid minutes"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        // valid dates"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        assertTrue(Date.isValidDate(\"01/01/2018 22:11\"));"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        assertTrue(Date.isValidDate(\"31/12/2020 23:59\"));"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        assertTrue(Date.isValidDate(\"31/12/2020 00:00\"));"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":52,"-":8}},{"path":"src/test/java/seedu/address/model/student/dashboard/UniqueMilestoneListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"public class UniqueMilestoneListTest {"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"    @Rule"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"        UniqueMilestoneList uniqueMilestonelist \u003d new UniqueMilestoneList();"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"        uniqueMilestonelist.asObservableList().remove(0);"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":14,"-":4}},{"path":"src/test/java/seedu/address/model/student/ProgrammingLanguageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"public class ProgrammingLanguageTest {"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new ProgrammingLanguage(null));"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    public void constructor_invalidProgrammingLanguage_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"        String invalidProgrammingLanguage \u003d \"\\t\";"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ProgrammingLanguage(invalidProgrammingLanguage));"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    public void isValidProgrammingLanguage() {"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"        // null ProgrammingLanguage"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new ProgrammingLanguage(null));"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"        // invalid ProgrammingLanguage"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"        assertFalse(ProgrammingLanguage.isValidProgrammingLanguage(\"\\t\")); // tab an invisible character"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        assertFalse(ProgrammingLanguage.isValidProgrammingLanguage(\"\\n\")); // new line an invisible charater"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"        assertFalse(ProgrammingLanguage.isValidProgrammingLanguage(\"\\r\")); // carriage return invisible character"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        assertFalse(ProgrammingLanguage.isValidProgrammingLanguage(\"\\f\")); // form feed an invisible character"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"        // valid ProgrammingLanguage"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        assertTrue(ProgrammingLanguage.isValidProgrammingLanguage(\"java\"));"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        // alphabets only"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        assertTrue(ProgrammingLanguage.isValidProgrammingLanguage(\"12345\"));"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"        // numbers only"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"        assertTrue(ProgrammingLanguage.isValidProgrammingLanguage(\"angular js 8\"));"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"        // alphanumeric characters"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"        assertTrue(ProgrammingLanguage.isValidProgrammingLanguage(\"C\"));"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"        // with capital letters"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"        assertTrue(ProgrammingLanguage.isValidProgrammingLanguage(\"javascript version 10 hardcore\"));"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        // long ProgrammingLanguages"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"        assertTrue(ProgrammingLanguage.isValidProgrammingLanguage(\"C++\"));"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"        // with special characters"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"        assertTrue(ProgrammingLanguage.isValidProgrammingLanguage(\"#\"));"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"        // special characters only"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":53}},{"path":"src/test/java/seedu/address/model/ScheduleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.ALICE_MON_10_12;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.ALICE_WED_14_16;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.ALICE_WED_15_17;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.RANDOM_THU_11_13;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import static seedu.address.testutil.TypicalLessons.getTypicalSchedule;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"import seedu.address.testutil.ScheduleBuilder;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"content":"//@@author"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"public class ScheduleTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    private final Schedule schedule \u003d new Schedule();"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    private final Schedule scheduleWithAliceLessons \u003d new ScheduleBuilder().withLesson(ALICE_MON_10_12)"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"            .withLesson(ALICE_WED_14_16).build();"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    public void constructor() {"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        assertEquals(Collections.emptyList(), schedule.getSchedule());"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        assertEquals(new Time(\"23:59\"), schedule.getEarliestStartTime());"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        assertEquals(new Time(\"00:00\"), schedule.getLatestEndTime());"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    public void resetData_null_throwsNullPointerException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        schedule.resetData(null);"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    public void resetData_withValidReadOnlySchedule_replacesData() throws Exception {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        Schedule newData \u003d getTypicalSchedule();"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        schedule.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        assertEquals(newData, schedule);"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    public void resetData_withDuplicateLessons_throwsInval() throws Exception {"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        // Repeat Alice lesson twice"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        List\u003cLesson\u003e newLessons \u003d Arrays.asList(ALICE_MON_10_12, ALICE_MON_10_12);"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        ScheduleStub newData \u003d new ScheduleStub(newLessons);"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        schedule.resetData(newData);"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    public void resetData_withClashingLessons_throwsInval() throws Exception {"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        // Have clashing time slots for Alice"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        List\u003cLesson\u003e newLessons \u003d Arrays.asList(ALICE_WED_14_16, ALICE_WED_15_17);"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        ScheduleStub newData \u003d new ScheduleStub(newLessons);"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"        schedule.resetData(newData);"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"    public void deleteLesson_nonExistentLesson_scheduleUnchanged() throws Exception {"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        thrown.expect(LessonNotFoundException.class);"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"        scheduleWithAliceLessons.removeLesson(RANDOM_THU_11_13);"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"        Schedule expectedSchedule \u003d new ScheduleBuilder().withLesson(ALICE_MON_10_12)"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"                .withLesson(ALICE_WED_14_16).build();"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"        assertEquals(expectedSchedule, scheduleWithAliceLessons);"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"    public void getSchedule_modifySchedule_throwsUnsupportedOperationException() {"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"        schedule.getSchedule().remove(0);"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"     * A stub Schedule whose lessons can violate interface constraints."},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"    private static class ScheduleStub implements ReadOnlySchedule {"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"        ScheduleStub(Collection\u003cLesson\u003e lessons) {"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"            this.lessons.setAll(lessons);"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"        public ObservableList\u003cLesson\u003e getSchedule() {"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"            return lessons;"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"        public Time getLatestEndTime() {"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"            return null;"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"        public Time getEarliestStartTime() {"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"            return null;"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"null":1,"demitycho":107,"-":12}},{"path":"src/test/java/seedu/address/model/LessonListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.LessonList;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"public class LessonListTest {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"        LessonList uniqueStudentList \u003d new LessonList();"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"        uniqueStudentList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":14,"-":6}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.AMY;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BOB;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withStudent(BOB)"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"            .withStudent(AMY).build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        assertEquals(Collections.emptyList(), addressBook.getStudentList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    public void resetData_withDuplicateStudents_throwsAssertionError() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newStudents, newTags);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        addressBook.getStudentList().remove(0);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    public void updateStudent_detailsChanged_studentsAndTagsListUpdated() throws Exception {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withStudent(BOB).build();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        addressBookUpdatedToAmy.updateStudent(BOB, AMY);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withStudent(AMY).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withStudent(BOB).withStudent(AMY).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    public void removeTag_tagUsedByMultipleStudents_tagRemoved() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        Student amyWithoutFriendTag \u003d new StudentBuilder(AMY).withTags().build();"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        Student bobWithoutFriendTag \u003d new StudentBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withStudent(bobWithoutFriendTag)"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"                .withStudent(amyWithoutFriendTag).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"     * A stub ReadOnlyAddressBook whose students and tags lists can violate interface constraints."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        AddressBookStub(Collection\u003cStudent\u003e students, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"            this.students.setAll(students);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"        public ObservableList\u003cStudent\u003e getStudentList() {"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"            return students;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"        public Student findStudentByKey(UniqueKey key) {"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"            return students.get(0);"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":30,"demitycho":6,"-":104}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.AMY;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BENSON;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import static seedu.address.testutil.TypicalStudents.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        modelManager.getFilteredStudentList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withStudent(AMY).withStudent(BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        Schedule schedule \u003d new Schedule();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs, schedule);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        assertEquals(new ModelManager(addressBook, userPrefs, schedule), modelManager);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public void deleteTag_tagUsedByMultipleStudents_tagRemoved() throws Exception {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withStudent(AMY).withStudent(BOB).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        Schedule schedule \u003d new Schedule();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs, schedule);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        Student amyWithoutFriendTag \u003d new StudentBuilder(AMY).withTags().build();"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        Student bobWithoutFriendTag \u003d new StudentBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withStudent(amyWithoutFriendTag)"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"                .withStudent(bobWithoutFriendTag).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs, schedule), modelManager);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withStudent(ALICE).withStudent(BENSON).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        Schedule schedule \u003d new Schedule();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs, schedule);"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, schedule);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, schedule)));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, schedule)));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, schedule)));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":20,"demitycho":12,"-":72}},{"path":"src/test/java/seedu/address/model/UniqueStudentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.UniqueStudentList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class UniqueStudentListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"        uniqueStudentList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":15}},{"path":"src/test/java/seedu/address/logic/commands/EditPictureCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILEPICTUREPATH_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILEPICTUREPATH_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILEPICTUREPATH_AMY;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"public class EditPictureCommandTest {"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"    public void execute_validFilePath_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        Student editedPictureStudent \u003d new StudentBuilder(ALICE)"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"                .withProfilePictureUrl(\"data/profilePictures/c5daab.png\").build();"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"        //The above is to account for the the saving of profile picture in local data using the unique key of"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"        //the student."},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"        ProfilePicturePath profilePicturePath \u003d new ProfilePicturePath(VALID_PROFILEPICTUREPATH_AMY);"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"        EditPictureCommand editPictureCommand \u003d prepareCommand(INDEX_FIRST, profilePicturePath);"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"        String expectedMessage \u003d String.format(EditPictureCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedPictureStudent);"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedPictureStudent);"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(editPictureCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"    public void execute_invalidStudentIndexUnfilteredList_failure() {"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"        ProfilePicturePath profilePicturePath \u003d new ProfilePicturePath(VALID_PROFILEPICTUREPATH_AMY);"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"        EditPictureCommand editPictureCommand \u003d prepareCommand(outOfBoundIndex, profilePicturePath);"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(editPictureCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"     * Edit the misc info of a student in the filtered list where index is larger"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"     * than size of filtered list, but smaller than size of address book"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"    public void execute_invalidStudentIndexFilteredList_failure() {"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"        EditPictureCommand editPictureCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"                new ProfilePicturePath(PROFILEPICTUREPATH_DESC_AMY));"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(editPictureCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"    public void equals() throws Exception {"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"        final EditPictureCommand standardCommand \u003d prepareCommand(INDEX_FIRST,"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"                new ProfilePicturePath(PROFILEPICTUREPATH_DESC_AMY));"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":"        // same values -\u003e returns true"},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"        ProfilePicturePath profilePicturePath \u003d new ProfilePicturePath(PROFILEPICTUREPATH_DESC_AMY);"},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"        EditPictureCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST, profilePicturePath);"},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":95,"author":{"gitID":"samuelloh"},"content":"        // same object -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":97,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"samuelloh"},"content":"        commandWithSameValues.preProcessCommand();"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":101,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":"        // null -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":104,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":105,"author":{"gitID":"samuelloh"},"content":"        // different types -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":108,"author":{"gitID":"samuelloh"},"content":"        // different index -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(new EditPictureCommand(INDEX_SECOND,"},{"lineNumber":110,"author":{"gitID":"samuelloh"},"content":"                new ProfilePicturePath(PROFILEPICTUREPATH_DESC_AMY))));"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":"        // different profile picture path -\u003e returns false"},{"lineNumber":113,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(new EditPictureCommand(INDEX_FIRST,"},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":"                new ProfilePicturePath(PROFILEPICTUREPATH_DESC_BOB))));"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":117,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"     * Returns an {@code EditPictureCommand} with parameters {@code index} and {@code profilePicturePath}"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":"    private EditPictureCommand prepareCommand(Index index, ProfilePicturePath profilePicturePath) {"},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":"        EditPictureCommand editPictureCommand \u003d new EditPictureCommand(index, profilePicturePath);"},{"lineNumber":122,"author":{"gitID":"samuelloh"},"content":"        editPictureCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":"        return editPictureCommand;"},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":127}},{"path":"src/test/java/seedu/address/testutil/StudentUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":" * A utility class for Student."},{"lineNumber":15,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"public class StudentUtil {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     * Returns an add command string for adding the {@code student}."},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public static String getAddCommand(Student student) {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     * Returns the part of command string for the given {@code student}\u0027s details."},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public static String getStudentDetails(Student student) {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_PHONE + student.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_ADDRESS + student.getAddress().value + \" \");"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        sb.append(PREFIX_PROGRAMMING_LANGUAGE + student.getProgrammingLanguage().programmingLanguage + \" \");"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        student.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":26,"-":14}},{"path":"src/test/java/seedu/address/model/lesson/TimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"public class TimeTest {"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Time(null));"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    public void constructor_invalidTime_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"        String invalidTime \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    public void isValidTime() {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"        // null address"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        // invalid addresses"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        assertFalse(Time.isValidTime(\"\"));          // blank"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        assertFalse(Time.isValidTime(\"9:00\"));      // short form time"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        assertFalse(Time.isValidTime(\"09:60\"));     // Invalid minute"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        assertFalse(Time.isValidTime(\"24:00\"));     // Boundary value"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        assertFalse(Time.isValidTime(\"09-10\"));     // Using dash -"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        assertFalse(Time.isValidTime(\"09.10\"));     // Using ."},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        // valid addresses"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        assertTrue(Time.isValidTime(\"10:00\"));"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        assertTrue(Time.isValidTime(\"22:00\"));"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        assertTrue(Time.isValidTime(\"00:00\"));      //boundary"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        assertTrue(Time.isValidTime(\"23:59\"));"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":35,"-":8}},{"path":"src/test/java/seedu/address/model/lesson/DayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"public class DayTest {"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Day(null));"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    public void constructor_invalidDay_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"        String invalidDay \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Day(invalidDay));"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    public void isValidDay() {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"        // null address"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Day.isValidDay(null));"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        // invalid days"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        assertFalse(Day.isValidDay(\"\"));        // blank"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        assertFalse(Day.isValidDay(\"monday\"));  // long form names"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        assertFalse(Day.isValidDay(\"mo\"));      // short form names"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        assertFalse(Day.isValidDay(\"f\"));       // Single character day name"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        assertFalse(Day.isValidDay(\"MON\"));     // Capital letters"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        assertFalse(Day.isValidDay(\"funday\"));  // Wrong name"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        // valid days"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        assertTrue(Day.isValidDay(\"mon\"));      //Valid tests"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        assertTrue(Day.isValidDay(\"tue\"));      //Valid tests"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        assertTrue(Day.isValidDay(\"wed\"));"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        assertTrue(Day.isValidDay(\"thu\"));      //Valid tests"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        assertTrue(Day.isValidDay(\"fri\"));"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        assertTrue(Day.isValidDay(\"sat\"));      //Valid tests"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        assertTrue(Day.isValidDay(\"sun\"));      //Valid tests"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":38,"-":8}},{"path":"src/test/java/seedu/address/testutil/LessonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":" * A utility class to help with building Lesson objects."},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"public class LessonBuilder {"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    public static final String DEFAULT_KEY \u003d \"ffff00\";"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    public static final String DEFAULT_DAY \u003d \"mon\";"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public static final String DEFAULT_START_TIME \u003d \"10:00\";"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    public static final String DEFAULT_END_TIME \u003d \"12:00\";"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    private UniqueKey key;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    private Day day;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    private Time startTime;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    private Time endTime;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    public LessonBuilder() {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"        key \u003d new UniqueKey(DEFAULT_KEY);"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        day \u003d new Day(DEFAULT_DAY);"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        startTime \u003d new Time(DEFAULT_START_TIME);"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        endTime \u003d new Time(DEFAULT_END_TIME);"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    public LessonBuilder(Lesson lessonToCopy) {"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        key \u003d lessonToCopy.getUniqueKey();"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        day \u003d lessonToCopy.getDay();"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        startTime \u003d lessonToCopy.getStartTime();"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        endTime \u003d lessonToCopy.getEndTime();"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"     * Sets the {@code UniqueKey} of the {@code Lesson} that we are building."},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    public LessonBuilder withKey(String key) {"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        this.key \u003d new UniqueKey(key);"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"     * Sets the {@code Day} of the {@code Lesson} that we are building."},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    public LessonBuilder withDay(String day) {"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        this.day \u003d new Day(day);"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"     * Sets the {@code Time} of the {@code Lesson} that we are building."},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"    public LessonBuilder withStartTime(String startTime) {"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        this.startTime \u003d new Time (startTime);"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"     * Sets the {@code Time} of the {@code Lesson} that we are building."},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"    public LessonBuilder withEndTime(String endTime) {"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        this.endTime \u003d new Time(endTime);"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"     * Builds the lesson with given attributes"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"    public Lesson build() {"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        return new Lesson(key, day, startTime, endTime);"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":80}},{"path":"src/test/java/seedu/address/testutil/MilestoneBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Progress;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueTaskList;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Milestone objects."},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"public class MilestoneBuilder {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    private final Date defaultDate \u003d new Date(\"23/05/2018 23:59\");"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private final UniqueTaskList defaultTaskList \u003d setDefaultTaskList();"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    private final Progress defaultProgress \u003d new ProgressBuilder().build();"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    private final String defaultDescription \u003d \"Arrays\";"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    private Date dueDate;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private UniqueTaskList taskList;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private Progress progress;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private String description;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder() {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        dueDate \u003d defaultDate;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        taskList \u003d defaultTaskList;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        progress \u003d defaultProgress;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        description \u003d defaultDescription;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     * Initializes the MilestoneBuilder with the data of {@code milestoneToCopy}."},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder(Milestone milestoneToCopy) {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        dueDate \u003d milestoneToCopy.getDueDate();"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        taskList \u003d milestoneToCopy.getTaskList();"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        progress \u003d milestoneToCopy.getProgress();"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        description \u003d milestoneToCopy.getDescription();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     * Sets the {@code dueDate} of the milestone we are building."},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withDueDate(Date date) {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        this.dueDate \u003d date;"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     * Sets the {@code progress} of the milestone we are building."},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withProgress(Progress progress) {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        this.progress \u003d progress;"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"     * Sets the {@code tasksList} of the milestone we are building."},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withTaskList(List\u003cTask\u003e taskList) throws DuplicateTaskException {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        UniqueTaskList modelTaskList \u003d new UniqueTaskList();"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        for (Task task : taskList) {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"            modelTaskList.add(task);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        this.taskList \u003d modelTaskList;"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":""},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     * Sets the {@code description} of the milestone we are building."},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withDescription(String description) {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Task} to the {@code Milestone} we are building."},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateTaskException if the new task is a duplicate of an existing task in the milestone."},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withNewTask(Task newTask) throws DuplicateTaskException {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        taskList.add(newTask);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        progress \u003d new ProgressBuilder(progress).withOneNewIncompletedTaskToTotal().build();"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Task} from the {@code Milestone} we are building"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"     * @throws TaskNotFoundException if the task is not found in the milestone."},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withoutTask(Task task) throws TaskNotFoundException {"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        taskList.remove(task);"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        if (task.isCompleted()) {"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"            progress \u003d new ProgressBuilder().withOneLessCompletedTaskFromTotal().build();"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"            progress \u003d new ProgressBuilder(progress).withOneLessIncompletedTaskFromTotal().build();"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":""},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":""},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"     * Marks the specified {@code Task} in the {@code taskList} of the {@code Milestone} we are building as completed."},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withTaskCompleted(Index taskIndex) throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        Task targetTask \u003d taskList.get(taskIndex);"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":""},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        if (!targetTask.isCompleted()) {"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"            Task completedTargetTask \u003d new TaskBuilder(targetTask).asCompleted().build();"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"            taskList.setTask(targetTask, completedTargetTask);"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"            progress \u003d new ProgressBuilder(progress).withOneMoreCompletedTask().build();"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":""},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":""},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"     * Creates and returns the Milestone object with the current attributes."},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"    public Milestone build() {"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"        return new Milestone(dueDate, taskList, progress, description);"},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":""},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"     * Sets the default {@code UniqueTasklist}"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"    private static UniqueTaskList setDefaultTaskList() {"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        UniqueTaskList taskList \u003d new UniqueTaskList();"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":""},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"            taskList.add(TypicalTasks.TASK_1);"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"            taskList.add(TypicalTasks.TASK_2);"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"            taskList.add(TypicalTasks.TASK_3);"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Cannot have duplicate task in test\");"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":""},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"        return taskList;"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":150}},{"path":"src/test/java/seedu/address/testutil/TypicalStudents.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROGRAMMING_LANGUAGE_AMY;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROGRAMMING_LANGUAGE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":" * A utility class containing a list of {@code Student} objects to be used in tests."},{"lineNumber":33,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"public class TypicalStudents {"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    public static final Student ALICE \u003d new StudentBuilder().withKey(\"c5daab\").withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            .withTags(\"friends\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public static final Student  BENSON \u003d buildStudentWithFilledDashboard();"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    public static final Student CARL \u003d new StudentBuilder().withKey(\"8e90ba\").withName(\"Carl Kurz\")"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"            .withPhone(\"95352563\").withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            .withProgrammingLanguage(\"Java\").build();"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    public static final Student DANIEL \u003d new StudentBuilder().withKey(\"dd5605\").withName(\"Daniel Meier\")"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\")"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"            .withAddress(\"10th street\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    public static final Student ELLE \u003d new StudentBuilder().withKey(\"abbcfd\").withName(\"Elle Meyer\")"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"            .withPhone(\"9482224\").withEmail(\"werner@example.com\").withAddress(\"michigan ave\")"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"            .withProgrammingLanguage(\"Java\").build();"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    public static final Student FIONA \u003d new StudentBuilder().withKey(\"9d2b20\").withName(\"Fiona Kunz\")"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"            .withPhone(\"9482427\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"            .withProgrammingLanguage(\"Java\").withAllergies(\"nuts\").withRemarks(\"well behaved\").build();"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    public static final Student GEORGE \u003d new StudentBuilder().withKey(\"4e0965\").withName(\"George Best\")"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"            .withPhone(\"9482442\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"            .withProgrammingLanguage(\"Java\").withNextOfKinPhone(\"90123456\").withNextOfKinName(\"Sam\").build();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    // Manually added"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    public static final Student HOON \u003d new StudentBuilder().withKey(\"bbcd69\").withName(\"Hoon Meier\")"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"            .withPhone(\"8482424\").withEmail(\"stefan@example.com\")"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"            .withAddress(\"little india\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    public static final Student IDA \u003d new StudentBuilder().withKey(\"5dc953\").withName(\"Ida Mueller\")"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"            .withPhone(\"8482131\").withEmail(\"hans@example.com\")"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"            .withAddress(\"chicago ave\").withProgrammingLanguage(\"Java\").build();"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    public static final Student AMY \u003d new StudentBuilder().withKey(\"f20af3\").withName(VALID_NAME_AMY)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"            .withProgrammingLanguage((VALID_PROGRAMMING_LANGUAGE_AMY)).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"    public static final Student BOB \u003d new StudentBuilder().withKey(\"c81b30\").withName(VALID_NAME_BOB)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"            .withProgrammingLanguage(VALID_PROGRAMMING_LANGUAGE_BOB).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches name MEIER"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"    public static final String TAG_MATCHING_OWESMONEY \u003d \"owesMoney\"; // A keyword that matches tag owesMoney"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    private TypicalStudents() {} // prevents instantiation"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"     * Returns an {@code AddressBook} with all the typical students."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        for (Student student : getTypicalStudents()) {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"            try {"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                ab.addStudent(student);"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"            } catch (DuplicateStudentException e) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"    public static List\u003cStudent\u003e getTypicalStudents() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":""},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     * Builds and return a student with 1 milestone and 1 task in the dashboard"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    private static Student buildStudentWithFilledDashboard() {"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        Student student;"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"            student \u003d new StudentBuilder().withKey(\"558a24\").withName(\"Benson Meier\")"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"                    .withTags(\"owesMoney\", \"friends\").withProgrammingLanguage(\"Java\")"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"                    .withNewMilestone(new Milestone(new Date(\"31/12/2018 23:59\"), \"Arrays\"))"},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":"                    .withNewTask(Index.fromOneBased(1),"},{"lineNumber":113,"author":{"gitID":"samuelloh"},"content":"                            new Task(\"Learn Array syntax\", \"Refer to textbook\"))"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"                    .build();"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateMilestoneException e) {"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Should not have duplicated milestone\");"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Should not have duplicated task\");"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        } catch (MilestoneNotFoundException e) {"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Should not have missing milestone\");"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":""},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        return student;"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":59,"samuelloh":5,"demitycho":24,"-":37}},{"path":"src/test/java/seedu/address/testutil/ProgressBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Progress;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Progress objects."},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class ProgressBuilder {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    public static final int DEFAULT_TOTAL_TASKS \u003d 3;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    public static final int DEFAULT_NUM_COMPLETED_TASKS \u003d 0;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    private int totalTasks;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private int numCompletedTasks;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    private int progressInPercent;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    private String value;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder() {"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        totalTasks \u003d DEFAULT_TOTAL_TASKS;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        numCompletedTasks \u003d DEFAULT_NUM_COMPLETED_TASKS;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     * Initializes the ProgressBuilder with the data of {@code progressToCopy}."},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder(Progress progressToCopy) {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        totalTasks \u003d progressToCopy.getTotalTasks();"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        numCompletedTasks \u003d progressToCopy.getNumCompletedTasks();"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        progressInPercent \u003d progressToCopy.getProgressInPercent();"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        value \u003d progressToCopy.getValue();"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"     * Sets the {@code totalTasks} of the {@code Progress} we are building"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withTotalTask(int totalTasks) {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        this.totalTasks \u003d totalTasks;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     * Sets the {@code numCompletedTask} of the {@code Progress} we are building"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withNumCompletedTasks(int numCompletedTasks) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        this.numCompletedTasks \u003d numCompletedTasks;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     * Adds 1 to the {@code totalTask} of the {@code Progress} we are building."},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withOneNewIncompletedTaskToTotal() {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        this.totalTasks +\u003d 1;"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"     * Subtracts 1 from the {@code totalTask} of the {@code Progress} we are building."},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withOneLessIncompletedTaskFromTotal() {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        this.totalTasks -\u003d 1;"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"     * Subtracts 1 from the {@code totalTask} and {@code numCompletedTask } of the {@code Progress} we are building."},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withOneLessCompletedTaskFromTotal() {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        this.totalTasks -\u003d 1;"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        this.numCompletedTasks -\u003d 1;"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     * Adds 1 to the {@code numCompletedTasks} of the {@code Progress} we are building."},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withOneMoreCompletedTask() {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        this.numCompletedTasks +\u003d 1;"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"     * Creates and returns the Progress object with the current attributes."},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"    public Progress build() {"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        return new Progress(value);"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":""},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"     * Sets the {@code progressInPercent} and {@code value} of the Progress we are building with the current attributes."},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    private void setProgressPercentAndValue() {"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        this.progressInPercent \u003d (int) (((double) numCompletedTasks / totalTasks) * 100);"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        this.value \u003d this.numCompletedTasks + \"/\" + this.totalTasks;"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":110}},{"path":"src/test/java/seedu/address/testutil/TypicalMilestones.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" * A utility class containing a list of {@code Milestone} objects to be used in tests."},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"public class TypicalMilestones {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    public static final Milestone MILESTONE_1 \u003d new MilestoneBuilder().withDescription(\"Arrays\")"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"            .withDueDate(new Date(\"31/12/2018 23:59\")).build();"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public static final Milestone MILESTONE_2 \u003d new MilestoneBuilder().withDescription(\"Recursion\")"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"            .withDueDate(new Date(\"01/12/2018 10:00\")).build();"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public static final Milestone MILESTONE_3 \u003d new MilestoneBuilder().withDescription(\"Strings\")"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"            .withDueDate(new Date(\"22/05/2018 11:59\")).build();"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public static List\u003cMilestone\u003e getTypicalMilestones() {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MILESTONE_1, MILESTONE_2, MILESTONE_3));"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":22,"-":4}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withStudent(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Student} to the {@code AddressBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public AddressBookBuilder withStudent(Student student) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"            addressBook.addStudent(student);"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"            throw new IllegalArgumentException(\"student is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":8,"-":45}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    public static final Index INDEX_FOURTH \u003d Index.fromOneBased(4);"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    public static final Index INDEX_FIFTH \u003d Index.fromOneBased(5);"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    public static final Index INDEX_SIXTH \u003d Index.fromOneBased(6);"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    public static final Index INDEX_SEVENTH \u003d Index.fromOneBased(7);"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    public static final Index INDEX_EIGHTH \u003d Index.fromOneBased(8);"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"demitycho":4,"-":9}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Milestone objects."},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class TaskBuilder {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    private final String defaultName \u003d \"Learn syntax\";"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    private final String defaultDescription \u003d \"Refer to coding website\";"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    private final boolean defaultIsCompleted \u003d false;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private String name;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    private String description;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    private boolean isCompleted;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public TaskBuilder() {"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        name \u003d defaultName;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        description \u003d defaultDescription;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        isCompleted \u003d defaultIsCompleted;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}."},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        name \u003d taskToCopy.getName();"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        description \u003d taskToCopy.getDescription();"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        isCompleted \u003d taskToCopy.isCompleted();"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Sets the {@code name} of the {@code Task} we are building"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public TaskBuilder withName(String name) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"     * Sets the {@code description} of the {@code Task} we are building"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public TaskBuilder withDescription(String description) {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"     * Sets the {@code isCompleted} of the {@code Task} we are building as true"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    public TaskBuilder asCompleted() {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        this.isCompleted \u003d true;"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":""},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"     * Creates and returns the Task object with the current attributes."},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    public Task build() {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        return new Task(name, description, isCompleted);"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":64}},{"path":"src/test/java/seedu/address/testutil/LessonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.AddLessonCommand;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":" * A utility class for Lesson."},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"public class LessonUtil {"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"     * Returns an add command string for adding the {@code lesson}."},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    public static String getAddLessonCommand(Lesson lesson, Index targetIndex) {"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"        return AddLessonCommand.COMMAND_WORD + \" \" + getLessonDetails(lesson, targetIndex);"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     * Returns the part of command string for the given {@code lesson}\u0027s details."},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public static String getLessonDetails(Lesson lesson, Index targetIndex) {"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        sb.append(targetIndex + \"  \");"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        sb.append(PREFIX_DAY + lesson.getDay().value + \" \");"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        sb.append(PREFIX_START_TIME + lesson.getStartTime().value + \" \");"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        sb.append(PREFIX_END_TIME + lesson.getEndTime().value + \" \");"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        return sb.toString();"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":35}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Returns the middle index of the student in the {@code model}\u0027s student list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        return Index.fromOneBased(model.getAddressBook().getStudentList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"     * Returns the last index of the student in the {@code model}\u0027s student list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        return Index.fromOneBased(model.getAddressBook().getStudentList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     * Returns the student in the {@code model}\u0027s student list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public static Student getStudent(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        return model.getAddressBook().getStudentList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":8,"-":46}},{"path":"src/test/java/seedu/address/testutil/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Progress;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Allergies;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.MiscellaneousInfo;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinName;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinPhone;"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Remarks;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Student objects."},{"lineNumber":33,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"public class StudentBuilder {"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    public static final String DEFAULT_KEY \u003d \"ffff00\";"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_NAME \u003d \"James Peterson\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_PROGRAMMING_LANGUAGE \u003d \"Java\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_FAVOURITE \u003d \"false\";"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    public static final String DEFAULT_PATH \u003d \"/src/main/resources/view/images/profile_photo_placeholder\";"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    private UniqueKey key;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    private ProgrammingLanguage programmingLanguage;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    private Favourite favourite;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    private Dashboard dashboard;"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"    private ProfilePicturePath profilePicturePath;"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"    private MiscellaneousInfo miscellaneousInfo;"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":""},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public StudentBuilder() {"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        key \u003d new UniqueKey(DEFAULT_KEY);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d new ProgrammingLanguage(DEFAULT_PROGRAMMING_LANGUAGE);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        favourite \u003d new Favourite(DEFAULT_FAVOURITE);"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        dashboard \u003d new Dashboard();"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"        profilePicturePath \u003d new ProfilePicturePath(ProfilePicturePath.DEFAULT_PROFILE_PICTURE);"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        miscellaneousInfo \u003d new MiscellaneousInfo();"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     * Initializes the StudentBuilder with the data of {@code studentToCopy}."},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    public StudentBuilder(Student studentToCopy) {"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        key \u003d studentToCopy.getUniqueKey();"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        name \u003d studentToCopy.getName();"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        phone \u003d studentToCopy.getPhone();"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        email \u003d studentToCopy.getEmail();"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        address \u003d studentToCopy.getAddress();"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d studentToCopy.getProgrammingLanguage();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        favourite \u003d studentToCopy.getFavourite();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        dashboard \u003d studentToCopy.getDashboard();"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"        profilePicturePath \u003d studentToCopy.getProfilePicturePath();"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"        miscellaneousInfo \u003d studentToCopy.getMiscellaneousInfo();"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":""},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"     * Sets the {@code UniqueKey} of the {@code Student} that we are building."},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"    public StudentBuilder withKey(String key) {"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"        this.key \u003d new UniqueKey(key);"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Name} of the {@code Student} that we are building."},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Address} of the {@code Student} that we are building."},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":""},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Phone} of the {@code Student} that we are building."},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":""},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Email} of the {@code Student} that we are building."},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":""},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Favourite} of the {@code Student} that we are building."},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withFavourite(boolean val) {"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d new Favourite(val);"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":""},{"lineNumber":145,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code milestone} to the {@code dashboard} of the {@code Student} that we are building."},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateMilestoneException if the new milestone is a duplicate of an existing milestone"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withNewMilestone(Milestone milestone) throws DuplicateMilestoneException {"},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"        dashboard.getMilestoneList().add(milestone);"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":153,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"yapni"},"content":""},{"lineNumber":155,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code task} to the specified milestone in the {@code dashboard}"},{"lineNumber":157,"author":{"gitID":"yapni"},"content":"     * of the {@code Student} we are building."},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":159,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateTaskException if the new task is a duplicate of an existing task"},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withNewTask(Index milestoneIndex, Task task) throws DuplicateTaskException,"},{"lineNumber":162,"author":{"gitID":"yapni"},"content":"            DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"        Milestone milestone \u003d dashboard.getMilestoneList().get(milestoneIndex);"},{"lineNumber":164,"author":{"gitID":"yapni"},"content":""},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"        milestone.getTaskList().add(task);"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"        Progress updatedProgress \u003d new Progress(milestone.getProgress().getTotalTasks() + 1,"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":"                milestone.getProgress().getNumCompletedTasks());"},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"        Milestone updatedMilestone \u003d new Milestone(milestone.getDueDate(), milestone.getTaskList(),"},{"lineNumber":169,"author":{"gitID":"yapni"},"content":"                updatedProgress, milestone.getDescription());"},{"lineNumber":170,"author":{"gitID":"yapni"},"content":"        dashboard.getMilestoneList().setMilestone(milestone, updatedMilestone);"},{"lineNumber":171,"author":{"gitID":"yapni"},"content":""},{"lineNumber":172,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":173,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"yapni"},"content":""},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"    //@@author samuelloh"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code programminglanguage} of the {@code Student} that we are building."},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withProgrammingLanguage(String progLang) {"},{"lineNumber":180,"author":{"gitID":"samuelloh"},"content":"        this.programmingLanguage \u003d new ProgrammingLanguage(progLang);"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the student we are building"},{"lineNumber":186,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withAllergies(String allergies) {"},{"lineNumber":188,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo(new Allergies(allergies), miscellaneousInfo.getNextOfKinName(),"},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getNextOfKinPhone(), miscellaneousInfo.getRemarks());"},{"lineNumber":190,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":193,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the student we are building"},{"lineNumber":195,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withNextOfKinName(String nextOfKinName) {"},{"lineNumber":197,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo(miscellaneousInfo.getAllergies(),"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"                new NextOfKinName(nextOfKinName), miscellaneousInfo.getNextOfKinPhone(),"},{"lineNumber":199,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getRemarks());"},{"lineNumber":200,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":201,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":203,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the student we are building"},{"lineNumber":205,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withNextOfKinPhone(String nextOfKinPhone) {"},{"lineNumber":207,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo(miscellaneousInfo.getAllergies(),"},{"lineNumber":208,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getNextOfKinName(), new NextOfKinPhone(nextOfKinPhone),"},{"lineNumber":209,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getRemarks());"},{"lineNumber":210,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":211,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":213,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the student we are building"},{"lineNumber":215,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withRemarks(String remarks) {"},{"lineNumber":217,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo(miscellaneousInfo.getAllergies(),"},{"lineNumber":218,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getNextOfKinName(), miscellaneousInfo.getNextOfKinPhone(), new Remarks(remarks));"},{"lineNumber":219,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":220,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"samuelloh"},"content":"    //@@author"},{"lineNumber":222,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":223,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"samuelloh"},"content":"     * Builds the student with given attributes"},{"lineNumber":225,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"yapni"},"content":"    public Student build() {"},{"lineNumber":227,"author":{"gitID":"samuelloh"},"content":"        return new Student(key, name, phone, email, address, programmingLanguage, tags,"},{"lineNumber":228,"author":{"gitID":"samuelloh"},"content":"                favourite, dashboard, profilePicturePath, miscellaneousInfo);"},{"lineNumber":229,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":123,"samuelloh":66,"demitycho":13,"-":28}},{"path":"src/test/java/seedu/address/testutil/EditMiscDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditMiscCommand.EditMiscDescriptor;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Allergies;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinName;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinPhone;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Remarks;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":" * A utility class to help with building an EditMiscDescriptor object"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"public class EditMiscDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"    private EditMiscDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    public EditMiscDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"        descriptor \u003d new EditMiscDescriptor();"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    public EditMiscDescriptorBuilder(EditMiscDescriptor editMiscDescriptor) {"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        this.descriptor \u003d new EditMiscDescriptor(editMiscDescriptor);"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"     * Returns an {@code EditMiscDescriptor} object with fields containing {@code student}\u0027s miscellaneous details"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"    public EditMiscDescriptorBuilder(Student student) {"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"        this.descriptor \u003d new EditMiscDescriptor();"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        this.descriptor.setAllergies(student.getMiscellaneousInfo().getAllergies());"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"        this.descriptor.setNextOfKinName(student.getMiscellaneousInfo().getNextOfKinName());"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        this.descriptor.setNextOfKinPhone(student.getMiscellaneousInfo().getNextOfKinPhone());"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"        this.descriptor.setRemarks(student.getMiscellaneousInfo().getRemarks());"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the {@code EditMiscDescriptor} that is being built"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"     * @param allergies"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    public EditMiscDescriptorBuilder withAllergies(String allergies) {"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"        this.descriptor.setAllergies(new Allergies(allergies));"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code NextOfKinName} of the {@code EditMiscDescriptor} that is being built"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"     * @param nextOfKinName"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"     * */"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    public EditMiscDescriptorBuilder withNextOfKinName(String nextOfKinName) {"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        this.descriptor.setNextOfKinName(new NextOfKinName(nextOfKinName));"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code NextOfKinPhone} of the {@code EditMiscDescriptor} that is being built"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"     * @param nextOfKinPhone"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"    public EditMiscDescriptorBuilder withNextOfKinPhone(String nextOfKinPhone) {"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"        this.descriptor.setNextOfKinPhone(new NextOfKinPhone(nextOfKinPhone));"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Remarks} of the {@code EditMiscDescriptor} that is being built"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"     * @param remarks"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"    public EditMiscDescriptorBuilder withRemarks(String remarks) {"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"        this.descriptor.setRemarks(new Remarks(remarks));"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"    public EditMiscDescriptor build() {"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        return descriptor;"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"//@author"}],"authorContributionMap":{"samuelloh":77}},{"path":"src/test/java/seedu/address/testutil/TypicalLessons.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":" * A utility class containing a list of {@code Milestone} objects to be used in tests."},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"public class TypicalLessons {"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    //Variable names in terms of \u003cStudent\u003e_\u003cDay\u003e_\u003cStartTime\u003e_\u003cEndTime\u003e"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    public static final Lesson ALICE_MON_10_12 \u003d new LessonBuilder().withKey(\"c5daab\").withDay(\"mon\")"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"            .withStartTime(\"10:00\").withEndTime(\"12:00\").build();"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    public static final Lesson ALICE_WED_14_16 \u003d new LessonBuilder().withKey(\"c5daab\").withDay(\"wed\")"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"            .withStartTime(\"14:00\").withEndTime(\"16:00\").build();"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    public static final Lesson ALICE_WED_15_17 \u003d new LessonBuilder().withKey(\"c5daab\").withDay(\"wed\")"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"            .withStartTime(\"15:00\").withEndTime(\"17:00\").build();"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    public static final Lesson CARL_THU_11_13 \u003d new LessonBuilder().withKey(\"8e90ba\").withDay(\"thu\")"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"            .withStartTime(\"11:00\").withEndTime(\"13:00\").build();"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public static final Lesson FIONA_SAT_15_17 \u003d new LessonBuilder().withKey(\"9d2b20\").withDay(\"sat\")"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"            .withStartTime(\"15:00\").withEndTime(\"17:00\").build();"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    public static final Lesson RANDOM_THU_11_13 \u003d new LessonBuilder().withKey(\"c0ffee\").withDay(\"thu\")"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"            .withStartTime(\"11:00\").withEndTime(\"13:00\").build();"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    public static List\u003cLesson\u003e getTypicalLessons() {"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_MON_10_12, ALICE_WED_14_16, CARL_THU_11_13));"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"     * Returns an {@code AddressBook} with all the typical students."},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    public static Schedule getTypicalSchedule() {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        Schedule sch \u003d new Schedule();"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        for (Lesson lesson : getTypicalLessons()) {"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"            try {"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"                sch.addLesson(lesson);"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"            } catch (DuplicateLessonException e) {"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"            } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"                throw new AssertionError(\"cannot clash\");"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        return sch;"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":2,"demitycho":46,"-":4}},{"path":"src/test/java/seedu/address/testutil/TypicalTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class TypicalTasks {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    public static final Task TASK_1 \u003d new TaskBuilder().withName(\"Learn syntax\").withDescription(\"Refer to website\")"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"            .build();"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public static final Task TASK_2 \u003d new TaskBuilder().withName(\"Practice ex22\").withDescription(\"From problem set 4\")"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"            .build();"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public static final Task TASK_3 \u003d new TaskBuilder().withName(\"Learn framework\").withDescription(\"Can be any one\")"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"            .build();"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public static final Task TASK_4 \u003d new TaskBuilder().withName(\"Hands on practice\").withDescription(\"Go to lab\")"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"            .build(); // Extra task not added to any default task list of a milestone"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TASK_1, TASK_2, TASK_3));"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":23,"-":4}},{"path":"src/test/java/guitests/guihandles/StudentCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * Provides a handle to a student card in the student list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class StudentCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public StudentCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"    public List\u003cString\u003e getTagsColour(String tag) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"samuelloh":7,"-":70}},{"path":"src/test/java/seedu/address/testutil/ScheduleBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":" * A utility class to help with building Schedule objects."},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" *     {@code Schedule sd \u003d new ScheduleBuilder().withLesson.build();}"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"public class ScheduleBuilder {"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    private Schedule schedule;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public ScheduleBuilder() {"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"        schedule \u003d new Schedule();"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    public ScheduleBuilder(Schedule schedule) {"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"     * Adds a new {@code Student} to the {@code Schedule} that we are building."},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    public ScheduleBuilder withLesson(Lesson lesson) {"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"            schedule.addLesson(lesson);"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        } catch (DuplicateLessonException dpe) {"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"            throw new IllegalArgumentException(\"lesson is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"            throw new IllegalArgumentException(\"Lesson is expected to be non-clashing\");"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    public Schedule build() {"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        return schedule;"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":43}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    private final StudentListPanelHandle studentListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        studentListPanel \u003d new StudentListPanelHandle(getChildNode(StudentListPanelHandle.STUDENT_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public StudentListPanelHandle getStudentListPanel() {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        return studentListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":47}},{"path":"src/test/java/seedu/address/testutil/DashboardBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.MilestoneBuilder;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueMilestoneList;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.TaskNotFoundException;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Dashboard objects."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class DashboardBuilder {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    private UniqueMilestoneList milestoneList;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * Initializes the DashboardBuilder with the data of {@code dashboardToCopy}."},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder(Dashboard dashboardToCopy) {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        requireNonNull(dashboardToCopy);"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        milestoneList \u003d dashboardToCopy.getMilestoneList();"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Milestone} to the {@code Dashboard} we are building."},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateMilestoneException if the new milestone is a duplicate of an existing milestone in the dashboard"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withNewMilestone(Milestone milestone) throws DuplicateMilestoneException {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        requireNonNull(milestone);"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        milestoneList.add(milestone);"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Milestone} from the {@code Dashboard} of the {@code Student} that we are building."},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     * @throws MilestoneNotFoundException if the specified milestone is not found in the dashboard"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withoutMilestone(Milestone milestone) throws MilestoneNotFoundException {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        requireNonNull(milestone);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        milestoneList.remove(milestone);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Task} to the specified {@code Milestone} in the {@code Dashboard} we are building"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateTaskException if the new task is a duplicate of an existing task in the milestone"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withNewTask(Index milestoneIndex, Task task) throws DuplicateTaskException,"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"            DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(milestoneIndex, task);"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        Milestone targetMilestone \u003d milestoneList.get(milestoneIndex);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        Milestone updatedMilestone \u003d new MilestoneBuilder(targetMilestone).withNewTask(task).build();"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        milestoneList.setMilestone(targetMilestone, updatedMilestone);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Task} from the specified {@code Milestone} in the {@code Dashboard} we are building."},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"     * @throws TaskNotFoundException if the specified task is not found in the milestone"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withoutTask(Index milestoneIndex, Task task) throws DuplicateMilestoneException,"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"            MilestoneNotFoundException, TaskNotFoundException {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(milestoneIndex, task);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        Milestone targetMilestone \u003d milestoneList.get(milestoneIndex);"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        Milestone updatedMilestone \u003d new MilestoneBuilder(targetMilestone).withoutTask(task).build();"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        milestoneList.setMilestone(targetMilestone, updatedMilestone);"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"     * Marks the specified {@code Task} from a {@code Milestone} in the {@code Dashboard} we are building as completed."},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withTaskCompleted(Index milestoneIndex, Index taskIndex) throws DuplicateTaskException,"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"            TaskNotFoundException, DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(milestoneIndex, taskIndex);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        Milestone targetMilestone \u003d milestoneList.get(milestoneIndex);"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        Milestone updatedMilestone \u003d new MilestoneBuilder(targetMilestone).withTaskCompleted(taskIndex).build();"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        milestoneList.setMilestone(targetMilestone, updatedMilestone);"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":""},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":""},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"    public Dashboard build() {"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        return new Dashboard(milestoneList);"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":101,"-":4}},{"path":"src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" * A utility class to help with building EditStudentDescriptor objects."},{"lineNumber":20,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"public class EditStudentDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    private EditCommand.EditStudentDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditCommand.EditStudentDescriptor();"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        this.descriptor \u003d new EditCommand.EditStudentDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder(Student student) {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        descriptor \u003d new EditCommand.EditStudentDescriptor();"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        descriptor.setKey(student.getUniqueKey());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        descriptor.setName(student.getName());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        descriptor.setPhone(student.getPhone());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        descriptor.setEmail(student.getEmail());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        descriptor.setAddress(student.getAddress());"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        descriptor.setProgrammingLanguage(student.getProgrammingLanguage());"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        descriptor.setTags(student.getTags());"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    public EditStudentDescriptorBuilder withKey(String key) {"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        descriptor.setKey(new UniqueKey(key));"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withPhone(String phone) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withEmail(String email) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Address} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withAddress(String address) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"     * Sets the {@code programminglanguage} of the {@code EditStudentDescriptor} that we are building."},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withProgrammingLanguage(String progLanguage) {"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        descriptor.setProgrammingLanguage(new ProgrammingLanguage(progLanguage));"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"     * that we are building."},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"    public EditStudentDescriptorBuilder withTags(String... tags) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    public EditCommand.EditStudentDescriptor build() {"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        return descriptor;"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":74,"samuelloh":1,"demitycho":7,"-":26}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.model.StudentInfoChangedEvent;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.model.StudentInfoDisplayEvent;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.BrowserDisplayEvent;"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.ui.ShowStudentProfileEvent;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    public static final String STUDENT_MISC_INFO_PAGE \u003d \"StudentMiscInfo.html\";"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"    public static final String STUDENT_INFO_PAGE_STYLESHEET \u003d \"StudentInfoTheme.css\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            \"https://www.google.com.sg/maps/place/\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    private void loadStudentPage(Student student) {"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        Address location \u003d student.getAddress();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String append \u003d location.urlstyle();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + append);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"    //@author samuelloh"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"     * Loads the student\u0027s full information page on the browser including his/her profile picture if it exists."},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    private void loadStudentInfoPage() {"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"        String studentPageFilePath \u003d constructPathToLoad();"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"        String finalPath \u003d testIfFileExists(studentPageFilePath);"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"        loadPage(finalPath);"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"     * Constructs the path to load the html files for student info display in string form"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"     * @return absolute path to file of studentMiscInfo.html in string"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"    public String constructPathToLoad() {"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        String jarFolder \u003d new File(MainApp.class.getProtectionDomain().getCodeSource().getLocation()"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"                .getPath()).getParentFile().getPath().replace(\u0027\\\\\u0027, \u0027/\u0027);"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"        String studentPageFilePath \u003d \"file:/\" + jarFolder + \"/data/view/\" + STUDENT_MISC_INFO_PAGE;"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"        return studentPageFilePath;"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"     * Tests if the file with the specified filepath exists. This is to handle a directory issue when"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"     * running the app in IDE instead of the Jar file."},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"    public String testIfFileExists(String testPath) {"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        File toTest \u003d new File(testPath.substring(6).replace(\"%20\", \" \"));"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"        if (!toTest.exists()) {"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"            String resourceFile \u003d MainApp.class.getResource(FXML_FILE_FOLDER).toExternalForm();"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"            String mainFile \u003d  resourceFile.substring(0, resourceFile.lastIndexOf(\"out\"));"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"            return new String(mainFile + \"data/view/\" + STUDENT_MISC_INFO_PAGE);"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":"        } else {"},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"            return testPath;"},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":93,"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"samuelloh"},"content":"    public void reloadPage() {"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"        Platform.runLater(() -\u003e browser.getEngine().reload());"},{"lineNumber":101,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"    private void handleBrowserDisplayEvent(BrowserDisplayEvent event) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        loadStudentPage(event.getStudentSelection().student);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":125,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"    @Subscribe"},{"lineNumber":128,"author":{"gitID":"samuelloh"},"content":"    private void handleStudentInfoDisplayEvent(StudentInfoDisplayEvent event) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":130,"author":{"gitID":"samuelloh"},"content":"        loadStudentInfoPage();"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":"        raise(new ShowStudentProfileEvent());"},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":134,"author":{"gitID":"samuelloh"},"content":"    @Subscribe"},{"lineNumber":135,"author":{"gitID":"samuelloh"},"content":"    private void handleStudentInfoChangedEvent(StudentInfoChangedEvent event) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":"        String location \u003d browser.getEngine().getLocation();"},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":"        if (location.contains(STUDENT_MISC_INFO_PAGE)) {"},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":"            reloadPage();"},{"lineNumber":140,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"yapni":7,"samuelloh":69,"-":66}},{"path":"src/test/java/seedu/address/logic/commands/EditMiscCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_MISC_AMY;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_MISC_BOB;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGIES_BOB;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARKS_BOB;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalStudents.ALICE;"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalStudents.CARL;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditMiscCommand.EditMiscDescriptor;"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.Model;"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"import seedu.address.testutil.EditMiscDescriptorBuilder;"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":" * and unit tests for EditMiscCommand."},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"public class EditMiscCommandTest {"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"        Student editedMiscStudent \u003d new StudentBuilder(ALICE).withAllergies(VALID_ALLERGIES_BOB)"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"                .withNextOfKinName(\"Bob\").withNextOfKinPhone(\"12345678\").withRemarks(VALID_REMARKS_BOB).build();"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder(editedMiscStudent).build();"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"        String expectedMessage \u003d String.format(EditMiscCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedMiscStudent);"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedMiscStudent);"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(editMiscCommand, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"        Student editedMiscStudent \u003d studentInList.withAllergies(VALID_ALLERGIES_BOB)"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"                .withRemarks(VALID_REMARKS_BOB).build();"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder().withAllergies(VALID_ALLERGIES_BOB)"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"                .withRemarks(VALID_REMARKS_BOB).build();"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(indexLastStudent, descriptor);"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"        String expectedMessage \u003d String.format(EditMiscCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedMiscStudent);"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"        expectedModel.updateStudent(lastStudent, editedMiscStudent);"},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(editMiscCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(INDEX_FIRST, new EditMiscDescriptor());"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":"        Student editedMiscStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"        String expectedMessage \u003d String.format(EditMiscCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedMiscStudent);"},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":95,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(editMiscCommand, model, expectedMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":99,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"    public void execute_duplicateStudentUnfilteredList_failure() throws Exception {"},{"lineNumber":101,"author":{"gitID":"samuelloh"},"content":"        Student firstStudent \u003d new StudentBuilder(ALICE).withAllergies(VALID_ALLERGIES_BOB)"},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":"                .withRemarks(VALID_REMARKS_BOB).build();"},{"lineNumber":103,"author":{"gitID":"samuelloh"},"content":"        model.updateStudent(model.getFilteredStudentList().get(INDEX_SECOND.getZeroBased()), firstStudent);"},{"lineNumber":104,"author":{"gitID":"samuelloh"},"content":"        // To modify the 2nd student to be exactly the same as the"},{"lineNumber":105,"author":{"gitID":"samuelloh"},"content":"        // 1st student, except for the students miscellaneous info."},{"lineNumber":106,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder(firstStudent).build();"},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":108,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(editMiscCommand, model, EditMiscCommand.MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":110,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"samuelloh"},"content":"    public void execute_invalidStudentIndexUnfilteredList_failure() {"},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder().withAllergies(VALID_ALLERGIES_BOB).build();"},{"lineNumber":116,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":117,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(editMiscCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"samuelloh"},"content":"     * Edit the misc info of a student in the filtered list where index is larger"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":"     * than size of filtered list, but smaller than size of address book"},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":"    public void execute_invalidStudentIndexFilteredList_failure() {"},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"        showStudentAtIndex(model, INDEX_FIRST);"},{"lineNumber":128,"author":{"gitID":"samuelloh"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":129,"author":{"gitID":"samuelloh"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":130,"author":{"gitID":"samuelloh"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"                new EditMiscDescriptorBuilder().withAllergies(VALID_ALLERGIES_BOB).build());"},{"lineNumber":134,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":135,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(editMiscCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":136,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":140,"author":{"gitID":"samuelloh"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":143,"author":{"gitID":"samuelloh"},"content":"        Student editedStudent \u003d new StudentBuilder(ALICE).withAllergies(VALID_ALLERGIES_BOB).build();"},{"lineNumber":144,"author":{"gitID":"samuelloh"},"content":"        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":145,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder(editedStudent).build();"},{"lineNumber":146,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":149,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"        // edit -\u003e first student edited"},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":"        editMiscCommand.execute();"},{"lineNumber":152,"author":{"gitID":"samuelloh"},"content":"        undoRedoStack.push(editMiscCommand);"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":154,"author":{"gitID":"samuelloh"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"        // redo -\u003e same first student edited again"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":"        expectedModel.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":165,"author":{"gitID":"samuelloh"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder().withAllergies(VALID_ALLERGIES_BOB).build();"},{"lineNumber":169,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":170,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(editMiscCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":173,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":177,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"samuelloh"},"content":"     * 1. Edits the miscellaneous {@code Student} from a filtered list."},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":"     * 2. Undo the edit."},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited student in the"},{"lineNumber":183,"author":{"gitID":"samuelloh"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the student object regardless of indexing."},{"lineNumber":185,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameStudentEdited() throws Exception {"},{"lineNumber":188,"author":{"gitID":"samuelloh"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":190,"author":{"gitID":"samuelloh"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"        Student editedStudent \u003d new StudentBuilder(CARL).withAllergies(VALID_ALLERGIES_BOB).build();"},{"lineNumber":192,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor descriptor \u003d new EditMiscDescriptorBuilder(editedStudent).build();"},{"lineNumber":193,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":194,"author":{"gitID":"samuelloh"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":195,"author":{"gitID":"samuelloh"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs(), new Schedule());"},{"lineNumber":196,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":197,"author":{"gitID":"samuelloh"},"content":"        showStudentAtIndex(model, INDEX_THIRD);"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":199,"author":{"gitID":"samuelloh"},"content":"        // edit -\u003e edits third student in unfiltered student list / first student in filtered student list"},{"lineNumber":200,"author":{"gitID":"samuelloh"},"content":"        editMiscCommand.execute();"},{"lineNumber":201,"author":{"gitID":"samuelloh"},"content":"        undoRedoStack.push(editMiscCommand);"},{"lineNumber":202,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":203,"author":{"gitID":"samuelloh"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered student list to show all students"},{"lineNumber":204,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":205,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":206,"author":{"gitID":"samuelloh"},"content":"        expectedModel.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":207,"author":{"gitID":"samuelloh"},"content":"        assertNotEquals(model.getFilteredStudentList().get(INDEX_FIRST.getZeroBased()), studentToEdit);"},{"lineNumber":208,"author":{"gitID":"samuelloh"},"content":"        // redo -\u003e edits same second student in unfiltered student list"},{"lineNumber":209,"author":{"gitID":"samuelloh"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":210,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":212,"author":{"gitID":"samuelloh"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"samuelloh"},"content":"    public void equals() throws Exception {"},{"lineNumber":214,"author":{"gitID":"samuelloh"},"content":"        final EditMiscCommand standardCommand \u003d prepareCommand(INDEX_FIRST, DESC_MISC_AMY);"},{"lineNumber":215,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":216,"author":{"gitID":"samuelloh"},"content":"        // same values -\u003e returns true"},{"lineNumber":217,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor copyDescriptor \u003d new EditMiscDescriptor(DESC_MISC_AMY);"},{"lineNumber":218,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST, copyDescriptor);"},{"lineNumber":219,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":220,"author":{"gitID":"samuelloh"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":221,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":222,"author":{"gitID":"samuelloh"},"content":"        // same object -\u003e returns true"},{"lineNumber":223,"author":{"gitID":"samuelloh"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":224,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":225,"author":{"gitID":"samuelloh"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":226,"author":{"gitID":"samuelloh"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":227,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":228,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":229,"author":{"gitID":"samuelloh"},"content":"        // null -\u003e returns false"},{"lineNumber":230,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":231,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":232,"author":{"gitID":"samuelloh"},"content":"        // different types -\u003e returns false"},{"lineNumber":233,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":234,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":235,"author":{"gitID":"samuelloh"},"content":"        // different index -\u003e returns false"},{"lineNumber":236,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(new EditMiscCommand(INDEX_SECOND, DESC_MISC_AMY)));"},{"lineNumber":237,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":238,"author":{"gitID":"samuelloh"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":239,"author":{"gitID":"samuelloh"},"content":"        assertFalse(standardCommand.equals(new EditMiscCommand(INDEX_FIRST, DESC_MISC_BOB)));"},{"lineNumber":240,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":242,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":243,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"samuelloh"},"content":"     * Returns an {@code EditMiscCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":245,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"samuelloh"},"content":"    private EditMiscCommand prepareCommand(Index index, EditMiscDescriptor descriptor) {"},{"lineNumber":247,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand editMiscCommand \u003d new EditMiscCommand(index, descriptor);"},{"lineNumber":248,"author":{"gitID":"samuelloh"},"content":"        editMiscCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":249,"author":{"gitID":"samuelloh"},"content":"        return editMiscCommand;"},{"lineNumber":250,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":252,"author":{"gitID":"samuelloh"},"content":"}"}],"authorContributionMap":{"samuelloh":252}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private static final String FXML \u003d \"TaskCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public final Task task;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    private VBox cardPane;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    private Label index;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private Label name;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private Label description;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    private Label isCompleted;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        this.task \u003d task;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        index.setText(displayedIndex + \")\");"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        name.setText(task.getName());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        description.setText(task.getDescription());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        if (task.isCompleted()) {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            isCompleted.setText(\"Yes\");"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            isCompleted.setText(\"No\");"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":45,"-":2}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/codeducator_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"demitycho":1,"-":119}},{"path":"src/main/java/seedu/address/ui/StudentCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * An UI component that displays information of a {@code Student}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class StudentCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private static final String FXML \u003d \"StudentListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    private static final String[] TAG_COLOURS \u003d"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"        {\"teal\", \"red\", \"blue\", \"orange\", \"yellow\", \"cyan\", \"gold\", \"khaki\", \"green\", \"olive\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public final Student student;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    private Label programmingLanguage;"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public StudentCard(Student student, int displayedIndex) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        this.student \u003d student;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        name.setText(student.getName().fullName);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        if (student.isFavourite()) {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"            name.setStyle(\"-fx-font-family: Segoe UI Semibold; -fx-font-size: 19pt; -fx-text-fill: #e56b00;\");"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        phone.setText(student.getPhone().value);"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        address.setText(student.getAddress().value);"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        email.setText(student.getEmail().value);"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        programmingLanguage.setText(student.getProgrammingLanguage().programmingLanguage);"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        setupTags(student);"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    private void setupTags(Student student) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        student.getTags().forEach(tag -\u003e {"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"            tagLabel.getStyleClass().add(getTagColourFor(tag.tagName));"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        });"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"     * @param tagName"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"     * @return colour for {@code tagName}\u0027s label"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"    private String getTagColourFor(String tagName) {"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        return TAG_COLOURS[Math.abs(tagName.hashCode()) % TAG_COLOURS.length];"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof StudentCard)) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        StudentCard card \u003d (StudentCard) other;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 student.equals(card.student);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":22,"samuelloh":21,"-":55}},{"path":"src/test/java/guitests/guihandles/StudentListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.ui.StudentCard;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":" * Provides a handle for {@code StudentListPanel} containing the list of {@code StudentCard}."},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"public class StudentListPanelHandle extends NodeHandle\u003cListView\u003cStudentCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public static final String STUDENT_LIST_VIEW_ID \u003d \"#studentListView\";"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    private Optional\u003cStudentCard\u003e lastRememberedSelectedStudentCard;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public StudentListPanelHandle(ListView\u003cStudentCard\u003e studentListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        super(studentListPanelNode);"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * Returns a handle to the selected {@code StudentCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public StudentCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e studentList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        if (studentList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Student list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        return new StudentCardHandle(studentList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"     * Navigates the listview to display and select the student."},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    public void navigateToCard(Student student) {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        Optional\u003cStudentCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.student.equals(student)).findFirst();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"            throw new IllegalArgumentException(\"Student does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"     * Returns the student card handle of a student associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    public StudentCardHandle getStudentCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        return getStudentCardHandle(getRootNode().getItems().get(index).student);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"     * Returns the {@code StudentCardHandle} of the specified {@code student} in the list."},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    public StudentCardHandle getStudentCardHandle(Student student) {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        Optional\u003cStudentCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"                .filter(card -\u003e card.student.equals(student))"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"                .map(card -\u003e new StudentCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Student does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"     * Selects the {@code StudentCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"     * Remembers the selected {@code StudentCard} in the list."},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    public void rememberSelectedStudentCard() {"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":""},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"            lastRememberedSelectedStudentCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"            lastRememberedSelectedStudentCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":""},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"     * Returns true if the selected {@code StudentCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"     * {@code rememberSelectedStudentCard()} call."},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    public boolean isSelectedStudentCardChanged() {"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        List\u003cStudentCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":""},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"            return lastRememberedSelectedStudentCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"            return !lastRememberedSelectedStudentCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"                    || !lastRememberedSelectedStudentCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":77,"-":57}},{"path":"src/main/java/seedu/address/ui/DashboardPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.ShowMilestonesEvent;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.ShowStudentNameInDashboardEvent;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":" * Panel containing the student\u0027s dashboard."},{"lineNumber":26,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"public class DashboardPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private static final String FXML \u003d \"DashboardPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    private Label studentName;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    private ListView\u003cMilestoneCard\u003e milestoneListView;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    public DashboardPanel() {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        loadDefaultDashboard();"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     * Loads the default dashboard at start up"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    private void loadDefaultDashboard() {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        studentName.setText(\"John Doe\");"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        ObservableList\u003cMilestoneCard\u003e milestoneCardList \u003d FXCollections.observableArrayList();"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        milestoneCardList.add(new MilestoneCard(new Milestone("},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"                new Date(\"31/12/2018 23:59\"), \"placeholder\"), 1));"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        milestoneListView.setItems(milestoneCardList);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        milestoneListView.setCellFactory(listView -\u003e new MilestoneListViewCell());"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":""},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"     * Loads the list of milestones into the dashboard"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    private void loadMilestoneList(ObservableList\u003cMilestone\u003e milestoneList) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        ObservableList\u003cMilestoneCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"                milestoneList, (milestone) -\u003e new MilestoneCard(milestone, milestoneList.indexOf(milestone) + 1));"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        milestoneListView.setItems(mappedList);"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    private void loadStudentName(Name name) {"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        studentName.setText(name.fullName);"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    @Subscribe"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    public void handleShowMilestonesEvent(ShowMilestonesEvent event) {"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        loadMilestoneList(event.getMilestoneList().asObservableList());"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    @Subscribe"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    public void handleShowStudentNameInDashboardEvent(ShowStudentNameInDashboardEvent event) {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        loadStudentName(event.getName());"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code MilestoneCard}."},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    class MilestoneListViewCell extends ListCell\u003cMilestoneCard\u003e {"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        protected void updateItem(MilestoneCard milestone, boolean empty) {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"            super.updateItem(milestone, empty);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"            if (empty || milestone \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"                setGraphic(null);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"                setText(null);"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"            } else {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"                setGraphic(milestone.getRoot());"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":92,"-":8}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    private InfoPanel infoPanel;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    private StudentListPanel studentListPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    private StackPane infoPanelPlaceholder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    private StackPane studentListPanelPlaceholder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":95,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":96,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":97,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":103,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":107,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        infoPanel \u003d new InfoPanel();"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"        infoPanelPlaceholder.getChildren().add(infoPanel.getRoot());"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"    public StudentListPanel getStudentListPanel() {"},{"lineNumber":187,"author":{"gitID":"yapni"},"content":"        return this.studentListPanel;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":191,"author":{"gitID":"yapni"},"content":"        infoPanel.freeResources();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":10,"demitycho":3,"-":186}},{"path":"src/main/java/seedu/address/ui/StudentListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":" * Panel containing the list of students."},{"lineNumber":21,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"public class StudentListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    private static final String FXML \u003d \"StudentListPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private ListView\u003cStudentCard\u003e studentListView;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        setConnections(studentList);"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private void setConnections(ObservableList\u003cStudent\u003e studentList) {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        ObservableList\u003cStudentCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"                studentList, (student) -\u003e new StudentCard(student, studentList.indexOf(student) + 1));"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        studentListView.setItems(mappedList);"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        studentListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"                        logger.fine(\"Selection in student list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"                        raise(new StudentPanelSelectionChangedEvent(newValue));"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"                    } else {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"                        raise(new StudentPanelSelectionChangedEvent(oldValue));"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     * Scrolls to the {@code StudentCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        studentListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        studentListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        int beforeSelectedIndex \u003d studentListView.getSelectionModel().getSelectedIndex();"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        /* To handle to case where user selects the current student card after the show dashboard command */"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        if (event.targetIndex \u003d\u003d beforeSelectedIndex) {"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"            raise(new StudentPanelSelectionChangedEvent(studentListView.getSelectionModel().getSelectedItem()));"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code StudentCard}."},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    class StudentListViewCell extends ListCell\u003cStudentCard\u003e {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        @Override"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        protected void updateItem(StudentCard student, boolean empty) {"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"            super.updateItem(student, empty);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"            if (empty || student \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"                setGraphic(null);"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"                setText(null);"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"            } else {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"                setGraphic(student.getRoot());"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":69,"-":26}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    private String appTitle \u003d \"Codeducator\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"demitycho":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_INVALID_INDEXES \u003d \"One or more of the provided indexes are invalid\";"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_INVALID_MILESTONE_DISPLAYED_INDEX \u003d \"The milestone index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_STUDENT_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_INVALID_START_END_TIME \u003d \"End time \""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"                                                    + \"must be strictly later than Start time!\\n\""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"                                                    + \"If you want to end at midnight, please use 23:59\";"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d \"The lesson index provided is invalid\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"demitycho":4,"-":11}},{"path":"src/main/java/seedu/address/ui/MilestoneCard.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" * An UI component that displays information of a {@code Milestone}."},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"public class MilestoneCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private static final String FXML \u003d \"MilestoneCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public final Milestone milestone;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private VBox cardPane;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    private Label index;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private Label description;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    private Label dueDate;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    private Label progressPercent;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public MilestoneCard(Milestone milestone, int displayedIndex) {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        this.milestone \u003d milestone;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        index.setText(Integer.toString(displayedIndex));"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        description.setText(milestone.getDescription());"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        dueDate.setText(milestone.getDueDate().toString());"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        progressPercent.setText(milestone.getProgress().getProgressInPercent() + \"%\");"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        loadTaskList(milestone.getTaskList().asObservableList());"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"     * Loads the list of tasks in to the milestone card"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    private void loadTaskList(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"                taskList, (task) -\u003e new TaskCard(task, taskList.indexOf(task) + 1));"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        @Override"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"            super.updateItem(task, empty);"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"                setGraphic(null);"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"                setText(null);"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            } else {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"                setGraphic(task.getRoot());"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":77,"-":4}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import java.time.temporal.WeekFields;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import java.util.Locale;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import com.calendarfx.view.DayViewBase;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import com.calendarfx.view.DetailedWeekView;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import com.calendarfx.view.page.PageBase;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.events.model.ScheduleChangedEvent;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":" * The Calendar Panel using the InfoPanel of Codeducator."},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"public class CalendarPanel extends UiPart\u003cCalendarView\u003e {"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"dd/MM/yyyy HH:mm\";"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    private static final String STRING_ENTRY_TITLE \u003d \"%d Lesson: %s\";"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    private static final Time TIME_DEFAULT_START \u003d new Time(\"07:00\");"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    private static final Time TIME_DEFAULT_END \u003d new Time(\"22:00\");"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    private static final LocalTime TEMPORAL_TIME_DEFAULT_START \u003d LocalTime.of(00, 30);"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    private static final LocalTime TEMPORAL_TIME_DEFAULT_END \u003d LocalTime.of(23, 59);"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"    @javafx.fxml.FXML"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    private CalendarView calendarView;"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    private Calendar calendar;"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    private PageBase pageBase;"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    private Integer lessonDisplayIndex;"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    private ReadOnlyAddressBook addressBook;"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    private ReadOnlySchedule schedule;"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    public CalendarPanel(ReadOnlySchedule readOnlySchedule, ReadOnlyAddressBook addressBook) {"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        super(FXML);"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        initializeCalendar();"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        setUpCalendarView(readOnlySchedule);"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        loadEntries(readOnlySchedule, addressBook);"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        updateTime();"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"    public CalendarView getCalendarView() {"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        return calendarView;"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"    public PageBase getPageBase() {"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        return pageBase;"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"     * Initializes the calendar"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"    private void initializeCalendar() {"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        calendar \u003d new Calendar(\"Lessons\");"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"     * Sets up the calendar view"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"     * Uses many methods to modify the default CalendarView"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"    private void setUpCalendarView(ReadOnlySchedule schedule) {"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"        CalendarSource calendarSource \u003d new CalendarSource(\"My Calendar\");"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"        calendarSource.getCalendars().addAll(calendar);"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"        calendarView.getCalendarSources().addAll(calendarSource);"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"        calendarView.showWeekPage();"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowSourceTray(false);"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowPageToolBarControls(false);"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowPageSwitcher(false);"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"        calendarView.showWeekPage();"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowDeveloperConsole(true);"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"        calendarView.setShowToolBar(false);"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"        calendarView.setOnMouseClicked(null);"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"        calendarView.setDisable(true);"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"        calendar.setReadOnly(true);"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"        calendarView.getWeekPage().setShowNavigation(false);"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"        calendarView.getWeekPage().setShowDate(false);"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"        calendarView.weekFieldsProperty().setValue(WeekFields.of(Locale.FRANCE)); // Start week from Monday"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"        DetailedWeekView detailedWeekView \u003d calendarView.getWeekPage().getDetailedWeekView();"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"        detailedWeekView.setEarlyLateHoursStrategy(DayViewBase.EarlyLateHoursStrategy.HIDE);"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"        detailedWeekView.setHoursLayoutStrategy(DayViewBase.HoursLayoutStrategy.FIXED_HOUR_COUNT);"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"        resizeCalendar(calendarView, schedule);"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"     * Loads {@code lessons} into the calendar"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"    private void loadEntries(ReadOnlySchedule readOnlySchedule, ReadOnlyAddressBook addressBook) {"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"        lessonDisplayIndex \u003d 1;"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"        this.schedule \u003d readOnlySchedule;"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"        readOnlySchedule.getSchedule().stream().forEach(this::loadEntry);"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"        resizeCalendar(calendarView, readOnlySchedule);"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"     * Resizes the calendar view if any time slots are outside of the default time range"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"     * @param calendarView"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"     * @param schedule"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"    private void resizeCalendar(CalendarView calendarView, ReadOnlySchedule schedule) {"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"        DetailedWeekView detailedWeekView \u003d calendarView.getWeekPage().getDetailedWeekView();"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"        Time start \u003d TIME_DEFAULT_START.compareTo(schedule.getEarliestStartTime()) \u003c 0"},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":"                ? TIME_DEFAULT_START : schedule.getEarliestStartTime();"},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"        Time end \u003d TIME_DEFAULT_END.compareTo(schedule.getLatestEndTime()) \u003e 0"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"                ? TIME_DEFAULT_END : schedule.getLatestEndTime();"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"        LocalTime startTime \u003d LocalTime.parse(start.toString());"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"        LocalTime endTime \u003d LocalTime.parse(end.toString());"},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"        detailedWeekView.setVisibleHours((int) ChronoUnit.HOURS.between(startTime, endTime));"},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":"        calendarView.setStartTime(startTime);"},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"        calendarView.setEndTime(endTime);"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"     * Creates an entry with the {@code lesson} details and loads it into the calendar"},{"lineNumber":150,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":"    private void loadEntry(Lesson lesson) {"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":"        String dateString \u003d lesson.getDay().toDateString();"},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":"        String startTimeString \u003d lesson.getStartTime().toString();"},{"lineNumber":154,"author":{"gitID":"demitycho"},"content":"        String endTimeString \u003d lesson.getEndTime().toString();"},{"lineNumber":155,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":156,"author":{"gitID":"demitycho"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT);"},{"lineNumber":157,"author":{"gitID":"demitycho"},"content":"        LocalDateTime startDateTime \u003d LocalDateTime.parse(dateString + \" \" + startTimeString, formatter);"},{"lineNumber":158,"author":{"gitID":"demitycho"},"content":"        LocalDateTime endDateTime \u003d LocalDateTime.parse(dateString + \" \" + endTimeString, formatter);"},{"lineNumber":159,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":160,"author":{"gitID":"demitycho"},"content":"        Student student \u003d addressBook.findStudentByKey(lesson.getUniqueKey());"},{"lineNumber":161,"author":{"gitID":"demitycho"},"content":"        Entry entry \u003d new Entry();"},{"lineNumber":162,"author":{"gitID":"demitycho"},"content":"        entry.setInterval(startDateTime, endDateTime);"},{"lineNumber":163,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":164,"author":{"gitID":"demitycho"},"content":"        entry.setTitle(String.format(STRING_ENTRY_TITLE, lessonDisplayIndex++, student.getName()));"},{"lineNumber":165,"author":{"gitID":"demitycho"},"content":"        entry.setCalendar(calendar);"},{"lineNumber":166,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":167,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":168,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":169,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":171,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":172,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"demitycho"},"content":"     * Handles the event where a lesson is deleted by loading the updated lessons list into the calendar"},{"lineNumber":174,"author":{"gitID":"demitycho"},"content":"     * @param event contains the updated lessons list"},{"lineNumber":175,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"demitycho"},"content":"    @Subscribe"},{"lineNumber":177,"author":{"gitID":"demitycho"},"content":"    private void handleScheduleChangedEvent(ScheduleChangedEvent event) {"},{"lineNumber":178,"author":{"gitID":"demitycho"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":179,"author":{"gitID":"demitycho"},"content":"        calendar.clear();"},{"lineNumber":180,"author":{"gitID":"demitycho"},"content":"        loadEntries(event.getLessons(), event.getAddressBook());"},{"lineNumber":181,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":183,"author":{"gitID":"demitycho"},"content":"    //@@author demitycho-reused"},{"lineNumber":184,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"demitycho"},"content":"     * Update the current date and time shown in the calendar as a thread in the background"},{"lineNumber":186,"author":{"gitID":"demitycho"},"content":"     * Adapted from http://dlsc.com/wp-content/html/calendarfx/manual.html"},{"lineNumber":187,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"demitycho"},"content":"    private void updateTime() {"},{"lineNumber":189,"author":{"gitID":"demitycho"},"content":"        Thread updateTimeThread \u003d new Thread(\"Calendar: Update Time Thread\") {"},{"lineNumber":190,"author":{"gitID":"demitycho"},"content":"            @Override"},{"lineNumber":191,"author":{"gitID":"demitycho"},"content":"            public void run() {"},{"lineNumber":192,"author":{"gitID":"demitycho"},"content":"                while (true) {"},{"lineNumber":193,"author":{"gitID":"demitycho"},"content":"                    Platform.runLater(() -\u003e {"},{"lineNumber":194,"author":{"gitID":"demitycho"},"content":"                        calendarView.setToday(LocalDate.now());"},{"lineNumber":195,"author":{"gitID":"demitycho"},"content":"                        calendarView.setTime(LocalTime.now());"},{"lineNumber":196,"author":{"gitID":"demitycho"},"content":"                    });"},{"lineNumber":197,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":198,"author":{"gitID":"demitycho"},"content":"                    try {"},{"lineNumber":199,"author":{"gitID":"demitycho"},"content":"                        // update every 10 seconds"},{"lineNumber":200,"author":{"gitID":"demitycho"},"content":"                        sleep(10000);"},{"lineNumber":201,"author":{"gitID":"demitycho"},"content":"                    } catch (InterruptedException e) {"},{"lineNumber":202,"author":{"gitID":"demitycho"},"content":"                        e.printStackTrace();"},{"lineNumber":203,"author":{"gitID":"demitycho"},"content":"                    }"},{"lineNumber":204,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":205,"author":{"gitID":"demitycho"},"content":"                }"},{"lineNumber":206,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":207,"author":{"gitID":"demitycho"},"content":"        };"},{"lineNumber":208,"author":{"gitID":"demitycho"},"content":"        updateTimeThread.setPriority(Thread.MIN_PRIORITY);"},{"lineNumber":209,"author":{"gitID":"demitycho"},"content":"        updateTimeThread.setDaemon(true);"},{"lineNumber":210,"author":{"gitID":"demitycho"},"content":"        updateTimeThread.start();"},{"lineNumber":211,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":209,"-":3}},{"path":"src/main/java/seedu/address/commons/exceptions/StorageFileMissingException.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"//@author samuelloh"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":" * Represents an error when using \"moreInfo\" command as xml data of students are not found."},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"public class StorageFileMissingException extends Exception {"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"    public static final String STORAGE_FILE_MISSING \u003d \"The \u0027moreInfo\u0027 command requires xml data of students and\""},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"            + \" will not work with sample students data. Try clearing the sample data and adding a student.\";"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"    public StorageFileMissingException(String message) {"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":17,"content":"//@@author"}],"authorContributionMap":{"null":1,"samuelloh":16}},{"path":"src/main/java/seedu/address/commons/events/ui/BrowserDisplayEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import seedu.address.ui.StudentCard;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a browser display event when a student is selected"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class BrowserDisplayEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    private final StudentCard studentSelection;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public BrowserDisplayEvent(StudentCard studentSelection) {"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"        this.studentSelection \u003d studentSelection;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public StudentCard getStudentSelection() {"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"        return studentSelection;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":17,"-":8}},{"path":"src/main/java/seedu/address/commons/events/ui/StudentPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import seedu.address.ui.StudentCard;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a selection change in the Student List Panel"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class StudentPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    private final StudentCard newSelection;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public StudentPanelSelectionChangedEvent(StudentCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public StudentCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":15,"-":11}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Indicates a request to jump to the list of students"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public JumpToListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":21}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowStudentProfileEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":" * Represents a browser display event when a student\u0027s profile page is required to be shown"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"public class ShowStudentProfileEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":12,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowMilestonesEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueMilestoneList;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" * Indicates a request to show the milestones in a student\u0027s dashboard"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"public class ShowMilestonesEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    private final UniqueMilestoneList milestoneList;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public ShowMilestonesEvent(UniqueMilestoneList milestoneList) {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        this.milestoneList \u003d milestoneList;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public UniqueMilestoneList getMilestoneList() {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        return milestoneList;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":23,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowStudentNameInDashboardEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" * Indicates a request to show the student\u0027s name in his dashboard"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"public class ShowStudentNameInDashboardEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    private final Name name;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public ShowStudentNameInDashboardEvent(Name name) {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        this.name \u003d name;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public Name getName() {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        return name;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":23,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowStudentDashboardEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" * Indicates a request to show the student\u0027s dashboard"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"public class ShowStudentDashboardEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    private final Student targetStudent;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public ShowStudentDashboardEvent(Student targetStudent) {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        this.targetStudent \u003d targetStudent;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public Student getTargetStudent() {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        return targetStudent;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":23,"samuelloh":2,"-":1}},{"path":"src/main/java/seedu/address/ui/InfoPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.events.model.ScheduleChangedEvent;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.BrowserDisplayEvent;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.ShowMilestonesEvent;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.events.ui.ShowScheduleEvent;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.ShowStudentDashboardEvent;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.ShowStudentNameInDashboardEvent;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.ui.ShowStudentProfileEvent;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":" * Panel that contains the browser panel and the dashboard panel"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"public class InfoPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private static final String FXML \u003d \"InfoPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    private DashboardPanel dashboardPanel;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    private StackPane browserPanelPlaceholder;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    private StackPane dashboardPanelPlaceholder;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public InfoPanel() {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        this.logic \u003d logic;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        browserPanelPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        dashboardPanel \u003d new DashboardPanel();"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        dashboardPanelPlaceholder.getChildren().add(dashboardPanel.getRoot());"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        CalendarPanel calendarPanel \u003d new CalendarPanel(new Schedule(), new AddressBook());"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        showBrowserPanel();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    public void freeResources() {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        browserPanel.freeResources();"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"     * Show the browser panel"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    private void showBrowserPanel() {"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        dashboardPanelPlaceholder.setVisible(false);"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        calendarPlaceholder.setVisible(false);"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        browserPanelPlaceholder.setVisible(true);"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        browserPanelPlaceholder.toFront();"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":""},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     * Show the dashboard panel"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    private void showDashboardPanel() {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        browserPanelPlaceholder.setVisible(false);"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        calendarPlaceholder.setVisible(false);"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        dashboardPanelPlaceholder.setVisible(true);"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        dashboardPanelPlaceholder.toFront();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     * Show the Calendar panel"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    private void showCalendarPanel() {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        browserPanelPlaceholder.setVisible(false);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        dashboardPanelPlaceholder.setVisible(false);"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        calendarPlaceholder.setVisible(true);"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        calendarPlaceholder.toFront();"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    @Subscribe"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"    public void handleShowStudentProfileEvent(ShowStudentProfileEvent event) {"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        showBrowserPanel();"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":""},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"    @Subscribe"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    public void handleStudentPanelSelectionChangedEvent(StudentPanelSelectionChangedEvent event) {"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        showBrowserPanel();"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        raise(new BrowserDisplayEvent(event.getNewSelection()));"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":""},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"    @Subscribe"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    public void handleShowStudentDashboardEvent(ShowStudentDashboardEvent event) {"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        showDashboardPanel();"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        raise(new ShowStudentNameInDashboardEvent(event.getTargetStudent().getName()));"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        raise(new ShowMilestonesEvent(event.getTargetStudent().getDashboard().getMilestoneList()));"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":""},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    @Subscribe"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"    public void handleShowScheduleEvent(ShowScheduleEvent event) {"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        showCalendarPanel();"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        raise(new ScheduleChangedEvent(event.getSchedule(), event.getAddressBook()));"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":109,"samuelloh":1,"demitycho":5,"-":8}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"        return \"number of students \" + data.getStudentList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":18}},{"path":"src/main/java/seedu/address/commons/events/storage/RequiredStudentIndexChangeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":" * Indicates a change in the index of the student whose full info is to be displayed."},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"public class RequiredStudentIndexChangeEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"    private final int newIndex;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"    public RequiredStudentIndexChangeEvent(int newIndex) {"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"        this.newIndex \u003d newIndex;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    public int getNewIndex() {"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"        return newIndex;"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"        return \"New index to be changed : \" + newIndex;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":23,"-":3}},{"path":"src/main/java/seedu/address/commons/events/model/StudentInfoDisplayEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":" *Indicates that a particular student\u0027s full info is to be displayed"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"public class StudentInfoDisplayEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"    private final Student student;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"    public StudentInfoDisplayEvent(Student student) {"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"        this.student \u003d student;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"        return \"Displaying full information for \" + student.getName();"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    public Student getStudent() {"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"        return student;"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":26,"-":3}},{"path":"src/main/java/seedu/address/commons/events/model/ScheduleChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" * Indicates the AddressBook in the model has changed"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":" * */"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"public class ScheduleChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    private final ReadOnlySchedule schedule;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    private final ReadOnlyAddressBook addressBook;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public ScheduleChangedEvent(ReadOnlySchedule schedule, ReadOnlyAddressBook addressBook) {"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"        return \"number of lessons \" + schedule.getSchedule().size();"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public final ReadOnlySchedule getLessons() {"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        return this.schedule;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    public final ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        return this.addressBook;"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":30,"-":3}},{"path":"src/main/java/seedu/address/commons/events/model/StudentInfoChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":" * Indicates that a paticular student\u0027s info has changed"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"public class StudentInfoChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":16}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    /** Returns an unmodifiable view of the filtered list of students */"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    ObservableList\u003cStudent\u003e getFilteredStudentList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    ReadOnlySchedule getSchedule();"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"demitycho":6,"-":24}},{"path":"src/main/java/seedu/address/commons/events/storage/ProfilePictureChangeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":" * Indicates a change in the profile picture of the student."},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"public class ProfilePictureChangeEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"    private final Student student;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    private final ProfilePicturePath urlToChangeTo;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"    private final UniqueKey uniqueKey;"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"    public ProfilePictureChangeEvent(Student student) {"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"        this.student \u003d student;"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"        this.urlToChangeTo \u003d student.getProfilePicturePath();"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"        this.uniqueKey \u003d student.getUniqueKey();"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    public ProfilePicturePath getUrlToChangeTo() {"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        return urlToChangeTo;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public UniqueKey getUniqueKey() {"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        return uniqueKey;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"    public Student getStudent() {"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        return student;"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        return \"Changing Url of profile picture for student: \" + student.toString();"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"yapni":1,"samuelloh":35,"demitycho":1,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowScheduleEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" * @@author demitycho"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" * Indicates a request to show the milestones in a student\u0027s dashboard"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"public class ShowScheduleEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    private ReadOnlySchedule schedule;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    private ReadOnlyAddressBook addressBook;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    public ShowScheduleEvent(ReadOnlySchedule schedule, ReadOnlyAddressBook addressBook) {"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    public ReadOnlySchedule getSchedule() {"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"        return this.schedule;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"        return this.addressBook;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":31,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"                        PREFIX_PROGRAMMING_LANGUAGE, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"                PREFIX_PROGRAMMING_LANGUAGE) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            ProgrammingLanguage programmingLanguage \u003d ParserUtil.parseSubject(argMultimap"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"                    .getValue(PREFIX_PROGRAMMING_LANGUAGE)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"            Student student \u003d new Student(name, phone, email, address, programmingLanguage, tagList);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            return new AddCommand(student);"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":14,"samuelloh":3,"-":53}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the this map"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    public boolean arePrefixesPresent(Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e this.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":8,"-":60}},{"path":"src/main/java/seedu/address/logic/parser/MoreInfoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.MoreInfoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":" * Parses input arguments and creates a new MoreInfoCommand object"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"public class MoreInfoCommandParser implements Parser\u003cMoreInfoCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"     * Parses the given {@code String} of arguments in the context of the MoreInfoCommand"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"     * and returns a MoreInfoCommand object for execution."},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    public MoreInfoCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"            return new MoreInfoCommand(index);"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoreInfoCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":24,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/FindAndSelectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindAndSelectCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Chweeee"},"content":"//@@author chweeee"},{"lineNumber":13,"author":{"gitID":"Chweeee"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Chweeee"},"content":" * Parses input arguments and creates a new FindAndSelectCommand object"},{"lineNumber":15,"author":{"gitID":"Chweeee"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Chweeee"},"content":"public class FindAndSelectCommandParser implements Parser\u003cFindAndSelectCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":18,"author":{"gitID":"Chweeee"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Chweeee"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAndSelectCommand"},{"lineNumber":20,"author":{"gitID":"Chweeee"},"content":"     * and returns a FindAndSelectCommand object for execution."},{"lineNumber":21,"author":{"gitID":"Chweeee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"Chweeee"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Chweeee"},"content":"    public FindAndSelectCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"Chweeee"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"Chweeee"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"Chweeee"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"Chweeee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":30,"author":{"gitID":"Chweeee"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":32,"author":{"gitID":"Chweeee"},"content":"        return new FindAndSelectCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":33,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Chweeee"},"content":"}"},{"lineNumber":35,"author":{"gitID":"Chweeee"},"content":"//@@author"}],"authorContributionMap":{"yapni":1,"-":10,"Chweeee":24}},{"path":"src/main/java/seedu/address/logic/parser/FindAndDeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindAndDeleteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Chweeee"},"content":"//@@author chweeee"},{"lineNumber":13,"author":{"gitID":"Chweeee"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Chweeee"},"content":" * Parses input arguments and creates a new FindAndDeleteCommand object"},{"lineNumber":15,"author":{"gitID":"Chweeee"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Chweeee"},"content":"public class FindAndDeleteCommandParser implements Parser\u003cFindAndDeleteCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":18,"author":{"gitID":"Chweeee"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Chweeee"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAndDeleteCommand"},{"lineNumber":20,"author":{"gitID":"Chweeee"},"content":"     * and returns an FindAndDeleteCommand object for execution."},{"lineNumber":21,"author":{"gitID":"Chweeee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"Chweeee"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Chweeee"},"content":"    public FindAndDeleteCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"Chweeee"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"Chweeee"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"Chweeee"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"Chweeee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":30,"author":{"gitID":"Chweeee"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":32,"author":{"gitID":"Chweeee"},"content":"        return new FindAndDeleteCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":33,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Chweeee"},"content":"}"},{"lineNumber":35,"author":{"gitID":"Chweeee"},"content":"//@@author"}],"authorContributionMap":{"yapni":1,"-":10,"Chweeee":24}},{"path":"src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * Parses input arguments and create a new AddTaskCommand object"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"     * and returns an AddTaskCommand object for execution."},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * @throws NullPointerException if args is null"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public AddTaskCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"                PREFIX_INDEX, PREFIX_MILESTONE_INDEX, PREFIX_NAME, PREFIX_DESCRIPTION);"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        if (!argMultiMap.arePrefixesPresent(PREFIX_INDEX, PREFIX_MILESTONE_INDEX, PREFIX_NAME, PREFIX_DESCRIPTION)"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            Index studentIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_INDEX).get());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            Index milestoneIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_MILESTONE_INDEX).get());"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            String name \u003d argMultiMap.getValue(PREFIX_NAME).get();"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            String description \u003d argMultiMap.getValue(PREFIX_DESCRIPTION).get();"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            Task task \u003d new Task(name, description);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"            return new AddTaskCommand(studentIndex, milestoneIndex, task);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":46,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/AddMilestoneCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.AddMilestoneCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * Parses input arguments and create a new AddMilestoneCommand object"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class AddMilestoneCommandParser implements Parser\u003cAddMilestoneCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMilestoneCommand"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"     * and returns an AddMilestoneCommand object for execution."},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * @throws NullPointerException if args is null"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public AddMilestoneCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_DATE, PREFIX_DESCRIPTION);"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        if (!argMultiMap.arePrefixesPresent(PREFIX_INDEX, PREFIX_DATE, PREFIX_DESCRIPTION)"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMilestoneCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            Index index \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_INDEX).get());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            Date date \u003d ParserUtil.parseDate(argMultiMap.getValue(PREFIX_DATE).get());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            String objective \u003d argMultiMap.getValue(PREFIX_DESCRIPTION).get();"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            Milestone milestone \u003d new Milestone(date, objective);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            return new AddMilestoneCommand(index, milestone);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":45,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddLessonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.AddLessonCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":" * Parses input arguments and creates a new AddCommandCommand object"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"public class AddLessonCommandParser implements Parser\u003cAddLessonCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"     * Parses the given {@code String} of arguments in the context of the AddLessonCommand"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"     * and returns an AddLessonCommand object for execution."},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    public AddLessonCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DAY, PREFIX_START_TIME, PREFIX_END_TIME);"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_START_TIME, PREFIX_END_TIME)) {"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        Index index;"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        Day day;"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        Time startTime;"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        Time endTime;"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"            day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY)).get();"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"            startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"            endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        return new AddLessonCommand(index, day, startTime, endTime);"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":66,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.ibm.watson.developer_cloud.conversation.v1.model.MessageResponse;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.ibm.watson.developer_cloud.conversation.v1.model.RuntimeEntity;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.ibm.watson.developer_cloud.conversation.v1.model.RuntimeIntent;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.AddLessonCommand;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.AddMilestoneCommand;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.AddTaskCommand;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.CheckTaskCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ConversationCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.DeleteLessonCommand;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.DeleteMilestoneCommand;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditMiscCommand;"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditPictureCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.FavouriteCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.LogoutCommand;"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.MoreInfoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.ShowDashboardCommand;"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.SyncCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":50,"author":{"gitID":"-"},"content":" */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        //@@author demitycho"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        case AddLessonCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"            return new AddLessonCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        //@@author yapni"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        case AddMilestoneCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"            return new AddMilestoneCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        case AddTaskCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"            return new AddTaskCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        //@@author"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"        //@@author demitycho"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        case DeleteLessonCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"            return new DeleteLessonCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        //@@author yapni"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        case DeleteMilestoneCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"            return new DeleteMilestoneCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":""},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        case DeleteTaskCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"            return new DeleteTaskCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        //@@author"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        case FavouriteCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"            return new FavouriteCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"        //@@author demitycho"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"        case FindTagCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"            return new FindTagCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"        //@@author"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"        //@@author demitycho"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"        case LoginCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"            return new LoginCommand();"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"        case LogoutCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"            return new LogoutCommand();"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"        //@author"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"            return new HistoryCommand();"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"            return new ExitCommand();"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"            return new HelpCommand();"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"            return new UndoCommand();"},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"            return new RedoCommand();"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"        //@@author demitycho"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"        case ScheduleCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":"            return new ScheduleCommand();"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":"        case SyncCommand.COMMAND_WORD:"},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"            return new SyncCommand();"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"        //@@author"},{"lineNumber":148,"author":{"gitID":"yapni"},"content":"        case UnfavouriteCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitID":"yapni"},"content":"            return new UnfavouriteCommandParser().parse(arguments);"},{"lineNumber":150,"author":{"gitID":"yapni"},"content":""},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":"        //@@author samuelloh"},{"lineNumber":152,"author":{"gitID":"samuelloh"},"content":"        case EditPictureCommand.COMMAND_WORD:"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":"            return new EditPictureCommandParser().parse(arguments);"},{"lineNumber":154,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":"        //@@author samuelloh"},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"        case MoreInfoCommand.COMMAND_WORD:"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":"            return new MoreInfoCommandParser().parse(arguments);"},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"        //@@author samuelloh"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"        case EditMiscCommand.COMMAND_WORD:"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"            return new EditMiscCommandParser().parse(arguments);"},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"        //@@author yapni"},{"lineNumber":164,"author":{"gitID":"yapni"},"content":"        case ShowDashboardCommand.COMMAND_WORD:"},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"            return new ShowDashboardCommandParser().parse(arguments);"},{"lineNumber":166,"author":{"gitID":"yapni"},"content":"        case CheckTaskCommand.COMMAND_WORD:"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":"            return new CheckTaskCommandParser().parse(arguments);"},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"        //@@author"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":170,"author":{"gitID":"Chweeee"},"content":"            //@@author chweeee"},{"lineNumber":171,"author":{"gitID":"Chweeee"},"content":"            /**"},{"lineNumber":172,"author":{"gitID":"Chweeee"},"content":"             * aims to decipher user intention and returns the command required"},{"lineNumber":173,"author":{"gitID":"Chweeee"},"content":"             */"},{"lineNumber":174,"author":{"gitID":"Chweeee"},"content":"            //initialises the agent"},{"lineNumber":175,"author":{"gitID":"Chweeee"},"content":"            ConversationCommand.setUpAgent();"},{"lineNumber":176,"author":{"gitID":"Chweeee"},"content":"            MessageResponse response \u003d null;"},{"lineNumber":177,"author":{"gitID":"Chweeee"},"content":"            List\u003cRuntimeIntent\u003e intents; //stores user intents"},{"lineNumber":178,"author":{"gitID":"Chweeee"},"content":"            List\u003cRuntimeEntity\u003e entities; //stores entities identified in the user\u0027s input"},{"lineNumber":179,"author":{"gitID":"Chweeee"},"content":"            String intention \u003d \"\";"},{"lineNumber":180,"author":{"gitID":"Chweeee"},"content":"            String entity \u003d \"\";"},{"lineNumber":181,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":182,"author":{"gitID":"Chweeee"},"content":"            //processes the userInput"},{"lineNumber":183,"author":{"gitID":"Chweeee"},"content":"            response \u003d ConversationCommand.getMessageResponse(userInput);"},{"lineNumber":184,"author":{"gitID":"Chweeee"},"content":"            intents \u003d response.getIntents();"},{"lineNumber":185,"author":{"gitID":"Chweeee"},"content":"            entities \u003d response.getEntities();"},{"lineNumber":186,"author":{"gitID":"Chweeee"},"content":"            System.out.println(\"list of entities: \" + entities);"},{"lineNumber":187,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":188,"author":{"gitID":"Chweeee"},"content":"            for (int i \u003d 0; i \u003c intents.size(); i++) {"},{"lineNumber":189,"author":{"gitID":"Chweeee"},"content":"                intention \u003d intents.get(i).getIntent();"},{"lineNumber":190,"author":{"gitID":"Chweeee"},"content":"            }"},{"lineNumber":191,"author":{"gitID":"Chweeee"},"content":"            System.out.println(\"this is the intention of the user: \" + intention);"},{"lineNumber":192,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":193,"author":{"gitID":"Chweeee"},"content":"            if (entities.size() !\u003d 0) {"},{"lineNumber":194,"author":{"gitID":"Chweeee"},"content":"                for (int i \u003d 0; i \u003c intents.size(); i++) {"},{"lineNumber":195,"author":{"gitID":"Chweeee"},"content":"                    entity \u003d entities.get(i).getValue();"},{"lineNumber":196,"author":{"gitID":"Chweeee"},"content":"                }"},{"lineNumber":197,"author":{"gitID":"Chweeee"},"content":"            }"},{"lineNumber":198,"author":{"gitID":"Chweeee"},"content":"            System.out.println(\"this is the value of the entity: \" + entity);"},{"lineNumber":199,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":200,"author":{"gitID":"Chweeee"},"content":"            switch (intention) {"},{"lineNumber":201,"author":{"gitID":"Chweeee"},"content":"            case \"Clear\":"},{"lineNumber":202,"author":{"gitID":"Chweeee"},"content":"                return new ClearCommand();"},{"lineNumber":203,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":204,"author":{"gitID":"Chweeee"},"content":"            case \"Undo\":"},{"lineNumber":205,"author":{"gitID":"Chweeee"},"content":"                return new UndoCommand();"},{"lineNumber":206,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":207,"author":{"gitID":"Chweeee"},"content":"            case \"Redo\":"},{"lineNumber":208,"author":{"gitID":"Chweeee"},"content":"                return new RedoCommand();"},{"lineNumber":209,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":210,"author":{"gitID":"Chweeee"},"content":"            case \"Help\":"},{"lineNumber":211,"author":{"gitID":"Chweeee"},"content":"                return new HelpCommand();"},{"lineNumber":212,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":213,"author":{"gitID":"Chweeee"},"content":"            case \"Exit\":"},{"lineNumber":214,"author":{"gitID":"Chweeee"},"content":"                return new ExitCommand();"},{"lineNumber":215,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":216,"author":{"gitID":"Chweeee"},"content":"            case \"History\":"},{"lineNumber":217,"author":{"gitID":"Chweeee"},"content":"                return new HistoryCommand();"},{"lineNumber":218,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":219,"author":{"gitID":"Chweeee"},"content":"            case \"List\":"},{"lineNumber":220,"author":{"gitID":"Chweeee"},"content":"                return new ListCommandParser().parse(\"\");"},{"lineNumber":221,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":222,"author":{"gitID":"Chweeee"},"content":"            case \"Schedule\":"},{"lineNumber":223,"author":{"gitID":"Chweeee"},"content":"                return new ScheduleCommand();"},{"lineNumber":224,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":225,"author":{"gitID":"Chweeee"},"content":"            case \"Delete\":"},{"lineNumber":226,"author":{"gitID":"Chweeee"},"content":"                return new FindAndDeleteCommandParser().parse(entity);"},{"lineNumber":227,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":228,"author":{"gitID":"Chweeee"},"content":"            case \"Select\":"},{"lineNumber":229,"author":{"gitID":"Chweeee"},"content":"                return new FindAndSelectCommandParser().parse(entity);"},{"lineNumber":230,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":231,"author":{"gitID":"Chweeee"},"content":"            default:"},{"lineNumber":232,"author":{"gitID":"Chweeee"},"content":"                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":233,"author":{"gitID":"Chweeee"},"content":"            }"},{"lineNumber":234,"author":{"gitID":"Chweeee"},"content":"            //@@author"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":35,"samuelloh":17,"demitycho":45,"-":75,"Chweeee":65}},{"path":"src/main/java/seedu/address/logic/parser/ShowDashboardCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.ShowDashboardCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" * Parses input arguments and creates a new ShowDashboardCommand object"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"public class ShowDashboardCommandParser implements Parser\u003cShowDashboardCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the ShowDashboardCommand"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"     * and returns a ShowDashboardCommand object for execution."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public ShowDashboardCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"            return new ShowDashboardCommand(index);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowDashboardCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":21,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":" * Parses input arguments and create a new DeleteTaskCommand object"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"     * and returns a DeleteTaskCommand object for execution."},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * @throws NullPointerException if args is null"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    public DeleteTaskCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"                PREFIX_INDEX, PREFIX_MILESTONE_INDEX, PREFIX_TASK_INDEX);"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        if (!argMultiMap.arePrefixesPresent(PREFIX_INDEX, PREFIX_MILESTONE_INDEX, PREFIX_TASK_INDEX)"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            Index studentIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_INDEX).get());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            Index milestoneIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_MILESTONE_INDEX).get());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            Index taskIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_TASK_INDEX).get());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            return new DeleteTaskCommand(studentIndex, milestoneIndex, taskIndex);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":39,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/DeleteLessonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.DeleteLessonCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":" * Parses input arguments and creates a new DeleteLessonCommand object"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"public class DeleteLessonCommandParser implements Parser\u003cDeleteLessonCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteLessonCommand"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"     * and returns an DeleteLessonCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    public DeleteLessonCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"            return new DeleteLessonCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":16,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Allergies;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinName;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinPhone;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Remarks;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"     * Parses a {@code String programmingLanguage} into an {@code programminglanguage}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if the given {@code programmingLanguage} is invalid."},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"    public static ProgrammingLanguage parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(subject);"},{"lineNumber":134,"author":{"gitID":"samuelloh"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        if (!ProgrammingLanguage.isValidProgrammingLanguage(trimmedSubject)) {"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(ProgrammingLanguage.MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        return new ProgrammingLanguage(trimmedSubject);"},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"     * Parses a {@code Optional\u003cString\u003e programmingLanguage} into an {@code Optional\u003cprogramminglanguage\u003e}"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"     * if {@code programmingLanguage} is present."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"    public static Optional\u003cProgrammingLanguage\u003e parseSubject(Optional\u003cString\u003e subject) throws IllegalValueException {"},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(subject);"},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":"        return subject.isPresent() ? Optional.of(parseSubject(subject.get())) : Optional.empty();"},{"lineNumber":149,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":202,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"demitycho"},"content":"     * Parses {@code String time} into a {@code Time}."},{"lineNumber":204,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"demitycho"},"content":"    public static Time parseTime(String time) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"demitycho"},"content":"        requireNonNull(time);"},{"lineNumber":207,"author":{"gitID":"demitycho"},"content":"        String trimmedSubject \u003d time.trim();"},{"lineNumber":208,"author":{"gitID":"demitycho"},"content":"        if (!Time.isValidTime(trimmedSubject)) {"},{"lineNumber":209,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":210,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"demitycho"},"content":"        return new Time(trimmedSubject);"},{"lineNumber":212,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":214,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"demitycho"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into an {@code Optional\u003cTime\u003e} if {@code time} is present."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"demitycho"},"content":"    public static Optional\u003cTime\u003e parseTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":219,"author":{"gitID":"demitycho"},"content":"        requireNonNull(time);"},{"lineNumber":220,"author":{"gitID":"demitycho"},"content":"        return time.isPresent() ? Optional.of(parseTime(time.get())) : Optional.empty();"},{"lineNumber":221,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":223,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"demitycho"},"content":"     * Parses {@code String day} into a {@code Day}."},{"lineNumber":225,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"demitycho"},"content":"    public static Day parseDay(String day) throws IllegalValueException {"},{"lineNumber":227,"author":{"gitID":"demitycho"},"content":"        requireNonNull(day);"},{"lineNumber":228,"author":{"gitID":"demitycho"},"content":"        String trimmedDay \u003d day.trim().toLowerCase();"},{"lineNumber":229,"author":{"gitID":"demitycho"},"content":"        if (!Day.isValidDay(trimmedDay)) {"},{"lineNumber":230,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(Day.MESSAGE_DAY_CONSTRAINTS);"},{"lineNumber":231,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"demitycho"},"content":"        return new Day(trimmedDay);"},{"lineNumber":233,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":235,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"demitycho"},"content":"     * Parses a {@code Optional\u003cString\u003e day} into an {@code Optional\u003cDay\u003e} if {@code day} is present."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"demitycho"},"content":"    public static Optional\u003cDay\u003e parseDay(Optional\u003cString\u003e day) throws IllegalValueException {"},{"lineNumber":240,"author":{"gitID":"demitycho"},"content":"        requireNonNull(day);"},{"lineNumber":241,"author":{"gitID":"demitycho"},"content":"        return day.isPresent() ? Optional.of(parseDay(day.get())) : Optional.empty();"},{"lineNumber":242,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"yapni"},"content":"     * Parses a {@code String date} into a {@code Date}."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":248,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":249,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"yapni"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":251,"author":{"gitID":"yapni"},"content":"        requireNonNull(date);"},{"lineNumber":252,"author":{"gitID":"yapni"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":253,"author":{"gitID":"yapni"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":254,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":255,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"yapni"},"content":"        return new Date(trimmedDate);"},{"lineNumber":257,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"yapni"},"content":""},{"lineNumber":259,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"yapni"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e} if {@code date} is present."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"yapni"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":264,"author":{"gitID":"yapni"},"content":"        requireNonNull(date);"},{"lineNumber":265,"author":{"gitID":"yapni"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":266,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":268,"author":{"gitID":"samuelloh"},"content":"    //@@author samuelloh"},{"lineNumber":269,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code Optional\u003cString\u003e path} into an {@code Optional\u003cProfilePicturePath\u003e} if {@code path} is present."},{"lineNumber":271,"author":{"gitID":"samuelloh"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":272,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"samuelloh"},"content":"    public static Optional\u003cProfilePicturePath\u003e parsePictureUrl(Optional\u003cString\u003e path) throws"},{"lineNumber":274,"author":{"gitID":"samuelloh"},"content":"            IllegalValueException {"},{"lineNumber":275,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":276,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(path);"},{"lineNumber":277,"author":{"gitID":"samuelloh"},"content":"        return path.isPresent() ? Optional.of(parsePictureUrl(path.get())) : Optional.empty();"},{"lineNumber":278,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":280,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code String path} into a {@code ProfilePicturePath}."},{"lineNumber":282,"author":{"gitID":"samuelloh"},"content":"     * @throws IllegalValueException if the given {@code path} is invalid."},{"lineNumber":283,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"samuelloh"},"content":"    public static ProfilePicturePath parsePictureUrl(String path) throws IllegalValueException {"},{"lineNumber":285,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(path);"},{"lineNumber":286,"author":{"gitID":"samuelloh"},"content":"        if (!ProfilePicturePath.isValidPath(path)) {"},{"lineNumber":287,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(ProfilePicturePath.MESSAGE_PICTURE_CONSTRAINTS);"},{"lineNumber":288,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"samuelloh"},"content":"        return new ProfilePicturePath(path);"},{"lineNumber":290,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":292,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code String allergies} into an {@code allergies}."},{"lineNumber":294,"author":{"gitID":"samuelloh"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":295,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":296,"author":{"gitID":"samuelloh"},"content":"     * @throws IllegalValueException if the given {@code allergies} is invalid."},{"lineNumber":297,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"samuelloh"},"content":"    public static Allergies parseAllergies(String allergies) throws IllegalValueException {"},{"lineNumber":299,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(allergies);"},{"lineNumber":300,"author":{"gitID":"samuelloh"},"content":"        String trimmedAllergies \u003d allergies.trim();"},{"lineNumber":301,"author":{"gitID":"samuelloh"},"content":"        if (!Allergies.isValidAllergies(trimmedAllergies)) {"},{"lineNumber":302,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(Allergies.MESSAGE_ALLERGIES_CONSTRAINTS);"},{"lineNumber":303,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"samuelloh"},"content":"        return new Allergies(trimmedAllergies);"},{"lineNumber":305,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":307,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":308,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code Optional\u003cString\u003e allergies} into an {@code Optional\u003cAllergies\u003e} if {@code allergies} is present."},{"lineNumber":309,"author":{"gitID":"samuelloh"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":310,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":311,"author":{"gitID":"samuelloh"},"content":"    public static Optional\u003cAllergies\u003e parseAllergies(Optional\u003cString\u003e allergies) throws IllegalValueException {"},{"lineNumber":312,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(allergies);"},{"lineNumber":313,"author":{"gitID":"samuelloh"},"content":"        return allergies.isPresent() ? Optional.of(parseAllergies(allergies.get())) : Optional.empty();"},{"lineNumber":314,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":316,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code String nextOfKinName} into a {@code NextOfKinName}."},{"lineNumber":318,"author":{"gitID":"samuelloh"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":319,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":320,"author":{"gitID":"samuelloh"},"content":"     * @throws IllegalValueException if the given {@code nextOfKinName} is invalid."},{"lineNumber":321,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":322,"author":{"gitID":"samuelloh"},"content":"    public static NextOfKinName parseNextOfKinName(String nextOfKinName) throws IllegalValueException {"},{"lineNumber":323,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(nextOfKinName);"},{"lineNumber":324,"author":{"gitID":"samuelloh"},"content":"        String trimmedNextOfKinName \u003d nextOfKinName.trim();"},{"lineNumber":325,"author":{"gitID":"samuelloh"},"content":"        if (!NextOfKinName.isValidNextOfKinName(trimmedNextOfKinName)) {"},{"lineNumber":326,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(NextOfKinName.MESSAGE_NEXTOFKINNAME_CONSTRAINTS);"},{"lineNumber":327,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"samuelloh"},"content":"        return new NextOfKinName(trimmedNextOfKinName);"},{"lineNumber":329,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":331,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":332,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code Optional\u003cString\u003e nextOfKinName} into a {@code Optional\u003cNextOfKinName\u003e}"},{"lineNumber":333,"author":{"gitID":"samuelloh"},"content":"     * if {@code nextOfKinName} is present."},{"lineNumber":334,"author":{"gitID":"samuelloh"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":335,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"samuelloh"},"content":"    public static Optional\u003cNextOfKinName\u003e parseNextOfKinName(Optional\u003cString\u003e nextOfKinName)"},{"lineNumber":337,"author":{"gitID":"samuelloh"},"content":"            throws IllegalValueException {"},{"lineNumber":338,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(nextOfKinName);"},{"lineNumber":339,"author":{"gitID":"samuelloh"},"content":"        return nextOfKinName.isPresent() ? Optional.of(parseNextOfKinName(nextOfKinName.get())) : Optional.empty();"},{"lineNumber":340,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":342,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":343,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code String nextOfKinPhone} into a {@code NextOfKinPhone}."},{"lineNumber":344,"author":{"gitID":"samuelloh"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":345,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":346,"author":{"gitID":"samuelloh"},"content":"     * @throws IllegalValueException if the given {@code nextOfKinPhone} is invalid."},{"lineNumber":347,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":348,"author":{"gitID":"samuelloh"},"content":"    public static NextOfKinPhone parseNextOfKinPhone(String nextOfKinPhone) throws IllegalValueException {"},{"lineNumber":349,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(nextOfKinPhone);"},{"lineNumber":350,"author":{"gitID":"samuelloh"},"content":"        String trimmedNextOfKinPhone \u003d nextOfKinPhone.trim();"},{"lineNumber":351,"author":{"gitID":"samuelloh"},"content":"        if (!NextOfKinPhone.isValidNextOfKinPhone(trimmedNextOfKinPhone)) {"},{"lineNumber":352,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(NextOfKinPhone.MESSAGE_NEXTOFKINPHONE_CONSTRAINTS);"},{"lineNumber":353,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":354,"author":{"gitID":"samuelloh"},"content":"        return new NextOfKinPhone(trimmedNextOfKinPhone);"},{"lineNumber":355,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":357,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":358,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code Optional\u003cString\u003e nextOfKinPhone} into a {@code Optional\u003cNextOfKinPhone\u003e}"},{"lineNumber":359,"author":{"gitID":"samuelloh"},"content":"     * if {@code nextOfKinPhone} is present."},{"lineNumber":360,"author":{"gitID":"samuelloh"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":361,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":362,"author":{"gitID":"samuelloh"},"content":"    public static Optional\u003cNextOfKinPhone\u003e parseNextOfKinPhone(Optional\u003cString\u003e nextOfKinPhone)"},{"lineNumber":363,"author":{"gitID":"samuelloh"},"content":"            throws IllegalValueException {"},{"lineNumber":364,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(nextOfKinPhone);"},{"lineNumber":365,"author":{"gitID":"samuelloh"},"content":"        return nextOfKinPhone.isPresent() ? Optional.of(parseNextOfKinPhone(nextOfKinPhone.get())) : Optional.empty();"},{"lineNumber":366,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":368,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":369,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code String remarks} into a {@code Remarks} instance."},{"lineNumber":370,"author":{"gitID":"samuelloh"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":371,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":372,"author":{"gitID":"samuelloh"},"content":"     * @throws IllegalValueException if the given {@code remarks} is invalid."},{"lineNumber":373,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":374,"author":{"gitID":"samuelloh"},"content":"    public static Remarks parseRemarks(String remarks) throws IllegalValueException {"},{"lineNumber":375,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(remarks);"},{"lineNumber":376,"author":{"gitID":"samuelloh"},"content":"        String trimmedRemarks \u003d remarks.trim();"},{"lineNumber":377,"author":{"gitID":"samuelloh"},"content":"        if (!Remarks.isValidRemarks(trimmedRemarks)) {"},{"lineNumber":378,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(Remarks.MESSAGE_REMARKS_CONSTRAINTS);"},{"lineNumber":379,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":380,"author":{"gitID":"samuelloh"},"content":"        return new Remarks(remarks);"},{"lineNumber":381,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":383,"author":{"gitID":"samuelloh"},"content":"     * Parses a {@code Optional\u003cString\u003e remarks} into a {@code Optional\u003cRemarks\u003e} instance"},{"lineNumber":384,"author":{"gitID":"samuelloh"},"content":"     * if {@code remarks} is present."},{"lineNumber":385,"author":{"gitID":"samuelloh"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":386,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":387,"author":{"gitID":"samuelloh"},"content":"    public static Optional\u003cRemarks\u003e parseRemarks(Optional\u003cString\u003e remarks)"},{"lineNumber":388,"author":{"gitID":"samuelloh"},"content":"            throws IllegalValueException {"},{"lineNumber":389,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(remarks);"},{"lineNumber":390,"author":{"gitID":"samuelloh"},"content":"        return remarks.isPresent() ? Optional.of(parseRemarks(remarks.get())) : Optional.empty();"},{"lineNumber":391,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":392,"author":{"gitID":"samuelloh"},"content":"    //@@author"},{"lineNumber":393,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":394,"author":{"gitID":"samuelloh"},"content":""}],"authorContributionMap":{"yapni":34,"samuelloh":144,"demitycho":41,"-":175}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"    public static final Prefix PREFIX_PICTURE_PATH \u003d new Prefix(\"pa/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    public static final Prefix PREFIX_PROGRAMMING_LANGUAGE \u003d new Prefix(\"pl/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public static final Prefix PREFIX_DAY \u003d new Prefix(\"d/\");"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"o/\");"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_MILESTONE_INDEX \u003d new Prefix(\"m/\");"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public static final Prefix PREFIX_TASK_INDEX \u003d new Prefix(\"tk/\");"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    public static final Prefix PREFIX_ALLERGIES \u003d new Prefix(\"al/\");"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    public static final Prefix PREFIX_NEXTOFKINNAME \u003d new Prefix(\"nokn/\");"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    public static final Prefix PREFIX_NEXTOFKINPHONE \u003d new Prefix(\"nokp/\");"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public static final Prefix PREFIX_REMARKS \u003d new Prefix(\"r/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"samuelloh":6,"demitycho":3,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/CheckTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.CheckTaskCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":" * Parses input arguments and create a new CheckTaskCommand object"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"public class CheckTaskCommandParser implements Parser\u003cCheckTaskCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the CheckTaskCommand"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"     * and returns a CheckTaskCommand object for execution."},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * @throws NullPointerException if args is null"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    public CheckTaskCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"                PREFIX_INDEX, PREFIX_MILESTONE_INDEX, PREFIX_TASK_INDEX);"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        if (!argMultiMap.arePrefixesPresent(PREFIX_INDEX, PREFIX_MILESTONE_INDEX, PREFIX_TASK_INDEX)"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"                || !argMultiMap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckTaskCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            Index studentIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_INDEX).get());"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            Index milestoneIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_MILESTONE_INDEX).get());"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            Index taskIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_TASK_INDEX).get());"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            return new CheckTaskCommand(studentIndex, milestoneIndex, taskIndex);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":39,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * Parses input arguments and creates a new ListCommand object"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class ListCommandParser {"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"     * and returns an ListCommand object for execution."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        String[] keywords \u003d args.split(\" \");"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        if (keywords.length \u003d\u003d 1) {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"            return new ListCommand(false);"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        } else if (keywords[1].matches(\"-f\")) {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"            return new ListCommand(true);"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":19,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/FavouriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.FavouriteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" * Parses input arguments and creates a new FavouriteCommand object"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"public class FavouriteCommandParser implements Parser\u003cFavouriteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the FavouriteCommand"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"     * and returns an FavouriteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public FavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"            return new FavouriteCommand(index);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":22,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/FindTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":" * Parses input arguments and creates a new FindTagCommand object"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"public class FindTagCommandParser implements Parser\u003cFindTagCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagCommand"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"     * and returns an FindTagCommand object for execution."},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    public FindTagCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        return new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":27,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/EditMiscCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXTOFKINNAME;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXTOFKINPHONE;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditMiscCommand;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditMiscCommand.EditMiscDescriptor;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":" * Parses input arguments and creates a new EditMiscCommand object"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"public class EditMiscCommandParser implements Parser\u003cEditMiscCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    public EditMiscCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(args);"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ALLERGIES, PREFIX_NEXTOFKINNAME, PREFIX_NEXTOFKINPHONE,"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"                        PREFIX_REMARKS);"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        Index index;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMiscCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"        EditMiscDescriptor editMiscDescriptor \u003d new EditMiscDescriptor();"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"            ParserUtil.parseAllergies(argMultimap.getValue(PREFIX_ALLERGIES))"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"                    .ifPresent(editMiscDescriptor::setAllergies);"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"            ParserUtil.parseNextOfKinName(argMultimap.getValue(PREFIX_NEXTOFKINNAME))"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"                    .ifPresent(editMiscDescriptor::setNextOfKinName);"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"            ParserUtil.parseNextOfKinPhone(argMultimap.getValue(PREFIX_NEXTOFKINPHONE))"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"                    .ifPresent(editMiscDescriptor::setNextOfKinPhone);"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"            ParserUtil.parseRemarks(argMultimap.getValue(PREFIX_REMARKS)).ifPresent(editMiscDescriptor::setRemarks);"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"        if (!editMiscDescriptor.isAnyFieldEdited()) {"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(EditMiscCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        return new EditMiscCommand(index, editMiscDescriptor);"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":49,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/EditPictureCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE_PATH;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import seedu.address.logic.commands.EditPictureCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":" * Parses input arguments and creates a new EditPictureCommand object"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"public class EditPictureCommandParser implements Parser\u003cEditPictureCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    public EditPictureCommand parse(String userInput) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(userInput);"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_INDEX, PREFIX_PICTURE_PATH);"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_PICTURE_PATH)) {"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPictureCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"        Index index;"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"        ProfilePicturePath profilePicturePath;"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPictureCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"            profilePicturePath \u003d ParserUtil.parsePictureUrl(argMultimap.getValue(PREFIX_PICTURE_PATH)).get();"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"        return new EditPictureCommand(index, profilePicturePath);"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"yapni":1,"samuelloh":46,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"                        PREFIX_PROGRAMMING_LANGUAGE, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editStudentDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editStudentDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editStudentDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editStudentDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"            ParserUtil.parseSubject(argMultimap.getValue(PREFIX_PROGRAMMING_LANGUAGE)).ifPresent("},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"                    editStudentDescriptor::setProgrammingLanguage);"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        if (!editStudentDescriptor.isAnyFieldEdited()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        return new EditCommand(index, editStudentDescriptor);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":13,"samuelloh":1,"-":69}},{"path":"src/main/java/seedu/address/logic/parser/UnfavouriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.UnfavouriteCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" * Parses input arguments and creates a new UnfavouriteCommand object"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"public class UnfavouriteCommandParser implements Parser\u003cUnfavouriteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the UnfavouriteCommand"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"     * and returns an unFavouriteCommand object for execution."},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public UnfavouriteCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"            return new UnfavouriteCommand(index);"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavouriteCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":21,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/DeleteMilestoneCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.DeleteMilestoneCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":" * Parses input arguments and creates a new DeleteMilestoneCommand object"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"public class DeleteMilestoneCommandParser implements Parser\u003cDeleteMilestoneCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteMilestoneCommand"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"     * and returns an DeleteMilestoneCommand object for execution."},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public DeleteMilestoneCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_MILESTONE_INDEX);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_INDEX, PREFIX_MILESTONE_INDEX)"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"                    DeleteMilestoneCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"            Index studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            Index milestoneIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_MILESTONE_INDEX).get());"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            return new DeleteMilestoneCommand(studentIndex, milestoneIndex);"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":35,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * Deletes a student identified using it\u0027s last displayed index from the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"            + \": Deletes the student identified by the index number used in the last student listing.\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    private Student studentToDelete;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        requireNonNull(studentToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            model.deleteStudent(studentToDelete);"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        } catch (LessonNotFoundException lnfe) {"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"The target lesson cannot be missing\");"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"        } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError("},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"                    \"Removing the target student lessons cannot result in clashing lessons\");"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        } catch (DuplicateLessonException dle) {"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError("},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"                    \"Removing the target student cannot result in duplicate lessons\");"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS,  studentToDelete));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(this.studentToDelete, ((DeleteCommand) other).studentToDelete));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":15,"demitycho":12,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_FAVOURITE_STUDENTS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Lists all students in the address book to the user."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" -f [optional]: \""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"            + \"List all students. Use -f flag to list favourite students only.\";"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS_LIST_ALL \u003d \"Listed all students\";"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS_LIST_FAVOURITES \u003d \"Listed all favourite students\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    private final boolean isFavOnly;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public ListCommand(boolean isFavOnly) {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        this.isFavOnly \u003d isFavOnly;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        return isFavOnly ? execute_list_favourites() : execute_list_all();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"     * Execute list command when -f flag is off, i.e. list all students"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public CommandResult execute_list_all() {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        return new CommandResult(MESSAGE_SUCCESS_LIST_ALL);"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    //@@author yapni"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     * Execute list command when -f flag is on, i.e. list favourite students only"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public CommandResult execute_list_favourites() {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_FAVOURITE_STUDENTS);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        return new CommandResult(MESSAGE_SUCCESS_LIST_FAVOURITES);"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":32,"-":14}},{"path":"src/main/java/seedu/address/logic/commands/FindTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" * Finds and lists all students in address book whose tag contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"public class FindTagCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"findTag\";"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose tag contain any of \""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"            + \"Example: \" + COMMAND_WORD + \" friend family colleague\";"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    public FindTagCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        model.updateFilteredStudentList(predicate);"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        return new CommandResult(getMessageForStudentListShownSummary(model.getFilteredStudentList().size()));"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"                || (other instanceof FindTagCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.predicate.equals(((FindTagCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":37}},{"path":"src/main/java/seedu/address/logic/commands/SyncCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.util.ServiceException;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" * Syncs the user\u0027s contact list and schedule to Google Contacts and Calendar."},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"public class SyncCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"sync\";"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"            + \": syncs your schedule to the cloud\";"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Google Contacts and Calendar synced!\";"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_FAILED_SYNC \u003d \"Failed to sync!\";"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_GOOGLE_SERVICE_ISSUE \u003d \"There was a problem with the Google Service. Try again!\";"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_NOT_LOGGED_IN \u003d \"You are not logged in!\\n\""},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"            + \"Or your credentials have expired, logout and re-login to sync\";"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public SyncCommand() {}"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"            model.synchronize();"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        } catch (IOException ioe) {"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(MESSAGE_FAILED_SYNC);"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        } catch (ServiceException se) {"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(MESSAGE_GOOGLE_SERVICE_ISSUE);"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        } catch (NullPointerException ne) {"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(MESSAGE_NOT_LOGGED_IN);"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":41,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/MilestoneBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Progress;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueTaskList;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Milestone objects."},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"public class MilestoneBuilder {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    private Date dueDate;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private UniqueTaskList taskList;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    private Progress progress;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    private String description;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     * Initializes the MilestoneBuilder with the data of {@code milestoneToCopy}."},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder(Milestone milestoneToCopy) {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        requireNonNull(milestoneToCopy);"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        dueDate \u003d milestoneToCopy.getDueDate();"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        taskList \u003d milestoneToCopy.getTaskList();"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        progress \u003d milestoneToCopy.getProgress();"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        description \u003d milestoneToCopy.getDescription();"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Task} to the {@code Milestone} we are building."},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateTaskException if the new task is a duplicate of an existing task in the milestone."},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withNewTask(Task newTask) throws DuplicateTaskException {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        requireNonNull(newTask);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        taskList.add(newTask);"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        progress \u003d new ProgressBuilder(progress).withOneNewIncompletedTaskToTotal().build();"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Task} from the {@code Milestone} we are building."},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     * @throws TaskNotFoundException if the task is not found in the milestone."},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withoutTask(Task task) throws TaskNotFoundException {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        requireNonNull(task);"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        taskList.remove(task);"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        if (task.isCompleted()) {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"            progress \u003d new ProgressBuilder(progress).withOneLessCompletedTaskFromTotal().build();"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"            progress \u003d new ProgressBuilder(progress).withOneLessIncompletedTaskFromTotal().build();"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     * Marks the specified {@code Task} in the {@code taskList} of the {@code Milestone} we are building as completed."},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    public MilestoneBuilder withTaskCompleted(Index taskIndex) throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        requireNonNull(taskIndex);"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        Task targetTask \u003d taskList.get(taskIndex);"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        if (!targetTask.isCompleted()) {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"            Task completedTargetTask \u003d new TaskBuilder(targetTask).asCompleted().build();"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"            taskList.setTask(targetTask, completedTargetTask);"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"            progress \u003d new ProgressBuilder(progress).withOneMoreCompletedTask().build();"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     * Creates and returns the Milestone object with the current attributes."},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    public Milestone build() {"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        return new Milestone(dueDate, taskList, progress, description);"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":91}},{"path":"src/main/java/seedu/address/logic/commands/util/CheckIndexesUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands.util;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueMilestoneList;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueTaskList;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":" * Utility methods to check if the indexes provided are valid"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"public class CheckIndexesUtil {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     * Returns true if the specified indexes are valid, else returns false."},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public static boolean areIndexesValid(List\u003cStudent\u003e studentList, Index studentIndex, Index milestoneIndex,"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"                                                 Index taskIndex) {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(studentList, studentIndex, milestoneIndex, taskIndex);"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        if (!isStudentIndexValid(studentList, studentIndex)) {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        UniqueMilestoneList milestoneList \u003d studentList.get(studentIndex.getZeroBased())"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"                .getDashboard().getMilestoneList();"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        if (!isMilestoneIndexValid(milestoneList, milestoneIndex)) {"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        UniqueTaskList taskList \u003d milestoneList.get(milestoneIndex).getTaskList();"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        if (!isTaskIndexValid(taskList, taskIndex)) {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        return true;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"     * Returns true if the specified indexes are valid, else returns false."},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    public static boolean areIndexesValid(List\u003cStudent\u003e studentList, Index studentIndex, Index milestoneIndex) {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(studentList, studentIndex, milestoneIndex);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        if (!isStudentIndexValid(studentList, studentIndex)) {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        UniqueMilestoneList milestoneList \u003d studentList.get(studentIndex.getZeroBased())"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"                .getDashboard().getMilestoneList();"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        if (!isMilestoneIndexValid(milestoneList, milestoneIndex)) {"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        return true;"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"     * Returns true if the student index is valid, else returns false."},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    public static boolean isStudentIndexValid(List\u003cStudent\u003e studentList, Index studentIndex) {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(studentList, studentIndex);"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        return studentIndex.getZeroBased() \u003e\u003d 0 \u0026\u0026 studentIndex.getZeroBased() \u003c studentList.size();"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"     * Returns true if the milestone index is valid, else returns false."},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    public static boolean isMilestoneIndexValid(UniqueMilestoneList milestoneList, Index milestoneIndex) {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(milestoneList, milestoneIndex);"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        return milestoneIndex.getZeroBased() \u003e\u003d 0 \u0026\u0026 milestoneIndex.getZeroBased() \u003c milestoneList.size();"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":""},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"     * Returns true if the task index is valid, else returns false."},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    public static boolean isTaskIndexValid(UniqueTaskList taskList, Index taskIndex) {"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(taskList, taskIndex);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        return taskIndex.getZeroBased() \u003e\u003d 0 \u0026\u0026 taskIndex.getZeroBased() \u003c taskList.size();"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":88}},{"path":"src/main/java/seedu/address/logic/commands/ProgressBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Progress;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Progress objects."},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class ProgressBuilder {"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    private int totalTasks;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    private int numCompletedTasks;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private int progressInPercent;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    private String value;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     * Initializes the ProgressBuilder with the data of {@code progressToCopy}."},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder(Progress progressToCopy) {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        requireNonNull(progressToCopy);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        totalTasks \u003d progressToCopy.getTotalTasks();"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        numCompletedTasks \u003d progressToCopy.getNumCompletedTasks();"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        progressInPercent \u003d progressToCopy.getProgressInPercent();"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        value \u003d progressToCopy.getValue();"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"     * Adds 1 to the {@code totalTask} of the {@code Progress} we are building."},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withOneNewIncompletedTaskToTotal() {"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        this.totalTasks +\u003d 1;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     * Subtracts 1 from the {@code totalTask} of the {@code Progress} we are building."},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withOneLessIncompletedTaskFromTotal() {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        if (this.totalTasks \u003e 0) {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            this.totalTasks -\u003d 1;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"     * Subtracts 1 from the {@code totalTask} and {@code numCompletedTask } of the {@code Progress} we are building."},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withOneLessCompletedTaskFromTotal() {"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        if (this.totalTasks \u003e 0) {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            this.totalTasks -\u003d 1;"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        if (this.numCompletedTasks \u003e 0) {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            this.numCompletedTasks -\u003d 1;"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"     * Adds 1 to the {@code numCompletedTasks} of the {@code Progress} we are building."},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    public ProgressBuilder withOneMoreCompletedTask() {"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        this.numCompletedTasks +\u003d 1;"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        setProgressPercentAndValue();"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":""},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     * Creates and returns the Progress object with the current attributes."},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    public Progress build() {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        return new Progress(value);"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"     * Sets the {@code progressInPercent} and {@code value} of the Progress we are building with the current attributes."},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    private void setProgressPercentAndValue() {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        assert this.numCompletedTasks \u003c\u003d this.totalTasks;"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":""},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        this.progressInPercent \u003d (int) (((double) numCompletedTasks / totalTasks) * 100);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        this.value \u003d this.numCompletedTasks + \"/\" + this.totalTasks;"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":93}},{"path":"src/main/java/seedu/address/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import java.time.Duration;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.concurrent.Callable;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.util.concurrent.ExecutorService;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.util.concurrent.Executors;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import java.util.concurrent.Future;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.external.exceptions.CredentialsException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":" * Logs in to user\u0027s Google Account."},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"public class LoginCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"            + \": login to your Google account\";"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Google account logged in\";"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    private static final String MESSAGE_ALREADY_LOGGED_IN \u003d \"You are already logged in!\";"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    private static final String MESSAGE_AUTH_DENIED \u003d \"Google account\u0027s authorisation denied!\";"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    private static final String MESSAGE_LOGIN_SUCCESS \u003d \"Successfully logged in to Google accounts\";"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    private static final String MESSAGE_TIME_OUT \u003d \"Login timeout!\";"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    private static final String MESSAGE_UNKNOWN_FAILURE \u003d \"Unable to login(reason unknown)!\";"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    private static final Integer INTEGER_TIME_ALLOWED \u003d 45;"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    public LoginCommand() {}"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        final Duration timeout \u003d Duration.ofSeconds(INTEGER_TIME_ALLOWED);"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        ExecutorService executor \u003d Executors.newSingleThreadExecutor();"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        final Future\u003cString\u003e handler \u003d executor.submit(new Callable() {"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"            @Override"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            public String call() throws Exception {"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"                try {"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"                    model.loginGoogleAccount();"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"                    return MESSAGE_LOGIN_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"                } catch (IOException ioe) {"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"                    return MESSAGE_AUTH_DENIED;"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"                } catch (CredentialsException ce) {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"                    return MESSAGE_ALREADY_LOGGED_IN;"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"                }"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        });"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"            String result \u003d handler.get(timeout.toMillis(), TimeUnit.MILLISECONDS);"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"            return new CommandResult(result);"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"            handler.cancel(true);"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"            executor.shutdownNow();"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"            return new CommandResult(MESSAGE_TIME_OUT);"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        } catch (Exception e) {"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"            e.printStackTrace();"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"            executor.shutdownNow();"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"            return new CommandResult(MESSAGE_UNKNOWN_FAILURE);"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":69,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Milestone objects."},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class TaskBuilder {"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    private String name;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    private String description;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private boolean isCompleted;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        requireNonNull(taskToCopy);"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        name \u003d taskToCopy.getName();"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        description \u003d taskToCopy.getDescription();"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        isCompleted \u003d taskToCopy.isCompleted();"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"     * Sets the {@code isCompleted} of the {@code Task} we are building as true"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public TaskBuilder asCompleted() {"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        this.isCompleted \u003d true;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"     * Creates and returns the Task object with the current attributes."},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    public Task build() {"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        return new Task(name, description, isCompleted);"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":42}},{"path":"src/main/java/seedu/address/logic/commands/FindAndDeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Chweeee"},"content":"//@@author chweeee"},{"lineNumber":16,"author":{"gitID":"Chweeee"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Chweeee"},"content":" * Finds and lists all students in address book whose name contains any of the argument keywords,"},{"lineNumber":18,"author":{"gitID":"Chweeee"},"content":" * and deletes the first student of the list."},{"lineNumber":19,"author":{"gitID":"Chweeee"},"content":" * Keyword matching is case sensitive."},{"lineNumber":20,"author":{"gitID":"Chweeee"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Chweeee"},"content":"public class FindAndDeleteCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":23,"author":{"gitID":"Chweeee"},"content":"    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"},{"lineNumber":24,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":25,"author":{"gitID":"Chweeee"},"content":"    public static final String MESSAGE_STUDENT_NOT_FOUND \u003d \"Student to be deleted cannot be found.\";"},{"lineNumber":26,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":27,"author":{"gitID":"Chweeee"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":28,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":29,"author":{"gitID":"Chweeee"},"content":"    private Student studentToDelete;"},{"lineNumber":30,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":31,"author":{"gitID":"Chweeee"},"content":"    public FindAndDeleteCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":32,"author":{"gitID":"Chweeee"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":33,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":35,"author":{"gitID":"Chweeee"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"Chweeee"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":37,"author":{"gitID":"Chweeee"},"content":"        requireNonNull(studentToDelete);"},{"lineNumber":38,"author":{"gitID":"Chweeee"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"Chweeee"},"content":"            model.deleteStudent(studentToDelete);"},{"lineNumber":40,"author":{"gitID":"Chweeee"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":41,"author":{"gitID":"Chweeee"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":42,"author":{"gitID":"Chweeee"},"content":"        } catch (LessonNotFoundException lnfe) {"},{"lineNumber":43,"author":{"gitID":"Chweeee"},"content":"            throw new AssertionError(\"The target student\u0027s lessons cannot be missing\");"},{"lineNumber":44,"author":{"gitID":"Chweeee"},"content":"        } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":45,"author":{"gitID":"Chweeee"},"content":"            throw new AssertionError("},{"lineNumber":46,"author":{"gitID":"Chweeee"},"content":"                    \"Removing the target student\u0027s lessons cannot result in clashing lessons\");"},{"lineNumber":47,"author":{"gitID":"Chweeee"},"content":"        } catch (DuplicateLessonException dle) {"},{"lineNumber":48,"author":{"gitID":"Chweeee"},"content":"            throw new AssertionError("},{"lineNumber":49,"author":{"gitID":"Chweeee"},"content":"                    \"Removing the target student cannot result in duplicate lessons\");"},{"lineNumber":50,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":51,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Chweeee"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS,  studentToDelete));"},{"lineNumber":53,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":55,"author":{"gitID":"Chweeee"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"Chweeee"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"Chweeee"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":58,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":59,"author":{"gitID":"Chweeee"},"content":"        //look for the student"},{"lineNumber":60,"author":{"gitID":"Chweeee"},"content":"        model.updateFilteredStudentList(predicate);"},{"lineNumber":61,"author":{"gitID":"Chweeee"},"content":"        if (model.getFilteredStudentList().size() \u003d\u003d 0) {"},{"lineNumber":62,"author":{"gitID":"Chweeee"},"content":"            throw new CommandException(MESSAGE_STUDENT_NOT_FOUND);"},{"lineNumber":63,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Chweeee"},"content":"        studentToDelete \u003d lastShownList.get(0);"},{"lineNumber":65,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Chweeee"},"content":"}"},{"lineNumber":67,"author":{"gitID":"Chweeee"},"content":"//@@author"}],"authorContributionMap":{"yapni":3,"demitycho":3,"-":8,"Chweeee":53}},{"path":"src/main/java/seedu/address/logic/commands/DeleteMilestoneCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEXES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.util.CheckIndexesUtil;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":" * Deletes a milestone from a student\u0027s dashboard"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"public class DeleteMilestoneCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"deleteMS\";"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"            + \": Deletes a milestone from a student\u0027s dashboard.\\n\""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"            + \"Parameters: \""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"STUDENT\u0027S INDEX \""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"MILESTONE\u0027S INDEX\\n\""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"1\""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"2\";"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DELETE_MILESTONE_SUCCESS \u003d \"Deleted milestone: %1$s\";"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    private final Index targetStudentIndex;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    private final Index targetMilestoneIndex;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    private Student targetStudent;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    private Milestone targetMilestone;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    public DeleteMilestoneCommand(Index targetStudentIndex, Index targetMilestoneIndex) {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudentIndex, targetMilestoneIndex);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        this.targetStudentIndex \u003d targetStudentIndex;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        this.targetMilestoneIndex \u003d targetMilestoneIndex;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudent, editedStudent);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            model.updateStudent(targetStudent, editedStudent);"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"            /* DuplicateStudentException caught will mean that the milestone list is the same as before */"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Milestone list cannot be the same\");"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException e) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Student cannot be missing\");"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_MILESTONE_SUCCESS, targetMilestone));"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"            setTargetObjects();"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"            createEditedStudent();"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        } catch (MilestoneNotFoundException e) {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Milestone cannot be missing\");"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":""},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"     * Creates {@code editedStudent} which is a copy of {@code targetStudent}, but with the {@code targetMilestone}"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"     * removed from the {@code dashboard}."},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent() throws MilestoneNotFoundException {"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        assert targetStudent !\u003d null \u0026\u0026 targetMilestone !\u003d null;"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(targetStudent).withoutMilestone(targetMilestone).build();"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":""},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"     * Sets the {@code targetStudent} and {@code targetMilestone} objects"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if any of the targetStudentIndex or targetMilestoneIndex are invalid"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    private void setTargetObjects() throws IllegalValueException {"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        assert targetStudentIndex !\u003d null \u0026\u0026 targetMilestoneIndex !\u003d null;"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        if (!CheckIndexesUtil.areIndexesValid(lastShownList, targetStudentIndex, targetMilestoneIndex)) {"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEXES);"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":""},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        targetStudent \u003d lastShownList.get(targetStudentIndex.getZeroBased());"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        targetMilestone \u003d targetStudent.getDashboard().getMilestoneList().get(targetMilestoneIndex);"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"                || (other instanceof DeleteMilestoneCommand // instanceof handles null"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((DeleteMilestoneCommand) other).targetStudentIndex \u003d\u003d this.targetStudentIndex"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((DeleteMilestoneCommand) other).targetMilestoneIndex \u003d\u003d this.targetMilestoneIndex);"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":107,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/CheckTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.util.CheckIndexesUtil;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.TaskNotFoundException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":" * Mark a task as completed"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"public class CheckTaskCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"checkTask\";"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            + \": Marks a task from a milestone in a student\u0027s dashboard as completed.\\n\""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"            + \"Parameters: \""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"STUDENT\u0027S INDEX \""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"MILESTONE\u0027S INDEX \""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            + PREFIX_TASK_INDEX + \"TASK\u0027S INDEX\\n\""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"1 \""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"2 \""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            + PREFIX_TASK_INDEX + \"3\";"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Task %1$s marked as completed in milestone %2$s\";"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_TASK_ALREADY_COMPLETED \u003d \"Task is already marked as completed\";"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    private Student targetStudent;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    private Milestone targetMilestone;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    private Task targetTask;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    private boolean taskWasAlreadyCompleted;"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    private final Index targetStudentIndex;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    private final Index targetMilestoneIndex;"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    private final Index targetTaskIndex;"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    public CheckTaskCommand(Index targetStudentIndex, Index targetMilestoneIndex, Index targetTaskIndex) {"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudentIndex, targetMilestoneIndex, targetTaskIndex);"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        this.targetStudentIndex \u003d targetStudentIndex;"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        this.targetMilestoneIndex \u003d targetMilestoneIndex;"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        this.targetTaskIndex \u003d targetTaskIndex;"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        if (!taskWasAlreadyCompleted) {"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"            try {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"                requireAllNonNull(targetStudent, editedStudent);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"                model.updateStudent(targetStudent, editedStudent);"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"            } catch (DuplicateStudentException e) {"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"                /* DuplicateStudentException caught will mean that the task list is the same as before */"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"                throw new AssertionError(\"New task cannot be missing\");"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"            } catch (StudentNotFoundException e) {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"                throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS,"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"                    targetTaskIndex.getOneBased(), targetMilestoneIndex.getOneBased()));"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        } else {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"            return new CommandResult(MESSAGE_TASK_ALREADY_COMPLETED);"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"            setTargetObjects();"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"            if (!targetTask.isCompleted()) {"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                taskWasAlreadyCompleted \u003d false;"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"                createEditedStudent();"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"            } else {"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"                taskWasAlreadyCompleted \u003d true;"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The task cannot be duplicated\");"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        } catch (TaskNotFoundException e) {"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateMilestoneException e) {"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The milestone cannot be duplicated\");"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        } catch (MilestoneNotFoundException e) {"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The milestone cannot be missing\");"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":""},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"     * Sets the {@code targetStudent}, {@code targetMilestone} and {@code targetTask }of this command object."},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if any of the target indexes are invalid"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"    private void setTargetObjects() throws IllegalValueException {"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        assert targetStudentIndex !\u003d null \u0026\u0026 targetMilestoneIndex !\u003d null \u0026\u0026 targetTaskIndex !\u003d null;"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":""},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        if (!CheckIndexesUtil.areIndexesValid(lastShownList, targetStudentIndex, targetMilestoneIndex,"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"                targetTaskIndex)) {"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(\"One or more of the provided indexes are invalid\");"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":""},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        targetStudent \u003d lastShownList.get(targetStudentIndex.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        targetMilestone \u003d targetStudent.getDashboard().getMilestoneList().get(targetMilestoneIndex);"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        targetTask \u003d targetMilestone.getTaskList().get(targetTaskIndex);"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":""},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"     * Creates {@code editedStudent} which is a copy of {@code targetStudent}, but with the {@code targetTask} marked"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"     * as completed in the {@code targetMilestone}."},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent() throws DuplicateTaskException, TaskNotFoundException,"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"            DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"        assert targetStudent !\u003d null \u0026\u0026 targetMilestoneIndex !\u003d null \u0026\u0026 targetTaskIndex !\u003d null;"},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(targetStudent)"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"                .withTaskCompleted(targetMilestoneIndex, targetTaskIndex).build();"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":""},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitID":"yapni"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":139,"author":{"gitID":"yapni"},"content":"                || (other instanceof CheckTaskCommand // instanceof handles null"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((CheckTaskCommand) other).targetStudentIndex \u003d\u003d this.targetStudentIndex"},{"lineNumber":141,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((CheckTaskCommand) other).targetMilestoneIndex \u003d\u003d this.targetMilestoneIndex"},{"lineNumber":142,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((CheckTaskCommand) other).targetTaskIndex \u003d\u003d this.targetTaskIndex);"},{"lineNumber":143,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":139,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/ConversationCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import com.ibm.watson.developer_cloud.conversation.v1.Conversation;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import com.ibm.watson.developer_cloud.conversation.v1.model.InputData;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.ibm.watson.developer_cloud.conversation.v1.model.MessageOptions;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.ibm.watson.developer_cloud.conversation.v1.model.MessageResponse;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Chweeee"},"content":"//@@author chweeee"},{"lineNumber":11,"author":{"gitID":"Chweeee"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Chweeee"},"content":" * purpose of this class is to be able to send userInput as text to the agent to be processed"},{"lineNumber":13,"author":{"gitID":"Chweeee"},"content":" **/"},{"lineNumber":14,"author":{"gitID":"Chweeee"},"content":"public class ConversationCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":16,"author":{"gitID":"Chweeee"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Hello\";"},{"lineNumber":17,"author":{"gitID":"Chweeee"},"content":"    private static Conversation service \u003d null;"},{"lineNumber":18,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":19,"author":{"gitID":"Chweeee"},"content":"    public static void setUpAgent() {"},{"lineNumber":20,"author":{"gitID":"Chweeee"},"content":"        service \u003d new Conversation(\"2018-02-16\");"},{"lineNumber":21,"author":{"gitID":"Chweeee"},"content":"        service.setUsernameAndPassword(\"531ab0c0-8012-4e3b-8a37-eb1ca8fa1010\", \"ZkCeN4YqIH3W\");"},{"lineNumber":22,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":24,"author":{"gitID":"Chweeee"},"content":"    public static MessageResponse getMessageResponse(String userInput) {"},{"lineNumber":25,"author":{"gitID":"Chweeee"},"content":"        MessageResponse response \u003d null;"},{"lineNumber":26,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":27,"author":{"gitID":"Chweeee"},"content":"        InputData input \u003d new InputData.Builder(userInput).build();"},{"lineNumber":28,"author":{"gitID":"Chweeee"},"content":"        MessageOptions option \u003d new MessageOptions.Builder(\"19f7b6f4-7944-419d-83a0-6bf9837ec333\").input(input).build();"},{"lineNumber":29,"author":{"gitID":"Chweeee"},"content":"        response \u003d service.message(option).execute();"},{"lineNumber":30,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":31,"author":{"gitID":"Chweeee"},"content":"        return response;"},{"lineNumber":32,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":34,"author":{"gitID":"Chweeee"},"content":"    public static String getResponseText(MessageResponse response) {"},{"lineNumber":35,"author":{"gitID":"Chweeee"},"content":"        String text \u003d response.getOutput().getText().toString();"},{"lineNumber":36,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":37,"author":{"gitID":"Chweeee"},"content":"        return text;"},{"lineNumber":38,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":40,"author":{"gitID":"Chweeee"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"Chweeee"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"Chweeee"},"content":"        return new CommandResult(\"Bye!\");"},{"lineNumber":43,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Chweeee"},"content":"}"},{"lineNumber":45,"author":{"gitID":"Chweeee"},"content":"//@@"}],"authorContributionMap":{"-":9,"Chweeee":36}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"        model.resetData(new AddressBook(), new Schedule());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"demitycho":2,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/DeleteLessonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":" * Deletes a lesson identified using it\u0027s last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"public class DeleteLessonCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"deleteLesson\";"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"            + \": Deletes the lesson identified by the index number used in the last lesson listing.\\n\""},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"Deleted Lesson: %1$s\";"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    private Lesson lessonToDelete;"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    public DeleteLessonCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        requireNonNull(lessonToDelete);"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"            model.deleteLesson(lessonToDelete);"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        } catch (LessonNotFoundException lnfe) {"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"The target lesson cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_LESSON_SUCCESS,  lessonToDelete));"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        List\u003cLesson\u003e lessonList \u003d model.getSchedule().getSchedule();"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lessonList.size()) {"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        lessonToDelete \u003d lessonList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"                || (other instanceof DeleteLessonCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteLessonCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 Objects.equals(this.lessonToDelete, ((DeleteLessonCommand) other).lessonToDelete));"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":59,"-":10}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of students."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"     * @return summary message for students displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public static String getMessageForStudentListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        return String.format(Messages.MESSAGE_STUDENT_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":" * Adds a student to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the address book. \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_PROGRAMMING_LANGUAGE + \"PROGRAMMING LANGUAGE \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_PROGRAMMING_LANGUAGE + \"HTML \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    private final Student toAdd;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     * Creates an AddCommand to add the specified {@code Student}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public AddCommand(Student student) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        requireNonNull(student);"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        toAdd \u003d student;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            model.addStudent(toAdd);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":15,"samuelloh":2,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/UnfavouriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.util.CheckIndexesUtil;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" * Remove a Student from favourites"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"public class UnfavouriteCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"unfav\";"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Remove a student from favourites. \""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Student removed from favourites: %1$s\";"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    private final Index targetStudentIndex;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    private Student targetStudent;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    public UnfavouriteCommand(Index targetStudentIndex) {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        requireNonNull(targetStudentIndex);"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        this.targetStudentIndex \u003d targetStudentIndex;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudent, editedStudent);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"            model.updateStudent(targetStudent, editedStudent);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedStudent.getName()));"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"            setTargetStudent();"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            createEditedStudent();"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"     * Creates {@code editedStudent} which is a copy of {@code targetStudent}, but with the {@code favourite}"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"     * attribute set to false."},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent() {"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        assert targetStudent !\u003d null;"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(targetStudent).withFavourite(false).build();"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"     * Sets the {@code targetStudent} of this command object"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if the studentIndex is invalid"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    private void setTargetStudent() throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        assert targetStudentIndex !\u003d null;"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        if (!CheckIndexesUtil.isStudentIndexValid(lastShownList, targetStudentIndex)) {"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":""},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        targetStudent \u003d lastShownList.get(targetStudentIndex.getZeroBased());"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":""},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"                || (other instanceof UnfavouriteCommand // instanceof handles null"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((UnfavouriteCommand) other).targetStudentIndex \u003d\u003d this.targetStudentIndex);"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":95,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/EditPictureCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_DUPLICATE_STUDENT;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE_PATH;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.MiscellaneousInfo;"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":" * Edits the profile picture of an existing student in the address book."},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"public class EditPictureCommand extends Command {"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"    public static final String COMMAND_WORD \u003d \"editPicture\";"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the current profile picture of a student \""},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"            + \"identified by the index number used in the last student listing. \""},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"            + \"Pictures must have file extensions ending in \u0027.jpg\u0027 or \u0027.png\u0027.\\n\""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"            + \"Parameters: \""},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_PICTURE_PATH + \"URL OF NEW PICTURE.\\n\""},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_INDEX + \"1 \""},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_PICTURE_PATH + \"C:\\\\example.jpg\";"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited profile picture of Student: %1$s\";"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    private final Index index;"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    private final ProfilePicturePath newProfilePicturePath;"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"    private Student studentToEditPicture;"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"    private Student pictureEditedStudent;"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"    private Student finalPictureEditedStudent;"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"    public EditPictureCommand(Index index, ProfilePicturePath profilePicturePath) {"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(index);"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(profilePicturePath);"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"        this.index \u003d index;"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"        this.newProfilePicturePath \u003d profilePicturePath;"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"        preProcessCommand();"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"            model.updateProfilePicture(studentToEditPicture, pictureEditedStudent, finalPictureEditedStudent);"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, finalPictureEditedStudent));"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"     * Preprocesses the {@code EditPictureCommand} before executing it."},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"     * @throws CommandException"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"    protected void preProcessCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"        studentToEditPicture \u003d getStudentToEdit();"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"        pictureEditedStudent \u003d createPictureEditedStudent(studentToEditPicture);"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"        finalPictureEditedStudent \u003d createFinalEditedStudent(pictureEditedStudent);"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"     * Gets the student with the required index from the last shown student list."},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":"    private Student getStudentToEdit() throws CommandException {"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":95,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":97,"author":{"gitID":"samuelloh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"samuelloh"},"content":"        studentToEditPicture \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"        return studentToEditPicture;"},{"lineNumber":101,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"samuelloh"},"content":"     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"},{"lineNumber":104,"author":{"gitID":"samuelloh"},"content":"     * edited with the new picture from {@code profilePicturePath}."},{"lineNumber":105,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"samuelloh"},"content":"    private Student createPictureEditedStudent(Student studentToEditPicture) {"},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":"        Name name \u003d studentToEditPicture.getName();"},{"lineNumber":108,"author":{"gitID":"samuelloh"},"content":"        UniqueKey uniqueKey \u003d studentToEditPicture.getUniqueKey();"},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":"        Phone phone \u003d studentToEditPicture.getPhone();"},{"lineNumber":110,"author":{"gitID":"samuelloh"},"content":"        Email email \u003d studentToEditPicture.getEmail();"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":"        Address address \u003d studentToEditPicture.getAddress();"},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":"        ProgrammingLanguage programmingLanguage \u003d studentToEditPicture.getProgrammingLanguage();"},{"lineNumber":113,"author":{"gitID":"samuelloh"},"content":"        Set\u003cTag\u003e tags \u003d studentToEditPicture.getTags();"},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":"        Favourite isFavourite \u003d studentToEditPicture.getFavourite();"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"        Dashboard dashboard \u003d studentToEditPicture.getDashboard();"},{"lineNumber":116,"author":{"gitID":"samuelloh"},"content":"        ProfilePicturePath profilePicturePath \u003d this.newProfilePicturePath;"},{"lineNumber":117,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"        MiscellaneousInfo miscellaneousInfo \u003d studentToEditPicture.getMiscellaneousInfo();"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":"        return new Student(uniqueKey, name, phone, email, address, programmingLanguage,"},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":"                tags, isFavourite, dashboard, profilePicturePath, miscellaneousInfo);"},{"lineNumber":122,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"samuelloh"},"content":"     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":"     * edited with the designated path for the profile picture in the data storage."},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"samuelloh"},"content":"    private Student createFinalEditedStudent(Student studentToEdit) {"},{"lineNumber":129,"author":{"gitID":"samuelloh"},"content":"        Name name \u003d studentToEdit.getName();"},{"lineNumber":130,"author":{"gitID":"samuelloh"},"content":"        UniqueKey uniqueKey \u003d studentToEdit.getUniqueKey();"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":"        Phone phone \u003d studentToEdit.getPhone();"},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":"        Email email \u003d studentToEdit.getEmail();"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"        Address address \u003d studentToEdit.getAddress();"},{"lineNumber":134,"author":{"gitID":"samuelloh"},"content":"        ProgrammingLanguage programmingLanguage \u003d studentToEdit.getProgrammingLanguage();"},{"lineNumber":135,"author":{"gitID":"samuelloh"},"content":"        Set\u003cTag\u003e tags \u003d studentToEdit.getTags();"},{"lineNumber":136,"author":{"gitID":"samuelloh"},"content":"        Favourite isFavourite \u003d studentToEdit.getFavourite();"},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":"        Dashboard dashboard \u003d studentToEdit.getDashboard();"},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":"        ProfilePicturePath profilePicturePath \u003d new ProfilePicturePath(\"data/profilePictures/\""},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":"                    + uniqueKey.toString() + this.newProfilePicturePath.getExtension());"},{"lineNumber":140,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":"        MiscellaneousInfo miscellaneousInfo \u003d studentToEdit.getMiscellaneousInfo();"},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":143,"author":{"gitID":"samuelloh"},"content":"        return new Student(uniqueKey, name, phone, email, address, programmingLanguage,"},{"lineNumber":144,"author":{"gitID":"samuelloh"},"content":"                tags, isFavourite, dashboard, profilePicturePath, miscellaneousInfo);"},{"lineNumber":145,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":149,"author":{"gitID":"samuelloh"},"content":"        // short circuit if same object"},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":"            return true;"},{"lineNumber":152,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":154,"author":{"gitID":"samuelloh"},"content":"        // instanceof handles nulls"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":"        if (!(other instanceof EditPictureCommand)) {"},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":"            return false;"},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":"        // state check"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"        EditPictureCommand e \u003d (EditPictureCommand) other;"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"        return index.equals(e.index)"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 newProfilePicturePath.equals(e.newProfilePicturePath)"},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 Objects.equals(studentToEditPicture, e.studentToEditPicture);"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"yapni":16,"samuelloh":146,"demitycho":1,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/AddLessonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":" * Adds a lesson to the schedule for a student in the address book."},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"public class AddLessonCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"addLesson\";"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson to the schedule, \""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"            + \"for a student who is in the address book. \""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"            + \"INDEX \" + PREFIX_DAY + \" DAY \""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"            + PREFIX_START_TIME + \"START_TIME \""},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"            + PREFIX_END_TIME + \"END_TIME \\n\""},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"            + PREFIX_DAY + \"mon \""},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"            + PREFIX_START_TIME + \"10:00 \""},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"            + PREFIX_END_TIME + \"10:30 \";"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New lesson added for %1$s\";"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in the schedule\";"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_INVALID_TIME_SLOT \u003d \"This lesson clashes with another lesson in the schedule\";"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    private final Index index;"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    private final Day day;"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    private final Time startTime;"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"    private final Time endTime;"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    private Student studentToAddLesson;"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"     * Creates an AddLessonCommand to add the specified {@code Lesson}"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    public AddLessonCommand(Index index, Day day, Time startTime, Time endTime) {"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        requireNonNull(index);"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        requireNonNull(day);"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        requireNonNull(startTime);"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"        requireNonNull(endTime);"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"        this.index \u003d index;"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        this.day \u003d day;"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"     * TODO add model.updateSchedule();"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"     * @throws CommandException"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"            model.addLesson(studentToAddLesson, day, startTime, endTime);"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(MESSAGE_INVALID_TIME_SLOT);"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        } catch (DuplicateLessonException dle) {"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, studentToAddLesson.getName()));"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"        } else if (startTime.compareTo(endTime) \u003e\u003d 0) {"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_START_END_TIME);"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"        studentToAddLesson \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this; // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":1,"demitycho":94,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/ShowDashboardCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.events.ui.ShowStudentDashboardEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.util.CheckIndexesUtil;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":""},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" * Shows the dashboard of a student who is identified using it\u0027s last displayed index from the address book to the user"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"public class ShowDashboardCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"showDB\";"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the student\u0027s dashboard.\\n\""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"            + \"Parameters: \" + \"STUDENT_INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SELECT_STUDENT_DASHBOARD_SUCCESS \u003d \"Selected Dashboard of Student: %1$s\";"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private final Index targetStudentIndex;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public ShowDashboardCommand(Index targetStudentIndex) {"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        requireNonNull(targetStudentIndex);"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        this.targetStudentIndex \u003d targetStudentIndex;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        if (!CheckIndexesUtil.isStudentIndexValid(lastShownList, targetStudentIndex)) {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        EventsCenter.getInstance().post(new ShowStudentDashboardEvent("},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"                lastShownList.get(targetStudentIndex.getZeroBased())));"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format("},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"                MESSAGE_SELECT_STUDENT_DASHBOARD_SUCCESS, targetStudentIndex.getOneBased()));"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"                || (other instanceof ShowDashboardCommand // instanceof handles null"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((ShowDashboardCommand) other).targetStudentIndex \u003d\u003d this.targetStudentIndex);"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":49,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    private ReadOnlySchedule previousSchedule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        this.previousSchedule \u003d new Schedule(model.getSchedule());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     * was executed and updates the filtered student list to"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     * show all students."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(model, previousAddressBook, previousSchedule);"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        model.resetData(previousAddressBook, previousSchedule);"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     * Executes the command and updates the filtered student"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"     * list to show all students."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"demitycho":6,"-":56}},{"path":"src/main/java/seedu/address/logic/commands/ScheduleCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.events.ui.ShowScheduleEvent;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" * Displays the user\u0027s schedule."},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"public class ScheduleCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"schedule\";"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"            + \": Views your weekly schedule\";"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Schedule displayed\";"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    public ScheduleCommand() {}"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"        EventsCenter.getInstance().post("},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"                new ShowScheduleEvent(model.getSchedule(), model.getAddressBook()));"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":27}},{"path":"src/main/java/seedu/address/logic/commands/FavouriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.util.CheckIndexesUtil;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":" * Add a student to favourites"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"public class FavouriteCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"fav\";"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a student to favourites. \""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Student added to favourites: %1$s\";"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    private final Index targetStudentIndex;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    private Student targetStudent;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public FavouriteCommand(Index targetStudentIndex) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        requireNonNull(targetStudentIndex);"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        this.targetStudentIndex \u003d targetStudentIndex;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudent, editedStudent);"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"            model.updateStudent(targetStudent, editedStudent);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, editedStudent.getName()));"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            setTargetStudent();"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"            createEditedStudent();"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":""},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"     * Creates {@code editedStudent} which is a copy of {@code targetStudent}, but with the {@code favourite}"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"     * attribute set to true."},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent() {"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        assert targetStudent !\u003d null;"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(targetStudent).withFavourite(true).build();"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":""},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     * Sets the {@code targetStudent} of this command object"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if the studentIndex is invalid"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    private void setTargetStudent() throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        assert targetStudentIndex !\u003d null;"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        if (!CheckIndexesUtil.isStudentIndexValid(lastShownList, targetStudentIndex)) {"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        targetStudent \u003d lastShownList.get(targetStudentIndex.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":""},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"                || (other instanceof FavouriteCommand // instanceof handles null"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((FavouriteCommand) other).targetStudentIndex \u003d\u003d this.targetStudentIndex);"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":96,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROGRAMMING_LANGUAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.MiscellaneousInfo;"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":" * Edits the details of an existing student in the address book."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"            + \"by the index number used in the last student listing. \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"            + \"[\" + PREFIX_PROGRAMMING_LANGUAGE + \"PROGRAMMING LANGUAGE] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    private final EditStudentDescriptor editStudentDescriptor;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    private Student studentToEdit;"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     * @param index of the student in the filtered student list to edit"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"     * @param editStudentDescriptor details to edit the student with"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        requireNonNull(editStudentDescriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"            model.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        studentToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"     * edited with {@code editStudentDescriptor}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        assert studentToEdit !\u003d null;"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"        UniqueKey uniqueKey \u003d studentToEdit.getUniqueKey();"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        Address updatedAddress \u003d editStudentDescriptor.getAddress().orElse(studentToEdit.getAddress());"},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"        ProgrammingLanguage updatedProgrammingLanguage \u003d editStudentDescriptor.getProgrammingLanguage()"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"                .orElse(studentToEdit.getProgrammingLanguage());"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        Favourite isFavourite \u003d studentToEdit.getFavourite();"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"        Dashboard dashboard \u003d studentToEdit.getDashboard();"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":"        ProfilePicturePath profilePicturePath \u003d studentToEdit.getProfilePicturePath();"},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":"        MiscellaneousInfo miscellaneousInfo \u003d studentToEdit.getMiscellaneousInfo();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"        return new Student(uniqueKey, updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"                updatedProgrammingLanguage, updatedTags, isFavourite, dashboard, profilePicturePath,"},{"lineNumber":128,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor)"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(studentToEdit, e.studentToEdit);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"     * Stores the details to edit the student with. Each non-empty field value will replace the"},{"lineNumber":152,"author":{"gitID":"yapni"},"content":"     * corresponding field value of the student."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"yapni"},"content":"    public static class EditStudentDescriptor {"},{"lineNumber":155,"author":{"gitID":"demitycho"},"content":"        private UniqueKey uniqueKey;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"        private ProgrammingLanguage programmingLanguage;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"        public EditStudentDescriptor() {}"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":167,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":168,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":169,"author":{"gitID":"yapni"},"content":"        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":174,"author":{"gitID":"yapni"},"content":"            setProgrammingLanguage(toCopy.programmingLanguage);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":180,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":183,"author":{"gitID":"yapni"},"content":"                    this.programmingLanguage, this.tags);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"demitycho"},"content":"        public void setKey(UniqueKey key) {"},{"lineNumber":187,"author":{"gitID":"demitycho"},"content":"            this.uniqueKey \u003d key;"},{"lineNumber":188,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":190,"author":{"gitID":"demitycho"},"content":"        public Optional\u003cUniqueKey\u003e getKey() {"},{"lineNumber":191,"author":{"gitID":"demitycho"},"content":"            return Optional.ofNullable(uniqueKey);"},{"lineNumber":192,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"samuelloh"},"content":"        public Optional\u003cProgrammingLanguage\u003e getProgrammingLanguage() {"},{"lineNumber":215,"author":{"gitID":"samuelloh"},"content":"            return Optional.ofNullable(programmingLanguage);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"yapni"},"content":"        public void setProgrammingLanguage(ProgrammingLanguage programmingLanguage) {"},{"lineNumber":227,"author":{"gitID":"yapni"},"content":"            this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":236,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":237,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":244,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":245,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":246,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":259,"author":{"gitID":"yapni"},"content":"            if (!(other instanceof EditStudentDescriptor)) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":264,"author":{"gitID":"yapni"},"content":"            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":269,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":61,"samuelloh":12,"demitycho":12,"-":188}},{"path":"src/main/java/seedu/address/logic/commands/AddMilestoneCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.util.CheckIndexesUtil;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":" * Adds a Milestone to a Student\u0027s Dashboard"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"public class AddMilestoneCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"addMS\";"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a milestone to a student\u0027s dashboard.\\n\""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"            + \" Parameters: \""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"STUDENT\u0027S INDEX \""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"1 \""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            + PREFIX_DATE + \"17/05/2018 23:59 \""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"            + PREFIX_DESCRIPTION + \"Learn Arrays\";"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_MILESTONE \u003d \"Milestone already exists in the student\u0027s Dashboard\";"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Milestone added to Student\u0027s Dashboard: %1$s\";"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    private final Index studentIndex;"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    private final Milestone newMilestone;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    private Student targetStudent;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public AddMilestoneCommand(Index index, Milestone newMilestone) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(index, newMilestone);"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        this.newMilestone \u003d newMilestone;"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        this.studentIndex \u003d index;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudent, editedStudent);"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"            model.updateStudent(targetStudent, editedStudent);"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"            /* DuplicateStudentException caught will mean that the milestone list is the same as before */"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"New milestone cannot be missing\");"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException e) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, newMilestone));"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    public void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"            setTargetStudent();"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"            createEditedStudent();"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateMilestoneException e) {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MILESTONE);"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":""},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"     * Creates {@code editedStudent} which is a copy of {@code targetStudent}, but with the {@code newMilestone} added"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"     * to the {@code dashboard}."},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent() throws DuplicateMilestoneException {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        assert targetStudent !\u003d null \u0026\u0026 newMilestone !\u003d null;"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(targetStudent).withNewMilestone(newMilestone).build();"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":""},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"     * Sets the {@code targetStudent} of this command object"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if the studentIndex is invalid"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"    private void setTargetStudent() throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        assert studentIndex !\u003d null;"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":""},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        if (!CheckIndexesUtil.isStudentIndexValid(lastShownList, studentIndex)) {"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        targetStudent \u003d lastShownList.get(studentIndex.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":""},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"                || (other instanceof AddMilestoneCommand // instanceof handles null"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((AddMilestoneCommand) other).studentIndex \u003d\u003d this.studentIndex"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((AddMilestoneCommand) other).newMilestone \u003d\u003d this.newMilestone);"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":112,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" * Selects a student identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"            + \": Selects the student identified by the index number used in the last student listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SELECT_STUDENT_SUCCESS \u003d \"Selected Student: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_STUDENT_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" * Finds and lists all students in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        model.updateFilteredStudentList(predicate);"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        return new CommandResult(getMessageForStudentListShownSummary(model.getFilteredStudentList().size()));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":31}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEXES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.util.CheckIndexesUtil;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.TaskNotFoundException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":" * Deletes a task from a milestone"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"public class DeleteTaskCommand extends UndoableCommand {"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"deleteTask\";"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"            + \": Deletes a task from a milestone in a student\u0027s dashboard.\\n\""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            + \"Parameters: \""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"STUDENT\u0027S INDEX \""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"MILESTONE\u0027S INDEX \""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"            + PREFIX_TASK_INDEX + \"TASK\u0027S INDEX\\n\""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"1\""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"2\""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            + PREFIX_TASK_INDEX + \"3\";"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted task: %1$s\";"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    private Student targetStudent;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    private Milestone targetMilestone;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    private Task targetTask;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    private final Index targetStudentIndex;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    private final Index targetMilestoneIndex;"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    private final Index targetTaskIndex;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    public DeleteTaskCommand(Index targetStudentIndex, Index targetMilestoneIndex, Index targetTaskIndex) {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudentIndex, targetMilestoneIndex, targetTaskIndex);"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":""},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        this.targetStudentIndex \u003d targetStudentIndex;"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        this.targetMilestoneIndex \u003d targetMilestoneIndex;"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        this.targetTaskIndex \u003d targetTaskIndex;"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudent, editedStudent);"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"            model.updateStudent(targetStudent, editedStudent);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"            /* DuplicateStudentException caught will mean that the task list is the same as before */"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Task should be already removed from task list\");"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException e) {"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":""},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, targetTask));"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":""},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"            setTargetObjects();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"            createEditedStudent();"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateMilestoneException e) {"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Milestone cannot be duplicated\");"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        } catch (TaskNotFoundException e) {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Task cannot be missing\");"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        } catch (MilestoneNotFoundException e) {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Milestone cannot be missing\");"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":""},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"     * Creates {@code editedStudent} which is a copy of {@code targetStudent}, but with the {@code targetTask} removed"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"     * from the {@code targetMilestone}"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent()"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"            throws DuplicateMilestoneException, MilestoneNotFoundException, TaskNotFoundException {"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"        assert targetStudent !\u003d null \u0026\u0026 targetMilestoneIndex !\u003d null \u0026\u0026 targetTaskIndex !\u003d null;"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(targetStudent).withoutTask(targetMilestoneIndex, targetTask).build();"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":""},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"     * Sete the {@code targetStudent}, {@code targetMilestone}, {@code targetTask} of this command object."},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if any of the target indexes are invalid"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    private void setTargetObjects() throws IllegalValueException {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        assert targetStudentIndex !\u003d null \u0026\u0026 targetMilestoneIndex !\u003d null \u0026\u0026 targetTaskIndex !\u003d null;"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":""},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"        if (!CheckIndexesUtil.areIndexesValid(lastShownList, targetStudentIndex, targetMilestoneIndex,"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"                targetTaskIndex)) {"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEXES);"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":""},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"        targetStudent \u003d lastShownList.get(targetStudentIndex.getZeroBased());"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        targetMilestone \u003d targetStudent.getDashboard().getMilestoneList().get(targetMilestoneIndex);"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        targetTask \u003d targetMilestone.getTaskList().get(targetTaskIndex);"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":""},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"            || (other instanceof DeleteTaskCommand // instanceof handles null"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"            \u0026\u0026 ((DeleteTaskCommand) other).targetStudentIndex \u003d\u003d this.targetStudentIndex"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"            \u0026\u0026 ((DeleteTaskCommand) other).targetMilestoneIndex \u003d\u003d this.targetMilestoneIndex"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"            \u0026\u0026 ((DeleteTaskCommand) other).targetTaskIndex \u003d\u003d this.targetTaskIndex);"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":125,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/MoreInfoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.exceptions.StorageFileMissingException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":" * Displays the full information of a student on the browser panel."},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"public class MoreInfoCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    public static final String COMMAND_WORD \u003d \"moreInfo\";"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the full information and particulars of \""},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"            + \"a student identified by the index number used\""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"            + \" in the last student listing. Also includes his/her profile picture(if one exists).\\n\""},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_MOREINFO_STUDENT_SUCCESS \u003d \"Displayed full information for student: %1$s\";"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"    private Student studentToGetInfoFrom;"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"    public MoreInfoCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"            preProcessStudent();"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"            model.displayStudentDetailsOnBrowserPanel(studentToGetInfoFrom);"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"        } catch (StudentNotFoundException e) {"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"        } catch (StorageFileMissingException e) {"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        return new CommandResult((String.format(MESSAGE_MOREINFO_STUDENT_SUCCESS, studentToGetInfoFrom.getName())));"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"     * This method is called before execution of {@code MoreInfoCommand}."},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"     * Finds the target student from the last shown list of students in the StudentListPanel by its index."},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"     * @throws CommandException"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"    public void preProcessStudent() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        studentToGetInfoFrom \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"                || (other instanceof MoreInfoCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 this.targetIndex.equals(((MoreInfoCommand) other).targetIndex) // state check"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 Objects.equals(this.studentToGetInfoFrom, ((MoreInfoCommand) other).studentToGetInfoFrom));"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"yapni":2,"samuelloh":68,"-":10}},{"path":"src/main/java/seedu/address/logic/commands/FindAndSelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Chweeee"},"content":"//@@author chweeee"},{"lineNumber":12,"author":{"gitID":"Chweeee"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Chweeee"},"content":" * Finds and lists all students in address book whose name contains any of the argument keywords,"},{"lineNumber":14,"author":{"gitID":"Chweeee"},"content":" * and Selects the first student of the list."},{"lineNumber":15,"author":{"gitID":"Chweeee"},"content":" * Keyword matching is case sensitive."},{"lineNumber":16,"author":{"gitID":"Chweeee"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Chweeee"},"content":"public class FindAndSelectCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":19,"author":{"gitID":"Chweeee"},"content":"    public static final String MESSAGE_SELECT_STUDENT_SUCCESS \u003d \"Selected Student: %1$s\";"},{"lineNumber":20,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":21,"author":{"gitID":"Chweeee"},"content":"    public static final String MESSAGE_STUDENT_NOT_FOUND \u003d \"Student to be selected cannot be found.\";"},{"lineNumber":22,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":23,"author":{"gitID":"Chweeee"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":24,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":25,"author":{"gitID":"Chweeee"},"content":"    private Index targetIndex;"},{"lineNumber":26,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":27,"author":{"gitID":"Chweeee"},"content":"    public FindAndSelectCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":28,"author":{"gitID":"Chweeee"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":29,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":31,"author":{"gitID":"Chweeee"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"Chweeee"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":33,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":34,"author":{"gitID":"Chweeee"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"Chweeee"},"content":"            targetIndex \u003d ParserUtil.parseIndex(\"1\");"},{"lineNumber":36,"author":{"gitID":"Chweeee"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":37,"author":{"gitID":"Chweeee"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":40,"author":{"gitID":"Chweeee"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":41,"author":{"gitID":"Chweeee"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_STUDENT_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":42,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":44,"author":{"gitID":"Chweeee"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"Chweeee"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"Chweeee"},"content":""},{"lineNumber":47,"author":{"gitID":"Chweeee"},"content":"        //look for the student"},{"lineNumber":48,"author":{"gitID":"Chweeee"},"content":"        model.updateFilteredStudentList(predicate);"},{"lineNumber":49,"author":{"gitID":"Chweeee"},"content":"        if (model.getFilteredStudentList().size() \u003d\u003d 0) {"},{"lineNumber":50,"author":{"gitID":"Chweeee"},"content":"            throw new CommandException(MESSAGE_STUDENT_NOT_FOUND);"},{"lineNumber":51,"author":{"gitID":"Chweeee"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Chweeee"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Chweeee"},"content":"}"},{"lineNumber":54,"author":{"gitID":"Chweeee"},"content":"//@@author"}],"authorContributionMap":{"yapni":1,"-":9,"Chweeee":44}},{"path":"src/main/java/seedu/address/logic/commands/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.model.student.miscellaneousinfo.ProfilePicturePath.DEFAULT_PROFILE_PICTURE;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.TaskNotFoundException;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Allergies;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.MiscellaneousInfo;"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinName;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinPhone;"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Remarks;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Student objects."},{"lineNumber":35,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"public class StudentBuilder {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_PROGRAMMING_LANGUAGE \u003d \"Java\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    public static final String DEFAULT_FAVOURITE \u003d \"false\";"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    public static final String DEFAULT_PROFILE_PICTURE_URL \u003d DEFAULT_PROFILE_PICTURE;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    private ProgrammingLanguage programmingLanguage;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    private Favourite favourite;"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"    private ProfilePicturePath profilePicturePath;"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    private Dashboard dashboard;"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    private UniqueKey uniqueKey;"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"    private MiscellaneousInfo miscellaneousInfo;"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"    public StudentBuilder() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d new ProgrammingLanguage(DEFAULT_PROGRAMMING_LANGUAGE);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        favourite \u003d new Favourite(DEFAULT_FAVOURITE);"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"        profilePicturePath \u003d new ProfilePicturePath(DEFAULT_PROFILE_PICTURE_URL);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        dashboard \u003d new Dashboard();"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        uniqueKey \u003d UniqueKey.generateRandomKey();"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"        miscellaneousInfo \u003d new MiscellaneousInfo();"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     * Initializes the StudentBuilder with the data of {@code studentToCopy}."},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"    public StudentBuilder(Student studentToCopy) {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        name \u003d studentToCopy.getName();"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        phone \u003d studentToCopy.getPhone();"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        email \u003d studentToCopy.getEmail();"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        address \u003d studentToCopy.getAddress();"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d studentToCopy.getProgrammingLanguage();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        favourite \u003d studentToCopy.getFavourite();"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        profilePicturePath \u003d studentToCopy.getProfilePicturePath();"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        dashboard \u003d studentToCopy.getDashboard();"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        uniqueKey \u003d studentToCopy.getUniqueKey();"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"        miscellaneousInfo \u003d studentToCopy.getMiscellaneousInfo();"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":""},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Name} of the {@code Student} that we are building."},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":""},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Address} of the {@code Student} that we are building."},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":""},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Phone} of the {@code Student} that we are building."},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":""},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Email} of the {@code Student} that we are building."},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":""},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"     * Sets the {@code Favourite} of the {@code Student} that we are building."},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withFavourite(boolean val) {"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d new Favourite(val);"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":""},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":"    //@@author samuelloh"},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code programminglanguage} of the {@code Student} that we are building."},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withProgrammingLanguage(String progLang) {"},{"lineNumber":143,"author":{"gitID":"samuelloh"},"content":"        this.programmingLanguage \u003d new ProgrammingLanguage(progLang);"},{"lineNumber":144,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":145,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":149,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code profilePicturePath} of the {@code Student} that we are building."},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withProfilePictureUrl(String url) {"},{"lineNumber":152,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d new ProfilePicturePath(url);"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":154,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the student we are building"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withAllergies(String allergies) {"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo(new Allergies(allergies), miscellaneousInfo.getNextOfKinName(),"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getNextOfKinPhone(), miscellaneousInfo.getRemarks());"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":165,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the student we are building"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withNextOfKinName(String nextOfKinName) {"},{"lineNumber":169,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo(miscellaneousInfo.getAllergies(),"},{"lineNumber":170,"author":{"gitID":"samuelloh"},"content":"                new NextOfKinName(nextOfKinName), miscellaneousInfo.getNextOfKinPhone(),"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getRemarks());"},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":173,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the student we are building"},{"lineNumber":177,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withNextOfKinPhone(String nextOfKinPhone) {"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo(miscellaneousInfo.getAllergies(),"},{"lineNumber":180,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getNextOfKinName(), new NextOfKinPhone(nextOfKinPhone),"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getRemarks());"},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":183,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":185,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"samuelloh"},"content":"     * Sets the {@code Allergies} of the student we are building"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"samuelloh"},"content":"    public StudentBuilder withRemarks(String remarks) {"},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo(miscellaneousInfo.getAllergies(),"},{"lineNumber":190,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo.getNextOfKinName(), miscellaneousInfo.getNextOfKinPhone(), new Remarks(remarks));"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"        return this;"},{"lineNumber":192,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"samuelloh"},"content":"    //@@author"},{"lineNumber":194,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":195,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"yapni"},"content":"     * Creates and returns the Student object with the current attributes."},{"lineNumber":197,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"    public Student build() {"},{"lineNumber":199,"author":{"gitID":"yapni"},"content":"        return new Student(uniqueKey, name, phone, email, address, programmingLanguage, tags, favourite, dashboard,"},{"lineNumber":200,"author":{"gitID":"samuelloh"},"content":"                profilePicturePath, miscellaneousInfo);"},{"lineNumber":201,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":203,"author":{"gitID":"yapni"},"content":"    //@@author yapni"},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"     * Sets the {@code dashboard} of the {@code Student} that we are building."},{"lineNumber":206,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withDashboard(Dashboard dashboard) {"},{"lineNumber":208,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d dashboard;"},{"lineNumber":209,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":210,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"yapni"},"content":""},{"lineNumber":212,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Milestone} to the {@code Dashboard} of the {@code Student} that we are building."},{"lineNumber":214,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":215,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateMilestoneException if the new milestone is a duplicate of an existing milestone"},{"lineNumber":216,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withNewMilestone(Milestone milestone) throws DuplicateMilestoneException {"},{"lineNumber":218,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new DashboardBuilder(this.dashboard).withNewMilestone(milestone).build();"},{"lineNumber":219,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":220,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"yapni"},"content":""},{"lineNumber":222,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Milestone} from the {@code Dashboard} of the {@code Student} that we are building."},{"lineNumber":224,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":225,"author":{"gitID":"yapni"},"content":"     * @throws MilestoneNotFoundException if the specified milestone is not found in the dashboard"},{"lineNumber":226,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withoutMilestone(Milestone milestone) throws MilestoneNotFoundException {"},{"lineNumber":228,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new DashboardBuilder(this.dashboard).withoutMilestone(milestone).build();"},{"lineNumber":229,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":230,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"yapni"},"content":""},{"lineNumber":232,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Task} to the specified {@code Milestone} in the {@code Dashboard}"},{"lineNumber":234,"author":{"gitID":"yapni"},"content":"     * of the {@code Student} we are building."},{"lineNumber":235,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":236,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateTaskException if the new task is a duplicate of an existing task in the milestone"},{"lineNumber":237,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withNewTask(Index milestoneIndex, Task task) throws DuplicateTaskException,"},{"lineNumber":239,"author":{"gitID":"yapni"},"content":"            DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":240,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new DashboardBuilder(this.dashboard).withNewTask(milestoneIndex, task).build();"},{"lineNumber":241,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":242,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"yapni"},"content":""},{"lineNumber":244,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Task} from the specified {@code Milestone} in the {@code Dashboard} of the {@code Student}"},{"lineNumber":246,"author":{"gitID":"yapni"},"content":"     * we are building"},{"lineNumber":247,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":248,"author":{"gitID":"yapni"},"content":"     * @throws TaskNotFoundException if the specified task is not found in the milestone"},{"lineNumber":249,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withoutTask(Index milestoneIndex, Task task) throws TaskNotFoundException,"},{"lineNumber":251,"author":{"gitID":"yapni"},"content":"            DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":252,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new DashboardBuilder(this.dashboard).withoutTask(milestoneIndex, task).build();"},{"lineNumber":253,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":254,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"yapni"},"content":""},{"lineNumber":256,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"yapni"},"content":"     * Marks a specified {@code Task} from a {@code Milestone} in the {@code Dashboard} of the {@code Student}"},{"lineNumber":258,"author":{"gitID":"yapni"},"content":"     * we are building as completed."},{"lineNumber":259,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"yapni"},"content":"    public StudentBuilder withTaskCompleted(Index milestoneIndex, Index taskIndex) throws DuplicateTaskException,"},{"lineNumber":261,"author":{"gitID":"yapni"},"content":"            TaskNotFoundException, DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":262,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new DashboardBuilder(this.dashboard).withTaskCompleted(milestoneIndex, taskIndex).build();"},{"lineNumber":263,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":264,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"yapni"},"content":"    //@@author"},{"lineNumber":266,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":156,"samuelloh":76,"demitycho":8,"-":26}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        return model.getFilteredStudentList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"    public ReadOnlySchedule getSchedule() {"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        return model.getSchedule();"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        return model.getAddressBook();"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"demitycho":9,"-":57}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.events.model.ScheduleChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.storage.ProfilePictureChangeEvent;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.storage.RequiredStudentIndexChangeEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, ScheduleStorage {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    //@@author demitycho"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    String getScheduleFilePath();"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException;"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    void saveSchedule(ReadOnlySchedule schedule) throws IOException;"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    //@@author"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Creates the data file if it is missing."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"     * Saves the current version of the Schedule to the hard disk."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates the data file if it is missing."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"    void handleScheduleChangedEvent(ScheduleChangedEvent sce);"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"    //@@author demitycho"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"     * Handles the event where the required student index for displaying misc info is changed"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    void handleRequiredStudentIndexChangedEvent(RequiredStudentIndexChangeEvent rsice);"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    //@@author demitycho"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"     * Handles the event where the profile picture of a student is being changed"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    void handleProfilePictureChangeEvent(ProfilePictureChangeEvent pce);"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"     * Sets up the view files required for the profile page display for students"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"    void setupViewFiles() throws IOException;"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"samuelloh":3,"demitycho":33,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/LogoutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import seedu.address.external.exceptions.CredentialsException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" * Displays the user\u0027s schedule."},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"public class LogoutCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"    public static final String COMMAND_WORD \u003d \"logout\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"            + \": logs out of your Google account\";"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Google account logged out\";"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public LogoutCommand() {}"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"            model.logoutGoogleAccount();"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"        } catch (CredentialsException ce) {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"            throw new CommandException(ce.getMessage());"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"samuelloh":1,"demitycho":22,"-":6}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the fixed temporary storage."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":47}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedLesson.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":" * JAXB-friendly version of the Lesson."},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"public class XmlAdaptedLesson {"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    private String key;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    private String day;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    private String startTime;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    private String endTime;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"     * Constructs an XmlAdaptedLesson."},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    public XmlAdaptedLesson() {}"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"     * Constructs an {@code XmlAdaptedLesson} with the given student details."},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    public XmlAdaptedLesson(String key, String day, String startTime, String endTime) {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        this.key \u003d key;"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        this.day \u003d day;"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"     * Converts a given Student into this class for JAXB use."},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedLesson"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    public XmlAdaptedLesson(Lesson source) {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        key \u003d source.getUniqueKey().uniqueKey;"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        day \u003d source.getDay().value;"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        startTime \u003d source.getStartTime().value;"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        endTime \u003d source.getEndTime().value;"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"     * Converts this jaxb-friendly adapted student object into the model\u0027s Student object."},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted student"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    public Lesson toModelType() throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        if (this.key \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException("},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, UniqueKey.class.getSimpleName()));"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        if (!UniqueKey.isValidUniqueKey(this.key)) {"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(UniqueKey.MESSAGE_UNIQUE_KEY_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        final UniqueKey uniqueKey \u003d new UniqueKey(this.key);"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        if (this.day \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        if (!Day.isValidDay(this.day)) {"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(Day.MESSAGE_DAY_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        final Day day \u003d new Day(this.day);"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"        if (!Time.isValidTime(this.startTime)) {"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"        final Time startTime \u003d new Time(this.startTime);"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"        if (!Time.isValidTime(this.endTime)) {"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"        final Time endTime \u003d new Time(this.endTime);"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        return new Lesson(uniqueKey, day, startTime, endTime);"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"            return true;"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"        if (!(other instanceof XmlAdaptedLesson)) {"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"            return false;"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"        XmlAdaptedLesson otherLesson \u003d (XmlAdaptedLesson) other;"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"        return Objects.equals(key, otherLesson.key)"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 Objects.equals(day, otherLesson.day)"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 Objects.equals(startTime, otherLesson.startTime)"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 Objects.equals(endTime, otherLesson.endTime);"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":112,"-":4}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted student"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":1,"-":61}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.ui.BrowserPanel.STUDENT_INFO_PAGE_STYLESHEET;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.ui.BrowserPanel.STUDENT_MISC_INFO_PAGE;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import java.io.FileOutputStream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import java.io.InputStream;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"import java.io.OutputStream;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"import seedu.address.MainApp;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.events.model.ScheduleChangedEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.storage.ProfilePictureChangeEvent;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.storage.RequiredStudentIndexChangeEvent;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    private XmlRequiredIndexStorage  xmlRequiredIndexStorage;"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    private ScheduleStorage scheduleStorage;"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"    private ProfilePictureStorage profilePictureStorage;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    public StorageManager(AddressBookStorage addressBookStorage,"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"                          UserPrefsStorage userPrefsStorage, ScheduleStorage scheduleStorage) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        xmlRequiredIndexStorage \u003d new XmlRequiredIndexStorage(\"data/requiredStudentIndex.xml\");"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        this.scheduleStorage \u003d scheduleStorage;"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"        profilePictureStorage \u003d new ProfilePictureStorage(\"data/profilePictures\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event,"},{"lineNumber":116,"author":{"gitID":"samuelloh"},"content":"                \"Local addressbook data changed, saving to file\"));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":"    //@@author samuelloh"},{"lineNumber":125,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":"    public void setupViewFiles() throws IOException {"},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":128,"author":{"gitID":"samuelloh"},"content":"        String miscInfoPage \u003d \"data/view/\" + STUDENT_MISC_INFO_PAGE;"},{"lineNumber":129,"author":{"gitID":"samuelloh"},"content":"        String infoPageStylesheet \u003d \"data/view/\" + STUDENT_INFO_PAGE_STYLESHEET;"},{"lineNumber":130,"author":{"gitID":"samuelloh"},"content":"        String defaultPhoto \u003d \"data/view/profile_photo_placeholder.png\";"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":"        FileUtil.createIfMissing(new File(xmlRequiredIndexStorage.getFilePath()));"},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"        if (!FileUtil.isFileExists(new File(miscInfoPage))) {"},{"lineNumber":134,"author":{"gitID":"samuelloh"},"content":"            FileUtil.createFile(new File(miscInfoPage));"},{"lineNumber":135,"author":{"gitID":"samuelloh"},"content":"            exportResource(\"data/view/\" + STUDENT_MISC_INFO_PAGE);"},{"lineNumber":136,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":"        if (!FileUtil.isFileExists(new File(infoPageStylesheet))) {"},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":"            FileUtil.createFile((new File(infoPageStylesheet)));"},{"lineNumber":140,"author":{"gitID":"samuelloh"},"content":"            exportResource(\"data/view/\" + STUDENT_INFO_PAGE_STYLESHEET);"},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":143,"author":{"gitID":"samuelloh"},"content":"        if (!FileUtil.isFileExists((new File(defaultPhoto)))) {"},{"lineNumber":144,"author":{"gitID":"samuelloh"},"content":"            FileUtil.createFile(new File(defaultPhoto));"},{"lineNumber":145,"author":{"gitID":"samuelloh"},"content":"            exportResource(\"data/view/\" + \"profile_photo_placeholder.png\");"},{"lineNumber":146,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":149,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"     * Exports the resources from the jar file to the directory of the contact data"},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"samuelloh"},"content":"    private static void exportResource(String resourceName) throws IOException {"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":"        InputStream stream \u003d null;"},{"lineNumber":154,"author":{"gitID":"samuelloh"},"content":"        OutputStream resStreamOut \u003d null;"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":"        String jarFolder;"},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":"        String resourcePage \u003d resourceName.substring(10);"},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":"            stream \u003d MainApp.class.getResourceAsStream(FXML_FILE_FOLDER + resourcePage);"},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":"            if (stream \u003d\u003d null) {"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"                throw new Exception(\"Cannot get resource \\\"\" + resourceName + \"\\\" from Jar file.\");"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"            }"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"            int readBytes;"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"            byte[] buffer \u003d new byte[4096];"},{"lineNumber":165,"author":{"gitID":"samuelloh"},"content":"            jarFolder \u003d new File(MainApp.class.getProtectionDomain().getCodeSource().getLocation()"},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"                    .toURI().getPath()).getParentFile().getPath().replace(\u0027\\\\\u0027, \u0027/\u0027);"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":"            String destinationOfFile \u003d jarFolder + \"/\" + resourceName;"},{"lineNumber":169,"author":{"gitID":"samuelloh"},"content":"            File testIfExist \u003d new File(destinationOfFile);"},{"lineNumber":170,"author":{"gitID":"samuelloh"},"content":"            if (!testIfExist.exists()) {"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"                destinationOfFile \u003d resourceName;"},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"samuelloh"},"content":"            resStreamOut \u003d new FileOutputStream(destinationOfFile);"},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"            while ((readBytes \u003d stream.read(buffer)) \u003e 0) {"},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"                resStreamOut.write(buffer, 0, readBytes);"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"            }"},{"lineNumber":177,"author":{"gitID":"samuelloh"},"content":"        } catch (Exception e) {"},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":"            throw new IOException(e.getMessage());"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":"        } finally {"},{"lineNumber":180,"author":{"gitID":"samuelloh"},"content":"            stream.close();"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":"            resStreamOut.close();"},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":186,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"     * Saves the required index of the {@code Student}"},{"lineNumber":188,"author":{"gitID":"samuelloh"},"content":"     * @param newIndex"},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":"     * @throws IOException"},{"lineNumber":190,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"    public void saveRequiredIndex(int newIndex) throws IOException {"},{"lineNumber":192,"author":{"gitID":"samuelloh"},"content":"        String requiredIndexFilePath \u003d xmlRequiredIndexStorage.getFilePath();"},{"lineNumber":193,"author":{"gitID":"samuelloh"},"content":"        logger.fine(\"Attempting to write to data file: \" + requiredIndexFilePath);"},{"lineNumber":194,"author":{"gitID":"samuelloh"},"content":"        XmlRequiredIndexStorage.updateData(newIndex, requiredIndexFilePath);"},{"lineNumber":195,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":197,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"     * Handles the event where the required student index for displaying misc info is changed"},{"lineNumber":199,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"samuelloh"},"content":"    @Subscribe"},{"lineNumber":202,"author":{"gitID":"samuelloh"},"content":"    public void handleRequiredStudentIndexChangedEvent(RequiredStudentIndexChangeEvent event) {"},{"lineNumber":203,"author":{"gitID":"samuelloh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":204,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":205,"author":{"gitID":"samuelloh"},"content":"            saveRequiredIndex(event.getNewIndex());"},{"lineNumber":206,"author":{"gitID":"samuelloh"},"content":"        } catch (IOException e) {"},{"lineNumber":207,"author":{"gitID":"samuelloh"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":208,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":211,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"samuelloh"},"content":"     * Saves the new profile picture of the {@code Student}"},{"lineNumber":213,"author":{"gitID":"samuelloh"},"content":"     * @throws IOException"},{"lineNumber":214,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"samuelloh"},"content":"    public void saveProfilePicture(ProfilePicturePath pathToChangeTo, Student student) throws IOException {"},{"lineNumber":216,"author":{"gitID":"samuelloh"},"content":"        ensureProfilePictureStorageExist();"},{"lineNumber":217,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":218,"author":{"gitID":"samuelloh"},"content":"        Path newPath \u003d pathToChangeTo.getProfilePicturePath();"},{"lineNumber":219,"author":{"gitID":"samuelloh"},"content":"        String extension \u003d pathToChangeTo.getExtension();"},{"lineNumber":220,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":221,"author":{"gitID":"samuelloh"},"content":"        Path studentPictureFilePath \u003d Paths.get(profilePictureStorage.getFilePath() + \"/\""},{"lineNumber":222,"author":{"gitID":"samuelloh"},"content":"                + student.getUniqueKey().toString());"},{"lineNumber":223,"author":{"gitID":"samuelloh"},"content":"        deleteExistingProfilePicture(studentPictureFilePath);"},{"lineNumber":224,"author":{"gitID":"samuelloh"},"content":"        Path studentPictureFilePathWithExtension \u003d Paths.get(studentPictureFilePath.toString() + extension);"},{"lineNumber":225,"author":{"gitID":"samuelloh"},"content":"        logger.fine(\"Attempting to write to data file: data/\" + student.getUniqueKey().toString());"},{"lineNumber":226,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":227,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":228,"author":{"gitID":"samuelloh"},"content":"        Files.copy(newPath, studentPictureFilePathWithExtension);"},{"lineNumber":229,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":230,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":232,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":233,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"samuelloh"},"content":"     * Deletes the existing profile picture"},{"lineNumber":235,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"samuelloh"},"content":"    private void deleteExistingProfilePicture(Path studentPictureFilePath) {"},{"lineNumber":237,"author":{"gitID":"samuelloh"},"content":"        File tobeReplacedWithJpg \u003d new File(studentPictureFilePath.toString() + \".jpg\");"},{"lineNumber":238,"author":{"gitID":"samuelloh"},"content":"        File tobeReplacedWithPng \u003d new File(studentPictureFilePath.toString() + \".png\");"},{"lineNumber":239,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":240,"author":{"gitID":"samuelloh"},"content":"        if (tobeReplacedWithJpg.exists()) {"},{"lineNumber":241,"author":{"gitID":"samuelloh"},"content":"            tobeReplacedWithJpg.delete();"},{"lineNumber":242,"author":{"gitID":"samuelloh"},"content":"        } else {"},{"lineNumber":243,"author":{"gitID":"samuelloh"},"content":"            tobeReplacedWithPng.delete();"},{"lineNumber":244,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":246,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":248,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"samuelloh"},"content":"     * Makes a picture storage folder if it does not already exist."},{"lineNumber":250,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"samuelloh"},"content":"    private void ensureProfilePictureStorageExist() {"},{"lineNumber":252,"author":{"gitID":"samuelloh"},"content":"        if (!profilePictureStorage.storageFileExist()) {"},{"lineNumber":253,"author":{"gitID":"samuelloh"},"content":"            File pictureStorage \u003d new File(profilePictureStorage.getFilePath());"},{"lineNumber":254,"author":{"gitID":"samuelloh"},"content":"            pictureStorage.mkdir();"},{"lineNumber":255,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":258,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":259,"author":{"gitID":"samuelloh"},"content":"    @Subscribe"},{"lineNumber":260,"author":{"gitID":"samuelloh"},"content":"    public void handleProfilePictureChangeEvent(ProfilePictureChangeEvent event) {"},{"lineNumber":261,"author":{"gitID":"samuelloh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":262,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":263,"author":{"gitID":"samuelloh"},"content":"            saveProfilePicture(event.getUrlToChangeTo(), event.getStudent());"},{"lineNumber":264,"author":{"gitID":"samuelloh"},"content":"        } catch (IOException e) {"},{"lineNumber":265,"author":{"gitID":"samuelloh"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":266,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":268,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":270,"author":{"gitID":"samuelloh"},"content":"    //@@author"},{"lineNumber":271,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":272,"author":{"gitID":"demitycho"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":273,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":274,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":275,"author":{"gitID":"demitycho"},"content":"    public String getScheduleFilePath() {"},{"lineNumber":276,"author":{"gitID":"demitycho"},"content":"        return scheduleStorage.getScheduleFilePath();"},{"lineNumber":277,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":279,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":280,"author":{"gitID":"demitycho"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException {"},{"lineNumber":281,"author":{"gitID":"demitycho"},"content":"        return readSchedule(scheduleStorage.getScheduleFilePath());"},{"lineNumber":282,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":284,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":285,"author":{"gitID":"demitycho"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule(String filePath) throws DataConversionException, IOException {"},{"lineNumber":286,"author":{"gitID":"demitycho"},"content":"        logger.fine(\"Attempting to read schedule data from file: \" + filePath);"},{"lineNumber":287,"author":{"gitID":"demitycho"},"content":"        return scheduleStorage.readSchedule(filePath);"},{"lineNumber":288,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":290,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":291,"author":{"gitID":"demitycho"},"content":"    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {"},{"lineNumber":292,"author":{"gitID":"demitycho"},"content":"        saveSchedule(schedule, scheduleStorage.getScheduleFilePath());"},{"lineNumber":293,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":295,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":296,"author":{"gitID":"demitycho"},"content":"    public void saveSchedule(ReadOnlySchedule schedule, String filePath) throws IOException {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":298,"author":{"gitID":"demitycho"},"content":"        scheduleStorage.saveSchedule(schedule, filePath);"},{"lineNumber":299,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":301,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":302,"author":{"gitID":"demitycho"},"content":"    public void backupSchedule(ReadOnlySchedule schedule) throws IOException {"},{"lineNumber":303,"author":{"gitID":"demitycho"},"content":"        scheduleStorage.backupSchedule(schedule);"},{"lineNumber":304,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"demitycho"},"content":"     * TODO implement this later"},{"lineNumber":307,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":309,"author":{"gitID":"demitycho"},"content":"    @Subscribe"},{"lineNumber":310,"author":{"gitID":"demitycho"},"content":"    public void handleScheduleChangedEvent(ScheduleChangedEvent event) {"},{"lineNumber":311,"author":{"gitID":"demitycho"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local schedule data changed, saving to file\"));"},{"lineNumber":312,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":313,"author":{"gitID":"demitycho"},"content":"            saveSchedule(event.getLessons());"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"samuelloh":172,"demitycho":47,"-":97}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":82}},{"path":"src/main/java/seedu/address/logic/commands/DashboardBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueMilestoneList;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.TaskNotFoundException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * A utility class to help with building Dashboard objects."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class DashboardBuilder {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    private UniqueMilestoneList milestoneList;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * Initializes the DashboardBuilder with the data of {@code dashboardToCopy}."},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder(Dashboard dashboardToCopy) {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        requireNonNull(dashboardToCopy);"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        milestoneList \u003d dashboardToCopy.getMilestoneList();"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Milestone} to the {@code Dashboard} we are building."},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateMilestoneException if the new milestone is a duplicate of an existing milestone in the dashboard"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withNewMilestone(Milestone milestone) throws DuplicateMilestoneException {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        requireNonNull(milestone);"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        milestoneList.add(milestone);"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Milestone} from the {@code Dashboard} of the {@code Student} that we are building."},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     * @throws MilestoneNotFoundException if the specified milestone is not found in the dashboard"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withoutMilestone(Milestone milestone) throws MilestoneNotFoundException {"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        requireNonNull(milestone);"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        milestoneList.remove(milestone);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     * Adds a new {@code Task} to the specified {@code Milestone} in the {@code Dashboard} we are building"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateTaskException if the new task is a duplicate of an existing task in the milestone"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withNewTask(Index milestoneIndex, Task task) throws DuplicateTaskException,"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"            DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(milestoneIndex, task);"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        Milestone targetMilestone \u003d milestoneList.get(milestoneIndex);"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        Milestone updatedMilestone \u003d new MilestoneBuilder(targetMilestone).withNewTask(task).build();"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        milestoneList.setMilestone(targetMilestone, updatedMilestone);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     * Removes the {@code Task} from the specified {@code Milestone} in the {@code Dashboard} we are building."},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"     * @throws TaskNotFoundException if the specified task is not found in the milestone"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withoutTask(Index milestoneIndex, Task task) throws DuplicateMilestoneException,"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"            MilestoneNotFoundException, TaskNotFoundException {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(milestoneIndex, task);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        Milestone targetMilestone \u003d milestoneList.get(milestoneIndex);"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        Milestone updatedMilestone \u003d new MilestoneBuilder(targetMilestone).withoutTask(task).build();"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        milestoneList.setMilestone(targetMilestone, updatedMilestone);"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"     * Marks the specified {@code Task} from a {@code Milestone} in the {@code Dashboard} we are building as completed."},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    public DashboardBuilder withTaskCompleted(Index milestoneIndex, Index taskIndex) throws DuplicateTaskException,"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"            TaskNotFoundException, DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(milestoneIndex, taskIndex);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":""},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        Milestone targetMilestone \u003d milestoneList.get(milestoneIndex);"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        Milestone updatedMilestone \u003d new MilestoneBuilder(targetMilestone).withTaskCompleted(taskIndex).build();"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        milestoneList.setMilestone(targetMilestone, updatedMilestone);"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":""},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":""},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"    public Dashboard build() {"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        return new Dashboard(milestoneList);"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":101,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/EditMiscCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXTOFKINNAME;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXTOFKINPHONE;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARKS;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Allergies;"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.MiscellaneousInfo;"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinName;"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinPhone;"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Remarks;"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":" * Edits the miscellaneous info of an existing student in the address book."},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"public class EditMiscCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"    public static final String COMMAND_WORD \u003d \"editMisc\";"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the miscellaneous\""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"            + \"information of the student identified \""},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"            + \"by the index number used in the last student listing. \""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"            + \"[\" + PREFIX_ALLERGIES + \"ALLERGIES] \""},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"            + \"[\" + PREFIX_NEXTOFKINPHONE + \"PHONE] \""},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"            + \"[\" + PREFIX_NEXTOFKINNAME + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"            + \"[\" + PREFIX_REMARKS + \"REMARKS] \\n\""},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_NEXTOFKINPHONE + \"91234567 \""},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"            + PREFIX_ALLERGIES + \"Nuts\";"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"    private final Index index;"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"    private final EditMiscDescriptor editMiscDescriptor;"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"    private Student studentToEdit;"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"    private Student editedStudent;"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"     * @param index of the student in the filtered list to edit"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"     * @param editMiscDescriptor details to edit the student with"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"    public EditMiscCommand(Index index, EditMiscDescriptor editMiscDescriptor) {"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(index);"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(editMiscDescriptor);"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        this.index \u003d index;"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"        this.editMiscDescriptor \u003d new EditMiscDescriptor(editMiscDescriptor);"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"        studentToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"        editedStudent \u003d createEditedStudent(studentToEdit, editMiscDescriptor);"},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"samuelloh"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"samuelloh"},"content":"            model.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"        } catch (DuplicateStudentException duplicateStudentError) {"},{"lineNumber":99,"author":{"gitID":"samuelloh"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"        } catch (StudentNotFoundException studentNotFoundError) {"},{"lineNumber":101,"author":{"gitID":"samuelloh"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":102,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"samuelloh"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"},{"lineNumber":104,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":106,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":"     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"},{"lineNumber":108,"author":{"gitID":"samuelloh"},"content":"     * edited with {@code editStudentDescriptor}."},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"samuelloh"},"content":"    private static Student createEditedStudent(Student studentToEdit, EditMiscDescriptor editMiscDescriptor) {"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":"        assert studentToEdit !\u003d null;"},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":113,"author":{"gitID":"samuelloh"},"content":"        UniqueKey uniqueKey \u003d studentToEdit.getUniqueKey();"},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":"        Name name \u003d studentToEdit.getName();"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"        Phone phone \u003d studentToEdit.getPhone();"},{"lineNumber":116,"author":{"gitID":"samuelloh"},"content":"        Email email \u003d studentToEdit.getEmail();"},{"lineNumber":117,"author":{"gitID":"samuelloh"},"content":"        Address address \u003d studentToEdit.getAddress();"},{"lineNumber":118,"author":{"gitID":"samuelloh"},"content":"        ProgrammingLanguage programmingLanguage \u003d studentToEdit.getProgrammingLanguage();"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"        Set\u003cTag\u003e tags \u003d studentToEdit.getTags();"},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":"        Favourite isFavourite \u003d studentToEdit.getFavourite();"},{"lineNumber":121,"author":{"gitID":"samuelloh"},"content":"        Dashboard dashboard \u003d studentToEdit.getDashboard();"},{"lineNumber":122,"author":{"gitID":"samuelloh"},"content":"        ProfilePicturePath profilePicturePath \u003d studentToEdit.getProfilePicturePath();"},{"lineNumber":123,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":124,"author":{"gitID":"samuelloh"},"content":"        Allergies allergies \u003d editMiscDescriptor.getAllergies()"},{"lineNumber":125,"author":{"gitID":"samuelloh"},"content":"                .orElse(studentToEdit.getMiscellaneousInfo().getAllergies());"},{"lineNumber":126,"author":{"gitID":"samuelloh"},"content":"        NextOfKinName nextOfKinName \u003d editMiscDescriptor.getNextOfKinName()"},{"lineNumber":127,"author":{"gitID":"samuelloh"},"content":"                .orElse(studentToEdit.getMiscellaneousInfo().getNextOfKinName());"},{"lineNumber":128,"author":{"gitID":"samuelloh"},"content":"        NextOfKinPhone nextOfKinPhone \u003d editMiscDescriptor.getNextOfKinPhone()"},{"lineNumber":129,"author":{"gitID":"samuelloh"},"content":"                .orElse(studentToEdit.getMiscellaneousInfo().getNextOfKinPhone());"},{"lineNumber":130,"author":{"gitID":"samuelloh"},"content":"        Remarks remarks \u003d editMiscDescriptor.getRemarks()"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":"                .orElse(studentToEdit.getMiscellaneousInfo().getRemarks());"},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":133,"author":{"gitID":"samuelloh"},"content":"        MiscellaneousInfo miscellaneousInfo \u003d new MiscellaneousInfo(allergies, nextOfKinName, nextOfKinPhone, remarks);"},{"lineNumber":134,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":135,"author":{"gitID":"samuelloh"},"content":"        return new Student(uniqueKey, name, phone, email, address,"},{"lineNumber":136,"author":{"gitID":"samuelloh"},"content":"                programmingLanguage, tags, isFavourite, dashboard, profilePicturePath, miscellaneousInfo);"},{"lineNumber":137,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":139,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":140,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":"        // short circuit if same object"},{"lineNumber":143,"author":{"gitID":"samuelloh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":144,"author":{"gitID":"samuelloh"},"content":"            return true;"},{"lineNumber":145,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":147,"author":{"gitID":"samuelloh"},"content":"        // instanceof handles nulls"},{"lineNumber":148,"author":{"gitID":"samuelloh"},"content":"        if (!(other instanceof EditMiscCommand)) {"},{"lineNumber":149,"author":{"gitID":"samuelloh"},"content":"            return false;"},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":152,"author":{"gitID":"samuelloh"},"content":"        // state check"},{"lineNumber":153,"author":{"gitID":"samuelloh"},"content":"        EditMiscCommand e \u003d (EditMiscCommand) other;"},{"lineNumber":154,"author":{"gitID":"samuelloh"},"content":"        return index.equals(e.index)"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 editMiscDescriptor.equals(e.editMiscDescriptor)"},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 Objects.equals(studentToEdit, e.studentToEdit);"},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"     * Stores the details to edit the student with. Each non-empty field value will replace the"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"     * corresponding field value of the student."},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"    public static class EditMiscDescriptor {"},{"lineNumber":165,"author":{"gitID":"samuelloh"},"content":"        private Allergies allergies;"},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"        private NextOfKinName nextOfKinName;"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"        private NextOfKinPhone nextOfKinPhone;"},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":"        private Remarks remarks;"},{"lineNumber":169,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":170,"author":{"gitID":"samuelloh"},"content":"        public EditMiscDescriptor() {"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":173,"author":{"gitID":"samuelloh"},"content":"        /**"},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"         * Copy constructor."},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"         */"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"        public EditMiscDescriptor(EditMiscDescriptor toCopy) {"},{"lineNumber":177,"author":{"gitID":"samuelloh"},"content":"            setAllergies(toCopy.allergies);"},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":"            setNextOfKinName(toCopy.nextOfKinName);"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":"            setNextOfKinPhone(toCopy.nextOfKinPhone);"},{"lineNumber":180,"author":{"gitID":"samuelloh"},"content":"            setRemarks(toCopy.remarks);"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":183,"author":{"gitID":"samuelloh"},"content":"        /**"},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":185,"author":{"gitID":"samuelloh"},"content":"         */"},{"lineNumber":186,"author":{"gitID":"samuelloh"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"            return CollectionUtil.isAnyNonNull(this.allergies, this.nextOfKinName, this.nextOfKinPhone, this.remarks);"},{"lineNumber":188,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":190,"author":{"gitID":"samuelloh"},"content":"        public void setAllergies(Allergies allergies) {"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"            this.allergies \u003d allergies;"},{"lineNumber":192,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":194,"author":{"gitID":"samuelloh"},"content":"        public Optional\u003cAllergies\u003e getAllergies() {"},{"lineNumber":195,"author":{"gitID":"samuelloh"},"content":"            return Optional.ofNullable(allergies);"},{"lineNumber":196,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"        public void setNextOfKinName(NextOfKinName nextOfKinName) {"},{"lineNumber":199,"author":{"gitID":"samuelloh"},"content":"            this.nextOfKinName \u003d nextOfKinName;"},{"lineNumber":200,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":202,"author":{"gitID":"samuelloh"},"content":"        public Optional\u003cNextOfKinName\u003e getNextOfKinName() {"},{"lineNumber":203,"author":{"gitID":"samuelloh"},"content":"            return Optional.ofNullable(nextOfKinName);"},{"lineNumber":204,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":206,"author":{"gitID":"samuelloh"},"content":"        public void setNextOfKinPhone(NextOfKinPhone nextOfKinPhone) {"},{"lineNumber":207,"author":{"gitID":"samuelloh"},"content":"            this.nextOfKinPhone \u003d nextOfKinPhone;"},{"lineNumber":208,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":210,"author":{"gitID":"samuelloh"},"content":"        public Optional\u003cNextOfKinPhone\u003e getNextOfKinPhone() {"},{"lineNumber":211,"author":{"gitID":"samuelloh"},"content":"            return Optional.ofNullable(nextOfKinPhone);"},{"lineNumber":212,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":214,"author":{"gitID":"samuelloh"},"content":"        public void setRemarks(Remarks remarks) {"},{"lineNumber":215,"author":{"gitID":"samuelloh"},"content":"            this.remarks \u003d remarks;"},{"lineNumber":216,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":218,"author":{"gitID":"samuelloh"},"content":"        public Optional\u003cRemarks\u003e getRemarks() {"},{"lineNumber":219,"author":{"gitID":"samuelloh"},"content":"            return Optional.ofNullable(remarks);"},{"lineNumber":220,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":222,"author":{"gitID":"samuelloh"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"samuelloh"},"content":"        public boolean equals(Object other) {"},{"lineNumber":224,"author":{"gitID":"samuelloh"},"content":"            // short circuit if same object"},{"lineNumber":225,"author":{"gitID":"samuelloh"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":226,"author":{"gitID":"samuelloh"},"content":"                return true;"},{"lineNumber":227,"author":{"gitID":"samuelloh"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":229,"author":{"gitID":"samuelloh"},"content":"            // instanceof handles nulls"},{"lineNumber":230,"author":{"gitID":"samuelloh"},"content":"            if (!(other instanceof EditMiscDescriptor)) {"},{"lineNumber":231,"author":{"gitID":"samuelloh"},"content":"                return false;"},{"lineNumber":232,"author":{"gitID":"samuelloh"},"content":"            }"},{"lineNumber":233,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":234,"author":{"gitID":"samuelloh"},"content":"            // state check"},{"lineNumber":235,"author":{"gitID":"samuelloh"},"content":"            EditMiscDescriptor e \u003d (EditMiscDescriptor) other;"},{"lineNumber":236,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":237,"author":{"gitID":"samuelloh"},"content":"            return getAllergies().equals(e.getAllergies())"},{"lineNumber":238,"author":{"gitID":"samuelloh"},"content":"                    \u0026\u0026 getNextOfKinName().equals(e.getNextOfKinName())"},{"lineNumber":239,"author":{"gitID":"samuelloh"},"content":"                    \u0026\u0026 getNextOfKinPhone().equals(e.getNextOfKinPhone())"},{"lineNumber":240,"author":{"gitID":"samuelloh"},"content":"                    \u0026\u0026 getRemarks().equals(e.getRemarks());"},{"lineNumber":241,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":244,"author":{"gitID":"samuelloh"},"content":"//@@ author"}],"authorContributionMap":{"yapni":10,"samuelloh":223,"demitycho":1,"-":10}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedDashboard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueMilestoneList;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":" * JAXB-friendly adapted version of the Dashboard."},{"lineNumber":16,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"public class XmlAdaptedDashboard {"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    private List\u003cXmlAdaptedMilestone\u003e milestoneList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"     * Constructs an XmlAdaptedDashboard."},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedDashboard() {}"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"     * Constructs an {@code XmlAdaptedDashboard} with the given dashboard details."},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedDashboard(List\u003cXmlAdaptedMilestone\u003e milestoneList) {"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        if (milestoneList !\u003d null) {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"            this.milestoneList \u003d new ArrayList\u003c\u003e(milestoneList);"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     * Converts a given Dashboard into this class for JAXB use."},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedDashboard"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedDashboard(Dashboard source) {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        milestoneList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        for (Milestone milestone : source.getMilestoneList()) {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            milestoneList.add(new XmlAdaptedMilestone(milestone));"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"     * Converts this jaxb-friendly adapted dashboard object into the model\u0027s Dashboard object."},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted dashboard"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    public Dashboard toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        final UniqueMilestoneList modelMilestoneList \u003d new UniqueMilestoneList();"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        for (XmlAdaptedMilestone milestone : milestoneList) {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            modelMilestoneList.add(milestone.toModelType());"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        return new Dashboard(modelMilestoneList);"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"            return true;"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof XmlAdaptedDashboard)) {"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        XmlAdaptedDashboard otherDashboard \u003d (XmlAdaptedDashboard) other;"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        return milestoneList.equals(otherDashboard.milestoneList);"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":68,"-":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedMiscInfo.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Allergies;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.MiscellaneousInfo;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinName;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.NextOfKinPhone;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.Remarks;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":" * JAXB-friendly version of the Miscellaneous info of a student."},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"public class XmlAdaptedMiscInfo {"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    private String allergies;"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    private String nextOfKinName;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    private String nextOfKinPhone;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    private String remarks;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"     * Constructs a {@code XmlAdaptedMiscInfo}."},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"    public XmlAdaptedMiscInfo() {}"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"     * Constructs a {@code XmlAdaptedMiscInfo} with the given student details."},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"    public XmlAdaptedMiscInfo(String allergies, String nextOfKinName, String nextOfKinPhone, String remarks) {"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        this.allergies \u003d allergies;"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        this.nextOfKinName \u003d nextOfKinName;"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"        this.nextOfKinPhone \u003d nextOfKinPhone;"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"        this.remarks \u003d remarks;"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"     * Converts a given Milestone into this class for JAXB use."},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedMilestone"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    public XmlAdaptedMiscInfo(MiscellaneousInfo source) {"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"        this.allergies \u003d source.getAllergies().toString();"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        this.nextOfKinName \u003d source.getNextOfKinName().toString();"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"        this.nextOfKinPhone \u003d source.getNextOfKinPhone().toString();"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"        this.remarks \u003d source.getRemarks().toString();"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"     * Converts this jaxb-friendly adapted milestone object into the model\u0027s Milestone object."},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted milestone"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    public MiscellaneousInfo toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"        if (this.allergies \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"                    Allergies.class.getSimpleName()));"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"        final Allergies modelAllergies \u003d new Allergies(this.allergies);"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"        if (this.nextOfKinName \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"                    NextOfKinName.class.getSimpleName()));"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        final NextOfKinName modelNextOfKinName \u003d new NextOfKinName(this.nextOfKinName);"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"        if (this.nextOfKinPhone \u003d\u003d null) {"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"                    NextOfKinPhone.class.getSimpleName()));"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"        final NextOfKinPhone modelNextOfKinPhone \u003d new NextOfKinPhone(this.nextOfKinPhone);"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"        if (this.remarks \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"                    Remarks.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"        final Remarks modelRemarks \u003d new Remarks(this.remarks);"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"        return new MiscellaneousInfo(modelAllergies, modelNextOfKinName, modelNextOfKinPhone, modelRemarks);"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"//author"}],"authorContributionMap":{"samuelloh":87,"-":3}},{"path":"src/main/java/seedu/address/storage/XmlScheduleStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":" * A class to access Schedule data stored as an xml file on the hard disk."},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"public class XmlScheduleStorage implements ScheduleStorage {"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlScheduleStorage.class);"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public XmlScheduleStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    public String getScheduleFilePath() {"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        return readSchedule(filePath);"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"     * Similar to {@link #readSchedule()}"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    public Optional\u003cReadOnlySchedule\u003e readSchedule(String filePath) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"            FileNotFoundException {"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"        File scheduleFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        if (!scheduleFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"            logger.info(\"Schedule file \"  + scheduleFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"        XmlSerializableSchedule xmlSchedule \u003d XmlFileStorage.loadScheduleDataFromSaveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"            return Optional.of(xmlSchedule.toModelType());"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"            logger.info(\"Illegal values found in \" + scheduleFile + \": \" + ive.getMessage());"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"    public void saveSchedule(ReadOnlySchedule schedule) throws IOException {"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        saveSchedule(schedule, filePath);"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"     * Similar to {@link #saveSchedule(ReadOnlySchedule)}"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"    public void saveSchedule(ReadOnlySchedule schedule, String filePath) throws IOException {"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        requireNonNull(schedule);"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        requireNonNull(filePath);"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"        XmlFileStorage.saveScheduleDataToFile(file, new XmlSerializableSchedule(schedule));"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"    public void backupSchedule(ReadOnlySchedule schedule) throws IOException {"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        saveSchedule(schedule, filePath + \".backup\");"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":73,"-":14}},{"path":"src/main/java/seedu/address/logic/commands/AddTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INDEXES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MILESTONE_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.logic.commands.util.CheckIndexesUtil;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":" * Adds a Task to a Milestone"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"public class AddTaskCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public static final String COMMAND_WORD \u003d \"addTask\";"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Task to a Milestone in a Student\u0027s Dashboard.\\n\""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"            + \"Parameters: \""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"STUDENT\u0027S INDEX \""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"MILESTONE\u0027S INDEX \""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"            + PREFIX_NAME + \"NAME OF TASK \""},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION OF TASK\\n\""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"            + PREFIX_INDEX + \"1 \""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"            + PREFIX_MILESTONE_INDEX + \"2 \""},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            + PREFIX_NAME + \"Learn syntax of arrays \""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            + PREFIX_DESCRIPTION + \"Learn declaration and initialisation of arrays\";"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task already exists in the milestone\";"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    private Student targetStudent;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    private Student editedStudent;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    private Milestone targetMilestone;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    private final Task newTask;"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    private final Index targetStudentIndex;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    private final Index targetMilestoneIndex;"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    public AddTaskCommand(Index targetStudentIndex, Index targetMilestoneIndex, Task newTask) {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudentIndex, targetMilestoneIndex, newTask);"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":""},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        this.targetStudentIndex \u003d targetStudentIndex;"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        this.targetMilestoneIndex \u003d targetMilestoneIndex;"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        this.newTask \u003d newTask;"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    protected CommandResult executeUndoableCommand() {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(targetStudent, editedStudent);"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"            model.updateStudent(targetStudent, editedStudent);"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"            /* DuplicateStudentException caught will mean that the task list is the same as before */"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"New task cannot be missing\");"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException e) {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, newTask));"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":""},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"            setTargetObjects();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"            createEditedStudent();"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateMilestoneException e) {"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Milestone cannot be duplicated\");"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        } catch (MilestoneNotFoundException e) {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Milestone cannot be missing\");"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"            throw new CommandException(e.getMessage());"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"     * Creates {@code editedStudent} which is a copy of {@code targetStudent}, but with the {@code newTask} added"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"     * to the {@code targetMilestone}."},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    private void createEditedStudent()"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"            throws DuplicateTaskException, DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        assert targetStudent !\u003d null \u0026\u0026 targetMilestoneIndex !\u003d null \u0026\u0026 newTask !\u003d null;"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        editedStudent \u003d new StudentBuilder(targetStudent).withNewTask(targetMilestoneIndex, newTask).build();"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":""},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     * Sets the {@code targetStudent} and {@code targetMilestone} of this command object."},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if any of the target indexes are invalid"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    private void setTargetObjects() throws IllegalValueException {"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        assert targetStudentIndex !\u003d null \u0026\u0026 targetMilestoneIndex !\u003d null;"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":""},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        if (!CheckIndexesUtil.areIndexesValid(lastShownList, targetStudentIndex, targetMilestoneIndex)) {"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEXES);"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"yapni"},"content":""},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"        targetStudent \u003d lastShownList.get(targetStudentIndex.getZeroBased());"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        targetMilestone \u003d targetStudent.getDashboard().getMilestoneList().get(targetMilestoneIndex);"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":""},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"                || (other instanceof AddTaskCommand // instanceof handles null"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((AddTaskCommand) other).targetStudentIndex \u003d\u003d this.targetStudentIndex"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((AddTaskCommand) other).targetMilestoneIndex \u003d\u003d this.targetMilestoneIndex"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 ((AddTaskCommand) other).newTask \u003d\u003d this.newTask);"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":126,"-":4}},{"path":"src/main/java/seedu/address/storage/XmlRequiredIndexStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.RequiredStudentIndex;"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":" * Stores the XML data of the required index of the particular student."},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"public class XmlRequiredIndexStorage {"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    private String filePath;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"    public XmlRequiredIndexStorage(String filePath) {"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    public String getFilePath() {"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        return filePath;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"     * Updates the XML file with the new required index."},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"     * @param newIndex"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"     * @param filePath"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"     * @throws IOException"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"    public static void updateData(int newIndex, String filePath) throws IOException {"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"        RequiredStudentIndex ris \u003d new RequiredStudentIndex(newIndex);"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"            XmlUtil.saveDataToFile(file, ris);"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        } catch (JAXBException e) {"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    public static RequiredStudentIndex getData(String filePath) {"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"            RequiredStudentIndex ris \u003d XmlUtil.getDataFromFile(file, RequiredStudentIndex.class);"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"            return ris;"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"        } catch (Exception e) {"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":55}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"     * Saves the given schedule data to the specified file."},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    public static void saveScheduleDataToFile(File file, XmlSerializableSchedule schedule)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            XmlUtil.saveDataToFile(file, schedule);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"     * Returns schedule in the file or an empty schedule"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    public static XmlSerializableSchedule loadScheduleDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FileNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableSchedule.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"demitycho":9,"-":54}},{"path":"src/main/java/seedu/address/storage/ProfilePictureStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":" * Stores the profile pictures of students"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"public class ProfilePictureStorage {"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"    private final String filePath;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"    public ProfilePictureStorage(String filePath) {"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"     * Returns true is the current storage file with {@code filePath} exists"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    public boolean storageFileExist() {"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"        File pictureStorage \u003d new File(this.filePath);"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"        return pictureStorage.exists();"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    public String getFilePath() {"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"        return this.filePath;"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":27,"-":3}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedStudent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Favourite;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.MiscellaneousInfo;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":" * JAXB-friendly version of the Student."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"public class XmlAdaptedStudent {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    private String key;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    private String programmingLanguage;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    private String profilePicturePath;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    private String favourite;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    private XmlAdaptedDashboard dashboard \u003d new XmlAdaptedDashboard();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"    private XmlAdaptedMiscInfo miscellaneousInfo \u003d new XmlAdaptedMiscInfo();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     * Constructs an XmlAdaptedStudent."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedStudent() {}"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"     * Constructs an {@code XmlAdaptedStudent} with the given student details."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    public XmlAdaptedStudent(String uniqueKey, String name, String phone, String email, String address,"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"                             String programmingLanguage, List\u003cXmlAdaptedTag\u003e tagged, String favourite,"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"                             String profilePicturePath, XmlAdaptedDashboard dashboard,"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"                             XmlAdaptedMiscInfo miscellaneousInfo) {"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        this.key \u003d uniqueKey;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d profilePicturePath;"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d favourite;"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        if (dashboard !\u003d null) {"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"            this.dashboard \u003d dashboard;"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     * Converts a given Student into this class for JAXB use."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedStudent"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedStudent(Student source) {"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"        key \u003d source.getUniqueKey().toString();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        programmingLanguage \u003d source.getProgrammingLanguage().programmingLanguage;"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"        profilePicturePath \u003d source.getProfilePicturePath().toString();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"samuelloh"},"content":"        miscellaneousInfo \u003d new XmlAdaptedMiscInfo(source.getMiscellaneousInfo());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        favourite \u003d source.getFavourite().value;"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        dashboard \u003d new XmlAdaptedDashboard(source.getDashboard());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"     * Converts this jaxb-friendly adapted student object into the model\u0027s Student object."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted student"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"    public Student toModelType() throws IllegalValueException {"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"            studentTags.add(tag.toModelType());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"        if (this.key \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException("},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, UniqueKey.class.getSimpleName()));"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"        if (!UniqueKey.isValidUniqueKey(this.key)) {"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"            throw new IllegalValueException(UniqueKey.MESSAGE_UNIQUE_KEY_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"        final UniqueKey uniqueKey \u003d new UniqueKey(key);"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"yapni"},"content":"        if (this.programmingLanguage \u003d\u003d null) {"},{"lineNumber":161,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":162,"author":{"gitID":"yapni"},"content":"                    ProgrammingLanguage.class.getSimpleName()));"},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"yapni"},"content":"        if (!ProgrammingLanguage.isValidProgrammingLanguage(this.programmingLanguage)) {"},{"lineNumber":165,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(ProgrammingLanguage.MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"yapni"},"content":"        final ProgrammingLanguage programmingLanguage \u003d new ProgrammingLanguage(this.programmingLanguage);"},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":169,"author":{"gitID":"samuelloh"},"content":"        if (this.profilePicturePath \u003d\u003d null) {"},{"lineNumber":170,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"                    ProfilePicturePath.class.getSimpleName()));"},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"samuelloh"},"content":"        if (!ProfilePicturePath.isValidPath(this.profilePicturePath)) {"},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"            throw new IllegalValueException(ProfilePicturePath.MESSAGE_PICTURE_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"        final ProfilePicturePath profilePicturePath \u003d new ProfilePicturePath(this.profilePicturePath);"},{"lineNumber":177,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":"        final MiscellaneousInfo miscellaneousInfo \u003d this.miscellaneousInfo.toModelType();"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":180,"author":{"gitID":"yapni"},"content":"        if (this.favourite \u003d\u003d null) {"},{"lineNumber":181,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":182,"author":{"gitID":"yapni"},"content":"                    Favourite.class.getSimpleName()));"},{"lineNumber":183,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"yapni"},"content":"        final Favourite favourite \u003d new Favourite(this.favourite);"},{"lineNumber":185,"author":{"gitID":"yapni"},"content":""},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"        final Dashboard dashboard \u003d this.dashboard.toModelType();"},{"lineNumber":187,"author":{"gitID":"yapni"},"content":""},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(studentTags);"},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":190,"author":{"gitID":"samuelloh"},"content":"        return new Student(uniqueKey, name, phone, email, address, programmingLanguage, tags, favourite, dashboard,"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"                profilePicturePath, miscellaneousInfo);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof XmlAdaptedStudent)) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"        XmlAdaptedStudent otherStudent \u003d (XmlAdaptedStudent) other;"},{"lineNumber":205,"author":{"gitID":"yapni"},"content":"        return Objects.equals(name, otherStudent.name)"},{"lineNumber":206,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(phone, otherStudent.phone)"},{"lineNumber":207,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(email, otherStudent.email)"},{"lineNumber":208,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(address, otherStudent.address)"},{"lineNumber":209,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(favourite, otherStudent.favourite)"},{"lineNumber":210,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 tagged.equals(otherStudent.tagged)"},{"lineNumber":211,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 dashboard.equals(otherStudent.dashboard);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":59,"samuelloh":26,"demitycho":14,"-":114}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    private List\u003cXmlAdaptedStudent\u003e students;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        students \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        students.addAll(src.getStudentList().stream().map(XmlAdaptedStudent::new).collect(Collectors.toList()));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     * {@code XmlAdaptedStudent} or {@code XmlAdaptedTag}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        for (XmlAdaptedStudent p : students) {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"            addressBook.addStudent(p.toModelType());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"        return students.equals(otherAb.students) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":7,"-":66}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"import seedu.address.storage.ScheduleStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"import seedu.address.storage.XmlScheduleStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Codeducator ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        ScheduleStorage scheduleStorage \u003d new XmlScheduleStorage(userPrefs.getScheduleFilePath());"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, scheduleStorage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"        storage.setupViewFiles();"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"     * TODO: if data not found, empty or Sample data"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"        Optional\u003cReadOnlySchedule\u003e scheduleOptional;"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"        ReadOnlySchedule initialScheduleData;"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"            scheduleOptional \u003d storage.readSchedule();"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"            if (!scheduleOptional.isPresent()) {"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"                logger.info(\"Schedule data file not found. Will be starting with a empty Schedule\");"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"            initialScheduleData \u003d scheduleOptional.orElseGet(SampleDataUtil::getSampleSchedule);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"            logger.warning(\"Schedule data file not in the correct format. Will be starting with an empty Schedule\");"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"            initialScheduleData \u003d new Schedule();"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"        } catch (IOException e) {"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Schedule\");"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"            initialScheduleData \u003d new Schedule();"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"        return new ModelManager(initialData, userPrefs, initialScheduleData);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":161,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":189,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":218,"author":{"gitID":"yapni"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Codeducator ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"samuelloh":2,"demitycho":27,"-":206}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Address;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Email;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Name;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Phone;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public static Student[] getSampleStudents() {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        return new Student[] {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"            new Student(new UniqueKey(\"54ef49\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"                    new ProgrammingLanguage(\"C\"), getTagSet(\"friends\")),"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"            new Student(new UniqueKey(\"54a1ee\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"                    new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"                    new ProgrammingLanguage(\"Java\"), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"            new Student(new UniqueKey(\"7d68ec\"), new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"                    new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"                    new ProgrammingLanguage(\"JavaScript\"), getTagSet(\"neighbours\")),"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"            new Student(new UniqueKey(\"cc8bce\"), new Name(\"David Li\"), new Phone(\"91031282\"),"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"                    new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"                    new ProgrammingLanguage(\"Python\"), getTagSet(\"family\")),"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"            new Student(new UniqueKey(\"a7aa65\"), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"                    new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"                    new ProgrammingLanguage(\"Swift\"), getTagSet(\"classmates\")),"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"            new Student(new UniqueKey(\"43a242\"), new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"                    new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"                    new ProgrammingLanguage(\"PHP\"), getTagSet(\"colleagues\"))"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"            for (Student sampleStudent : getSampleStudents()) {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"                sampleAb.addStudent(sampleStudent);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate students\", e);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"    public static ReadOnlySchedule getSampleSchedule() {"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        return new Schedule();"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":13,"demitycho":25,"-":37}},{"path":"src/main/java/seedu/address/storage/XmlSerializableSchedule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.Schedule;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":" * An Immutable Schedule that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"@XmlRootElement(name \u003d \"schedule\")"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"public class XmlSerializableSchedule {"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    private List\u003cXmlAdaptedLesson\u003e lessons;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     * Creates an empty XmlSerializableSchedule."},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    public XmlSerializableSchedule() {"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        lessons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"     * Conversion"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    public XmlSerializableSchedule(ReadOnlySchedule src) {"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        this();"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        lessons.addAll(src.getSchedule().stream().map(XmlAdaptedLesson::new).collect(Collectors.toList()));"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"     * Converts this schedule into the model\u0027s {@code Schedule} object."},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"     * {@code XmlAdaptedLesson}"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    public Schedule toModelType() throws IllegalValueException {"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        Schedule schedule \u003d new Schedule();"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"        for (XmlAdaptedLesson l : lessons) {"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"            schedule.addLesson(l.toModelType());"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        return schedule;"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        if (!(other instanceof XmlSerializableSchedule)) {"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        XmlSerializableSchedule otherSchedule \u003d (XmlSerializableSchedule) other;"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"        return lessons.equals(otherSchedule.lessons);"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":58,"-":9}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"     * Returns an unmodifiable view of the students list."},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"     * This list will not contain any duplicate students."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    ObservableList\u003cStudent\u003e getStudentList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    //@@author demitycho"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    Student findStudentByKey(UniqueKey key);"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":4,"demitycho":4,"-":19}},{"path":"src/main/java/seedu/address/model/student/Favourite.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represent Student\u0027s favourite attribute i.e. whether the Student is in Favourites"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class Favourite {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    private static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d \"Favourite should be \u0027true\u0027 or \u0027false\u0027 only\";"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    public final String value;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":""},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    public Favourite(boolean isFav) {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"        this.value \u003d Boolean.toString(isFav);"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public Favourite(String isFav) {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        requireNonNull(isFav);"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        checkArgument(isValidBoolean(isFav), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        this.value \u003d isFav;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"     * Returns true if a given string is a valid boolean string."},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private static boolean isValidBoolean(String test) {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        return test.equals(\"true\") || test.equals(\"false\");"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    public boolean isFavourite() {"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        return this.value.equals(\"true\");"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        return value;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":""},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        return obj \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"            || obj instanceof Favourite"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"            \u0026\u0026 value.equals(((Favourite) obj).value);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":""},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        return value.hashCode();"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":47,"demitycho":3}},{"path":"src/main/java/seedu/address/storage/ScheduleStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":" * Represents a storage for {@link seedu.address.model.Schedule}."},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"public interface ScheduleStorage {"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    String getScheduleFilePath();"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"     * Returns Schedule data as a {@link ReadOnlySchedule}."},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"     * @see #getScheduleFilePath()"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    Optional\u003cReadOnlySchedule\u003e readSchedule(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     * Saves the given {@link ReadOnlySchedule} to the storage."},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"     * @param schedule cannot be null."},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    void saveSchedule(ReadOnlySchedule schedule) throws IOException;"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"     * @see #saveSchedule(ReadOnlySchedule)"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    void saveSchedule(ReadOnlySchedule schedule, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"     * Saves the given {@link ReadOnlySchedule} to the fixed temporary storage."},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"     * @param schedule cannot be null."},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    void backupSchedule(ReadOnlySchedule schedule) throws IOException;"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":46,"-":6}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedMilestone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Date;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Milestone;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Progress;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.UniqueTaskList;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * JAXB-friendly adapted version of the Milestone."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class XmlAdaptedMilestone {"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Milestone\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":""},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private String dueDate;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private String progress;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    private String description;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    @XmlElement"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    private List\u003cXmlAdaptedTask\u003e tasksList;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":""},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"     * Constructs an XmlAdaptedMilestone."},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedMilestone() {}"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedMilestone(List\u003cXmlAdaptedTask\u003e tasksList, String dueDate, String progress, String description) {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        if (tasksList !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"            this.tasksList \u003d new ArrayList\u003c\u003e(tasksList);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        this.progress \u003d progress;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     * Converts a given Milestone into this class for JAXB use."},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedMilestone"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedMilestone(Milestone source) {"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        for (Task task : source.getTaskList()) {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"            tasksList.add(new XmlAdaptedTask(task));"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        dueDate \u003d source.getDueDate().getValue();"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        progress \u003d source.getProgress().getValue();"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        description \u003d source.getDescription();"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"     * Converts this jaxb-friendly adapted milestone object into the model\u0027s Milestone object."},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted milestone"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"    public Milestone toModelType() throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        final UniqueTaskList modelTaskList \u003d new UniqueTaskList();"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        if (tasksList !\u003d null) {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            for (XmlAdaptedTask task : tasksList) {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"                modelTaskList.add(task.toModelType());"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        if (this.dueDate \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        final Date modelDate \u003d new Date(this.dueDate);"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        if (this.progress \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException("},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Progress.class.getSimpleName()));"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        final Progress modelProgress \u003d new Progress(this.progress);"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        final String modelDescription \u003d this.description;"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":""},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        return new Milestone(modelDate, modelTaskList, modelProgress, modelDescription);"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":""},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"            return true;"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":""},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof XmlAdaptedMilestone)) {"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":""},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"        XmlAdaptedMilestone otherMilestone \u003d (XmlAdaptedMilestone) other;"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        return Objects.equals(dueDate, otherMilestone.dueDate)"},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(progress, otherMilestone.progress)"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(description, otherMilestone.description)"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 tasksList.equals(otherMilestone.tasksList);"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":107,"demitycho":1,"-":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Task;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" * JAXB-friendly adapted version of the Task."},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"public class XmlAdaptedTask {"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    private static final String COMPLETED \u003d \"completed\";"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    private static final String NOT_COMPLETED \u003d \"not completed\";"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    private String name;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private String description;"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private String isCompleted;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedTask(String name, String description, String isCompleted) {"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"        this.isCompleted \u003d isCompleted;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedStudent"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        name \u003d source.getName();"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        description \u003d source.getDescription();"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        isCompleted \u003d source.isCompleted() ? COMPLETED : NOT_COMPLETED;"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":""},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        if (this.isCompleted \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isCompleted\"));"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        return this.isCompleted.equals(COMPLETED) ? new Task(name, description, true)"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"                : new Task(name, description, false);"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":""},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof XmlAdaptedTask)) {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":""},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        return Objects.equals(name, otherTask.name)"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(description, otherTask.description)"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 Objects.equals(isCompleted, otherTask.isCompleted);"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":84,"demitycho":3,"-":4}},{"path":"src/main/java/seedu/address/model/Schedule.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.LessonList;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":" * Wraps all data at the schedule level"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"public class Schedule implements ReadOnlySchedule {"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    private final LessonList lessons;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"        lessons \u003d new LessonList();"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    public Schedule() {}"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"     * Creates an Schedule using the Lesson in the {@code toBeCopied}"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    public Schedule(ReadOnlySchedule toBeCopied) {"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        this();"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"        resetData(toBeCopied);"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"     * Adds lesson to schedule"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"     * @param lessonToBeAdded"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"     * @throws InvalidLessonTimeSlotException if invalid"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    public void addLesson(Lesson lessonToBeAdded)"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"            throws InvalidLessonTimeSlotException, DuplicateLessonException {"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        if (!isValidSlot(lessonToBeAdded)) {"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            throw new InvalidLessonTimeSlotException();"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        lessons.add(lessonToBeAdded);"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"     * Checks if lesson clashes with other lessons in the schedule"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"     * @return true/false"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    private boolean isValidSlot(Lesson l) {"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        for (Lesson lesson : lessons) {"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"            if (l.clashesWith(lesson)) {"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"                return false;"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        return true;"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"     * Removes {@code key} from this {@code Schedule}."},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"     * @throws LessonNotFoundException if the {@code key} is not in this {@code Schedule}."},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"    public boolean removeLesson(Lesson key) throws LessonNotFoundException {"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        if (lessons.remove(key)) {"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"            return true;"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        } else {"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"            throw new LessonNotFoundException();"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"     * Resets the existing data of this {@code Schedule} with {@code newData}."},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"    public void resetData(ReadOnlySchedule newData) {"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        requireNonNull(newData);"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"        List\u003cLesson\u003e newList \u003d newData.getSchedule().stream()"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"                .map(Lesson::getLesson)"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"                .collect(Collectors.toList());"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"            setLessons(newList);"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"        } catch (DuplicateLessonException e) {"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"Schedules should not have duplicate lessons\");"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"        } catch (InvalidLessonTimeSlotException iltse) {"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"Schedules should not have clashing time slots\");"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"    public void setLessons(List\u003cLesson\u003e lessons)"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"            throws InvalidLessonTimeSlotException, DuplicateLessonException {"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"        this.lessons.setLessons(lessons);"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"     * Deletes all Lessons in LessonList associated with a Student {@code UniqueKey key}"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"     * @param target"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"     * @throws LessonNotFoundException"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"    public void removeStudentLessons(Student target)"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"            throws InvalidLessonTimeSlotException, DuplicateLessonException, LessonNotFoundException {"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"        lessons.removeStudentLessons(target);"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"     * Finds the latest EndTime in the Schedule"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"    public Time getLatestEndTime() {"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"        Time latest \u003d new Time(\"00:00\");"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"        for (Lesson l : lessons) {"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"            if (l.getEndTime().compareTo(latest) \u003e 0) {"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"                latest \u003d l.getEndTime();"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"        return latest;"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"     * Finds the earliest StartTime in the Schedule"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"    public Time getEarliestStartTime() {"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"        Time earliest \u003d new Time(\"23:59\");"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"        for (Lesson l : lessons) {"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"            if (l.getStartTime().compareTo(earliest) \u003c 0) {"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"                earliest \u003d l.getStartTime();"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"        return earliest;"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"    //// util methods"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"    public String toString() {"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"        return lessons.asObservableList().size() + \" lessons\";"},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"    public ObservableList\u003cLesson\u003e getSchedule() {"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"        return lessons.asObservableList();"},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":150,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":"                || (other instanceof Schedule // instanceof handles nulls"},{"lineNumber":154,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.lessons.equals(((Schedule) other).lessons));"},{"lineNumber":155,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":157,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"demitycho"},"content":"    public int hashCode() {"},{"lineNumber":159,"author":{"gitID":"demitycho"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":160,"author":{"gitID":"demitycho"},"content":"        return Objects.hash(lessons);"},{"lineNumber":161,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":161,"-":1}},{"path":"src/main/java/seedu/address/model/student/miscellaneousinfo/Allergies.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.model.student.miscellaneousinfo;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":" * Represents a Student\u0027s allergies component of his/her miscellaneous information."},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAllergies(String)}"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"public class Allergies {"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_ALLERGIES_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"            \"Student allergies can take any values, and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"     * The first character of the allergies must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    public static final String ALLERGIES_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    private final String value;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"     * Construct {@code Allergies} with initial default value"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public Allergies() {"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        value \u003d \"Not updated\";"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"     * Constructs an {@code Allergies} instance."},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"     * @param allergies A valid name string of allergies."},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"    public Allergies(String allergies) {"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(allergies);"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        checkArgument(isValidAllergies(allergies), MESSAGE_ALLERGIES_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        this.value \u003d allergies;"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"     * Returns true if a given string is a valid student allergies."},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    public static boolean isValidAllergies(String test) {"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        return test.matches(ALLERGIES_VALIDATION_REGEX);"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        return value;"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"                || (other instanceof Allergies // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 this.value.equals(((Allergies) other).value)); // state check"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":61}},{"path":"src/main/java/seedu/address/model/student/miscellaneousinfo/NextOfKinPhone.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.model.student.miscellaneousinfo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":" * Represents a Student\u0027s next of kin phone number component of his/her miscellaneous information."},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNextOfKinPhone(String)}"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"public class NextOfKinPhone {"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_NEXTOFKINPHONE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"            \"Next of kin phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    public static final String NEXTOFKINPHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"    private final String value;"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"     * Construct a {@code NextOfKinPhone} with initial default value"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    public NextOfKinPhone() {"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        value \u003d \"000\";"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"     * Constructs a {@code NextOFKinPhone}."},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"     * @param nextOfKinPhone A valid next of kin phone number."},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"    public NextOfKinPhone(String nextOfKinPhone) {"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(nextOfKinPhone);"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"        checkArgument(isValidNextOfKinPhone(nextOfKinPhone), MESSAGE_NEXTOFKINPHONE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        this.value \u003d nextOfKinPhone;"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"     * Returns true if a given string is a valid student allergies."},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"    public static boolean isValidNextOfKinPhone(String test) {"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"        return test.matches(NEXTOFKINPHONE_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        return value;"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"                || (other instanceof NextOfKinPhone // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 this.value.equals(((NextOfKinPhone) other).value)); // state check"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"//author"}],"authorContributionMap":{"samuelloh":52,"-":4}},{"path":"src/main/java/seedu/address/model/student/miscellaneousinfo/NextOfKinName.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.model.student.miscellaneousinfo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"//@author samuelloh"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":" * Represents a Student\u0027s next of kin\u0027s name component of his/her miscellaneous information."},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNextOfKinName(String)}"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"public class NextOfKinName {"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_NEXTOFKINNAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"            \"Student next of kin\u0027s name can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"     * The first character of the next of kin\u0027s name must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    public static final String NEXTOFKINNAME_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    private final String value;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"     * Construct a {@code NextOfKinName} with initial default value"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public NextOfKinName() {"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        value \u003d \"Not updated\";"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"     * Constructs a {@code NextOfKinName}."},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"     * @param nextOfKinName A valid next of kin name."},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"    public NextOfKinName(String nextOfKinName) {"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(nextOfKinName);"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        checkArgument(isValidNextOfKinName(nextOfKinName), MESSAGE_NEXTOFKINNAME_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        this.value \u003d nextOfKinName;"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"     * Returns true if a given string is a valid student allergies."},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    public static boolean isValidNextOfKinName(String test) {"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        return test.matches(NEXTOFKINNAME_VALIDATION_REGEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"                || (other instanceof NextOfKinName // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 this.value.equals(((NextOfKinName) other).value)); // state check"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"//@author"}],"authorContributionMap":{"samuelloh":47,"-":14}},{"path":"src/main/java/seedu/address/model/student/miscellaneousinfo/Remarks.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.model.student.miscellaneousinfo;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":" * Represents a Student\u0027s remarks component of his/her miscellaneous information."},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRemarks(String)}"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"public class Remarks {"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_REMARKS_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"            \"Student remarks can take any values, and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"     * The first character of the remarks must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    public static final String REMARKS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    private final String value;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"     * Construct a {@code Remarks} instance with initial default value."},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public Remarks() {"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        value \u003d \"No remarks\";"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"     * Constructs a {@code Remarks} instance ."},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"     * @param remarks A valid string of remarks."},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"    public Remarks(String remarks) {"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(remarks);"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        checkArgument(isValidRemarks(remarks), MESSAGE_REMARKS_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        this.value \u003d remarks;"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"     * Returns true if a given string is a valid student allergies."},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    public static boolean isValidRemarks(String test) {"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"        return test.matches(REMARKS_VALIDATION_REGEX);"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"                || (other instanceof Remarks // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 this.value.equals(((Remarks) other).value)); // state check"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"        return value;"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":61}},{"path":"src/main/java/seedu/address/model/student/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     * Returns true if a given string is a valid student phone number."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"-":50}},{"path":"src/main/java/seedu/address/model/student/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s email in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Student emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"     * Returns if a given string is a valid student email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":63}},{"path":"src/main/java/seedu/address/model/student/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"            \"Student addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"     * Returns true if a given string is a valid student address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * returns the url form of the address"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String urlstyle() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String modified \u003d value.replaceAll(\" \" , \"+\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return modified;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":3,"samuelloh":1,"-":62}},{"path":"src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.exceptions;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":" * Signals that the operation is unable to find the specified student."},{"lineNumber":5,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"public class StudentNotFoundException extends Exception {}"}],"authorContributionMap":{"yapni":6}},{"path":"src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.exceptions;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" * Signals that the operation will result in duplicate Student objects."},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"public class DuplicateStudentException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"    public DuplicateStudentException() {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"        super(\"Operation would result in duplicate students\");"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":11,"-":1}},{"path":"src/main/java/seedu/address/model/student/dashboard/exceptions/DuplicateMilestoneException.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard.exceptions;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Signals that the operation will result in duplicate Milestone objects."},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class DuplicateMilestoneException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    public DuplicateMilestoneException() {"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"        super(\"Operation will result in duplicate milestones\");"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":12,"-":1}},{"path":"src/main/java/seedu/address/model/student/dashboard/Dashboard.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s Dashboard"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class Dashboard {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"    private final UniqueMilestoneList milestoneList;"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"     * Constructs a {@code Dashboard}"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    public Dashboard() {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"        milestoneList \u003d new UniqueMilestoneList();"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"     * Constructs a {@code Dashboard}"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    public Dashboard(UniqueMilestoneList milestoneList) {"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        requireNonNull(milestoneList);"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"        this.milestoneList \u003d milestoneList;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    public UniqueMilestoneList getMilestoneList() {"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        return milestoneList;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":""},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Dashboard // instanceof handles null"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.milestoneList.equals(((Dashboard) obj).getMilestoneList()));"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        int index \u003d 1;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        builder.append(\"Milestones:\\n\");"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        for (Milestone milestone : milestoneList) {"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"            builder.append(index++)"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"                    .append(\". \")"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"                    .append(milestone)"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"                    .append(\"\\n\");"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"        return builder.toString();"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":""},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        return milestoneList.hashCode();"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":59,"-":1}},{"path":"src/main/java/seedu/address/model/student/miscellaneousinfo/ProfilePicturePath.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.model.student.miscellaneousinfo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":" * Represents a Student\u0027s profile picture\u0027s pathname in the address book."},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPath(String)}"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"public class ProfilePicturePath {"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_PICTURE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"            \"File URL must exist and have extensions of \u0027.jpg\u0027 or \u0027.png\u0027 only.\";"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"    public static final String DEFAULT_PROFILE_PICTURE \u003d"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"            \"data/view/profile_photo_placeholder.png\";"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    public final Path profilePicturePath;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    public ProfilePicturePath(String filePath) {"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(filePath);"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"        profilePicturePath \u003d Paths.get(filePath);"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"     * Checks if file extension is either \u0027jpg\u0027 or \u0027png\u0027"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"     * @param filePath"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"     * @return True if extensions are as above. False if otherwise"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"    public static boolean checkPictureExtension(String filePath) {"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"        String extension;"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        if (filePath.lastIndexOf(\".\") !\u003d -1 \u0026\u0026 filePath.lastIndexOf(\".\") !\u003d 0) {"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"            extension \u003d filePath.substring(filePath.lastIndexOf(\".\") + 1);"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"            return extension.equals(\"jpg\") || extension.equals(\"png\");"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":"        return false;"},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"     * Returns true if a given string is a valid file path with extensions either \u0027.jpg\u0027 or \u0027.png\u0027."},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    public static boolean isValidPath(String test) {"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        test \u003d test.replace(\u0027\\\\\u0027, \u0027/\u0027);"},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"        if (test.equals(ProfilePicturePath.DEFAULT_PROFILE_PICTURE)) {"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"        File testFile \u003d new File(test);"},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"        if (!testFile.exists()) {"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"        return ProfilePicturePath.checkPictureExtension(testFile.getPath());"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":"    public Path getProfilePicturePath() {"},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"        return profilePicturePath;"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"     * Returns the extension of the profile picture path."},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"    public String getExtension() {"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"        int extensionSeparator \u003d profilePicturePath.toString().lastIndexOf(\".\");"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"        return profilePicturePath.toString().substring(extensionSeparator);"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"        return profilePicturePath.toString();"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"                || (other instanceof ProfilePicturePath // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 this.profilePicturePath.equals(((ProfilePicturePath) other)"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"                .profilePicturePath)); // state check"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":86,"-":4}},{"path":"src/main/java/seedu/address/model/student/dashboard/exceptions/TaskNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard.exceptions;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":" * Signals that the operation is unable to find the specified task."},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"public class TaskNotFoundException extends Exception {}"}],"authorContributionMap":{"yapni":7}},{"path":"src/main/java/seedu/address/model/student/miscellaneousinfo/MiscellaneousInfo.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.model.student.miscellaneousinfo;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.model.student.miscellaneousinfo.Allergies.isValidAllergies;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.model.student.miscellaneousinfo.NextOfKinName.isValidNextOfKinName;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.model.student.miscellaneousinfo.NextOfKinPhone.isValidNextOfKinPhone;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.model.student.miscellaneousinfo.Remarks.isValidRemarks;"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":" * Represents a Student\u0027s miscellaneous information."},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMiscellaneousInfo(MiscellaneousInfo)}"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"public class MiscellaneousInfo {"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_MISCELLANEOUS_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"            \"Miscellaneous information should take in values according to the constraints of each of its individual\""},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"                    + \"components\";"},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    private final Allergies allergies;"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"    private final NextOfKinName nextOfKinName;"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    private final NextOfKinPhone nextOfKinPhone;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"    private final Remarks remarks;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"     * Constructs a {@code MiscellaneousInfo} object with initial default values"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    public MiscellaneousInfo() {"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"        this.allergies \u003d new Allergies();"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"        this.nextOfKinName \u003d new NextOfKinName();"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"        this.nextOfKinPhone \u003d new NextOfKinPhone();"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"        this.remarks \u003d new Remarks();"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"    public MiscellaneousInfo(Allergies allergies, NextOfKinName nextOfKinName,"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"                             NextOfKinPhone nextOfKinPhone, Remarks remarks) {"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"        this.allergies \u003d allergies;"},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"        this.nextOfKinName \u003d nextOfKinName;"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"        this.nextOfKinPhone \u003d nextOfKinPhone;"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        this.remarks \u003d remarks;"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"     * Returns true if a given string is a valid student allergies."},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    public static boolean isValidMiscellaneousInfo(MiscellaneousInfo test) {"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"        return isValidRemarks(test.remarks.toString()) \u0026\u0026 isValidNextOfKinPhone(test.nextOfKinPhone.toString())"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 isValidNextOfKinName(test.nextOfKinName.toString()) \u0026\u0026 isValidAllergies(test.allergies.toString());"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"samuelloh"},"content":"        return \"Allergies: \" + allergies.toString() +  \" \""},{"lineNumber":55,"author":{"gitID":"samuelloh"},"content":"                + \"Next of kin name: \" + nextOfKinName.toString() + \" \""},{"lineNumber":56,"author":{"gitID":"samuelloh"},"content":"                + \"Next of kin phone: \" + nextOfKinPhone.toString() + \" \""},{"lineNumber":57,"author":{"gitID":"samuelloh"},"content":"                + \"Remarks: \" + remarks.toString() + \" \";"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":60,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"samuelloh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"samuelloh"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":66,"author":{"gitID":"samuelloh"},"content":"        if (!(other instanceof MiscellaneousInfo)) {"},{"lineNumber":67,"author":{"gitID":"samuelloh"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"        MiscellaneousInfo otherMiscInfo \u003d (MiscellaneousInfo) other;"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"        return otherMiscInfo.allergies.equals(this.allergies)"},{"lineNumber":72,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 otherMiscInfo.nextOfKinPhone.equals(this.nextOfKinPhone)"},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 otherMiscInfo.nextOfKinName.equals(this.nextOfKinName)"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 otherMiscInfo.remarks.equals(this.remarks);"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":77,"author":{"gitID":"samuelloh"},"content":"    public Allergies getAllergies() {"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"        return allergies;"},{"lineNumber":79,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":81,"author":{"gitID":"samuelloh"},"content":"    public NextOfKinName getNextOfKinName() {"},{"lineNumber":82,"author":{"gitID":"samuelloh"},"content":"        return nextOfKinName;"},{"lineNumber":83,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":85,"author":{"gitID":"samuelloh"},"content":"    public NextOfKinPhone getNextOfKinPhone() {"},{"lineNumber":86,"author":{"gitID":"samuelloh"},"content":"        return nextOfKinPhone;"},{"lineNumber":87,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":"    public Remarks getRemarks() {"},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"        return remarks;"},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":94}},{"path":"src/main/java/seedu/address/model/student/dashboard/exceptions/MilestoneNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard.exceptions;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":" * Signals that the operation is unable to find the specified milestone."},{"lineNumber":6,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"public class MilestoneNotFoundException extends Exception {}"}],"authorContributionMap":{"yapni":7}},{"path":"src/main/java/seedu/address/model/student/dashboard/Progress.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":""},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":" * Represents a Milestone\u0027s progress"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" * Guarantees: details are present and not null, immutable."},{"lineNumber":14,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"public class Progress {"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":""},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_PROGRESS_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"            \"totalTasks must always be more than or equals to numCompletedTask\";"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"    private static final String PROGRESS_FORMAT_REGEX \u003d \"([0-9]+)\" + \"/\" + \"([0-9]+)\";"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":""},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    private static final Pattern progressFormatPattern \u003d Pattern.compile(PROGRESS_FORMAT_REGEX);"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    // Indexes of capturing group in the Progress Matcher\u0027s Pattern"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_NUM_COMPLETED \u003d 1;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_TOTAL_TASKS \u003d 2;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private final int totalTasks;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private final int numCompletedTasks;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    private final int progressInPercent;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    private final String value;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    public Progress() {"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"        totalTasks \u003d 0;"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"        numCompletedTasks \u003d 0;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        progressInPercent \u003d 0;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"        value \u003d \"0/0\";"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public Progress(int totalTasks, int numCompletedTasks) {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        checkArgument(isValidProgress(totalTasks, numCompletedTasks), MESSAGE_PROGRESS_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        this.totalTasks \u003d totalTasks;"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        this.numCompletedTasks \u003d numCompletedTasks;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        this.progressInPercent \u003d (totalTasks \u003d\u003d 0) ? 0 : (int) (((double) numCompletedTasks / totalTasks) * 100);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        this.value \u003d numCompletedTasks + \"/\" + totalTasks;"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    public Progress(String value) {"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"        requireNonNull(value);"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"        checkArgument(isValidProgress(value), MESSAGE_PROGRESS_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        String trimmedValue \u003d value.trim();"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        Matcher matcher \u003d progressFormatPattern.matcher(trimmedValue);"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        matcher.matches();"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":""},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        this.numCompletedTasks \u003d Integer.parseInt(matcher.group(GROUP_NUM_COMPLETED));"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        this.totalTasks \u003d Integer.parseInt(matcher.group(GROUP_TOTAL_TASKS));"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        this.progressInPercent \u003d (totalTasks \u003d\u003d 0) ? 0 : (int) (((double) numCompletedTasks / totalTasks) * 100);"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        this.value \u003d trimmedValue;"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":""},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"     * Returns if a given Progress attributes are valid"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    public static boolean isValidProgress(int totalTasks, int numCompletedTasks) {"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        return totalTasks \u003e\u003d 0 \u0026\u0026 numCompletedTasks \u003e\u003d 0 \u0026\u0026 totalTasks \u003e\u003d numCompletedTasks;"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":""},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"     * Returns if a given Progress attributes are valid"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    public static boolean isValidProgress(String value) {"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        requireNonNull(value);"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":""},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        Matcher matcher \u003d progressFormatPattern.matcher(value.trim());"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"        if (!matcher.matches()) {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":""},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        int numCompletedTasks \u003d Integer.parseInt(matcher.group(GROUP_NUM_COMPLETED));"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"        int totalTasks \u003d Integer.parseInt(matcher.group(GROUP_TOTAL_TASKS));"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        return isValidProgress(totalTasks, numCompletedTasks);"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    public int getTotalTasks() {"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"        return totalTasks;"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    public int getNumCompletedTasks() {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        return numCompletedTasks;"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":""},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    public int getProgressInPercent() {"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        return progressInPercent;"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":""},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"    public String getValue() {"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        return value;"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":""},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"        return obj \u003d\u003d this"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Progress"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.totalTasks \u003d\u003d ((Progress) obj).getTotalTasks()"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.numCompletedTasks \u003d\u003d ((Progress) obj).getNumCompletedTasks());"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":""},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        return progressInPercent + \"%\";"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":""},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        return Objects.hash(totalTasks, numCompletedTasks, progressInPercent);"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":120,"-":1}},{"path":"src/main/java/seedu/address/model/student/dashboard/exceptions/DuplicateTaskException.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard.exceptions;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Signals that the operation will result in duplicate Task objects."},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"public class DuplicateTaskException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"    public DuplicateTaskException() {"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"        super(\"Operation will result in duplicate tasks\");"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":12,"-":1}},{"path":"src/main/java/seedu/address/model/student/dashboard/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a task in a milestone"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":" * Guarantees: details are present and not null, immutable."},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"public class Task {"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":""},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"    private final String name;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    private final String description;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    private final boolean isCompleted;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    public Task(String name, String description) {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, description);"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        this.name \u003d name;"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        isCompleted \u003d false;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":""},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    public Task(String name, String description, boolean isCompleted) {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, description);"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"        this.name \u003d name;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"        this.isCompleted \u003d isCompleted;"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":""},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public String getName() {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        return name;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    public String getDescription() {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        return description;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public boolean isCompleted() {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        return isCompleted;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Task // instanceof checks null"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.name.equals(((Task) obj).getName())"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.description.equals(((Task) obj).getDescription()));"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"        builder.append(\"Name: \")"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"                .append(name)"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"                .append(\" ||\")"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"                .append(\" Desc: \")"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"                .append(description)"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"                .append(\" ||\")"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"                .append(\" Completed: \")"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"                .append(isCompleted);"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        return builder.toString();"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":64,"-":1}},{"path":"src/main/java/seedu/address/model/student/dashboard/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"yapni"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.text.ParseException;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import java.util.regex.Matcher;"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":""},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":" * Represents a date in a Student\u0027s Dashboard"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":" * Guarantees: immutable."},{"lineNumber":15,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"public class Date {"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date should be of the format DD/MM/YYYY hh:mm.\\n\""},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"            + \"The date should also be a valid day in the calendar.\\n\""},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"            + \"The time must be in 24-hour notation.\\n \""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"            + \"There must be a single space between the date and the time.\";"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":""},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"    // Regex for the date format"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"    private static final String DAY_PART_REGEX \u003d \"([0-9]{2})\";"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    private static final String MONTH_PART_REGEX \u003d \"([0-9]{2})\";"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private static final String YEAR_PART_REGEX \u003d \"([0-9]{4})\";"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private static final String HOUR_PART_REGEX \u003d \"([0-9]{2})\";"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private static final String MINUTE_PART_REGEX \u003d \"([0-9]{2})\";"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    private static final String DATE_SEPARATOR \u003d \"/\";"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"    private static final String TIME_SEPARATOR \u003d \":\";"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d DAY_PART_REGEX + DATE_SEPARATOR + MONTH_PART_REGEX"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"            + DATE_SEPARATOR + YEAR_PART_REGEX + \"\\\\s\" + HOUR_PART_REGEX + TIME_SEPARATOR + MINUTE_PART_REGEX;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":""},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    private static final Pattern dateFormatPattern \u003d Pattern.compile(DATE_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    // Indexes of capturing group in the Date Matcher\u0027s Pattern"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_DAY \u003d 1;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_MONTH \u003d 2;"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_YEAR \u003d 3;"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_HOUR \u003d 4;"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    private static final int GROUP_MINUTE \u003d 5;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":""},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"    private final String value;"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":""},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"    public Date(String date) {"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        requireNonNull(date);"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":""},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"        value \u003d trimmedDate;"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":""},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     * Returns if a given string is a valid date"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"     * @throws NullPointerException if input is null"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    public static boolean isValidDate(String input) {"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        requireNonNull(input);"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        /* Check if input matches the required regex pattern */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"        Matcher matcher \u003d dateFormatPattern.matcher(input.trim());"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        if (!matcher.matches()) {"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        int day \u003d Integer.parseInt(matcher.group(GROUP_DAY));"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"        int month \u003d Integer.parseInt(matcher.group(GROUP_MONTH));"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        int year \u003d Integer.parseInt(matcher.group(GROUP_YEAR));"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        int hour \u003d Integer.parseInt(matcher.group(GROUP_HOUR));"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        int min \u003d Integer.parseInt(matcher.group(GROUP_MINUTE));"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":""},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"        /* Check if the given date is a valid day in the calendar */"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd\" + DATE_SEPARATOR + \"MM\" + DATE_SEPARATOR + \"yyyy\");"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"        dateFormat.setLenient(false);"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            dateFormat.parse(day + DATE_SEPARATOR + month + DATE_SEPARATOR + year);"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        } catch (ParseException e) {"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"            return false;"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":""},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        /* Check if the given time is valid in the 24 hour format */"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        return (hour \u003e\u003d 0 \u0026\u0026 hour \u003c\u003d 23) \u0026\u0026 (min \u003e\u003d 0 \u0026\u0026 min \u003c\u003d 59);"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":""},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    public String getValue() {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        return value;"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":""},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"        return value;"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":""},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj // short circuit if same object"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Date"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.value.equals(((Date) obj).getValue()));"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":""},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        return value.hashCode();"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":104,"-":1}},{"path":"src/main/java/seedu/address/model/student/dashboard/Milestone.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"yapni"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"yapni"},"content":""},{"lineNumber":5,"author":{"gitID":"yapni"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"yapni"},"content":""},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * Represents a milestone in a Student\u0027s dashboard"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class Milestone {"},{"lineNumber":12,"author":{"gitID":"yapni"},"content":""},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"    private final Date dueDate;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"    private final UniqueTaskList taskList;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":"    private final Progress progress;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"    private final String description;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":""},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"    public Milestone(Date dueDate, String description) {"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(dueDate, description);"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":""},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":"        progress \u003d new Progress();"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"        taskList \u003d new UniqueTaskList();"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    public Milestone(Date dueDate, UniqueTaskList taskList, Progress progress, String description) {"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(dueDate, taskList, progress, description);"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":""},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"        this.progress \u003d progress;"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        this.description \u003d description;"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    public Date getDueDate() {"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"        return dueDate;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":""},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"    public UniqueTaskList getTaskList() {"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"        return taskList;"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":""},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"    public Progress getProgress() {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        return progress;"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":""},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    public String getDescription() {"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        return description;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":""},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"        return this \u003d\u003d obj"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"                || (obj instanceof Milestone"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.dueDate.equals(((Milestone) obj).getDueDate())"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.description.equals(((Milestone) obj).getDescription()));"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":""},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        int index \u003d 1;"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"        builder.append(\"Description: \")"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"                .append(description)"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"                .append(\" ||\")"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"                .append(\" Due Date: \")"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"                .append(dueDate)"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"                .append(\" ||\")"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"                .append(\" Progress: \")"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"                .append(progress)"},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"                .append(\"\\n\")"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"                .append(\"Tasks: \");"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        for (Task task : taskList) {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            builder.append(index++)"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"                    .append(\" - \")"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"                    .append(task)"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"                    .append(\"\\n\");"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        return builder.toString();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        return Objects.hash(dueDate, taskList, progress, description);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":87,"-":1}},{"path":"src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yapni"},"content":" * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"    public boolean test(Student student) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":5,"-":26}},{"path":"src/main/java/seedu/address/model/student/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":" * Represents a Student\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"            \"Student names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"     * Returns true if a given string is a valid student name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":4,"-":55}},{"path":"src/main/java/seedu/address/model/student/UniqueKey.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.util.Random;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" * Represents a Student\u0027s UniqueKey in the address book. Generated by {@code UniqueStudentList.add()} method"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":" * Transforms the addressbook and schedule into relational database, related by this Uniquekey value"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidUniqueKey(String)}"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"public class UniqueKey {"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_UNIQUE_KEY_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"            \"UniqueKey is a 6 digit hexadecimal string\";"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public static final String UNIQUE_KEY_VALIDATION_REGEX \u003d \"^(?:[0-9a-fA-F]){6}$\";"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    public final String uniqueKey;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"     * @param uniqueKey A valid phone number."},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    public UniqueKey(String uniqueKey) {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"        requireNonNull(uniqueKey);"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        checkArgument(isValidUniqueKey(uniqueKey), MESSAGE_UNIQUE_KEY_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"     * Generates a random hexadecimal string of length 6"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    public static UniqueKey generateRandomKey() {"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        Random random \u003d new Random();"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        int nextInt;"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        String finalStringKey \u003d \"\";"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"            nextInt \u003d random.nextInt(16);"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"            finalStringKey \u003d finalStringKey + Integer.toHexString(nextInt);"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        return new UniqueKey(finalStringKey);"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"     * Returns true if a given string is a valid student phone number."},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    public static boolean isValidUniqueKey(String test) {"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        return test.matches(UNIQUE_KEY_VALIDATION_REGEX);"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        return uniqueKey;"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"                || (other instanceof UniqueKey // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.uniqueKey.equals(((UniqueKey) other).uniqueKey)); // state check"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        return uniqueKey.hashCode();"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":67,"-":3}},{"path":"src/main/java/seedu/address/model/RequiredStudentIndex.java","lines":[{"lineNumber":1,"author":{"gitID":"samuelloh"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":3,"author":{"gitID":"samuelloh"},"content":"import javax.xml.bind.annotation.XmlAccessType;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import javax.xml.bind.annotation.XmlAccessorType;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":" * The index of the student whose info is being required to be displayed at the moment."},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"@XmlRootElement"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"@XmlAccessorType(XmlAccessType.FIELD)"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"public class RequiredStudentIndex {"},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"    private int requiredStudentIndex;"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"     * Constructs a RequiredStudentIndex."},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"    public RequiredStudentIndex() {}"},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"    public RequiredStudentIndex(int requiredStudentIndex) {"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"        this.requiredStudentIndex \u003d requiredStudentIndex;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"    public int getRequiredStudentIndex() {"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"        return requiredStudentIndex;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"samuelloh":28,"-":1}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    private String addressBookName \u003d \"CodeducatorAddressBook\";"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    private String scheduleFilePath \u003d \"data/schedule.xml\";"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    private String scheduleName \u003d \"CodeducatorScheduler\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    public String getScheduleFilePath() {"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"        return scheduleFilePath;"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    public void setScheduleFilePath(String scheduleFilePath) {"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"        this.scheduleFilePath \u003d scheduleFilePath;"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    public String getScheduleName() {"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        return scheduleName;"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    public void setScheduleName(String scheduleName) {"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        this.scheduleName \u003d scheduleName;"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"demitycho":19,"-":77}},{"path":"src/main/java/seedu/address/model/student/UniqueStudentList.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" * A list of students that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" *"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"yapni"},"content":" *"},{"lineNumber":21,"author":{"gitID":"yapni"},"content":" * @see Student#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":"public class UniqueStudentList implements Iterable\u003cStudent\u003e {"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":""},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"     * Returns true if the list contains an equivalent student as the given argument."},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"    public boolean contains(Student toCheck) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"     * Adds a student to the list."},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if the student to add is a duplicate of an existing student in the list."},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    public void add(Student toAdd) throws DuplicateStudentException {"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"            throw new DuplicateStudentException();"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        toAdd.setKey(generateValidUniqueKey());"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"     * Replaces the student {@code target} in the list with {@code editedStudent}."},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if the replacement is equivalent to another existing student in the list."},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"    public void setStudent(Student target, Student editedStudent)"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            throws DuplicateStudentException, StudentNotFoundException {"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        requireNonNull(editedStudent);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":""},{"lineNumber":65,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        if (!target.equals(editedStudent) \u0026\u0026 internalList.contains(editedStudent)) {"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"            throw new DuplicateStudentException();"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":""},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"        internalList.set(index, editedStudent);"},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":""},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"     * Removes the equivalent student from the list."},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if no such student could be found in the list."},{"lineNumber":78,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"    public boolean remove(Student toRemove) throws StudentNotFoundException {"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        requireNonNull(toRemove);"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"        final boolean studentFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        if (!studentFoundAndDeleted) {"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        return studentFoundAndDeleted;"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"    public void setStudents(UniqueStudentList replacement) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"    public void setStudents(List\u003cStudent\u003e students) throws DuplicateStudentException {"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(students);"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        final UniqueStudentList replacement \u003d new UniqueStudentList();"},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"        for (final Student student : students) {"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"            replacement.add(student);"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        setStudents(replacement);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cStudent\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"    //@@author demitycho"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"     * Finds a unique key not in the {@code internalList}"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"     * @return A Unique length 6 hexadecimal string"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"    private UniqueKey generateValidUniqueKey() {"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"        UniqueKey test \u003d UniqueKey.generateRandomKey();"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"        while (!isUnique(test)) {"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"            test \u003d UniqueKey.generateRandomKey();"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"        return test;"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"     * Tests if the input {@code UniqueKey} is unique in the list"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"     * @return true if unique, false if not unique"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"    private boolean isUnique(UniqueKey test) {"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"        for (Student testStudent : internalList) {"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"            if (test.equals(testStudent.getUniqueKey())) {"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"                return false;"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"        return true;"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"     * Finds a student identified by UniqueKey, or throws a StudentNotFoundException"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"     * @return Student"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"     * @throws StudentNotFoundException"},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"    public Student findKey(UniqueKey key) throws StudentNotFoundException {"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"        boolean found \u003d false;"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"        Student foundStudent \u003d null;"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"        for (Student student : internalList) {"},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":"            if (key.equals(student.getUniqueKey())) {"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"                return student;"},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"        if (!found) {"},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"demitycho"},"content":"        return foundStudent;"},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":"    //@@author"},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":154,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"yapni"},"content":"    public Iterator\u003cStudent\u003e iterator() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":162,"author":{"gitID":"yapni"},"content":"                || (other instanceof UniqueStudentList // instanceof handles nulls"},{"lineNumber":163,"author":{"gitID":"yapni"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueStudentList) other).internalList));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":77,"samuelloh":2,"demitycho":47,"-":44}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.UniqueStudentList;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private final UniqueStudentList students;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"        students \u003d new UniqueStudentList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"     * Creates an AddressBook using the Students and Tags in the {@code toBeCopied}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public void setStudents(List\u003cStudent\u003e students) throws DuplicateStudentException {"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        this.students.setStudents(students);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        List\u003cStudent\u003e syncedStudentList \u003d newData.getStudentList().stream()"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"            setStudents(syncedStudentList);"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException e) {"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate students\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"    //// student-level operations"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":"     * Adds a student to the address book."},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"     * Also checks the new student\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"     * and updates the Tag objects in the student to point to those in {@link #tags}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if an equivalent student already exists."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    public void addStudent(Student p) throws DuplicateStudentException {"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":"        Student student \u003d syncWithMasterTagList(p);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any student"},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"        // in the student list."},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"        students.add(student);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"     * Replaces the given student {@code target} in the list with {@code editedStudent}."},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedStudent}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if updating the student\u0027s details causes the student to be equivalent to"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"     *      another existing student in the list."},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"     * @see #syncWithMasterTagList(Student)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"    public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"            throws DuplicateStudentException, StudentNotFoundException {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        requireNonNull(editedStudent);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        Student syncedEditedStudent \u003d syncWithMasterTagList(editedStudent);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any student"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        // in the student list."},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"        students.setStudent(target, syncedEditedStudent);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        removeUnusedTags();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Student} in this {@code AddressBook}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void removeUnusedTags() {"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e tagsInStudents \u003d students.asObservableList().stream()"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"                .map(Student::getTags)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .flatMap(Set::stream)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        tags.setTags(tagsInStudents);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"yapni"},"content":"     *  Updates the master tag list to include tags in {@code student} that are not in the list."},{"lineNumber":132,"author":{"gitID":"yapni"},"content":"     *  @return a copy of this {@code student} such that every tag in this student points to a Tag object in the master"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"yapni"},"content":"    private Student syncWithMasterTagList(Student student) {"},{"lineNumber":136,"author":{"gitID":"yapni"},"content":"        final UniqueTagList studentTags \u003d new UniqueTagList(student.getTags());"},{"lineNumber":137,"author":{"gitID":"yapni"},"content":"        tags.mergeFrom(studentTags);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":140,"author":{"gitID":"yapni"},"content":"        // used for checking student tag references"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"yapni"},"content":"        // Rebuild the list of student tags to point to the relevant tags in the master tag list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":146,"author":{"gitID":"yapni"},"content":"        studentTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":147,"author":{"gitID":"yapni"},"content":"        return new Student("},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"                student.getUniqueKey(), student.getName(), student.getPhone(), student.getEmail(),"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"                student.getAddress(), student.getProgrammingLanguage(), correctTagReferences,"},{"lineNumber":150,"author":{"gitID":"samuelloh"},"content":"                student.getFavourite(), student.getDashboard(), student.getProfilePicturePath(),"},{"lineNumber":151,"author":{"gitID":"samuelloh"},"content":"                student.getMiscellaneousInfo());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":156,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"yapni"},"content":"    public boolean removeStudent(Student key) throws StudentNotFoundException {"},{"lineNumber":159,"author":{"gitID":"yapni"},"content":"        if (students.remove(key)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":162,"author":{"gitID":"yapni"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"     * Checks for the existence of {@code key} in this {@code AddressBook}."},{"lineNumber":168,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"samuelloh"},"content":"    public boolean checkForStudentInAdressBook(Student key) throws StudentNotFoundException {"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"        if (students.contains(key)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":174,"author":{"gitID":"yapni"},"content":"            throw new StudentNotFoundException();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"yapni"},"content":"     * Removes {@code tag} from {@code student} in this {@code AddressBook}."},{"lineNumber":186,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if the {@code student} is not in this {@code AddressBook}."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"yapni"},"content":"    private void removeTagFromStudent(Tag tag, Student student) throws StudentNotFoundException {"},{"lineNumber":189,"author":{"gitID":"yapni"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(student.getTags());"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"yapni"},"content":"        Student newStudent \u003d"},{"lineNumber":196,"author":{"gitID":"yapni"},"content":"                new Student(student.getName(), student.getPhone(), student.getEmail(), student.getAddress(),"},{"lineNumber":197,"author":{"gitID":"samuelloh"},"content":"                        student.getProgrammingLanguage(), newTags, student.getFavourite(), student.getDashboard(),"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"                        student.getProfilePicturePath());"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":201,"author":{"gitID":"yapni"},"content":"            updateStudent(student, newStudent);"},{"lineNumber":202,"author":{"gitID":"yapni"},"content":"        } catch (DuplicateStudentException dpe) {"},{"lineNumber":203,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Modifying a student\u0027s tags only should not result in a duplicate. \""},{"lineNumber":204,"author":{"gitID":"yapni"},"content":"                    + \"See Student#equals(Object).\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"yapni"},"content":"     * Removes {@code tag} from all students in this {@code AddressBook}."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"yapni"},"content":"            for (Student student : students) {"},{"lineNumber":214,"author":{"gitID":"yapni"},"content":"                removeTagFromStudent(tag, student);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":216,"author":{"gitID":"yapni"},"content":"        } catch (StudentNotFoundException pnfe) {"},{"lineNumber":217,"author":{"gitID":"yapni"},"content":"            throw new AssertionError(\"Impossible: original student is obtained from the address book.\");"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"demitycho"},"content":"     * Find a student by the UniqueKey field"},{"lineNumber":223,"author":{"gitID":"demitycho"},"content":"     * @param key"},{"lineNumber":224,"author":{"gitID":"demitycho"},"content":"     * @return Student object matching"},{"lineNumber":225,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":227,"author":{"gitID":"demitycho"},"content":"    public Student findStudentByKey(UniqueKey key) {"},{"lineNumber":228,"author":{"gitID":"demitycho"},"content":"        Student student;"},{"lineNumber":229,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":230,"author":{"gitID":"demitycho"},"content":"            student \u003d students.findKey(key);"},{"lineNumber":231,"author":{"gitID":"demitycho"},"content":"        } catch (StudentNotFoundException snfe) {"},{"lineNumber":232,"author":{"gitID":"demitycho"},"content":"            throw new AssertionError(\"Student should be in the database\");"},{"lineNumber":233,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"demitycho"},"content":"        return student;"},{"lineNumber":235,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"demitycho"},"content":"     * TODO Delete later"},{"lineNumber":239,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"demitycho"},"content":"    public void printAll() {"},{"lineNumber":241,"author":{"gitID":"demitycho"},"content":"        for (Student s : students) {"},{"lineNumber":242,"author":{"gitID":"demitycho"},"content":"            System.out.println(s.toStrings());"},{"lineNumber":243,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"demitycho"},"content":"    //// util methods"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":248,"author":{"gitID":"yapni"},"content":"        return students.asObservableList().size() + \" students, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":253,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cStudent\u003e getStudentList() {"},{"lineNumber":254,"author":{"gitID":"yapni"},"content":"        return students.asObservableList();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":266,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.students.equals(((AddressBook) other).students)"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":273,"author":{"gitID":"yapni"},"content":"        return Objects.hash(students, tags);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":75,"samuelloh":8,"demitycho":27,"-":165}},{"path":"src/main/java/seedu/address/model/ReadOnlySchedule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" * Unmodifiable view of a schedule"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"public interface ReadOnlySchedule {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"     * Returns an unmodifiable view of the schedule."},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"     * This list will not contain any duplicate lessons or lessons that clash."},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    ObservableList\u003cLesson\u003e getSchedule();"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    Time getEarliestStartTime();"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    Time getLatestEndTime();"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":18,"-":3}},{"path":"src/main/java/seedu/address/model/student/dashboard/UniqueTaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateTaskException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.TaskNotFoundException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" *"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"yapni"},"content":" *"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":" * @see Task#equals(Object)"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     * Returns true if the list contains an equivalent task as the given argument."},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     * Adds a task to the list."},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateTaskException if the Task to add is a duplicate of an existing Task in the list."},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public void add(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"     * Returns the task at the specific {@code index} in the list"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"     * @throws IndexOutOfBoundsException if the index provided is out of range"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public Task get(Index index) throws IndexOutOfBoundsException {"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        if (index.getZeroBased() \u003c 0 || index.getZeroBased() \u003e\u003d internalList.size()) {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        return internalList.get(index.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"     * Returns the size of the internal list"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    public int size() {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        return internalList.size();"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateTaskException if the replacement is equivalent to another existing task in the list."},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    public void setTask(Task target, Task editedTask)"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(target, editedTask);"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":""},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        if (!target.equals(editedTask) \u0026\u0026 contains(editedTask)) {"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":""},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"     * @throws TaskNotFoundException if no such task could be found in the list."},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    public boolean remove(Task toRemove) throws TaskNotFoundException {"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        requireNonNull(toRemove);"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        if (!taskFoundAndDeleted) {"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        return taskFoundAndDeleted;"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cTask\u003e asObservableList() {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":""},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":""},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        return obj \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"                || (obj instanceof UniqueTaskList // instanceof handles null"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTaskList) obj).asObservableList()));"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":""},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        return internalList.hashCode();"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":121,"-":7}},{"path":"src/main/java/seedu/address/model/student/dashboard/UniqueMilestoneList.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student.dashboard;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yapni"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"yapni"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"yapni"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.DuplicateMilestoneException;"},{"lineNumber":14,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.exceptions.MilestoneNotFoundException;"},{"lineNumber":15,"author":{"gitID":"yapni"},"content":""},{"lineNumber":16,"author":{"gitID":"yapni"},"content":"//@@author yapni"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yapni"},"content":" * A list of milestones that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"yapni"},"content":" *"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"yapni"},"content":" *"},{"lineNumber":22,"author":{"gitID":"yapni"},"content":" * @see Milestone#equals(Object)"},{"lineNumber":23,"author":{"gitID":"yapni"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"yapni"},"content":" */"},{"lineNumber":25,"author":{"gitID":"yapni"},"content":"public class UniqueMilestoneList implements Iterable\u003cMilestone\u003e {"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":""},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private final ObservableList\u003cMilestone\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":""},{"lineNumber":29,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yapni"},"content":"     * Returns true if the list contains an equivalent milestone as the given argument."},{"lineNumber":31,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"yapni"},"content":"    public boolean contains(Milestone toCheck) {"},{"lineNumber":33,"author":{"gitID":"yapni"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"yapni"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yapni"},"content":""},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"     * Adds a milestone to the list."},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateMilestoneException if the milestone to add is a duplicate of an existing milestone in the list."},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    public void add(Milestone toAdd) throws DuplicateMilestoneException {"},{"lineNumber":43,"author":{"gitID":"yapni"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"yapni"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"            throw new DuplicateMilestoneException();"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":""},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"     * Returns the milestone at the specific {@code index} in the list"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":"     * @throws IndexOutOfBoundsException if the index provided is out of range"},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    public Milestone get(Index index) throws IndexOutOfBoundsException {"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"        if (index.getZeroBased() \u003c 0 || index.getZeroBased() \u003e\u003d internalList.size()) {"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"yapni"},"content":"        return internalList.get(index.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":""},{"lineNumber":62,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"     * Returns the size of the internal list"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"yapni"},"content":"    public int size() {"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        return internalList.size();"},{"lineNumber":67,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":""},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"yapni"},"content":"     * Replaces the milestone {@code target} in the list with {@code editedMilestone}."},{"lineNumber":71,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateMilestoneException if the replacement is equivalent to another existing milestone in the list."},{"lineNumber":73,"author":{"gitID":"yapni"},"content":"     * @throws MilestoneNotFoundException if {@code target} could not be found in the list."},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"yapni"},"content":"    public void setMilestone(Milestone target, Milestone editedMilestone)"},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"            throws DuplicateMilestoneException, MilestoneNotFoundException {"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(target, editedMilestone);"},{"lineNumber":78,"author":{"gitID":"yapni"},"content":""},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":80,"author":{"gitID":"yapni"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":81,"author":{"gitID":"yapni"},"content":"            throw new MilestoneNotFoundException();"},{"lineNumber":82,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"yapni"},"content":""},{"lineNumber":84,"author":{"gitID":"yapni"},"content":"        if (!target.equals(editedMilestone) \u0026\u0026 contains(editedMilestone)) {"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"            throw new DuplicateMilestoneException();"},{"lineNumber":86,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":""},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        internalList.set(index, editedMilestone);"},{"lineNumber":89,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yapni"},"content":""},{"lineNumber":91,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"yapni"},"content":"     * Removes the equivalent milestone from the list."},{"lineNumber":93,"author":{"gitID":"yapni"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"yapni"},"content":"     * @throws MilestoneNotFoundException if no such milestone could be found in the list."},{"lineNumber":95,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"    public boolean remove(Milestone toRemove) throws MilestoneNotFoundException {"},{"lineNumber":97,"author":{"gitID":"yapni"},"content":"        requireNonNull(toRemove);"},{"lineNumber":98,"author":{"gitID":"yapni"},"content":"        final boolean milestoneFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        if (!milestoneFoundAndDeleted) {"},{"lineNumber":100,"author":{"gitID":"yapni"},"content":"            throw new MilestoneNotFoundException();"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        return milestoneFoundAndDeleted;"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yapni"},"content":""},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"yapni"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cMilestone\u003e asObservableList() {"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":""},{"lineNumber":112,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"    public Iterator\u003cMilestone\u003e iterator() {"},{"lineNumber":114,"author":{"gitID":"yapni"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"yapni"},"content":""},{"lineNumber":117,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":119,"author":{"gitID":"yapni"},"content":"        return obj \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"yapni"},"content":"            || (obj instanceof UniqueMilestoneList // instanceof handles null"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"                    \u0026\u0026 this.internalList.equals(((UniqueMilestoneList) obj).asObservableList()));"},{"lineNumber":122,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"yapni"},"content":""},{"lineNumber":124,"author":{"gitID":"yapni"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"yapni"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"yapni"},"content":"        return internalList.hashCode();"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yapni"},"content":"}"}],"authorContributionMap":{"yapni":121,"-":7}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"samuelloh"},"content":"import static seedu.address.commons.exceptions.StorageFileMissingException.STORAGE_FILE_MISSING;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.util.ServiceException;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.events.model.ScheduleChangedEvent;"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.model.StudentInfoChangedEvent;"},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.model.StudentInfoDisplayEvent;"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.storage.ProfilePictureChangeEvent;"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.events.storage.RequiredStudentIndexChangeEvent;"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.exceptions.StorageFileMissingException;"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"import seedu.address.external.GServiceManager;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"import seedu.address.external.exceptions.CredentialsException;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":37,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":43,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    private final Schedule schedule;"},{"lineNumber":50,"author":{"gitID":"yapni"},"content":"    private final FilteredList\u003cStudent\u003e filteredStudents;"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    private final GServiceManager gServiceManager;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs, ReadOnlySchedule schedule) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        this.schedule \u003d new Schedule(schedule);"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        this.gServiceManager \u003d new GServiceManager();"},{"lineNumber":64,"author":{"gitID":"yapni"},"content":"        filteredStudents \u003d new FilteredList\u003c\u003e(this.addressBook.getStudentList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        this(new AddressBook(), new UserPrefs(), new Schedule());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"    public void resetData(ReadOnlyAddressBook newData, ReadOnlySchedule newSchedule) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"        schedule.resetData(newSchedule);"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"        indicateStudentInfoChanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"        indicateScheduleChanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"    public synchronized void deleteStudent(Student target)"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"            throws InvalidLessonTimeSlotException, StudentNotFoundException,"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"            DuplicateLessonException, LessonNotFoundException {"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        schedule.removeStudentLessons(target);"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"        indicateScheduleChanged();"},{"lineNumber":96,"author":{"gitID":"yapni"},"content":"        addressBook.removeStudent(target);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"yapni"},"content":"    public synchronized void addStudent(Student student) throws DuplicateStudentException {"},{"lineNumber":102,"author":{"gitID":"yapni"},"content":"        addressBook.addStudent(student);"},{"lineNumber":103,"author":{"gitID":"yapni"},"content":"        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"yapni"},"content":"    public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":110,"author":{"gitID":"yapni"},"content":"            throws DuplicateStudentException, StudentNotFoundException {"},{"lineNumber":111,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(target, editedStudent);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"yapni"},"content":"        addressBook.updateStudent(target, editedStudent);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"        indicateStudentInfoChanged();"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"        indicateScheduleChanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yapni"},"content":""},{"lineNumber":125,"content":"    //@@author"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"    public void addLesson(Student studentToAddLesson, Day day, Time startTime, Time endTime)"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"            throws DuplicateLessonException, StudentNotFoundException, InvalidLessonTimeSlotException {"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(studentToAddLesson, day, startTime, endTime);"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"        UniqueKey studentKey \u003d studentToAddLesson.getUniqueKey();"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"        Lesson newLesson \u003d new Lesson(studentKey, day, startTime, endTime);"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"        schedule.addLesson(newLesson);"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"        indicateScheduleChanged();"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"    private void indicateScheduleChanged() {"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"        raise(new ScheduleChangedEvent(schedule, addressBook));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"     * Removes the {@code target} from schedule"},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":"     * @param target"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"    public synchronized void deleteLesson(Lesson target) throws LessonNotFoundException {"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"        schedule.removeLesson(target);"},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"        indicateScheduleChanged();"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":"    public ReadOnlySchedule getSchedule() {"},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":"        return schedule;"},{"lineNumber":154,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":"    //@@author samuelloh"},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":"     * Displays Student details on a browser panel in the UI"},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":"     * @param target"},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":"     * @throws StudentNotFoundException"},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"    public void displayStudentDetailsOnBrowserPanel(Student target) throws StudentNotFoundException,"},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"            StorageFileMissingException {"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"        addressBook.checkForStudentInAdressBook(target);"},{"lineNumber":165,"author":{"gitID":"samuelloh"},"content":"        checkIfStorageFileExists();"},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"        indicateRequiredStudentIndexChange(filteredStudents.indexOf(target));"},{"lineNumber":167,"author":{"gitID":"samuelloh"},"content":"        indicateBrowserPanelToDisplayStudent(target);"},{"lineNumber":168,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":170,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"samuelloh"},"content":"     * Checks if the xml file containing student\u0027s data exists."},{"lineNumber":172,"author":{"gitID":"samuelloh"},"content":"     * @throws StorageFileMissingException"},{"lineNumber":173,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"samuelloh"},"content":"    private void checkIfStorageFileExists() throws StorageFileMissingException {"},{"lineNumber":175,"author":{"gitID":"samuelloh"},"content":"        if (FileUtil.isFileExists(new File(\"data/addressBook.xml\"))) {"},{"lineNumber":176,"author":{"gitID":"samuelloh"},"content":"            return;"},{"lineNumber":177,"author":{"gitID":"samuelloh"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":"        throw new StorageFileMissingException(STORAGE_FILE_MISSING);"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":180,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":"    /** Raises an event to indicate that real xml data is required for moreInfo to function */"},{"lineNumber":183,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":"    /** Raises an event to indicate Browser Panel display changed to display student\u0027s information */"},{"lineNumber":185,"author":{"gitID":"samuelloh"},"content":"    private void indicateBrowserPanelToDisplayStudent(Student target) {"},{"lineNumber":186,"author":{"gitID":"samuelloh"},"content":"        raise(new StudentInfoDisplayEvent(target));"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":189,"author":{"gitID":"samuelloh"},"content":"    /** Raises an event to indicate a student\u0027s information has changed*/"},{"lineNumber":190,"author":{"gitID":"samuelloh"},"content":"    private void indicateStudentInfoChanged() {"},{"lineNumber":191,"author":{"gitID":"samuelloh"},"content":"        raise(new StudentInfoChangedEvent());"},{"lineNumber":192,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":194,"author":{"gitID":"samuelloh"},"content":"    /** Raises an event to indicate an update of the student index required at the moment in storage */"},{"lineNumber":195,"author":{"gitID":"samuelloh"},"content":"    private void indicateRequiredStudentIndexChange(int studentIndex) {"},{"lineNumber":196,"author":{"gitID":"samuelloh"},"content":"        raise(new RequiredStudentIndexChangeEvent(studentIndex));"},{"lineNumber":197,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":199,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":200,"author":{"gitID":"samuelloh"},"content":"    public void updateProfilePicture (Student target, Student editedStudent, Student finalEditedStudent)"},{"lineNumber":201,"author":{"gitID":"samuelloh"},"content":"            throws DuplicateStudentException, StudentNotFoundException {"},{"lineNumber":202,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":203,"author":{"gitID":"samuelloh"},"content":"        requireAllNonNull(target, editedStudent);"},{"lineNumber":204,"author":{"gitID":"samuelloh"},"content":"        addressBook.updateStudent(target, editedStudent);"},{"lineNumber":205,"author":{"gitID":"samuelloh"},"content":"        indicateProfilePictureChange(editedStudent);"},{"lineNumber":206,"author":{"gitID":"samuelloh"},"content":"        addressBook.updateStudent(editedStudent, finalEditedStudent);"},{"lineNumber":207,"author":{"gitID":"samuelloh"},"content":"        indicateAddressBookChanged();"},{"lineNumber":208,"author":{"gitID":"samuelloh"},"content":"        indicateStudentInfoChanged();"},{"lineNumber":209,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":210,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":212,"author":{"gitID":"samuelloh"},"content":"    /** Raises an event to indicate a student\u0027s profile picture has been changed*/"},{"lineNumber":213,"author":{"gitID":"samuelloh"},"content":"    private void indicateProfilePictureChange(Student target) {"},{"lineNumber":214,"author":{"gitID":"samuelloh"},"content":"        raise(new ProfilePictureChangeEvent(target));"},{"lineNumber":215,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"samuelloh"},"content":"    //@@author"},{"lineNumber":217,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":218,"author":{"gitID":"yapni"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"yapni"},"content":"     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"yapni"},"content":"    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"},{"lineNumber":226,"author":{"gitID":"yapni"},"content":"        return FXCollections.unmodifiableObservableList(filteredStudents);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"yapni"},"content":"    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":232,"author":{"gitID":"yapni"},"content":"        filteredStudents.setPredicate(predicate);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"demitycho"},"content":"    //@@author demitycho"},{"lineNumber":236,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":237,"author":{"gitID":"demitycho"},"content":"    public void loginGoogleAccount() throws CredentialsException, IOException {"},{"lineNumber":238,"author":{"gitID":"demitycho"},"content":"        this.gServiceManager.login();"},{"lineNumber":239,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":241,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":242,"author":{"gitID":"demitycho"},"content":"    public void logoutGoogleAccount() throws CredentialsException {"},{"lineNumber":243,"author":{"gitID":"demitycho"},"content":"        this.gServiceManager.logout();"},{"lineNumber":244,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":246,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"demitycho"},"content":"    public void synchronize() throws ServiceException, IOException {"},{"lineNumber":248,"author":{"gitID":"demitycho"},"content":"        this.gServiceManager.synchronize(addressBook, schedule);"},{"lineNumber":249,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"demitycho"},"content":"    //@@author"},{"lineNumber":251,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":267,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"yapni":21,"samuelloh":74,"demitycho":74,"-":100}},{"path":"src/main/java/seedu/address/model/programminglanguage/ProgrammingLanguage.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.programminglanguage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"samuelloh"},"content":"//@@author samuelloh"},{"lineNumber":6,"author":{"gitID":"samuelloh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"samuelloh"},"content":" * Represents a Student\u0027s programming language in the address book."},{"lineNumber":8,"author":{"gitID":"samuelloh"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidProgrammingLanguage(String)}"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":" */"},{"lineNumber":10,"author":{"gitID":"samuelloh"},"content":"public class ProgrammingLanguage {"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"    public static final String MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS \u003d \"Programming language should be a visible \""},{"lineNumber":13,"author":{"gitID":"samuelloh"},"content":"            + \"character\";"},{"lineNumber":14,"author":{"gitID":"samuelloh"},"content":"    public static final String PROGRAMMING_LANGUAGE_VALIDATION_REGEX \u003d \"\\\\p{Print}+\";"},{"lineNumber":15,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":16,"author":{"gitID":"samuelloh"},"content":"    public final String programmingLanguage;"},{"lineNumber":17,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":18,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"samuelloh"},"content":"     * Constructs a {@code programminglanguage}."},{"lineNumber":20,"author":{"gitID":"samuelloh"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"samuelloh"},"content":"     * Returns true if a given string is a valid programmingLanguage."},{"lineNumber":22,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"samuelloh"},"content":"    public ProgrammingLanguage(String programmingLanguage) {"},{"lineNumber":24,"author":{"gitID":"samuelloh"},"content":"        requireNonNull(programmingLanguage);"},{"lineNumber":25,"author":{"gitID":"samuelloh"},"content":"        checkArgument(isValidProgrammingLanguage(programmingLanguage), MESSAGE_PROGRAMMING_LANGUAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"samuelloh"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":27,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":29,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"samuelloh"},"content":"     * @param test"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"     * @return true if a given string is a valid programmingLanguage"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"samuelloh"},"content":"    public static boolean isValidProgrammingLanguage(String test) {"},{"lineNumber":34,"author":{"gitID":"samuelloh"},"content":"        return test.matches(PROGRAMMING_LANGUAGE_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":37,"author":{"gitID":"samuelloh"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"samuelloh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"samuelloh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"samuelloh"},"content":"                || (other instanceof ProgrammingLanguage // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 this.programmingLanguage.equals(((ProgrammingLanguage) other).programmingLanguage)); // state check"},{"lineNumber":42,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":44,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"samuelloh"},"content":"     * Format state as text for viewing."},{"lineNumber":46,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"samuelloh"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"samuelloh"},"content":"        return programmingLanguage;"},{"lineNumber":49,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":52,"author":{"gitID":"samuelloh"},"content":"}"},{"lineNumber":53,"author":{"gitID":"samuelloh"},"content":"//@@author"}],"authorContributionMap":{"yapni":1,"samuelloh":49,"-":3}},{"path":"src/main/java/seedu/address/model/student/Student.java","lines":[{"lineNumber":1,"author":{"gitID":"yapni"},"content":"package seedu.address.model.student;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yapni"},"content":"import seedu.address.model.programminglanguage.ProgrammingLanguage;"},{"lineNumber":10,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.dashboard.Dashboard;"},{"lineNumber":11,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.MiscellaneousInfo;"},{"lineNumber":12,"author":{"gitID":"samuelloh"},"content":"import seedu.address.model.student.miscellaneousinfo.ProfilePicturePath;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":" * Represents a Student in the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yapni"},"content":"public class Student {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":26,"author":{"gitID":"yapni"},"content":"    private final ProgrammingLanguage programmingLanguage;"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    private final Favourite favourite;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    private final Dashboard dashboard;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    private UniqueKey uniqueKey;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":31,"author":{"gitID":"samuelloh"},"content":"    private ProfilePicturePath profilePicturePath;"},{"lineNumber":32,"author":{"gitID":"samuelloh"},"content":"    private MiscellaneousInfo miscellaneousInfo;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"samuelloh"},"content":"     * Every field must be present and not null. For when dashboard, favourite, profilePicturePath and miscellaneous"},{"lineNumber":36,"author":{"gitID":"samuelloh"},"content":"     * info is not initialised"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"yapni"},"content":"    public Student(Name name, Phone phone, Email email, Address address, ProgrammingLanguage programmingLanguage,"},{"lineNumber":39,"author":{"gitID":"yapni"},"content":"                   Set\u003cTag\u003e tags) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":46,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d new Favourite(false); // Default value"},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":50,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d new ProfilePicturePath(ProfilePicturePath.DEFAULT_PROFILE_PICTURE);"},{"lineNumber":51,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo();"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yapni"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"     * Every field must be present and not null. For when dashboard is not initialised"},{"lineNumber":56,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"yapni"},"content":"    public Student(Name name, Phone phone, Email email, Address address, ProgrammingLanguage programmingLanguage,"},{"lineNumber":58,"author":{"gitID":"samuelloh"},"content":"                   Set\u003cTag\u003e tags, Favourite fav, ProfilePicturePath profilePicturePath,"},{"lineNumber":59,"author":{"gitID":"samuelloh"},"content":"                   MiscellaneousInfo miscellaneousInfo) {"},{"lineNumber":60,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, phone, email, address, tags, fav);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":66,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":68,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":69,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":70,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d profilePicturePath;"},{"lineNumber":71,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"samuelloh"},"content":"     *Every field must be present and not null. For when {@code profilePicturePath} is not initialised."},{"lineNumber":76,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"    public Student(Name name, Phone phone, Email email, Address address, ProgrammingLanguage programmingLanguage,"},{"lineNumber":78,"author":{"gitID":"samuelloh"},"content":"                   Set\u003cTag\u003e tags, Favourite fav, Dashboard dashboard, MiscellaneousInfo miscellaneousInfo) {"},{"lineNumber":79,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, phone, email, address, tags, fav);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":85,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":87,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":88,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d dashboard;"},{"lineNumber":89,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d new ProfilePicturePath(ProfilePicturePath.DEFAULT_PROFILE_PICTURE);"},{"lineNumber":90,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":91,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":93,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"samuelloh"},"content":"     * Every field must be present and not null. For when {@code miscellaneousInfo} is not initialised."},{"lineNumber":95,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"samuelloh"},"content":"    public Student(Name name, Phone phone, Email email,"},{"lineNumber":97,"author":{"gitID":"samuelloh"},"content":"                   Address address, ProgrammingLanguage programmingLanguage, Set\u003cTag\u003e tags, Favourite fav,"},{"lineNumber":98,"author":{"gitID":"samuelloh"},"content":"                   Dashboard dashboard, ProfilePicturePath profilePicturePath) {"},{"lineNumber":99,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, phone, email, address, tags, fav);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":105,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":107,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":108,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d dashboard;"},{"lineNumber":109,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d profilePicturePath;"},{"lineNumber":110,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo();"},{"lineNumber":111,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":113,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":114,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":115,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"     * Every field must be present and not null. For when all attributes can be passed in as parameters"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"yapni"},"content":"    public Student(Name name, Phone phone, Email email, Address address, ProgrammingLanguage programmingLanguage,"},{"lineNumber":119,"author":{"gitID":"samuelloh"},"content":"                   Set\u003cTag\u003e tags, Favourite fav, Dashboard dashboard,"},{"lineNumber":120,"author":{"gitID":"samuelloh"},"content":"                   ProfilePicturePath profilePicturePath, MiscellaneousInfo miscellaneousInfo) {"},{"lineNumber":121,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, phone, email, address, tags, fav);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":127,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":129,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":130,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d dashboard;"},{"lineNumber":131,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d profilePicturePath;"},{"lineNumber":132,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":133,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"yapni"},"content":""},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"     * Constructors for Students with UniqueKey being read in ( read from file )"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"     * Every field must be present and not null. For when dashboard and favourite is not initialised"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"    public Student(UniqueKey uniqueKey, Name name, Phone phone, Email email, Address address,"},{"lineNumber":142,"author":{"gitID":"samuelloh"},"content":"                   ProgrammingLanguage programmingLanguage, Set\u003cTag\u003e tags, ProfilePicturePath profilePicturePath,"},{"lineNumber":143,"author":{"gitID":"samuelloh"},"content":"                   MiscellaneousInfo miscellaneousInfo) {"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(uniqueKey, name, phone, email, address, tags);"},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":151,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":153,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d new Favourite(false); // Default value"},{"lineNumber":154,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":155,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d profilePicturePath;"},{"lineNumber":156,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":157,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":159,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":160,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":161,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"samuelloh"},"content":"     * Every field must be present and not null. For when dashboard, favourite, profilePicturePath"},{"lineNumber":163,"author":{"gitID":"samuelloh"},"content":"     * and miscellaneous info is not initialised"},{"lineNumber":164,"author":{"gitID":"samuelloh"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"demitycho"},"content":"    public Student(UniqueKey uniqueKey, Name name, Phone phone, Email email, Address address,"},{"lineNumber":166,"author":{"gitID":"samuelloh"},"content":"                   ProgrammingLanguage programmingLanguage, Set\u003cTag\u003e tags) {"},{"lineNumber":167,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(uniqueKey, name, phone, email, address, tags);"},{"lineNumber":168,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":174,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":176,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d new Favourite(false); // Default value"},{"lineNumber":177,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":178,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d new ProfilePicturePath(ProfilePicturePath.DEFAULT_PROFILE_PICTURE);"},{"lineNumber":179,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo();"},{"lineNumber":180,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":182,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"samuelloh"},"content":"     * Every field must be present and not null. For when dashboard and profilePicturePath"},{"lineNumber":184,"author":{"gitID":"samuelloh"},"content":"     * is not initialised"},{"lineNumber":185,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"demitycho"},"content":"    public Student(UniqueKey uniqueKey, Name name, Phone phone, Email email, Address address,"},{"lineNumber":187,"author":{"gitID":"samuelloh"},"content":"                   ProgrammingLanguage programmingLanguage, Set\u003cTag\u003e tags, Favourite fav,"},{"lineNumber":188,"author":{"gitID":"samuelloh"},"content":"                   MiscellaneousInfo miscellaneousInfo) {"},{"lineNumber":189,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(uniqueKey, name, phone, email, address, tags);"},{"lineNumber":190,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":196,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":198,"author":{"gitID":"samuelloh"},"content":"        this.favourite \u003d fav;"},{"lineNumber":199,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":200,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d new ProfilePicturePath(ProfilePicturePath.DEFAULT_PROFILE_PICTURE);"},{"lineNumber":201,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":202,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":204,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"demitycho"},"content":"     * Every field must be present and not null. For when dashboard is not initialised"},{"lineNumber":206,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"demitycho"},"content":"    public Student(UniqueKey uniqueKey, Name name, Phone phone, Email email, Address address,"},{"lineNumber":208,"author":{"gitID":"samuelloh"},"content":"                   ProgrammingLanguage programmingLanguage, Set\u003cTag\u003e tags,"},{"lineNumber":209,"author":{"gitID":"samuelloh"},"content":"                   ProfilePicturePath profilePicturePath, Favourite fav, MiscellaneousInfo miscellaneousInfo) {"},{"lineNumber":210,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(uniqueKey, name, phone, email, address, tags, fav);"},{"lineNumber":211,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":217,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":219,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":220,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d new Dashboard();"},{"lineNumber":221,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d profilePicturePath;"},{"lineNumber":222,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":223,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":225,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"demitycho"},"content":"     * Every field must be present and not null. For when all attributes can be passed in as parameters"},{"lineNumber":227,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"demitycho"},"content":"    public Student(UniqueKey uniqueKey, Name name, Phone phone, Email email,"},{"lineNumber":229,"author":{"gitID":"samuelloh"},"content":"                   Address address, ProgrammingLanguage programmingLanguage, Set\u003cTag\u003e tags, Favourite fav,"},{"lineNumber":230,"author":{"gitID":"samuelloh"},"content":"                   Dashboard dashboard, ProfilePicturePath profilePicturePath, MiscellaneousInfo miscellaneousInfo) {"},{"lineNumber":231,"author":{"gitID":"yapni"},"content":"        requireAllNonNull(name, phone, email, address, tags, fav);"},{"lineNumber":232,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":238,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":240,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":241,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d dashboard;"},{"lineNumber":242,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d profilePicturePath;"},{"lineNumber":243,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":244,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":246,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"samuelloh"},"content":"     *Every field must be present and not null. For when {@code profilePicturePath} is not initialised."},{"lineNumber":248,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"demitycho"},"content":"    public Student(UniqueKey uniqueKey, Name name, Phone phone, Email email, Address address,"},{"lineNumber":250,"author":{"gitID":"samuelloh"},"content":"                   ProgrammingLanguage programmingLanguage,"},{"lineNumber":251,"author":{"gitID":"samuelloh"},"content":"                   Set\u003cTag\u003e tags, Favourite fav, Dashboard dashboard, MiscellaneousInfo miscellaneousInfo) {"},{"lineNumber":252,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(uniqueKey, name, phone, email, address, tags, fav);"},{"lineNumber":253,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":259,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":261,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":262,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d dashboard;"},{"lineNumber":263,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d new ProfilePicturePath(ProfilePicturePath.DEFAULT_PROFILE_PICTURE);"},{"lineNumber":264,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d miscellaneousInfo;"},{"lineNumber":265,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":267,"author":{"gitID":"samuelloh"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"samuelloh"},"content":"     * Every field must be present and not null. For when {@code miscellaneousInfo} is not initialised."},{"lineNumber":269,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"demitycho"},"content":"    public Student(UniqueKey uniqueKey, Name name, Phone phone, Email email,"},{"lineNumber":271,"author":{"gitID":"samuelloh"},"content":"                   Address address, ProgrammingLanguage programmingLanguage, Set\u003cTag\u003e tags, Favourite fav,"},{"lineNumber":272,"author":{"gitID":"samuelloh"},"content":"                   Dashboard dashboard, ProfilePicturePath profilePicturePath) {"},{"lineNumber":273,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(uniqueKey, name, phone, email, address, tags, fav);"},{"lineNumber":274,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":280,"author":{"gitID":"yapni"},"content":"        this.programmingLanguage \u003d programmingLanguage;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":282,"author":{"gitID":"yapni"},"content":"        this.favourite \u003d fav;"},{"lineNumber":283,"author":{"gitID":"yapni"},"content":"        this.dashboard \u003d dashboard;"},{"lineNumber":284,"author":{"gitID":"samuelloh"},"content":"        this.profilePicturePath \u003d profilePicturePath;"},{"lineNumber":285,"author":{"gitID":"samuelloh"},"content":"        this.miscellaneousInfo \u003d new MiscellaneousInfo();"},{"lineNumber":286,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":288,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"yapni"},"content":"    public Favourite getFavourite() {"},{"lineNumber":306,"author":{"gitID":"yapni"},"content":"        return favourite;"},{"lineNumber":307,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"yapni"},"content":""},{"lineNumber":309,"author":{"gitID":"yapni"},"content":"    public Dashboard getDashboard() {"},{"lineNumber":310,"author":{"gitID":"yapni"},"content":"        return dashboard;"},{"lineNumber":311,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"yapni"},"content":""},{"lineNumber":313,"author":{"gitID":"demitycho"},"content":"    public UniqueKey getUniqueKey() {"},{"lineNumber":314,"author":{"gitID":"demitycho"},"content":"        return uniqueKey;"},{"lineNumber":315,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":317,"author":{"gitID":"samuelloh"},"content":"    public ProfilePicturePath getProfilePicturePath() {"},{"lineNumber":318,"author":{"gitID":"samuelloh"},"content":"        return profilePicturePath;"},{"lineNumber":319,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":321,"author":{"gitID":"samuelloh"},"content":"    public MiscellaneousInfo getMiscellaneousInfo() {"},{"lineNumber":322,"author":{"gitID":"samuelloh"},"content":"        return miscellaneousInfo;"},{"lineNumber":323,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":325,"author":{"gitID":"yapni"},"content":"    /**"},{"lineNumber":326,"author":{"gitID":"yapni"},"content":"     * Returns true if Student is in favourites, else returns false."},{"lineNumber":327,"author":{"gitID":"yapni"},"content":"     */"},{"lineNumber":328,"author":{"gitID":"yapni"},"content":"    public boolean isFavourite() {"},{"lineNumber":329,"author":{"gitID":"demitycho"},"content":"        return favourite.isFavourite();"},{"lineNumber":330,"author":{"gitID":"yapni"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"yapni"},"content":""},{"lineNumber":332,"author":{"gitID":"yapni"},"content":"    public ProgrammingLanguage getProgrammingLanguage() {"},{"lineNumber":333,"author":{"gitID":"yapni"},"content":"        return programmingLanguage;"},{"lineNumber":334,"author":{"gitID":"samuelloh"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":337,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":339,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":342,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"demitycho"},"content":"    public void setKey(UniqueKey uniqueKey) {"},{"lineNumber":345,"author":{"gitID":"demitycho"},"content":"        if (this.uniqueKey \u003d\u003d null) {"},{"lineNumber":346,"author":{"gitID":"demitycho"},"content":"            this.uniqueKey \u003d uniqueKey;"},{"lineNumber":347,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":348,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":351,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":353,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"yapni"},"content":"        if (!(other instanceof Student)) {"},{"lineNumber":357,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"yapni"},"content":"        Student otherStudent \u003d (Student) other;"},{"lineNumber":361,"author":{"gitID":"yapni"},"content":"        return otherStudent.getName().equals(this.getName())"},{"lineNumber":362,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getPhone().equals(this.getPhone())"},{"lineNumber":363,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getEmail().equals(this.getEmail())"},{"lineNumber":364,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getAddress().equals(this.getAddress())"},{"lineNumber":365,"author":{"gitID":"yapni"},"content":"                \u0026\u0026 otherStudent.getProgrammingLanguage().equals(this.getProgrammingLanguage())"},{"lineNumber":366,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 otherStudent.getDashboard().equals(this.getDashboard())"},{"lineNumber":367,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 otherStudent.getProfilePicturePath().equals(this.getProfilePicturePath())"},{"lineNumber":368,"author":{"gitID":"samuelloh"},"content":"                \u0026\u0026 otherStudent.getMiscellaneousInfo().equals(this.getMiscellaneousInfo());"},{"lineNumber":369,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":372,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":374,"author":{"gitID":"samuelloh"},"content":"        return Objects.hash(name, phone, email, address, tags, programmingLanguage, dashboard, profilePicturePath,"},{"lineNumber":375,"author":{"gitID":"samuelloh"},"content":"                miscellaneousInfo);"},{"lineNumber":376,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":379,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":381,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":382,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":383,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":384,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":385,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":386,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":387,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":388,"author":{"gitID":"yapni"},"content":"                .append(\" Programming Language: \")"},{"lineNumber":389,"author":{"gitID":"yapni"},"content":"                .append(getProgrammingLanguage())"},{"lineNumber":390,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":391,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":392,"author":{"gitID":"yapni"},"content":"        builder.append(\" Favourite: \")"},{"lineNumber":393,"author":{"gitID":"yapni"},"content":"                .append(getFavourite())"},{"lineNumber":394,"author":{"gitID":"samuelloh"},"content":"                .append(\" Profile Picture Path: \")"},{"lineNumber":395,"author":{"gitID":"samuelloh"},"content":"                .append(getProfilePicturePath())"},{"lineNumber":396,"author":{"gitID":"samuelloh"},"content":"                .append(\" Miscellaneous Info: \")"},{"lineNumber":397,"author":{"gitID":"samuelloh"},"content":"                .append(getMiscellaneousInfo())"},{"lineNumber":398,"author":{"gitID":"yapni"},"content":"                .append(\" Dashboard: \")"},{"lineNumber":399,"author":{"gitID":"yapni"},"content":"                .append(getDashboard());"},{"lineNumber":400,"author":{"gitID":"samuelloh"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":402,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":405,"author":{"gitID":"demitycho"},"content":"     * TODO Delete later"},{"lineNumber":406,"author":{"gitID":"demitycho"},"content":"     * @return Test String"},{"lineNumber":407,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":408,"author":{"gitID":"demitycho"},"content":"    public String toStrings() {"},{"lineNumber":409,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":410,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":411,"author":{"gitID":"demitycho"},"content":"                .append(\" UniqueKey: \")"},{"lineNumber":412,"author":{"gitID":"demitycho"},"content":"                .append(getUniqueKey())"},{"lineNumber":413,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":414,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":415,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":416,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":417,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":418,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":419,"author":{"gitID":"yapni"},"content":"                .append(\" Programming Language: \")"},{"lineNumber":420,"author":{"gitID":"yapni"},"content":"                .append(getProgrammingLanguage())"},{"lineNumber":421,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":422,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":423,"author":{"gitID":"yapni"},"content":"        builder.append(\" Favourite: \")"},{"lineNumber":424,"author":{"gitID":"yapni"},"content":"                .append(getFavourite())"},{"lineNumber":425,"author":{"gitID":"samuelloh"},"content":"                .append(\" Profile Picture Path: \")"},{"lineNumber":426,"author":{"gitID":"samuelloh"},"content":"                .append(getProfilePicturePath())"},{"lineNumber":427,"author":{"gitID":"samuelloh"},"content":"                .append(\" Miscellaneous Info: \")"},{"lineNumber":428,"author":{"gitID":"samuelloh"},"content":"                .append(getMiscellaneousInfo())"},{"lineNumber":429,"author":{"gitID":"demitycho"},"content":"                .append(\" Dashboard: \")"},{"lineNumber":430,"author":{"gitID":"samuelloh"},"content":"                .append(getDashboard());"},{"lineNumber":431,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":432,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":94,"samuelloh":109,"demitycho":65,"-":166}},{"path":"src/main/java/seedu/address/model/lesson/exceptions/LessonNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson.exceptions;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":" * Signals that the operation is unable to find the specified lesson."},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"public class LessonNotFoundException extends Exception { }"}],"authorContributionMap":{"demitycho":7}},{"path":"src/main/java/seedu/address/model/lesson/Day.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.time.DayOfWeek;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import java.util.Date;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import org.joda.time.LocalDate;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":" * Represents a Student\u0027s day in a lesson in the Schedule."},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDay String)}"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"public class Day implements Comparable\u003cDay\u003e {"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    private static final String STRING_MON \u003d \"mon\";"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    private static final String STRING_TUE \u003d \"tue\";"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    private static final String STRING_WED \u003d \"wed\";"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    private static final String STRING_THU \u003d \"thu\";"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"    private static final String STRING_FRI \u003d \"fri\";"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    private static final String STRING_SAT \u003d \"sat\";"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    private static final String STRING_SUN \u003d \"sun\";"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    private static final Integer INTEGER_MON \u003d 1;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    private static final Integer INTEGER_TUE \u003d 2;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    private static final Integer INTEGER_WED \u003d 3;"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    private static final Integer INTEGER_THU \u003d 4;"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    private static final Integer INTEGER_FRI \u003d 5;"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    private static final Integer INTEGER_SAT \u003d 6;"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    private static final Integer INTEGER_SUN \u003d 7;"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    private static final String FULL_STRING_MON \u003d \"Monday\";"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    private static final String FULL_STRING_TUE \u003d \"Tuesday\";"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    private static final String FULL_STRING_WED \u003d \"Wednesday\";"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    private static final String FULL_STRING_THU \u003d \"Thursday\";"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    private static final String FULL_STRING_FRI \u003d \"Friday\";"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    private static final String FULL_STRING_SAT \u003d \"Saturday\";"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    private static final String FULL_STRING_SUN \u003d \"Sunday\";"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_DAY_CONSTRAINTS \u003d \"Day should be of the format: first 3 letters of Day\""},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            + \"(not case sensitive) i,e.\\n\""},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"            + STRING_MON + \", \" + STRING_TUE + \", \" + STRING_WED + \", \" + STRING_THU + \", \""},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"            + STRING_FRI + \", \" + STRING_SAT + \", \" + STRING_SUN + \"\\n\\n\";"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    private static final HashMap\u003cString, Integer\u003e dayToIntMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    private static final HashMap\u003cString, String\u003e dayToFullDayMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    private static final HashMap\u003cString, DayOfWeek\u003e dayToDayOfWeekEnumMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    private static final String DAY_REGEX \u003d \"^(mon|tue|wed|thu|fri|sat|sun)\";"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"    public final String value;"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"     * 1. Builds the {@code dayToIntMap} for the integer value of the day in week"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"     *    Week starts on Monday, with value of 1, end on Sunday, with value of 7"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"     * 2. Builds the {@code dayToFullDayMap} for short form to long form names of days,"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"     * 3. Builds the {@code dayToDayOfWeekEnumMap} for use with Google Calendar upload"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    static {"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"        dayToIntMap.put(STRING_MON, INTEGER_MON);"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"        dayToIntMap.put(STRING_TUE, INTEGER_TUE);"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        dayToIntMap.put(STRING_WED, INTEGER_WED);"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"        dayToIntMap.put(STRING_THU, INTEGER_THU);"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        dayToIntMap.put(STRING_FRI, INTEGER_FRI);"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        dayToIntMap.put(STRING_SAT, INTEGER_SAT);"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        dayToIntMap.put(STRING_SUN, INTEGER_SUN);"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        dayToFullDayMap.put(STRING_MON, FULL_STRING_MON);"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"        dayToFullDayMap.put(STRING_TUE, FULL_STRING_TUE);"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        dayToFullDayMap.put(STRING_WED, FULL_STRING_WED);"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        dayToFullDayMap.put(STRING_THU, FULL_STRING_THU);"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"        dayToFullDayMap.put(STRING_FRI, FULL_STRING_FRI);"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        dayToFullDayMap.put(STRING_SAT, FULL_STRING_SAT);"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        dayToFullDayMap.put(STRING_SUN, FULL_STRING_SUN);"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"        dayToDayOfWeekEnumMap.put(STRING_MON, DayOfWeek.MONDAY);"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"        dayToDayOfWeekEnumMap.put(STRING_TUE, DayOfWeek.TUESDAY);"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        dayToDayOfWeekEnumMap.put(STRING_WED, DayOfWeek.WEDNESDAY);"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"        dayToDayOfWeekEnumMap.put(STRING_THU, DayOfWeek.THURSDAY);"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        dayToDayOfWeekEnumMap.put(STRING_FRI, DayOfWeek.FRIDAY);"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"        dayToDayOfWeekEnumMap.put(STRING_SAT, DayOfWeek.SATURDAY);"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"        dayToDayOfWeekEnumMap.put(STRING_SUN, DayOfWeek.SUNDAY);"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"     * Constructs an {@code Day}."},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"     * @param day A valid day string."},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"    public Day(String day) {"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"        requireNonNull(day);"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        checkArgument(isValidDay(day), MESSAGE_DAY_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"        this.value \u003d day;"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"     * Returns if a given string is a valid student day."},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"    public static boolean isValidDay(String test) {"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"        return test.matches(DAY_REGEX);"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"    public static int dayToIntValue(String day) {"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"        return dayToIntMap.get(day);"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"    public static DayOfWeek dayToDayOfWeekEnum(Day day) {"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"        return dayToDayOfWeekEnumMap.get(day.toString());"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"    public int intValue() {"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"        return dayToIntMap.get(this.value);"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"    public String fullDayName() {"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"        return dayToFullDayMap.get(this.value);"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"     * Gets a DateTime dateString formatted in dd/MM/yyyy"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"    public String toDateString() {"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"        LocalDate now \u003d new LocalDate();"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"        LocalDate day \u003d now.withDayOfWeek(dayToIntValue(this.toString()));"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"            SimpleDateFormat format1 \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"            SimpleDateFormat format2 \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"            Date date \u003d format1.parse(day.toString());"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"            return format2.format(date).toString();"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"        } catch (Exception e) {"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"            e.printStackTrace();"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"        return \"01/01/1994\";"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"    public String toString() {"},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":"        return value;"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"                || (other instanceof Day // instanceof handles nulls"},{"lineNumber":150,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.value.equals(((Day) other).value)); // state check"},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"demitycho"},"content":"    public int hashCode() {"},{"lineNumber":155,"author":{"gitID":"demitycho"},"content":"        return value.hashCode();"},{"lineNumber":156,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":158,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"demitycho"},"content":"    public int compareTo(Day other) {"},{"lineNumber":160,"author":{"gitID":"demitycho"},"content":"        return this.intValue() - other.intValue();"},{"lineNumber":161,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":159,"-":3}},{"path":"src/main/java/seedu/address/model/lesson/Lesson.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.UniqueKey;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" * Represents a Student in the address book."},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"public class Lesson implements Comparable\u003cLesson\u003e {"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"    private Student student;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    private final UniqueKey uniqueKey;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    private final Day day;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    private final Time startTime;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    private final Time endTime;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     * Every field must be present and not null."},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public Lesson(UniqueKey uniqueKey, Day day, Time startTime, Time endTime) {"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(uniqueKey, day, startTime, endTime);"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        this.uniqueKey \u003d uniqueKey;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"        this.day \u003d day;"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    public Student getStudent() {"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"        return student;"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    public UniqueKey getUniqueKey() {"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        return uniqueKey;"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    public Day getDay() {"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        return day;"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"    public Time getStartTime() {"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"        return startTime;"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    public Time getEndTime() {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        return endTime;"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"     * To check if a lesson will clash with another lesson on the same day"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"     * @return true/false"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    public boolean clashesWith(Lesson other) {"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        return this.getDay().compareTo(other.getDay()) \u003d\u003d 0"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"                ? ((this.getStartTime().compareTo(other.getStartTime()) \u003e\u003d 0    //Same day"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.getStartTime().compareTo(other.getEndTime()) \u003c 0)"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"                || (this.getEndTime().compareTo(other.getStartTime()) \u003e 0"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.getEndTime().compareTo(other.getEndTime()) \u003c\u003d 0))"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"                : this.getDay().compareTo(other.getDay()) \u003d\u003d 0; //Different day"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"    public Lesson getLesson() {"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        if (!(other instanceof Lesson)) {"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        Lesson otherLesson \u003d (Lesson) other;"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"        return otherLesson.getUniqueKey().equals(this.getUniqueKey())"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 otherLesson.getDay().equals(this.getDay())"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 otherLesson.getStartTime().equals(this.getEndTime())"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 otherLesson.getEndTime().equals(this.getEndTime());"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"    public int hashCode() {"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"        return Objects.hash(uniqueKey, day, startTime, endTime);"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"    public String toString() {"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"        builder.append(\"Day: \")"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"                .append(getDay().fullDayName())"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"                .append(\" Time: \")"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"                .append(getStartTime() + \" - \" + getEndTime());"},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"        return builder.toString();"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"    public int compareTo(Lesson other) {"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"        return this.getDay().intValue() - other.getDay().intValue() !\u003d 0"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"                ? this.getDay().intValue() - other.getDay().intValue()"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"                : this.getStartTime().compareTo(other.getStartTime());"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":110,"-":2}},{"path":"src/main/java/seedu/address/model/lesson/Time.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" * Represents a Student\u0027s time in a lesson in the Schedule."},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime String)}"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"public class Time implements Comparable\u003cTime\u003e {"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time should be of the format HH:MM \""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"            + \"1. The hour HH should only contain numbers and be in range [00, 23] inclusive\\n\""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"            + \"2. This is followed by a \u0027:\u0027 and then minutes MM.\\n\""},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"            + \"3. The minutes MM should only contain numbers and be in range [00, 59] inclusive\\n\";"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    // Numeric characters in Hour or Minute ranges"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    private static final String HOUR_PART_REGEX \u003d \"^(0[0-9]|1[0-9]|2[0-3])\";"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    private static final String MINUTE_PART_REGEX \u003d \"([0-5][0-9])\";"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    private static final String TIME_DELIMITER \u003d \":\";"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d HOUR_PART_REGEX"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"            + TIME_DELIMITER"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"            + MINUTE_PART_REGEX;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"    private static final int INDEX_HOUR \u003d 0;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    private static final int INDEX_MIN \u003d 1;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    public final String value;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    private final Hour hour;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    private final Min min;"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     * Constructs an {@code Time}."},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"     * @param time A valid time string."},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    public Time(String time) {"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        requireNonNull(time);"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        this.value \u003d time;"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        this.hour \u003d new Hour(value.split(TIME_DELIMITER)[INDEX_HOUR]);"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"        this.min \u003d new Min(value.split(TIME_DELIMITER)[INDEX_MIN]);"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"     * Returns if a given string is a valid student time."},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    public Hour getHour() {"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        return this.hour;"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    public Min getMin() {"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        return this.min;"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"        return value;"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"                || (other instanceof Time // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.value.equals(((Time) other).value)); // state check"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"    public int compareTo(Time other) {"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"        return this.getHour().compareTo(other.getHour()) !\u003d 0"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"                ? this.getHour().compareTo(other.getHour())"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"                : this.getMin().compareTo(other.getMin());"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"    public int hashCode() {"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"        return value.hashCode();"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":80,"-":4}},{"path":"src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson.exceptions;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" * Signals that the operation will result in duplicate Lesson objects."},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"public class DuplicateLessonException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"    public DuplicateLessonException() {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"        super(\"Operation would result in duplicate lessons\");"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":12,"-":1}},{"path":"src/main/java/seedu/address/model/lesson/Min.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":" * Represents the Hour value in the Time."},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"public class Min implements Comparable\u003cMin\u003e {"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"    private int value;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"    public Min(String min) {"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"        this.value \u003d Integer.parseInt(min);"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"     * Get the integer value of the Hour string"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"     * @return value"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"    public int getMin() {"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"        return this.value;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     * Compares 2 Hour values and returns whether the comparison is larger than itself"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     * @return the compareTo value"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"    public int compareTo(Min other) {"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        return this.getMin() - other.getMin();"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":30}},{"path":"src/main/java/seedu/address/model/lesson/Hour.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":" * Represents the Hour value in the Time."},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"public class Hour implements Comparable\u003cHour\u003e {"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"    private int value;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"    public Hour(String hour) {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"        this.value \u003d Integer.parseInt(hour);"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"     * Get the integer value of the Hour string"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"     * @return value"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    public int getHour() {"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"        return this.value;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"     * Compares 2 Hour values and returns whether the comparison is larger than itself"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"     * @return the compareTo value"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"    public int compareTo(Hour other) {"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"        return this.getHour() - other.getHour();"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":30}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.util.ServiceException;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"samuelloh"},"content":"import seedu.address.commons.exceptions.StorageFileMissingException;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import seedu.address.external.exceptions.CredentialsException;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.exceptions.DuplicateStudentException;"},{"lineNumber":19,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.exceptions.StudentNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":27,"author":{"gitID":"yapni"},"content":"    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"},{"lineNumber":28,"author":{"gitID":"yapni"},"content":"    Predicate\u003cStudent\u003e PREDICATE_SHOW_FAVOURITE_STUDENTS \u003d Student::isFavourite;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    void resetData(ReadOnlyAddressBook newData, ReadOnlySchedule schedule);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"yapni"},"content":"    /** Deletes the given student. */"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    void deleteStudent(Student target)"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"            throws DuplicateLessonException, InvalidLessonTimeSlotException,"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"            StudentNotFoundException, LessonNotFoundException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"yapni"},"content":"    /** Adds the given student */"},{"lineNumber":42,"author":{"gitID":"yapni"},"content":"    void addStudent(Student student) throws DuplicateStudentException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"yapni"},"content":"     * Replaces the given student {@code target} with {@code editedStudent}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"yapni"},"content":"     * @throws DuplicateStudentException if updating the student\u0027s details causes the student to be equivalent to"},{"lineNumber":48,"author":{"gitID":"yapni"},"content":"     *      another existing student in the list."},{"lineNumber":49,"author":{"gitID":"yapni"},"content":"     * @throws StudentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"yapni"},"content":"    void updateStudent(Student target, Student editedStudent)"},{"lineNumber":52,"author":{"gitID":"yapni"},"content":"            throws DuplicateStudentException, StudentNotFoundException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"yapni"},"content":"    /** Returns an unmodifiable view of the filtered student list */"},{"lineNumber":55,"author":{"gitID":"yapni"},"content":"    ObservableList\u003cStudent\u003e getFilteredStudentList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yapni"},"content":"     * Updates the filter of the filtered student list to filter by the given {@code predicate}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yapni"},"content":"    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"yapni"},"content":"    /** Removes the given {@code tag} from all {@code Student}s. */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"    void addLesson(Student student, Day day, Time startTime, Time endTime)"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"            throws DuplicateLessonException, StudentNotFoundException, InvalidLessonTimeSlotException;"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"    void deleteLesson(Lesson target) throws LessonNotFoundException;"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"    ReadOnlySchedule getSchedule();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"samuelloh"},"content":"    void displayStudentDetailsOnBrowserPanel(Student target) throws StudentNotFoundException,"},{"lineNumber":74,"author":{"gitID":"samuelloh"},"content":"            StorageFileMissingException;"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":76,"author":{"gitID":"samuelloh"},"content":"    void updateProfilePicture(Student target, Student editedStudent, Student finalEditedStudent)"},{"lineNumber":77,"author":{"gitID":"yapni"},"content":"        throws DuplicateStudentException, StudentNotFoundException;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"    void loginGoogleAccount() throws CredentialsException, IOException;"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"    void logoutGoogleAccount() throws CredentialsException;"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"    void synchronize() throws ServiceException, IOException;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yapni":19,"samuelloh":4,"demitycho":28,"-":33}},{"path":"src/main/java/seedu/address/model/lesson/exceptions/InvalidLessonTimeSlotException.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":" * Signals that the operation will result in duplicate Lesson objects."},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"public class InvalidLessonTimeSlotException extends IllegalValueException {"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"    public InvalidLessonTimeSlotException() {"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"        super(\"Operation would result in lessons that clash with each other\");"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":11,"-":2}},{"path":"src/main/java/seedu/address/external/exceptions/CredentialsException.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.external.exceptions;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":" * An exception related to stored Google credentials"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"public class CredentialsException extends Exception {"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"     * Returns a CredentialsExceptions when misuse happens, when"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"     * calling functions involving credentials"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"     * @param message"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"    public CredentialsException(String message) {"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":16}},{"path":"src/main/java/seedu/address/model/tag/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"yapni"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":" * Tests that a {@code Student}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"    public boolean test(Student student) {"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"        Set\u003cTag\u003e tagList \u003d student.getTags();"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"        for (Tag studentsTag: tagList) {"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"            if (keywords.stream().anyMatch(keyword -\u003e"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"                    StringUtil.containsWordIgnoreCase(studentsTag.tagName, keyword))) {"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"                return true;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"        return false;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"yapni":1,"demitycho":35,"-":3}},{"path":"src/main/java/seedu/address/model/lesson/LessonList.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.model.lesson;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.DuplicateLessonException;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.InvalidLessonTimeSlotException;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.exceptions.LessonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":" * A list of lessons that enforces non clashes int timings between its elements and does not allow nulls."},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":" *"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":" * Supports a minimal set of list operations."},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":" *"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":" * @see Lesson#equals(Object)"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"public class LessonList implements Iterable\u003cLesson\u003e {"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"     * Returns true if the list contains an equivalent student as the given argument."},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"    public boolean contains(Lesson toCheck) {"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"        requireNonNull(toCheck);"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"     * Adds a lesson to the list."},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    public void add(Lesson toAdd)"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"            throws InvalidLessonTimeSlotException, DuplicateLessonException {"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"        if (!isValidSlot(toAdd)) {"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"            throw new InvalidLessonTimeSlotException();"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"        if (contains(toAdd)) {"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"            throw new DuplicateLessonException();"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"        internalList.add(toAdd);"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":"        Collections.sort(internalList);"},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"     * Checks if lesson clashes with other lessons in the schedule"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"     * @return true/false"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    private boolean isValidSlot(Lesson l) {"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        for (Lesson lesson : internalList) {"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"            if (l.clashesWith(lesson)) {"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"                return false;"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"        return true;"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"    public ObservableList\u003cLesson\u003e asObservableList() {"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"     * Removes the equivalent lesson from the list."},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"     * @throws LessonNotFoundException if no such lesson could be found in the list."},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"    public boolean remove(Lesson toRemove) throws LessonNotFoundException {"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"        requireNonNull(toRemove);"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"        final boolean lessonFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        if (!lessonFoundAndDeleted) {"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"            throw new LessonNotFoundException();"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"        return lessonFoundAndDeleted;"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"    public void setLessons(LessonList replacement) {"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"    public void setLessons(List\u003cLesson\u003e lessons)"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"            throws InvalidLessonTimeSlotException, DuplicateLessonException {"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        requireAllNonNull(lessons);"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"        final LessonList replacement \u003d new LessonList();"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"        for (final Lesson lesson : lessons) {"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"            replacement.add(lesson);"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"        setLessons(replacement);"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"     * Reconstructs a new {@code LessonList} replacement based on Lessons not associated with {@code Student}"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"     * {@code internalList} will setLessons of replacement"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"     * @param target"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"    public void removeStudentLessons(Student target)"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"            throws InvalidLessonTimeSlotException, DuplicateLessonException {"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"        final LessonList replacement \u003d new LessonList();"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"        for (Lesson lesson : internalList) {"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"            if (!target.getUniqueKey().equals(lesson.getUniqueKey())) {"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"                replacement.add(lesson);"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"        setLessons(replacement);"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"    public Iterator\u003cLesson\u003e iterator() {"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"        return internalList.iterator();"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"                || (other instanceof LessonList // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"                        \u0026\u0026 this.internalList.equals(((LessonList) other).internalList));"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"    public int hashCode() {"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"        return internalList.hashCode();"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":126,"-":7}},{"path":"src/main/java/seedu/address/external/GCalendarService.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.external;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.time.temporal.TemporalAdjusters;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.calendar.Calendar;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.calendar.model.CalendarList;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.calendar.model.CalendarListEntry;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.calendar.model.EventAttendee;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.calendar.model.EventDateTime;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.calendar.model.Events;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Day;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Lesson;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.lesson.Time;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":" * Constructs a new GContactsService object to communicate with Google\u0027s APIs"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":" * The upload process is still synchronous, the UI will freeze as data is being uploaded"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":" * There will be logging here to show state updates as it is difficult to show UI changes."},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"public class GCalendarService {"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"    public static final String MESSAGE_SUMMARY \u003d \"Lesson with %1$s\";"},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    public static final String SINGAPORE_TIME_ZONE \u003d \"Asia/Singapore\";"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    public static final String STRING_COLON \u003d \":\";"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"    public static final String STRING_DASH \u003d \"-\";"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    public static final String STRING_GMT_SG \u003d \"+08:00\";"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    public static final String STRING_STUDENT_CALENDAR_DESCRIPTION \u003d \"Calendar for your Student Lessons\";"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    public static final String STRING_STUDENT_CALENDAR_NAME \u003d \"Student Lessons\";"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(GCalendarService.class);"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    private Credential credential;"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    private HttpTransport httpTransport;"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    private JsonFactory jsonFactory;"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    public GCalendarService() {}"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    public GCalendarService(Credential credential,"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"                            HttpTransport httpTransport, JsonFactory jsonFactory) {"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"        this.credential \u003d credential;"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"        this.httpTransport \u003d httpTransport;"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"        this.jsonFactory \u003d jsonFactory;"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    public void setCredential(Credential credential) {"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        this.credential \u003d credential;"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"    public Credential getCredential() {"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        return credential;"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"    public void setHttpTransport(HttpTransport httpTransport) {"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        this.httpTransport \u003d httpTransport;"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"    public HttpTransport getHttpTransport() {"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        return httpTransport;"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"    public void setJsonFactory(JsonFactory jsonFactory) {"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        this.jsonFactory \u003d jsonFactory;"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"    public JsonFactory getJsonFactory() {"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        return jsonFactory;"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"     * Synchronizes the user\u0027s Google Calendar with the local version"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"     * @param schedule"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"    public void synchronize(ReadOnlySchedule schedule, ReadOnlyAddressBook addressBook) {"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"        Calendar service \u003d new Calendar.Builder("},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"                httpTransport, jsonFactory, credential)"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"                .setApplicationName(GServiceManager.APPLICATION_NAME)"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"                .build();"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"        /**"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"         * 1. Clear all old Calendar events"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"         *  a) Get the old \"Student Lesson\" Calendar ID from CalenderList"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"         *  b) Delete all Events of that CalendarID"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"         * 2. Create a new \"Student Lesson\" Calendar"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"         * 3. Insert new schedule"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"         */"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"            Integer displayIndex \u003d 1;"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"            deleteExistingCalendarCopy(service);"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"            String newCalenderId \u003d createStudentLessonCalendar(service);"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"            for (Lesson lesson : schedule.getSchedule()) {"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"                Event newEvent \u003d lessonToCalendarEvent(lesson, addressBook);"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"                Event insertedEvent \u003d service.events().insert(newCalenderId, newEvent).execute();"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"                logger.info(String.format(\"Event created for Lesson %d: %s\\n\","},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"                        displayIndex++, insertedEvent.getHtmlLink()));"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"        } catch (IOException e) {"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"            e.printStackTrace();"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"        logger.info(\"Successfully updated Google Calendar.\");"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"     * Converts a lesson to a recurring Calendar Event format"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"     * @param lesson"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"     * @param addressBook"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"    public Event lessonToCalendarEvent(Lesson lesson, ReadOnlyAddressBook addressBook) {"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"        Event event \u003d new Event();"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"        Student student \u003d addressBook.findStudentByKey(lesson.getUniqueKey());"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"        event.setSummary(String.format(MESSAGE_SUMMARY, student.getName()));"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"        event.setLocation(student.getAddress().toString());"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"        DateTime startDateTime \u003d new DateTime("},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"                dayTimeToDateTimeString(lesson.getDay(), lesson.getStartTime()));"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"        EventDateTime start \u003d new EventDateTime()"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"                .setDateTime(startDateTime)"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"                .setTimeZone(SINGAPORE_TIME_ZONE);"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"        event.setStart(start);"},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"        DateTime endDateTime \u003d new DateTime("},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"                dayTimeToDateTimeString(lesson.getDay(), lesson.getEndTime()));"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"        EventDateTime end \u003d new EventDateTime()"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"                .setDateTime(endDateTime)"},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":"                .setTimeZone(SINGAPORE_TIME_ZONE);"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"        event.setEnd(end);"},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":"        event.setLocation(student.getAddress().toString());"},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"        event.setAttendees(studentToAttendees(student));"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"        //Set recurring for a month"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"        event.setRecurrence(Arrays.asList(\"RRULE:FREQ\u003dWEEKLY;COUNT\u003d4\"));"},{"lineNumber":150,"author":{"gitID":"demitycho"},"content":"        return event;"},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"demitycho"},"content":"     * Converts a Day and Time object to a RFC822 String format"},{"lineNumber":155,"author":{"gitID":"demitycho"},"content":"     * @param day"},{"lineNumber":156,"author":{"gitID":"demitycho"},"content":"     * @param time"},{"lineNumber":157,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":158,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"demitycho"},"content":"    public static String dayTimeToDateTimeString(Day day, Time time) {"},{"lineNumber":160,"author":{"gitID":"demitycho"},"content":"        LocalDate next \u003d LocalDate.now().with("},{"lineNumber":161,"author":{"gitID":"demitycho"},"content":"                TemporalAdjusters.next(Day.dayToDayOfWeekEnum(day)));"},{"lineNumber":162,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":163,"author":{"gitID":"demitycho"},"content":"        StringBuilder dateTimeString \u003d new StringBuilder();"},{"lineNumber":164,"author":{"gitID":"demitycho"},"content":"        dateTimeString.append(Integer.toString(next.getYear()))"},{"lineNumber":165,"author":{"gitID":"demitycho"},"content":"                .append(STRING_DASH)"},{"lineNumber":166,"author":{"gitID":"demitycho"},"content":"                .append(String.format(\"%02d\", next.getMonthValue()))"},{"lineNumber":167,"author":{"gitID":"demitycho"},"content":"                .append(STRING_DASH)"},{"lineNumber":168,"author":{"gitID":"demitycho"},"content":"                .append(String.format(\"%02d\", next.getDayOfMonth()))"},{"lineNumber":169,"author":{"gitID":"demitycho"},"content":"                .append(\"T\")"},{"lineNumber":170,"author":{"gitID":"demitycho"},"content":"                .append(time)"},{"lineNumber":171,"author":{"gitID":"demitycho"},"content":"                .append(STRING_COLON)"},{"lineNumber":172,"author":{"gitID":"demitycho"},"content":"                .append(\"00\")"},{"lineNumber":173,"author":{"gitID":"demitycho"},"content":"                .append(STRING_GMT_SG);"},{"lineNumber":174,"author":{"gitID":"demitycho"},"content":"        return dateTimeString.toString();"},{"lineNumber":175,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":177,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"demitycho"},"content":"     * Creates an Attendee object using the attributes of Student"},{"lineNumber":179,"author":{"gitID":"demitycho"},"content":"     * @param student"},{"lineNumber":180,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":181,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"demitycho"},"content":"    public static List\u003cEventAttendee\u003e studentToAttendees(Student student) {"},{"lineNumber":183,"author":{"gitID":"demitycho"},"content":"        EventAttendee newAttendee \u003d new EventAttendee();"},{"lineNumber":184,"author":{"gitID":"demitycho"},"content":"        newAttendee.setDisplayName(student.getName().toString());"},{"lineNumber":185,"author":{"gitID":"demitycho"},"content":"        newAttendee.setEmail(student.getEmail().toString());"},{"lineNumber":186,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":187,"author":{"gitID":"demitycho"},"content":"        return Arrays.asList(newAttendee);"},{"lineNumber":188,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":190,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"demitycho"},"content":"     * Creates a secondary Google Calendar with the Name \"Student Lessons\""},{"lineNumber":192,"author":{"gitID":"demitycho"},"content":"     * @param service"},{"lineNumber":193,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":194,"author":{"gitID":"demitycho"},"content":"     * @throws IOException"},{"lineNumber":195,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"demitycho"},"content":"    public static String createStudentLessonCalendar(Calendar service) throws IOException {"},{"lineNumber":197,"author":{"gitID":"demitycho"},"content":"        com.google.api.services.calendar.model.Calendar newCalendar \u003d"},{"lineNumber":198,"author":{"gitID":"demitycho"},"content":"                new com.google.api.services.calendar.model.Calendar();"},{"lineNumber":199,"author":{"gitID":"demitycho"},"content":"        newCalendar.setSummary(STRING_STUDENT_CALENDAR_NAME);"},{"lineNumber":200,"author":{"gitID":"demitycho"},"content":"        newCalendar.setTimeZone(SINGAPORE_TIME_ZONE);"},{"lineNumber":201,"author":{"gitID":"demitycho"},"content":"        newCalendar.setDescription(STRING_STUDENT_CALENDAR_DESCRIPTION);"},{"lineNumber":202,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":203,"author":{"gitID":"demitycho"},"content":"        com.google.api.services.calendar.model.Calendar createdCalendar \u003d"},{"lineNumber":204,"author":{"gitID":"demitycho"},"content":"                service.calendars().insert(newCalendar).execute();"},{"lineNumber":205,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":206,"author":{"gitID":"demitycho"},"content":"        logger.info(\"Successfully created Google Calendar: Student Lessons\");"},{"lineNumber":207,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":208,"author":{"gitID":"demitycho"},"content":"        return createdCalendar.getId();"},{"lineNumber":209,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":211,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"demitycho"},"content":"     * Deletes the existing Calendar with the name \"Student Lessons\""},{"lineNumber":213,"author":{"gitID":"demitycho"},"content":"     * @param service"},{"lineNumber":214,"author":{"gitID":"demitycho"},"content":"     * @throws IOException"},{"lineNumber":215,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"demitycho"},"content":"    public static void deleteExistingCalendarCopy(Calendar service) throws IOException {"},{"lineNumber":217,"author":{"gitID":"demitycho"},"content":"        String pageToken \u003d null;"},{"lineNumber":218,"author":{"gitID":"demitycho"},"content":"        do {"},{"lineNumber":219,"author":{"gitID":"demitycho"},"content":"            CalendarList calendarList \u003d service.calendarList().list().execute();"},{"lineNumber":220,"author":{"gitID":"demitycho"},"content":"            List\u003cCalendarListEntry\u003e items \u003d calendarList.getItems();"},{"lineNumber":221,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":222,"author":{"gitID":"demitycho"},"content":"            for (CalendarListEntry calendarListEntry : items) {"},{"lineNumber":223,"author":{"gitID":"demitycho"},"content":"                if (calendarListEntry.getSummary().equals(STRING_STUDENT_CALENDAR_NAME)) {"},{"lineNumber":224,"author":{"gitID":"demitycho"},"content":"                    deleteLessonsOfCalendar(service, calendarListEntry.getId());"},{"lineNumber":225,"author":{"gitID":"demitycho"},"content":"                    service.calendars().delete(calendarListEntry.getId()).execute();"},{"lineNumber":226,"author":{"gitID":"demitycho"},"content":"                }"},{"lineNumber":227,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"demitycho"},"content":"            pageToken \u003d calendarList.getNextPageToken();"},{"lineNumber":229,"author":{"gitID":"demitycho"},"content":"        } while (pageToken !\u003d null);"},{"lineNumber":230,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":231,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":232,"author":{"gitID":"demitycho"},"content":"        logger.info(\"Successfully deleted all previous events\");"},{"lineNumber":233,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":235,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"demitycho"},"content":"     * Batch delete the Events from Calendar with {@code calendarID}"},{"lineNumber":237,"author":{"gitID":"demitycho"},"content":"     * @param service"},{"lineNumber":238,"author":{"gitID":"demitycho"},"content":"     * @param calendarId"},{"lineNumber":239,"author":{"gitID":"demitycho"},"content":"     * @throws IOException"},{"lineNumber":240,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"demitycho"},"content":"    public static void deleteLessonsOfCalendar(Calendar service, String calendarId) throws IOException {"},{"lineNumber":242,"author":{"gitID":"demitycho"},"content":"        DateTime now \u003d new DateTime(System.currentTimeMillis());"},{"lineNumber":243,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":244,"author":{"gitID":"demitycho"},"content":"        Events events \u003d service.events().list(calendarId)"},{"lineNumber":245,"author":{"gitID":"demitycho"},"content":"                .setMaxResults(200)"},{"lineNumber":246,"author":{"gitID":"demitycho"},"content":"                .setTimeMin(now)"},{"lineNumber":247,"author":{"gitID":"demitycho"},"content":"                .setSingleEvents(true)"},{"lineNumber":248,"author":{"gitID":"demitycho"},"content":"                .execute();"},{"lineNumber":249,"author":{"gitID":"demitycho"},"content":"        for (Event event : events.getItems()) {"},{"lineNumber":250,"author":{"gitID":"demitycho"},"content":"            service.events().delete(calendarId, event.getId()).execute();"},{"lineNumber":251,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":253}},{"path":"src/main/java/seedu/address/external/GContactsService.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.external;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.client.contacts.ContactsService;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.PlainTextConstruct;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.contacts.ContactEntry;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.contacts.ContactFeed;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.contacts.ContactGroupEntry;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.contacts.ContactGroupFeed;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.contacts.GroupMembershipInfo;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.extensions.Email;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.extensions.FullName;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.extensions.Name;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.data.extensions.PhoneNumber;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.util.PreconditionFailedException;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.util.ServiceException;"},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.student.Student;"},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":" * Constructs a new GContactsService object to communicate with Google\u0027s APIs"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":" * The upload process is still synchronous, the UI will freeze as data is being uploaded"},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":" * There will be logging here to show state updates as it is difficult to show UI changes."},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":"public class GContactsService {"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":"    public static final String STRING_STUDENT_GROUP_NAME \u003d \"Students\";"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":"    public static final String STRING_BASE_GROUP_ATOM_ID \u003d"},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":"            \"http://www.google.com/m8/feeds/groups/codeducatorapp%40gmail.com/base/6\";"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(GContactsService.class);"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"    private Credential credential;"},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"    public GContactsService() {}"},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":"    public GContactsService(Credential credential) {"},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"        this.credential \u003d credential;"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":"    public void setCredential(Credential credential) {"},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"        this.credential \u003d credential;"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    public Credential getCredential() {"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"        return credential;"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"     * Converts a Student object to a ContactEntry for insertion"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"     * @param student"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    private static ContactEntry studentToContactEntry(Student student) {"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":"        ContactEntry contact \u003d new ContactEntry();"},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":"        Name name \u003d new Name();"},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"        FullName newFullName \u003d new FullName();"},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"        newFullName.setValue(student.getName().toString());"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":"        name.setFullName(newFullName);"},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"        contact.setName(name);"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"        PhoneNumber primaryPhoneNumber \u003d new PhoneNumber();"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        primaryPhoneNumber.setPhoneNumber(student.getPhone().toString());"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"        primaryPhoneNumber.setRel(\"http://schemas.google.com/g/2005#work\");"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"        primaryPhoneNumber.setPrimary(true);"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        contact.addPhoneNumber(primaryPhoneNumber);"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        Email primaryMail \u003d new Email();"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"        primaryMail.setAddress(student.getEmail().toString());"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":"        primaryMail.setRel(\"http://schemas.google.com/g/2005#home\");"},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"        primaryMail.setPrimary(true);"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":"        contact.addEmailAddress(primaryMail);"},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"        contact.addGroupMembershipInfo("},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"                new GroupMembershipInfo(false, STRING_BASE_GROUP_ATOM_ID));"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"        contact.setContent(new PlainTextConstruct(student.getUniqueKey().toString()));"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        return contact;"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"     * Syncs the Addressbook with the user\u0027s Google account\u0027s Google Contacts."},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":"     * @param addressBook"},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"     * @throws ServiceException"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"     * @throws IOException"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"    public void synchronize(ReadOnlyAddressBook addressBook)"},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":"            throws ServiceException, IOException {"},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"        ContactsService myService \u003d new ContactsService(GServiceManager.APPLICATION_NAME);"},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"        myService.setOAuth2Credentials(credential);"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"        URL postUrl \u003d new URL(\"https://www.google.com/m8/feeds/contacts/default/full\");"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"        clearAllOldContacts(myService);"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"        ContactGroupEntry studentGroupEntry \u003d createStudentGroupEntry(myService);"},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"        for (Student student : addressBook.getStudentList()) {"},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"            ContactEntry toBeInserted \u003d studentToContactEntry(student);"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"            toBeInserted.addGroupMembershipInfo("},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":"                    new GroupMembershipInfo(false, studentGroupEntry.getId()));"},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"            logger.info(String.format(\"Contact created for: %s\", student.getName()));"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":"            myService.insert(postUrl, toBeInserted);"},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"        logger.info(\"Successfully updated Google Contacts\");"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"     * Gets the Atomic Id {@code ContactGroupEntry.getId()} of the \"Students\" group"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"     * that the contacts will be uploaded to"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"     * @param myService"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"     * @throws ServiceException"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"     * @throws IOException"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"    public static ContactGroupEntry getStudentGroupEntry(ContactsService myService)"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"            throws ServiceException, IOException, NullPointerException {"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"        // Request the feed"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"        URL feedUrl \u003d new URL(\"https://www.google.com/m8/feeds/groups/default/full\");"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"        ContactGroupFeed resultFeed \u003d myService.getFeed(feedUrl, ContactGroupFeed.class);"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"        for (ContactGroupEntry groupEntry : resultFeed.getEntries()) {"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":"            if (groupEntry.getTitle().getPlainText().equals(STRING_STUDENT_GROUP_NAME)) {"},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"                return groupEntry;"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":"        return null;"},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":"     * Creates a new ContactGroupEntry called \"Students\""},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":"     * Gets the Atomic Id {@code ContactGroupEntry.getId()} that the contacts will be uploaded to"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"     * @param myService"},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"     * @throws ServiceException"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"     * @throws IOException"},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"    public static ContactGroupEntry createStudentGroupEntry(ContactsService myService)"},{"lineNumber":150,"author":{"gitID":"demitycho"},"content":"            throws ServiceException, IOException {"},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":"        // Create the entry to insert"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":"        ContactGroupEntry newGroup \u003d new ContactGroupEntry();"},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":"        newGroup.setTitle(new PlainTextConstruct(STRING_STUDENT_GROUP_NAME));"},{"lineNumber":154,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":155,"author":{"gitID":"demitycho"},"content":"        // Ask the service to insert the new entry"},{"lineNumber":156,"author":{"gitID":"demitycho"},"content":"        URL postUrl \u003d new URL(\"https://www.google.com/m8/feeds/groups/default/full\");"},{"lineNumber":157,"author":{"gitID":"demitycho"},"content":"        ContactGroupEntry createdGroup \u003d myService.insert(postUrl, newGroup);"},{"lineNumber":158,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":159,"author":{"gitID":"demitycho"},"content":"        logger.info(\"Successfully created Google Contact group: Student\");"},{"lineNumber":160,"author":{"gitID":"demitycho"},"content":"        return createdGroup;"},{"lineNumber":161,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":163,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"demitycho"},"content":"     * Clears all old contacts that were uploaded, then overwrites them with current data."},{"lineNumber":165,"author":{"gitID":"demitycho"},"content":"     * @param myService"},{"lineNumber":166,"author":{"gitID":"demitycho"},"content":"     * @throws ServiceException"},{"lineNumber":167,"author":{"gitID":"demitycho"},"content":"     * @throws IOException"},{"lineNumber":168,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"demitycho"},"content":"    public static void clearAllOldContacts(ContactsService myService)"},{"lineNumber":170,"author":{"gitID":"demitycho"},"content":"            throws ServiceException, IOException {"},{"lineNumber":171,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":172,"author":{"gitID":"demitycho"},"content":"        ContactGroupEntry studentGroupEntry \u003d getStudentGroupEntry(myService);"},{"lineNumber":173,"author":{"gitID":"demitycho"},"content":"        URL feedUrl \u003d new URL(\"https://www.google.com/m8/feeds/contacts/default/full\");"},{"lineNumber":174,"author":{"gitID":"demitycho"},"content":"        ContactFeed resultFeed \u003d myService.getFeed(feedUrl, ContactFeed.class);"},{"lineNumber":175,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":176,"author":{"gitID":"demitycho"},"content":"        if (studentGroupEntry !\u003d null) {"},{"lineNumber":177,"author":{"gitID":"demitycho"},"content":"            deleteAllStudentContactsWithStudentGroup("},{"lineNumber":178,"author":{"gitID":"demitycho"},"content":"                    studentGroupEntry.getSelfLink().getHref(), resultFeed);"},{"lineNumber":179,"author":{"gitID":"demitycho"},"content":"            try {"},{"lineNumber":180,"author":{"gitID":"demitycho"},"content":"                studentGroupEntry.delete();"},{"lineNumber":181,"author":{"gitID":"demitycho"},"content":"            } catch (PreconditionFailedException e) {"},{"lineNumber":182,"author":{"gitID":"demitycho"},"content":"                System.out.println(\"Student Group does not Exists!\");"},{"lineNumber":183,"author":{"gitID":"demitycho"},"content":"                e.printStackTrace();"},{"lineNumber":184,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"demitycho"},"content":"        logger.info(\"Successfully deleted old contacts\");"},{"lineNumber":187,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":189,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"demitycho"},"content":"     * Returns true if the list of Groups of a Student in GroupMemberShipInfo has the \"Student\" Group"},{"lineNumber":191,"author":{"gitID":"demitycho"},"content":"     * @param link"},{"lineNumber":192,"author":{"gitID":"demitycho"},"content":"     * @param groupMembershipInfo"},{"lineNumber":193,"author":{"gitID":"demitycho"},"content":"     * @return"},{"lineNumber":194,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"demitycho"},"content":"    public static boolean isStudentGroup(String link, List\u003cGroupMembershipInfo\u003e groupMembershipInfo) {"},{"lineNumber":196,"author":{"gitID":"demitycho"},"content":"        String[] linkParts \u003d link.split(\"/\");"},{"lineNumber":197,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":198,"author":{"gitID":"demitycho"},"content":"        for (GroupMembershipInfo group : groupMembershipInfo) {"},{"lineNumber":199,"author":{"gitID":"demitycho"},"content":"            String[] hrefParts \u003d group.getHref().split(\"/\");"},{"lineNumber":200,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":201,"author":{"gitID":"demitycho"},"content":"            if (hrefParts[hrefParts.length - 1].equals(linkParts[linkParts.length - 1])) {"},{"lineNumber":202,"author":{"gitID":"demitycho"},"content":"                return true;"},{"lineNumber":203,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"demitycho"},"content":"        return false;"},{"lineNumber":206,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":208,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"demitycho"},"content":"     * Deletes all the Student contacts under Contact Group \"Students\""},{"lineNumber":210,"author":{"gitID":"demitycho"},"content":"     * @param studentGroupHref"},{"lineNumber":211,"author":{"gitID":"demitycho"},"content":"     * @param resultFeed"},{"lineNumber":212,"author":{"gitID":"demitycho"},"content":"     * @throws ServiceException"},{"lineNumber":213,"author":{"gitID":"demitycho"},"content":"     * @throws IOException"},{"lineNumber":214,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"demitycho"},"content":"    public static void deleteAllStudentContactsWithStudentGroup("},{"lineNumber":216,"author":{"gitID":"demitycho"},"content":"            String studentGroupHref, ContactFeed resultFeed) throws ServiceException, IOException {"},{"lineNumber":217,"author":{"gitID":"demitycho"},"content":"        for (ContactEntry entry : resultFeed.getEntries()) {"},{"lineNumber":218,"author":{"gitID":"demitycho"},"content":"            if (isStudentGroup(studentGroupHref, entry.getGroupMembershipInfos())) {"},{"lineNumber":219,"author":{"gitID":"demitycho"},"content":"                entry.delete();"},{"lineNumber":220,"author":{"gitID":"demitycho"},"content":"            }"},{"lineNumber":221,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"demitycho"},"content":"}"},{"lineNumber":224,"author":{"gitID":"demitycho"},"content":""}],"authorContributionMap":{"demitycho":223,"-":1}},{"path":"src/main/java/seedu/address/external/GServiceManager.java","lines":[{"lineNumber":1,"author":{"gitID":"demitycho"},"content":"package seedu.address.external;"},{"lineNumber":2,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":3,"author":{"gitID":"demitycho"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"demitycho"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"demitycho"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"demitycho"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"demitycho"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":9,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":10,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":11,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":12,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":13,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":14,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":16,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.http.javanet.NetHttpTransport;"},{"lineNumber":17,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":18,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":19,"author":{"gitID":"demitycho"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":20,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.calendar.CalendarScopes;"},{"lineNumber":21,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":22,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.oauth2.Oauth2;"},{"lineNumber":23,"author":{"gitID":"demitycho"},"content":"import com.google.api.services.oauth2.model.Userinfoplus;"},{"lineNumber":24,"author":{"gitID":"demitycho"},"content":"import com.google.gdata.util.ServiceException;"},{"lineNumber":25,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":26,"author":{"gitID":"demitycho"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":27,"author":{"gitID":"demitycho"},"content":"import seedu.address.external.exceptions.CredentialsException;"},{"lineNumber":28,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitID":"demitycho"},"content":"import seedu.address.model.ReadOnlySchedule;"},{"lineNumber":30,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":31,"author":{"gitID":"demitycho"},"content":"//@@author demitycho"},{"lineNumber":32,"author":{"gitID":"demitycho"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"demitycho"},"content":" * Manages the two Google Services, Google Contacts as well as Google Calendar"},{"lineNumber":34,"author":{"gitID":"demitycho"},"content":" * The upload process is still synchronous, the UI will freeze as data is being uploaded"},{"lineNumber":35,"author":{"gitID":"demitycho"},"content":" * There will be logging here to show state updates as it is difficult to show UI changes."},{"lineNumber":36,"author":{"gitID":"demitycho"},"content":" */"},{"lineNumber":37,"author":{"gitID":"demitycho"},"content":"public class GServiceManager {"},{"lineNumber":38,"author":{"gitID":"demitycho"},"content":"    public static final String[] SCOPES_ARRAY \u003d new String[]{"},{"lineNumber":39,"author":{"gitID":"demitycho"},"content":"        \"https://www.googleapis.com/auth/userinfo.profile\","},{"lineNumber":40,"author":{"gitID":"demitycho"},"content":"        \"https://www.googleapis.com/auth/userinfo.email\","},{"lineNumber":41,"author":{"gitID":"demitycho"},"content":"        \"https://www.google.com/m8/feeds/\","},{"lineNumber":42,"author":{"gitID":"demitycho"},"content":"        CalendarScopes.CALENDAR};"},{"lineNumber":43,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":44,"author":{"gitID":"demitycho"},"content":"    /** OAuth 2.0 scopes. */"},{"lineNumber":45,"author":{"gitID":"demitycho"},"content":"    public static final List\u003cString\u003e SCOPES \u003d Arrays.asList(SCOPES_ARRAY);"},{"lineNumber":46,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":47,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":48,"author":{"gitID":"demitycho"},"content":"    public static final String APPLICATION_NAME \u003d \"codeducator/v1.5\";"},{"lineNumber":49,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":50,"author":{"gitID":"demitycho"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(GServiceManager.class);"},{"lineNumber":51,"author":{"gitID":"demitycho"},"content":"    /** Credential information from Google Credentials. Change if any credentials online change**/"},{"lineNumber":52,"author":{"gitID":"demitycho"},"content":"    private static final String CLIENT_ID \u003d \"126472549776-8cd9bk56sfubm9rkacjivecikppte982.apps.googleusercontent.com\";"},{"lineNumber":53,"author":{"gitID":"demitycho"},"content":"    private static final String CLIENT_SECRET \u003d \"nyBpzm1OjnKNZOd0-kT1uo7W\";"},{"lineNumber":54,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":55,"author":{"gitID":"demitycho"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":56,"author":{"gitID":"demitycho"},"content":"    private static final JsonFactory JSON_FACTORY \u003d"},{"lineNumber":57,"author":{"gitID":"demitycho"},"content":"            JacksonFactory.getDefaultInstance();"},{"lineNumber":58,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":59,"author":{"gitID":"demitycho"},"content":"    /** Global instance of the HTTP transport. */"},{"lineNumber":60,"author":{"gitID":"demitycho"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":61,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":62,"author":{"gitID":"demitycho"},"content":"    private static GoogleClientSecrets clientSecrets;"},{"lineNumber":63,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":64,"author":{"gitID":"demitycho"},"content":"    private static final File DATA_STORE_DIR \u003d new java.io.File("},{"lineNumber":65,"author":{"gitID":"demitycho"},"content":"            \"./credentials\");"},{"lineNumber":66,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":67,"author":{"gitID":"demitycho"},"content":"    private Credential credential;"},{"lineNumber":68,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":69,"author":{"gitID":"demitycho"},"content":"    static {"},{"lineNumber":70,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"demitycho"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":72,"author":{"gitID":"demitycho"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":73,"author":{"gitID":"demitycho"},"content":"        } catch (Throwable t) {"},{"lineNumber":74,"author":{"gitID":"demitycho"},"content":"            t.printStackTrace();"},{"lineNumber":75,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":78,"author":{"gitID":"demitycho"},"content":"    public GServiceManager() { }"},{"lineNumber":79,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":80,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"demitycho"},"content":"     * Login method for user to login to their Google account"},{"lineNumber":82,"author":{"gitID":"demitycho"},"content":"     * @throws CredentialsException"},{"lineNumber":83,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"demitycho"},"content":"    public void login() throws CredentialsException, IOException {"},{"lineNumber":85,"author":{"gitID":"demitycho"},"content":"        if (credential !\u003d null) {"},{"lineNumber":86,"author":{"gitID":"demitycho"},"content":"            Oauth2 oauth2 \u003d new Oauth2.Builder("},{"lineNumber":87,"author":{"gitID":"demitycho"},"content":"                    new NetHttpTransport(), new JacksonFactory(), credential)"},{"lineNumber":88,"author":{"gitID":"demitycho"},"content":"                    .setApplicationName(APPLICATION_NAME).build();"},{"lineNumber":89,"author":{"gitID":"demitycho"},"content":"            Userinfoplus userInfo \u003d oauth2.userinfo().get().execute();"},{"lineNumber":90,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":91,"author":{"gitID":"demitycho"},"content":"            logger.warning(\"Already logged in to \" + userInfo.getEmail());"},{"lineNumber":92,"author":{"gitID":"demitycho"},"content":"            throw new CredentialsException(\"You are already logged in.\");"},{"lineNumber":93,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"demitycho"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":95,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":96,"author":{"gitID":"demitycho"},"content":"        GoogleAuthorizationCodeFlow flow \u003d"},{"lineNumber":97,"author":{"gitID":"demitycho"},"content":"                new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":98,"author":{"gitID":"demitycho"},"content":"                        httpTransport, JSON_FACTORY, CLIENT_ID, CLIENT_SECRET, SCOPES)"},{"lineNumber":99,"author":{"gitID":"demitycho"},"content":"                        .setDataStoreFactory(dataStoreFactory)"},{"lineNumber":100,"author":{"gitID":"demitycho"},"content":"                        .setAccessType(\"offline\")"},{"lineNumber":101,"author":{"gitID":"demitycho"},"content":"                        .build();"},{"lineNumber":102,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":103,"author":{"gitID":"demitycho"},"content":"        credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":104,"author":{"gitID":"demitycho"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":105,"author":{"gitID":"demitycho"},"content":"        Oauth2 oauth2 \u003d new Oauth2.Builder("},{"lineNumber":106,"author":{"gitID":"demitycho"},"content":"                new NetHttpTransport(), new JacksonFactory(), credential)"},{"lineNumber":107,"author":{"gitID":"demitycho"},"content":"                .setApplicationName(APPLICATION_NAME).build();"},{"lineNumber":108,"author":{"gitID":"demitycho"},"content":"        Userinfoplus userInfo \u003d oauth2.userinfo().get().execute();"},{"lineNumber":109,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":110,"author":{"gitID":"demitycho"},"content":"        logger.info(\"Successfully logged in to \" + userInfo.getEmail());"},{"lineNumber":111,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":113,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"demitycho"},"content":"     * Logout method for the user to logout of their Google account locally"},{"lineNumber":115,"author":{"gitID":"demitycho"},"content":"     * @throws CredentialsException"},{"lineNumber":116,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"demitycho"},"content":"    public void logout() throws CredentialsException {"},{"lineNumber":118,"author":{"gitID":"demitycho"},"content":"        // Delete credentials from data store directory"},{"lineNumber":119,"author":{"gitID":"demitycho"},"content":"        File dataStoreDirectory \u003d dataStoreFactory.getDataDirectory();"},{"lineNumber":120,"author":{"gitID":"demitycho"},"content":"        if (dataStoreDirectory.list().length \u003d\u003d 0 || credential \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitID":"demitycho"},"content":"            throw new CredentialsException(\"You are not logged in\");"},{"lineNumber":122,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"demitycho"},"content":"        credential \u003d null;"},{"lineNumber":124,"author":{"gitID":"demitycho"},"content":"        for (File file : dataStoreDirectory.listFiles()) {"},{"lineNumber":125,"author":{"gitID":"demitycho"},"content":"            file.delete();"},{"lineNumber":126,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"demitycho"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"demitycho"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":129,"author":{"gitID":"demitycho"},"content":"        } catch (IOException e) {"},{"lineNumber":130,"author":{"gitID":"demitycho"},"content":"            e.printStackTrace();"},{"lineNumber":131,"author":{"gitID":"demitycho"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":134,"author":{"gitID":"demitycho"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"demitycho"},"content":"     * Uploads the schedule to Google Calendar"},{"lineNumber":136,"author":{"gitID":"demitycho"},"content":"     * @param addressBook"},{"lineNumber":137,"author":{"gitID":"demitycho"},"content":"     * @param schedule"},{"lineNumber":138,"author":{"gitID":"demitycho"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"demitycho"},"content":"    public void synchronize(ReadOnlyAddressBook addressBook, ReadOnlySchedule schedule)"},{"lineNumber":140,"author":{"gitID":"demitycho"},"content":"            throws IOException, ServiceException {"},{"lineNumber":141,"author":{"gitID":"demitycho"},"content":"        GContactsService gContactsService \u003d new GContactsService(credential);"},{"lineNumber":142,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":143,"author":{"gitID":"demitycho"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d Starting Google Contacts sync \u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":144,"author":{"gitID":"demitycho"},"content":"        gContactsService.synchronize(addressBook);"},{"lineNumber":145,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":146,"author":{"gitID":"demitycho"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d Starting Google Calendar sync \u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":147,"author":{"gitID":"demitycho"},"content":"        GCalendarService gCalendarService \u003d new GCalendarService("},{"lineNumber":148,"author":{"gitID":"demitycho"},"content":"                credential, httpTransport, JSON_FACTORY);"},{"lineNumber":149,"author":{"gitID":"demitycho"},"content":"        gCalendarService.synchronize(schedule, addressBook);"},{"lineNumber":150,"author":{"gitID":"demitycho"},"content":""},{"lineNumber":151,"author":{"gitID":"demitycho"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d Google Contacts and Calendar synced! \u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":152,"author":{"gitID":"demitycho"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"demitycho"},"content":"}"}],"authorContributionMap":{"demitycho":153}}]
