var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d _NUSCouples_ - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toclevels: 3"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B4/main"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"By: `Team T09-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"Welcome to the User Guide for _NUSCouples_!"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"_NUSCouples_ is a desktop app *specially made for you*, couples from the National University of Singapore (NUS),"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"to create memories easily amid our *hectic school term*. Imagine what it would be like to be able"},{"lineNumber":23,"author":{"gitID":"-"},"content":"identify common breaks, schedule meetings and view important dates with your partner, and record your thoughts or"},{"lineNumber":24,"author":{"gitID":"-"},"content":"feelings, *all in the same application* mere keystrokes away. Best of all, *everything* can be controlled from the"},{"lineNumber":25,"author":{"gitID":"-"},"content":"handy Command Line Interface (CLI). Experience the *clarity* that comes with a Graphical User Interface (GUI), with"},{"lineNumber":26,"author":{"gitID":"-"},"content":"none of the *pain* of searching for and remembering where each button is."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"Interested yet? Jump to \u003c\u003cQuick Start\u003e\u003e to"},{"lineNumber":29,"author":{"gitID":"-"},"content":"get started. Enjoy!"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"This section will guide you through setting up and using _NUSCouples_ for the first time. Follow this simple step-by-step"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"guide to start using _NUSCouples_ today!"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":40,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":".  Download the latest `NUSCouples.jar` link:{repoURL}/releases[here]."},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for _NUSCouples_."},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"  For example, if you want the app to be installed in your desktop, the folder should look like this:"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"`C:\\Users\\[Username]\\Desktop\\NUSCouples`."},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":".  Double-click the file to start the app. The app window as seen below, should appear in a few seconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"-"},"content":"image:screenshots/0Labels.png[width\u003d\"790\"]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"[cols\u003d\"1,3\", options\u003d\"header\",]"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|1 | Partner details"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|2 | List of Journal entries"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|3 | Browser Panel: Calendar/Timetable display"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|4 | Result display"},{"lineNumber":55,"author":{"gitID":"-"},"content":"|5 | Command box"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"*Congratulations, you have successfully installed _NUSCouples_. Read on for some examples on commands you can try if"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"you are using the app for the first time!*"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"*  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":63,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"* **`add`**`n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 tt/http://modsn.us/wNuIW` :"},{"lineNumber":66,"author":{"gitID":"-"},"content":" adds a partner named `John Doe` to _NUSCouples_."},{"lineNumber":67,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"Refer to \u003c\u003cFeatures\u003e\u003e for more details about each command. +"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":72,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":73,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"Commands follow a command format. At any point in time, if you need a refresher on the commands, enter \"help\""},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":"into the command box for more information. If you only need help for a specific command, enter the command without any"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"parameters for usage help. Typing \"add\" and pressing enter will display the correct format for using the"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"command, and also show an example."},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":84,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"* Commands have an alias, which you can also use to execute the command e.g. to create a new journal entry,"},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":"you can type either `jnew` or `jn`. Read the respective sections learn about our easy to remember aliases."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a"},{"lineNumber":89,"author":{"gitID":"-"},"content":" parameter which can be used as `add n/John Doe`."},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"* Items in square brackets are optional."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"`p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":93,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d General Features"},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":97,"author":{"gitID":"traceurgan"},"content":"This section is for all commands that are not specific to our timetable feature, calendar feature or journal feature."},{"lineNumber":98,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"traceurgan"},"content":"If you are ever unsure of what to do, use this command to display this UserGuide whenever you need it."},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Format: `help` +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Alias: `hlp` +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"image:screenshots/23Help.png[width\u003d\"790\"]"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding your partner : `add`"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"traceurgan"},"content":"Looking to add your significant other to NUSCouples? Look no further. Use this command to add your partner\u0027s details"},{"lineNumber":110,"author":{"gitID":"traceurgan"},"content":"to our amazing app. *All fields are necessary, but they can be in any order.*"},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Adds your partner to _NUSCouples_. +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tt/TIMETABLE_URL` +"},{"lineNumber":114,"author":{"gitID":"-"},"content":"Alias: `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tt/TIMETABLE_URL` +"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"Screenshot: Before +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"image:screenshots/addcmd.png[width\u003d\"790\"] +"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"Screenshot: After +"},{"lineNumber":120,"author":{"gitID":"-"},"content":"image:screenshots/2Add.png[width\u003d\"790\"]"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"****"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* The timetable url provided has to be a valid https://nusmods.com[NUSMods] short URL."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* You can only have one partner in _NUSCouples_ at any one time."},{"lineNumber":125,"author":{"gitID":"-"},"content":"****"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 tt/http://modsn.us/IO4n5`"},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 tt/http://modsn.us/wNuIW`"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing your partner : `edit`"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"traceurgan"},"content":"If you ever need to update your partner\u0027s details, use this command. All fields are optional, *but* at least one valid"},{"lineNumber":135,"author":{"gitID":"traceurgan"},"content":"field must be provided."},{"lineNumber":136,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"Edits your existing partner in _NUSCouples_. +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Format: `edit [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [tt/TIMETABLE_URL]` +"},{"lineNumber":139,"author":{"gitID":"-"},"content":"Alias: `ed [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [tt/TIMETABLE_URL]` +"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"Screenshot: Before +"},{"lineNumber":142,"author":{"gitID":"-"},"content":"image:screenshots/14EditTT.png[width\u003d\"790\"] +"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"Screenshot: After +"},{"lineNumber":145,"author":{"gitID":"-"},"content":"image:screenshots/15EditTTAfter.png[width\u003d\"790\"] +"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"****"},{"lineNumber":148,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":150,"author":{"gitID":"-"},"content":"* Your partner must exist in _NUSCouples_ before this command can be executed."},{"lineNumber":151,"author":{"gitID":"-"},"content":"****"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"* `edit p/91234567 e/johndoe@example.com` +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Edits the phone number and email address of your partner to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":157,"author":{"gitID":"-"},"content":"* `edit n/Betsy Crower` +"},{"lineNumber":158,"author":{"gitID":"-"},"content":"Edits the name of your partner to be `Betsy Crower`."},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting your partner : `delete`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"traceurgan"},"content":"If it would take too much effort to edit your partner, we got you covered. You can just delete their details and"},{"lineNumber":163,"author":{"gitID":"traceurgan"},"content":"add them again."},{"lineNumber":164,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"Deletes your partner from _NUSCouples_. +"},{"lineNumber":166,"author":{"gitID":"-"},"content":"Format: `delete` +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Alias: `d` +"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"Screenshot: Before +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"image:screenshots/10Delete.png[width\u003d\"790\"] +"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"Screenshot: After +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"image:screenshots/11DeleteAfter.png[width\u003d\"790\"] +"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"****"},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Deletes your partner."},{"lineNumber":177,"author":{"gitID":"-"},"content":"* Your partner must exist in _NUSCouples_ before this command can be executed."},{"lineNumber":178,"author":{"gitID":"-"},"content":"****"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"traceurgan"},"content":"Want to see the most recent commands used this session? Use this command. It can help you identify if you suspect you"},{"lineNumber":183,"author":{"gitID":"traceurgan"},"content":"have entered the wrong command."},{"lineNumber":184,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Format: `history` +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Alias: `hist` +"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"Screenshot: Before +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"image:screenshots/histcmd.png[width\u003d\"790\"] +"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Screenshot: After +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"image:screenshots/histcmdafter.png[width\u003d\"790\"] +"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":197,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":203,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":204,"author":{"gitID":"traceurgan"},"content":"Oh no! Did you accidentally delete your partner\u0027s details? Quick use this command. Only some commands can be undone"},{"lineNumber":205,"author":{"gitID":"traceurgan"},"content":"right now. Read on for more details."},{"lineNumber":206,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"Restores _NUSCouples_ to the state before the previous \"undoable command\" was executed. +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"Format: `undo` +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"Alias: `u` +"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"Screenshot: Before +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"image:screenshots/16EditUndo.png[width\u003d\"790\"] +"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"Screenshot: After +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image:screenshots/17EditUndoAfter.png[width\u003d\"790\"] +"},{"lineNumber":216,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":219,"author":{"gitID":"traceurgan"},"content":"Undoable commands: those commands that modify _NUSCouples_ content (`add`, `delete` and `edit`)."},{"lineNumber":220,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":221,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"* `delete` +"},{"lineNumber":225,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete` command) +"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* `select` +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`help` +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"* `edit n/John Doe` +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"`delete` +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete` command) +"},{"lineNumber":235,"author":{"gitID":"-"},"content":"`undo` (reverses the `edit n/John Doe` command) +"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"traceurgan"},"content":"Did you undo a command, only to change your mind? We have a command just for you. Note that similar restrictions that"},{"lineNumber":240,"author":{"gitID":"traceurgan"},"content":" apply for undo command are also applied to redo command."},{"lineNumber":241,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"Format: `redo` +"},{"lineNumber":244,"author":{"gitID":"-"},"content":"Alias: `r`"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Screenshot: Before +"},{"lineNumber":247,"author":{"gitID":"-"},"content":"image:screenshots/18EditRedo.png[width\u003d\"790\"] +"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"Screenshot: After +"},{"lineNumber":250,"author":{"gitID":"-"},"content":"image:screenshots/19EditRedoAfter.png[width\u003d\"790\"] +"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":253,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"* `delete` +"},{"lineNumber":255,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete` command) +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete` command) +"},{"lineNumber":257,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"* `delete` +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"* `edit n/John Doe` +"},{"lineNumber":263,"author":{"gitID":"-"},"content":"`delete` +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete` command) +"},{"lineNumber":265,"author":{"gitID":"-"},"content":"`undo` (reverses the `edit n/John Doe` command) +"},{"lineNumber":266,"author":{"gitID":"-"},"content":"`redo` (reapplies the `edit n/John Doe` command) +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete` command) +"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Saving the data"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"traceurgan"},"content":"_NUSCouples_ data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":272,"author":{"gitID":"traceurgan"},"content":"There is no need to save manually. Data is stored in a data folder created in the same directory as _NUSCouples_.jar."},{"lineNumber":273,"author":{"gitID":"traceurgan"},"content":"For example, if the .jar file is in `C:\\Program Files (x86)\\NUSCouples`, _NUSCouples_ data will be stored in"},{"lineNumber":274,"author":{"gitID":"traceurgan"},"content":"`C:\\Program Files (x86)\\NUSCouples\\data`."},{"lineNumber":275,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":276,"author":{"gitID":"traceurgan"},"content":"[NOTE]"},{"lineNumber":277,"author":{"gitID":"traceurgan"},"content":"If the _NUSCouples_.jar file is moved to another location, you should move the data folder as well.  Refer to"},{"lineNumber":278,"author":{"gitID":"traceurgan"},"content":"\u003c\u003cData, FAQ Section 3.1, Questions about Data\u003e\u003e for more information."},{"lineNumber":279,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":280,"author":{"gitID":"traceurgan"},"content":"[WARNING]"},{"lineNumber":281,"author":{"gitID":"traceurgan"},"content":"The data is stored as an editable xml file. If the user manually edits this file, _NUSCouples_ may not be able to read"},{"lineNumber":282,"author":{"gitID":"traceurgan"},"content":"it properly. Refer to \u003c\u003cData, FAQ Section 3.1, Questions about Data\u003e\u003e  for more information."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":287,"author":{"gitID":"-"},"content":"Format: `exit` +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"Alias: `ex` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":291,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"// tag::timetable[]"},{"lineNumber":295,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Timetable"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding your partner\u0027s timetable [Since v1.3]"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cAdding your partner : `add`\u003e\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing your partner\u0027s timetable [Since v1.3]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cEditing your partner : `edit`\u003e\u003e"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing your partner\u0027s timetable : `tview`[Since v1.4]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"Shows the current saved timetable of your partner. +"},{"lineNumber":308,"author":{"gitID":"-"},"content":"Format: `tview` +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"Alias: `tv`"},{"lineNumber":310,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":312,"author":{"gitID":"-"},"content":"`Click` your partner\u0027s details in the list panel on the left to view your partner\u0027s timetable. +"},{"lineNumber":313,"author":{"gitID":"-"},"content":"`Ctrl` + `Click` your partner\u0027s details to go back to calendar view."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Comparing timetable : `tcompare` [Since v1.5]"},{"lineNumber":316,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"Displays the common breaks shared by the given timetable and your partner\u0027s timetable in a timetable format. +"},{"lineNumber":318,"author":{"gitID":"-"},"content":"Format: `tcompare tt/TIMETABLE_URL` +"},{"lineNumber":319,"author":{"gitID":"-"},"content":"Alias: `tc tt/TIMETABLE_URL`"},{"lineNumber":320,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"****"},{"lineNumber":322,"author":{"gitID":"-"},"content":"* The timetable url provided has to be a valid https://nusmods.com[NUSMods] short URL."},{"lineNumber":323,"author":{"gitID":"-"},"content":"* Your partner must exist in _NUSCouples_ before this command can be executed."},{"lineNumber":324,"author":{"gitID":"-"},"content":"****"},{"lineNumber":325,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":327,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"* `tcompare tt/http://modsn.us/IO4n5` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"* `tc tt/http://modsn.us/wNuIW` +"},{"lineNumber":330,"author":{"gitID":"-"},"content":"// end::timetable[]"},{"lineNumber":331,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"// tag::CalendarCommands[]"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":335,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":336,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":337,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar"},{"lineNumber":339,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d When you want to check which are the available dates you are free: `Calendar`"},{"lineNumber":340,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"View calendar function. +"},{"lineNumber":342,"author":{"gitID":"-"},"content":"Format: `cview` +"},{"lineNumber":343,"author":{"gitID":"-"},"content":"Alias: `cv` +"},{"lineNumber":344,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"Selecting Different Views +"},{"lineNumber":346,"author":{"gitID":"-"},"content":"Day: `cal d` +"},{"lineNumber":347,"author":{"gitID":"-"},"content":"Week: `cal w` +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"Month: `cal m` +"},{"lineNumber":349,"author":{"gitID":"-"},"content":"Year: `cal y` +"},{"lineNumber":350,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"The image below shows a calendar view in day after you have entered `cal d`"},{"lineNumber":352,"author":{"gitID":"-"},"content":"in the command box. From the calendar, you can see if there is any events on that day."},{"lineNumber":353,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"image::CalendarView.png[width\u003d\"650\"]"},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d When you have a date with your partner then you decides to add the event to the Calendar after making sure that there are no clashes with your timetable nor schedules: `Appointment`"},{"lineNumber":356,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"Adds new event to the calendar. +"},{"lineNumber":358,"author":{"gitID":"-"},"content":"Format: `appointment` +"},{"lineNumber":359,"author":{"gitID":"-"},"content":"Alias: `appt`"},{"lineNumber":360,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"Following the Format: +"},{"lineNumber":362,"author":{"gitID":"-"},"content":"To add an event, Description and Time parameters are COMPULSORY fields that are required to enter. +"},{"lineNumber":363,"author":{"gitID":"-"},"content":"To add Description and time - `d/ + Description, Time` +"},{"lineNumber":364,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"Example: `appointment d/Lunch, Next Monday 3pm` +"},{"lineNumber":366,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"The image below shows a calendar view in day after you have entered `appt 1 d/Checkup, tomorrow 10am to 12pm` event."},{"lineNumber":368,"author":{"gitID":"-"},"content":"As you can see, the event is nicely populated on the calendar after you have successfully created a new event!"},{"lineNumber":369,"author":{"gitID":"-"},"content":"Moreover, this Calendar feature allows you to enter multiple events too!! And the footer will show the time when you make changes"},{"lineNumber":370,"author":{"gitID":"-"},"content":"to the Calendar!! +"},{"lineNumber":371,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"image::CalendarAdd.png[width\u003d\"650\"]"},{"lineNumber":373,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d When your partner suddenly cannot make it on the scheduled event: `cancel`"},{"lineNumber":375,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"Delete specified event from the calendar. +"},{"lineNumber":377,"author":{"gitID":"-"},"content":"Format: `cancel` +"},{"lineNumber":378,"author":{"gitID":"-"},"content":"Alias: Nil"},{"lineNumber":379,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"Following the Format: +"},{"lineNumber":381,"author":{"gitID":"-"},"content":"To Cancel specified event: `Description with Person name` +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"Example: `cancel Lunch with John Doe` +"},{"lineNumber":383,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"The images below shows the before and after calendar view after you have executed the cancel appointment commands. +"},{"lineNumber":385,"author":{"gitID":"-"},"content":"As you can see, after the commands are executed the footer will display the updated time as well and result panel will"},{"lineNumber":386,"author":{"gitID":"-"},"content":"display `appointment canceled`. When there is no events on that day, the calendar will also display `no entries` too."},{"lineNumber":387,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"Screenshot: The Calendar View before you enter the Cancel Command  +"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"image::beforeCancelCal.png[width\u003d\"650\"]"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"Screenshot: The Calendar View after you enter the Cancel Command +"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"image::afterCancelCal.png[width\u003d\"650\"]"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Accessibility"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"Unique KeyStrokes in NUSCouples. +"},{"lineNumber":401,"author":{"gitID":"-"},"content":"Move Cursor to front: `Shift Ctrl` +"},{"lineNumber":402,"author":{"gitID":"-"},"content":"Move Cursor to behind: `Shift Alt` +"},{"lineNumber":403,"author":{"gitID":"-"},"content":"Move Cursor to behind (MAC USERS): `Shift Option` +"},{"lineNumber":404,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":406,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":407,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":408,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"// end::CalendarCommands[]"},{"lineNumber":410,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":411,"author":{"gitID":"traceurgan"},"content":"// tag::journal[]"},{"lineNumber":412,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Journal"},{"lineNumber":413,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":414,"author":{"gitID":"traceurgan"},"content":"_NUSCouples_ provides you with a space to write, save and view journal entries. The list of saved journal entries will"},{"lineNumber":415,"author":{"gitID":"traceurgan"},"content":"be shown in the main window. Read on for more details about how to use this feature."},{"lineNumber":416,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":417,"author":{"gitID":"traceurgan"},"content":"[NOTE]"},{"lineNumber":418,"author":{"gitID":"traceurgan"},"content":"Saved journal entries can only be edited on the same day. Once saved, a journal entry cannot be deleted."},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"traceurgan"},"content":"\u003d\u003d\u003d\u003d Creating a new journal entry : `jnew` [Since v1.2]"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"traceurgan"},"content":"Creates a new window that allows the user to input text. The window title will reflect the date"},{"lineNumber":423,"author":{"gitID":"traceurgan"},"content":"it was created on in the format `yyyymmdd - journal`. For example, a journal window opened on the 5th of March"},{"lineNumber":424,"author":{"gitID":"traceurgan"},"content":" 2018 will have a title of `20180305 - journal`. If an entry with that date already exists, it will open"},{"lineNumber":425,"author":{"gitID":"traceurgan"},"content":"that entry in the window. Saving is not required as the journal entry will be automatically saved when the"},{"lineNumber":426,"author":{"gitID":"-"},"content":"journal window is closed. +"},{"lineNumber":427,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":428,"author":{"gitID":"traceurgan"},"content":"To protect you from accidentally entering commands while in the journal window, the journal window will always be in"},{"lineNumber":429,"author":{"gitID":"traceurgan"},"content":"front of the main window."},{"lineNumber":430,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":431,"author":{"gitID":"traceurgan"},"content":"[NOTE]"},{"lineNumber":432,"author":{"gitID":"traceurgan"},"content":"If saving fails, a new window will appear containing your last session data with a warning above your text. You should"},{"lineNumber":433,"author":{"gitID":"traceurgan"},"content":"copy your text to your computer clipboard using kbd:[ctr] + kbd:[c] so you will not lose your data if you need to"},{"lineNumber":434,"author":{"gitID":"traceurgan"},"content":"restart the app."},{"lineNumber":435,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"Format: `jnew` +"},{"lineNumber":437,"author":{"gitID":"-"},"content":"Alias: `jn` +"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"Screenshot: Before +"},{"lineNumber":440,"author":{"gitID":"-"},"content":"image:screenshots/20Jnew.png[width\u003d\"790\"] +"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"Screenshot: After +"},{"lineNumber":443,"author":{"gitID":"-"},"content":"image:screenshots/21JnewAfter1.png[width\u003d\"395\"]"},{"lineNumber":444,"author":{"gitID":"-"},"content":"image:screenshots/22JnewAfter2.png[width\u003d\"395\"] +"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"traceurgan"},"content":"\u003d\u003d\u003d\u003d Viewing journal entries : `jview`"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"traceurgan"},"content":"Selects a journal entry from the list seen in the GUI. The contents of the journal entry will be shown in the main"},{"lineNumber":450,"author":{"gitID":"traceurgan"},"content":"window. Opening a journal window while a journal entry is displayed will display the edited entry once the journal"},{"lineNumber":451,"author":{"gitID":"traceurgan"},"content":"window is closed.+"},{"lineNumber":452,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":453,"author":{"gitID":"traceurgan"},"content":"Format: `jview` +"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"traceurgan"},"content":"Alias: `jv`"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":458,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":459,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"HEARTOFAL1ON"},"content":"// tag::motivate[]"},{"lineNumber":462,"author":{"gitID":"HEARTOFAL1ON"},"content":"\u003d\u003d\u003d Motivational Picture"},{"lineNumber":463,"author":{"gitID":"HEARTOFAL1ON"},"content":"\u003d\u003d\u003d\u003d Send motivational picture via app : `motivate`"},{"lineNumber":464,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":465,"author":{"gitID":"traceurgan"},"content":"Shows the location (by building) of the entered classroom name. +"},{"lineNumber":466,"author":{"gitID":"HEARTOFAL1ON"},"content":"Format: `motivate` +"},{"lineNumber":467,"author":{"gitID":"HEARTOFAL1ON"},"content":"_There is no alias for this feature currently._"},{"lineNumber":468,"author":{"gitID":"HEARTOFAL1ON"},"content":"// end::motivate[]"},{"lineNumber":469,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":470,"author":{"gitID":"-"},"content":"Alias: `jv` +"},{"lineNumber":471,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":472,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":474,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":475,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":476,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":477,"author":{"gitID":"traceurgan"},"content":"\u003d\u003d\u003d Future Features"},{"lineNumber":478,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":482,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"// tag::googleAPI[]"},{"lineNumber":485,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Sync the calendar with Google API `[coming in v2.0]`"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"_{explain how the user can authentic with google API and view and retrieve events from Google}_"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"// end::googleAPI[]"},{"lineNumber":490,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Archiving journal entries `[coming in v2.0]`"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"traceurgan"},"content":"_{explain how the user can export old journal entries to another storage location in their computer}_"},{"lineNumber":493,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Send Google Maps location to phone `[coming in v2.0]`"},{"lineNumber":495,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":496,"author":{"gitID":"traceurgan"},"content":"_{explain how the user can use their phones to navigate to a location in NUS by sending the location to the user\u0027s phone from the Google Maps API}_"},{"lineNumber":497,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Filtering journal entries by date `[coming in v2.0]`"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"Filters journal entries by the specified interval. +"},{"lineNumber":501,"author":{"gitID":"-"},"content":"Format: `jfilter` +"},{"lineNumber":502,"author":{"gitID":"-"},"content":"Alias: `jf` +"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"traceurgan"},"content":"\u003d\u003d\u003d\u003d Finding building location `[coming in v2.0]`"},{"lineNumber":505,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":506,"author":{"gitID":"traceurgan"},"content":"Shows the location (by building) of the entered classroom name. +"},{"lineNumber":507,"author":{"gitID":"traceurgan"},"content":"Format: `location` +"},{"lineNumber":508,"author":{"gitID":"-"},"content":"Alias: `loc` +"},{"lineNumber":509,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Send motivational picture via app `[coming in v2.90]`"},{"lineNumber":511,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":512,"author":{"gitID":"traceurgan"},"content":"Shows the location (by building) of the entered classroom name. +"},{"lineNumber":513,"author":{"gitID":"HEARTOFAL1ON"},"content":"Format: `motivate` +"},{"lineNumber":514,"author":{"gitID":"HEARTOFAL1ON"},"content":"_There is no alias for this feature currently._"},{"lineNumber":515,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":517,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":518,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"traceurgan"},"content":"\u003d\u003d\u003d Data"},{"lineNumber":523,"author":{"gitID":"traceurgan"},"content":"This section is for questions related to _NUSCouples_ data. For more information, refer to \u003c\u003cSaving the data\u003e\u003e +"},{"lineNumber":524,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":525,"author":{"gitID":"traceurgan"},"content":"*Q: How do I transfer my data to another Computer?* +"},{"lineNumber":526,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":527,"author":{"gitID":"traceurgan"},"content":"*A:* Install the app in the other computer and overwrite the empty data folder it creates with the folder that contains"},{"lineNumber":528,"author":{"gitID":"traceurgan"},"content":"the data of your previous NUSCouples folder. +"},{"lineNumber":529,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":530,"author":{"gitID":"traceurgan"},"content":"*Q: Why is the app not showing my previous session data?* +"},{"lineNumber":531,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":532,"author":{"gitID":"traceurgan"},"content":"*A:* Verify that the .jar file was not moved to a new directory recently. If you have done so, ensure that the data"},{"lineNumber":533,"author":{"gitID":"traceurgan"},"content":"folder in the original directory was moved to the new directory. For example, if you have moved _NUSCouples_.jar from"},{"lineNumber":534,"author":{"gitID":"traceurgan"},"content":"`C:\\Program Files (x86)\\NUSCouples` to `C:\\Users\\[Username]\\Desktop\\NUSCouples`, you should move the data folder"},{"lineNumber":535,"author":{"gitID":"traceurgan"},"content":"`C:\\Program Files (x86)\\NUSCouples\\data` to `C:\\Users\\[Username]\\Desktop\\NUSCouples\\data` +"},{"lineNumber":536,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"*Q: Can this app run on mobile devices or tablets?* +"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"*A:* No, this is a desktop app. To be more specific, you are not required to use cursor mouse to handle the App because it is CLI based"},{"lineNumber":540,"author":{"gitID":"traceurgan"},"content":"If the files in the data folder have been manually edited, _NUSCouples_ may not be able to read the data properly."},{"lineNumber":541,"author":{"gitID":"traceurgan"},"content":"_NUSCouples_ takes no responsibility for data loss/ data corruption due to unintended user behavior affecting the data"},{"lineNumber":542,"author":{"gitID":"traceurgan"},"content":"folder, such as deletion or editing of files manually. +"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"traceurgan"},"content":"If the solutions above are not related to your issue, it may be due to a bug. Please contact us at //CONTACT US"},{"lineNumber":545,"author":{"gitID":"traceurgan"},"content":"and attach the log file that should be stored in the same location as the _NUSCouples_.jar file. The log file is named"},{"lineNumber":546,"author":{"gitID":"traceurgan"},"content":"`_NUSCouples_.log.0`. The number at the end may be different. If there are multiple log files, you should attach the"},{"lineNumber":547,"author":{"gitID":"traceurgan"},"content":"*latest* one or attach all of them to be safe. +"},{"lineNumber":548,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":550,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":551,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"[width\u003d\"100%\",cols\u003d\"10%,\u003c20%,\u003c35%,\u003c35%\",options\u003d\"header\",]"},{"lineNumber":556,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":557,"author":{"gitID":"-"},"content":"|Command |Description |Format| Example"},{"lineNumber":558,"author":{"gitID":"-"},"content":"|add, a |Add your partner |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tt/TIMETABLE_URL` |"},{"lineNumber":559,"author":{"gitID":"-"},"content":"`add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 tt/http://modsn.us/IO4n5`"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"|edit, ed |Edit your partner | `edit [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [tt/TIMETABLE_URL]` |"},{"lineNumber":562,"author":{"gitID":"-"},"content":"`edit n/John Doe e/johnd@example.com`"},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"|delete, d |Delete your partner |`delete` |"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"|select, s |View your partner\u0027s timetable |`select` |"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"|history, hist |View command history |`history` |"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"|undo, u |Undo the previous undoable command |`undo` |"},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"|redo, r |Reverses the most recent undo command |`redo` |"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"traceurgan"},"content":"|jview, jv |View a journal entry |`jview` |"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"traceurgan"},"content":"|jnew, jn |Create/edit a journal entry |`jnew` |"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"// tag::CommandSummary[]"},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"|calendar, cal |Viewing your current calendar |`calendar` | cal w"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"|appointment, appt |Adding a new event to your current calendar |`appointment` | appt 1 d/Checkup, tomorrow 10am to 12pm"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"|cancel |Deleting an event from your current calendar |`cancel` |"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"|exit, ex |Exits _NUSCouples_ |`exit` |"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"// end::CommandSummary[]"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":593,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":594,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"}],"authorContributionMap":{"traceurgan":155,"-":427,"HEARTOFAL1ON":12}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"import org.junit.Ignore;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"@Ignore"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    protected Person getInitialData() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"        Person expectedPerson \u003d (Person) SampleDataUtil.getSamplePerson();"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        assertListMatching(getPersonListPanel(), expectedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":6,"-":46}},{"path":"docs/team/DanielNg.adoc","lines":[{"lineNumber":1,"author":{"gitID":"HEARTOFAL1ON"},"content":"\u003d Daniel Ng - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: NUSCouples"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"HEARTOFAL1ON"},"content":"NUSCouples is a CLI-based desktop app targeted towards couples studying in the National University of Singapore (NUS)."},{"lineNumber":12,"author":{"gitID":"HEARTOFAL1ON"},"content":"Written in Java and boasting a GUI client created with JavaFX, it has a total of about 10 kLoC."},{"lineNumber":13,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":14,"author":{"gitID":"HEARTOFAL1ON"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":16,"author":{"gitID":"HEARTOFAL1ON"},"content":"* *Major enhancement*: added *a motivate command*"},{"lineNumber":17,"author":{"gitID":"HEARTOFAL1ON"},"content":"** What it does: allows the user to send a motivational picture to their partner with just one command/one click."},{"lineNumber":18,"author":{"gitID":"HEARTOFAL1ON"},"content":"** Justification: this feature allows the user to stay afloat and develop a positive mood amidst a hectic school schedule."},{"lineNumber":19,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":20,"author":{"gitID":"HEARTOFAL1ON"},"content":"* *Minor enhancement*: added aliases for commands."},{"lineNumber":21,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":22,"author":{"gitID":"HEARTOFAL1ON"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B4/main/blob/master/collated/functional/HEARTOFAL1ON.md[Functional code]]"},{"lineNumber":23,"author":{"gitID":"HEARTOFAL1ON"},"content":" [https://github.com/CS2103JAN2018-T09-B4/main/blob/master/collated/test/HEARTOFAL1ON.md[Test code]]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":29,"author":{"gitID":"HEARTOFAL1ON"},"content":"** Enhancements to existing features (including adding/modifying codes, tests and documentation):"},{"lineNumber":30,"author":{"gitID":"HEARTOFAL1ON"},"content":"*** Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/9[#9]"},{"lineNumber":31,"author":{"gitID":"HEARTOFAL1ON"},"content":"*** Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/17[#17]"},{"lineNumber":32,"author":{"gitID":"HEARTOFAL1ON"},"content":"*** Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/19[#19]"},{"lineNumber":33,"author":{"gitID":"HEARTOFAL1ON"},"content":"*** Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/54[#54]"},{"lineNumber":34,"author":{"gitID":"HEARTOFAL1ON"},"content":"*** Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/60[#60]"},{"lineNumber":35,"author":{"gitID":"HEARTOFAL1ON"},"content":"*** Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/61[#61]"},{"lineNumber":36,"author":{"gitID":"HEARTOFAL1ON"},"content":"*** Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/109[#109]"},{"lineNumber":37,"author":{"gitID":"HEARTOFAL1ON"},"content":"*** Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/124[#124]"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"HEARTOFAL1ON"},"content":"include::../UserGuide.adoc[tag\u003dmotivate]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"HEARTOFAL1ON"},"content":"//include::../DeveloperGuide.adoc[tag\u003d]"}],"authorContributionMap":{"-":29,"HEARTOFAL1ON":25}},{"path":"docs/team/SamuelGan.adoc","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"\u003d Samuel Gan - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: NUSCouples"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"NUSCouples is a desktop application targeted at couples studying in the National University of Singapore (NUS)."},{"lineNumber":12,"author":{"gitID":"-"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"* *Major enhancement*: implemented a *journal in _NUSCouples_.*"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"** What it does: allows the user to write, edit and save journal entries."},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"** Justification: this feature allows the user to record their thoughts and feelings as and when they want to. This is especially"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"useful when one is in a relationship."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a command to compare and display the common breaks in the NUSMods timetable of the person"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"stored in NUSCouples along with one other given timetable. Removed dependency on addressbook as a middle man. Since our project is"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"targeted towards couples, we only need to hold one person. Thus, I reimplemented addressbook methods to apply to only one person."},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B4/main/blob/master/collated/functional/traceurgan.md[Functional code]]"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":" [https://github.com/CS2103JAN2018-T09-B4/main/blob/master/collated/test/traceurgan.md[Test code]]"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":31,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"*** Implemented journal (Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/89[#89])"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"*** Removed addressbook and resolved exising merge conflicts (Pull request https://github.com/CS2103JAN2018-T09-B4/main/pull/162[#162])"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":41,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"include::../UserGuide.adoc[tag\u003djournal]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":49,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"include::../DeveloperGuide.adoc[tag\u003djournal]"}],"authorContributionMap":{"traceurgan":14,"-":37}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cReadOnlyPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, List\u003cReadOnlyPerson\u003e toDisplay) {"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"        toDisplay \u003d model.getPersonAsList();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, ReadOnlyPerson... toDisplay) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Predicate\u003cReadOnlyPerson\u003e getPredicateMatching(ReadOnlyPerson other) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":1,"-":35}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyPerson\u003e addressBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":1,"-":72}},{"path":"src/test/java/systemtests/AppointmentSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":"public class AppointmentSystemTest extends AddressBookSystemTest {"},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":"    public void addAndRemoveAppointment() throws Exception {"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"        Model model \u003d getModel();"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"        ReadOnlyPerson toAddAppointment \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":"        String description \u003d \"dinner\";"},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"        String str \u003d \" 1 d/\" + description + \", tonight 7pm to 10pm\";"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"        String command \u003d AddAppointmentCommand.COMMAND_WORD + str;"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"        assertCommandSuccess(command, toAddAppointment, AddAppointmentParser.getAppointmentFromString(str));"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"        command \u003d CancelAppointmentCommand.COMMAND_WORD + \" \" + description + \" with \" + toAddAppointment.getName();"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"        assertCommandSuccess(command, toAddAppointment, AddAppointmentParser.getAppointmentFromString(str));"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"    }*/"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"    public void changeCalendarView() {"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" d\", CalendarViewCommand.MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" w\", CalendarViewCommand.MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" m\", CalendarViewCommand.MESSAGE_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" y\", CalendarViewCommand.MESSAGE_SUCCESS);"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" q\","},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"    }*/"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"     * Performs verification that calendarview changed"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":"    private void assertCommandSuccess(String command, String message) {"},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"        executeCommand(command);"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"        assertEquals(getResultDisplay().getText() , message);"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":"     * Performs verification that the expected model is the same after command is executing"},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd, appointment appointment) {"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"        String expectedResultMessage;"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"            if (!command.contains(\"cancel\")) {"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"                expectedModel.addAppointment(toAdd, appointment);"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"                expectedResultMessage \u003d AddAppointmentCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"            } else {"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"                expectedModel.removeAppointment(toAdd, appointment);"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"                expectedResultMessage \u003d CancelAppointmentCommand.MESSAGE_SUCCESS;"},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"            throw new IllegalArgumentException(\"person not found in model.\");"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":"     * {@code expectedModel}."},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"     * //@see AppointmentSystemTest#assertCommandSuccess(String, ReadOnlyPerson, appointment)"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"        executeCommand(command);"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":79,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":70,"-":9}},{"path":"src/test/java/seedu/address/ui/JournalWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.JournalWindowHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"public class JournalWindowTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    private JournalWindow journalWindow;"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    private JournalWindowHandle journalWindowHandle;"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    @Before"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"    public void setUp() throws Exception {"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"        guiRobot.interact(() -\u003e journalWindow \u003d new JournalWindow(new Date(\"20180405\")));"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"        Stage journalWindowStage \u003d FxToolkit.setupStage((stage) -\u003e stage.setScene(journalWindow.getRoot().getScene()));"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"        FxToolkit.showStage();"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"        journalWindowHandle \u003d new JournalWindowHandle(journalWindowStage);"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    public void isShowing_journalWindowIsShowing_true() {"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"        guiRobot.interact(() -\u003e journalWindow.show());"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"        assertTrue(journalWindow.isShowing());"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":21,"-":11}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.TIMETABLE_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ShowTimetableCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":"    protected Person getInitialData() {"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"        return TypicalPersons.getTypicalPerson();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":126,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"traceurgan"},"content":"    protected void selectPerson() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        executeCommand(ShowTimetableCommand.COMMAND_WORD);"},{"lineNumber":138,"author":{"gitID":"traceurgan"},"content":"        assertEquals(getModel().getPartner().getName(), getPersonListPanel().getPersonCardHandle(0).getName());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":151,"author":{"gitID":"traceurgan"},"content":"        assertEquals(expectedModel.getPartner(), testApp.readStoragePerson());"},{"lineNumber":152,"author":{"gitID":"traceurgan"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getPersonAsList());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"traceurgan"},"content":"    protected void assertSelectedCardChanged() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        URL expectedUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + TIMETABLE_PAGE);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"traceurgan"},"content":"        assertEquals(selectedCardName, getPersonListPanel().getHandleToSelectedCard().getName());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":243,"author":{"gitID":"traceurgan"},"content":"            assertListMatching(getPersonListPanel(), getModel().getPersonAsList());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":10,"-":248}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Ignore;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"                new BrowserPanel(TypicalPersons.getTypicalPerson()));"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"    @Ignore"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"    public void display() throws Exception {"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"        // default web page"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":"        // associated web page of a person"},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":27,"-":26}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"import seedu.address.storage.XmlSerializablePerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"    protected Supplier\u003cReadOnlyPerson\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"    public TestApp(Supplier\u003cReadOnlyPerson\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"            createDataFileWithData(new XmlSerializablePerson(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"        userPrefs.setPersonFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"        userPrefs.setNusCouplesName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"    public Person readStoragePerson() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"            return new Person(storage.readPerson().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"        return storage.getPersonFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getPartner()), model.getJournal(), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"traceurgan"},"content":"        ModelHelper.setFilteredList(copy, model.getPersonAsList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":11,"-":112}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.model.PersonChangedEvent;"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    private static final PersonChangedEvent EVENT_STUB \u003d new PersonChangedEvent(new Person(ALICE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":3,"-":73}},{"path":"src/test/java/seedu/address/ui/ListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournalEntries;"},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.getPersonAsList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ListPanelTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cReadOnlyPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"            FXCollections.observableList(getPersonAsList());"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cJournalEntry\u003e TYPICAL_JOURNALENTRIES \u003d"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalJournalEntries());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ListPanel personListPanel \u003d new ListPanel(TYPICAL_PERSONS, TYPICAL_JOURNALENTRIES);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            ReadOnlyPerson expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":2,"-":46}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedAppointment;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"import seedu.address.storage.XmlSerializablePerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TIMETABLE \u003d \"http://modsn.us/wNuIW\";"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    private static final List\u003cXmlAdaptedAppointment\u003e VALID_APPOINTMENTS \u003d Collections.singletonList("},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"            new XmlAdaptedAppointment("},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"                    \"lunch\", \"2018/04/16 12:35\" , \"2018/04/16 13:35\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        XmlUtil.getDataFromFile(null, Person.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"        XmlUtil.getDataFromFile(VALID_PERSON_FILE, null);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, Person.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, Person.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":74,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TIMETABLE, VALID_APPOINTMENTS);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TIMETABLE, VALID_APPOINTMENTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"traceurgan"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TIMETABLE, VALID_APPOINTMENTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":101,"author":{"gitID":"traceurgan"},"content":"        XmlUtil.saveDataToFile(null, new XmlSerializablePerson());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":107,"author":{"gitID":"traceurgan"},"content":"        XmlUtil.saveDataToFile(VALID_PERSON_FILE, null);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":113,"author":{"gitID":"traceurgan"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new XmlSerializablePerson());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":119,"author":{"gitID":"traceurgan"},"content":"        XmlSerializablePerson dataToWrite \u003d new XmlSerializablePerson(new Person(ALICE));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":121,"author":{"gitID":"traceurgan"},"content":"        XmlSerializablePerson dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializablePerson.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":18,"-":113}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        String deleteCommand \u003d \"delete\";"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(null, model.getJournal(), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":104,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":3,"-":107}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d NUSCouples - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B4/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team T09-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Welcome to the developer guide for _NUSCouples_!"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"_NUSCouples_ is a command-lineCommand Line Interface (CLI) desktop application specially targeted at couples studying"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"in the National University of Singapore (NUS). It aims to help them create new memories during their busy school term"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"time in NUS."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"This developer guide contains information that can help you to get started as a contributor to _NUSCouples_,"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"as well as more about the software architecture and feature implementation of _NUSCouples_."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":41,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":49,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":69,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":93,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":102,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":103,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":108,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":111,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":116,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":143,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":154,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":162,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":169,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":175,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":192,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":198,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":199,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":205,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":208,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":209,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":210,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":220,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":226,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":233,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":234,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":235,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":240,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":246,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":253,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":258,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":270,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":271,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":282,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":283,"author":{"gitID":"-"},"content":"----"},{"lineNumber":284,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":"}"},{"lineNumber":290,"author":{"gitID":"-"},"content":"----"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":293,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":294,"author":{"gitID":"-"},"content":"----"},{"lineNumber":295,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":"}"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":"}"},{"lineNumber":310,"author":{"gitID":"-"},"content":"----"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":323,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":332,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":341,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":361,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":362,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":364,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":370,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":371,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":372,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":373,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":381,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":382,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":383,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":384,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":390,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":391,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":392,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":393,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":394,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":395,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":399,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":400,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":401,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":410,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":411,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":418,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":419,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":424,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":425,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":426,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":431,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":432,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":439,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":440,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"// tag::calendar[]"},{"lineNumber":443,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Calendar Google API Feature"},{"lineNumber":444,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation (Appearing in V2.0)"},{"lineNumber":445,"author":{"gitID":"-"},"content":"The Calendar Viewer mechanism is facilitated by `Google Calendar API` and reside in the `ModelManager`."},{"lineNumber":446,"author":{"gitID":"-"},"content":"It supports viewing/add/editing/deleting capability that modifies the state of _NUSCouples_."},{"lineNumber":447,"author":{"gitID":"-"},"content":"Firstly, it uses OAuth 2.0 endpoints to allow users to share specific data with the application while keeping their usernames, passwords, and other information private. For example, an application can use OAuth 2.0 to obtain permission from users to store files in their Google Drives which sync to the calendar."},{"lineNumber":448,"author":{"gitID":"-"},"content":"This implementation requires the user to connect to the internet because _NUSCouples_ needs to open the system browser and supply a local redirect URI to handle responses from Google\u0027s authorization server."},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"*Basic steps*"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"All applications follow a basic pattern when accessing a Google API using OAuth 2.0. At a high level, this are the four steps:"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":456,"author":{"gitID":"-"},"content":"|No. |Description"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"|Step 1:"},{"lineNumber":459,"author":{"gitID":"-"},"content":"|Obtain OAuth 2.0 credentials from the Google API Console."},{"lineNumber":460,"author":{"gitID":"-"},"content":" Visit the Google API Console to obtain OAuth 2.0 credentials such as a client ID and client secret that are known to both Google and your application. The set of values varies based on what type of application you are building. For example, a JavaScript application does not require a secret, but a web server application does."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"|Step 2:"},{"lineNumber":464,"author":{"gitID":"-"},"content":"|Obtain an access token from the Google Authorization Server."},{"lineNumber":465,"author":{"gitID":"-"},"content":" Before your application can access private data using a Google API, it must obtain an access token that grants access to that API. A single access token can grant varying degrees of access to multiple APIs. A variable parameter called scope controls the set of resources and operations that an access token permits. During the access-token request, your application sends one or more values in the scope parameter."},{"lineNumber":466,"author":{"gitID":"-"},"content":" There are several ways to make this request, and they vary based on the type of application you are building. For example, a JavaScript application might request an access token using a browser redirect to Google, while an application installed on a device that has no browser uses web service requests."},{"lineNumber":467,"author":{"gitID":"-"},"content":" Some requests require an authentication step where the user logs in with their Google account. After logging in, the user is asked whether they are willing to grant the permissions that your application is requesting. This process is called user consent."},{"lineNumber":468,"author":{"gitID":"-"},"content":" If the user grants the permission, the Google Authorization Server sends your application an access token (or an authorization code that your application can use to obtain an access token). If the user does not grant the permission, the server returns an error."},{"lineNumber":469,"author":{"gitID":"-"},"content":" It is generally a best practice to request scopes incrementally, at the time access is required, rather than up front. For example, an app that wants to support purchases should not request Google Wallet access until the user presses the “buy” button; see Incremental authorization."},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"|Step 3:"},{"lineNumber":472,"author":{"gitID":"-"},"content":"|After an application obtains an access token, it sends the token to a Google API in an HTTP authorization header. It is possible to send tokens as URI query-string parameters, but we don\u0027t recommend it, because URI parameters can end up in log files that are not completely secure. Also, it is good REST practice to avoid creating unnecessary URI parameter names."},{"lineNumber":473,"author":{"gitID":"-"},"content":" Access tokens are valid only for the set of operations and resources described in the scope of the token request. For example, if an access token is issued for the Google+ API, it does not grant access to the Google Contacts API. You can, however, send that access token to the Google+ API multiple times for similar operations."},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"|Step 4:"},{"lineNumber":476,"author":{"gitID":"-"},"content":"|Refresh the access token, if necessary."},{"lineNumber":477,"author":{"gitID":"-"},"content":" Access tokens have limited lifetimes. If your application needs access to a Google API beyond the lifetime of a single access token, it can obtain a refresh token. A refresh token allows your application to obtain new access tokens"},{"lineNumber":478,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"The sequence diagram below shows interactions within the `Logic` Component for Outh 2.0 endpoints:"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"image::GoogleCalendarSeqDiagram.png[width\u003d\"850\"]"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":487,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Google Calendar feature"},{"lineNumber":488,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Data are not save locally."},{"lineNumber":489,"author":{"gitID":"-"},"content":"** Pros: User does not worry about getting data lost"},{"lineNumber":490,"author":{"gitID":"-"},"content":"** Cons: User unable to retrieve the Calendar if internet is not connected"},{"lineNumber":491,"author":{"gitID":"-"},"content":"* **Alternative 2:** Save Data locally"},{"lineNumber":492,"author":{"gitID":"-"},"content":"** Pros: User does not worry their Calendar is unable to connected to Google."},{"lineNumber":493,"author":{"gitID":"-"},"content":"** Cons: The latest Calendar events might not have been synchronized."},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Using Open-source or proprietary Calendar API"},{"lineNumber":496,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Using Google API (open source)"},{"lineNumber":497,"author":{"gitID":"-"},"content":"** Pros: I will learnt more even if I failed at the end of the project and Google API is more versatile"},{"lineNumber":498,"author":{"gitID":"-"},"content":"** Cons: Tedious to implement it."},{"lineNumber":499,"author":{"gitID":"-"},"content":"* **Alternative 2:** Using Restful API (proprietary)"},{"lineNumber":500,"author":{"gitID":"-"},"content":"** Pros: Easier to implement due to everything is assisted."},{"lineNumber":501,"author":{"gitID":"-"},"content":"** Cons: Restrictive, need more money for more features to add on."},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":504,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":505,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"// end::calendar[]"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"//tag::viewCalendar[]"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Viewer feature"},{"lineNumber":512,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"The Calendar Viewer feature is implemented by \u0027BrowserPanel\u0027, which will reside in \u0027UI\u0027."},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"The idea of implementing this Calendar Viewer feature that sits ontop of Browser panel UI is to give the user a first look at the upcoming events first before going on to other features on the App."},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"Users are able to select different views such as in Days, Weeks, Months or Years by adding a prefix \u0027c\u0027, \u0027w\u0027, \u0027m\u0027, \u0027y\u0027 after adding \u0027Cal\u0027 or \u0027Calendar\u0027 behind."},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"This Calendar Interface is created and designed by CalendarFX. Through their GUI interface, i manipulate and massage the codes to allow user to enter commands to change the views since this is a CLI interface APP."},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"The sequence diagram below shows interactions within the `Logic` Component for the `execute\u0027 API call."},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"image::CalViewSeq.png[width\u003d\"650\"]"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":527,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Calendar View"},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Display only current month event."},{"lineNumber":530,"author":{"gitID":"-"},"content":"** Pros: Easier to implement and Neater rather than displaying more than 1 mth."},{"lineNumber":531,"author":{"gitID":"-"},"content":"** Cons: Need to input cmd to filter through other month."},{"lineNumber":532,"author":{"gitID":"-"},"content":"* **Alternative 2:** Don\u0027t display any month until user defines."},{"lineNumber":533,"author":{"gitID":"-"},"content":"** Pros: More interaction."},{"lineNumber":534,"author":{"gitID":"-"},"content":"** Cons: The UI will be blank at initial stage which is ugly."},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Calendar View performance"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Requires RAM of at least 6GB and above."},{"lineNumber":539,"author":{"gitID":"-"},"content":"** Pros: Faster retrieval and display the Calendar out"},{"lineNumber":540,"author":{"gitID":"-"},"content":"** Cons: Need to buy more memory"},{"lineNumber":541,"author":{"gitID":"-"},"content":"* **Alternative 2:** Don\u0027t display Year."},{"lineNumber":542,"author":{"gitID":"-"},"content":"** Pros: Reduce latency"},{"lineNumber":543,"author":{"gitID":"-"},"content":"** Cons: User can\u0027t add event to next year"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"// end::viewCalendar[]"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"//tag::addCalendar[]"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Add Appointment feature"},{"lineNumber":550,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"The Calendar Add Appointment feature is implemented by \u0027Appointment\u0027, which will reside in \u0027Model\u0027."},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"The idea of implementing Add Appointment feature is to allow the user to add his/her event on the Calendar."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"The AppointmentList class holds an internal list that holds the Appointment class."},{"lineNumber":557,"author":{"gitID":"-"},"content":"Appointments are made up of 3 internal variables."},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"image::AddAppointmentClass.png[width\u003d\"300\"]"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"** Description: It Holds a string about the appointment. This String will be used to identify which Appointment."},{"lineNumber":562,"author":{"gitID":"-"},"content":"** Start Date: It Holds the starting time of the appointment. Used for sorting appointments and UI."},{"lineNumber":563,"author":{"gitID":"-"},"content":"** End Date: Holds the end time of the appointment. Used for UI."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"The sequence diagram below shows interactions within the `Model` Component for the `AddAppointment\u0027 API call."},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"image::AddAppointmentSeq.png[width\u003d\"650\"]"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":570,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Add Event View"},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Display in Calendar UI."},{"lineNumber":573,"author":{"gitID":"-"},"content":"** Pros: Easier to implement and Neater."},{"lineNumber":574,"author":{"gitID":"-"},"content":"** Cons: Doesn\u0027t display all events listed on the partner."},{"lineNumber":575,"author":{"gitID":"-"},"content":"* **Alternative 2:** Create a List to display all events."},{"lineNumber":576,"author":{"gitID":"-"},"content":"** Pros: User can have an overview of all the events listed"},{"lineNumber":577,"author":{"gitID":"-"},"content":"** Cons: The UI will be blank at initial stage which is ugly."},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Allow duplicate events"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** On same time of the same day."},{"lineNumber":582,"author":{"gitID":"-"},"content":"** Pros: User can plan which one is more important to attend"},{"lineNumber":583,"author":{"gitID":"-"},"content":"** Cons: Ambiguous as there are multiple similar events on the same time frame"},{"lineNumber":584,"author":{"gitID":"-"},"content":"* **Alternative 2:** Restrict user to add same event on the same time frame."},{"lineNumber":585,"author":{"gitID":"-"},"content":"** Pros: More neat looking"},{"lineNumber":586,"author":{"gitID":"-"},"content":"** Cons: User cant compare or manage well"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"// end::addCalendar[]"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"//tag::cancelCalendar[]"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Cancel Appointment feature"},{"lineNumber":593,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"The Calendar Cancel Appointment feature is implemented by \u0027Appointment\u0027, which will reside in \u0027Model\u0027."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"The idea of implementing a Cancel Appointment feature is to allow the user to remove his/her event on the Calendar when needed."},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"When the user calls to cancel an appointment in the Calendar, the model will ask AppointmentList to return a list of Appointments."},{"lineNumber":600,"author":{"gitID":"-"},"content":"However, the AppointmentList will only return a mutable copy of the AppointmentList back to the caller, as a practice of Defensive Programming."},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"The sequence diagram below shows interactions within the `Model` Component for the `CancelAppointment\u0027 API call."},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"image::CancelApptSeq.png[width\u003d\"650\"]"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":607,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Add Event View"},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Display in Calendar UI."},{"lineNumber":610,"author":{"gitID":"-"},"content":"** Pros: Easier to implement and Neater."},{"lineNumber":611,"author":{"gitID":"-"},"content":"** Cons: Have to cancel one by one and thus calendar will refresh over and over again."},{"lineNumber":612,"author":{"gitID":"-"},"content":"* **Alternative 2:** Create a List to display all events."},{"lineNumber":613,"author":{"gitID":"-"},"content":"** Pros: User can have an overview of all the events listed to cancel"},{"lineNumber":614,"author":{"gitID":"-"},"content":"** Cons: The UI will be blank at initial stage which is ugly."},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"// end::cancelCalendar[]"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"//tag::timetable[]"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Timetable View and Compare feature"},{"lineNumber":621,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a Timetable"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"The Timetable Viewer feature is implemented by `Timetable`, which will reside in `ModelManager`."},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"Users are able to add a shortened https://nusmods.com/[NUSMods] timetable URL to their existing partner in _NUSCouples_. +"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":" Sample shortened NUSMods URL: http://modsn.us/wNuIW"},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"We pass the shortened URL through a `HttpURLConnection` to get the expanded URL. +"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":" Sample expanded NUSMods URL: https://nusmods.com/timetable/sem-2/share?CS2101\u003dSEC:C01\u0026CS2103T\u003dTUT:C01\u0026…"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"The expanded NUSMods URL can be generalised and represented in the format"},{"lineNumber":634,"author":{"gitID":"-"},"content":"`…/timetable/sem-[SEM_NUM]/share?[MODULE_CODE]\u003d[LESSON_TYPE]:[CLASS_NUM]\u0026[MODULE_CODE]\u003d[LESSON_TYPE]:[CLASS_NUM]\u0026…`"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"We can parse this expanded NUSMods URL to get the `SEM_NUM`, as well as the"},{"lineNumber":637,"author":{"gitID":"-"},"content":"`MODULE_CODE`, `LESSON_TYPE` and `CLASS_NUM` for each of the modules in the timetable."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"Using http://api.nusmods.com/[NUSMods API], we can get the `WEEK_TEXT`, `DAY_TEXT`, `START_TIME`, `END_TIME` and"},{"lineNumber":640,"author":{"gitID":"-"},"content":"`VENUE` of each module."},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"The following diagram shows how the Timetable class is represented."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"image::TimetableClass.png[width\u003d\"500\"]"},{"lineNumber":645,"author":{"gitID":"-"},"content":"A TimetableModule represents one NUSMods module. +"},{"lineNumber":646,"author":{"gitID":"-"},"content":"The TimetableModuleSlots represents a particular class session of a TimetableModule. (e.g. Tutorial, Lecture, etc)"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":650,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of add NUSMods timetable URL"},{"lineNumber":651,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Accept short URLs only"},{"lineNumber":652,"author":{"gitID":"-"},"content":"** Pros: Easier to implement."},{"lineNumber":653,"author":{"gitID":"-"},"content":"** Cons: Less user friendly as users can only add one type of URL."},{"lineNumber":654,"author":{"gitID":"-"},"content":"* **Alternative 2:** Accept both short URLs and expanded URLs"},{"lineNumber":655,"author":{"gitID":"-"},"content":"** Pros: More user friendly as users have the choice to add either short or expanded URLs."},{"lineNumber":656,"author":{"gitID":"-"},"content":"** Cons: Difficult to check if given expanded NUSMods URL is a valid."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure to support implementation of Timetable"},{"lineNumber":659,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Store information by days of the week and by modules taken"},{"lineNumber":660,"author":{"gitID":"-"},"content":"** Pros: Easy to add new functions on top of this implementation, more flexible."},{"lineNumber":661,"author":{"gitID":"-"},"content":"** Cons: May be a bit messy to implement due to the need to manage both structures."},{"lineNumber":662,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store information by days of the week"},{"lineNumber":663,"author":{"gitID":"-"},"content":"** Pros: Easy to add new functions on top of this implementation such as compare timetables by days."},{"lineNumber":664,"author":{"gitID":"-"},"content":"** Cons: Have to sort information by day during parsing which can be tedious."},{"lineNumber":665,"author":{"gitID":"-"},"content":"* **Alternative 3:** Store information by modules taken"},{"lineNumber":666,"author":{"gitID":"-"},"content":"** Pros: Easier to implement due to how NUSMods API is structured."},{"lineNumber":667,"author":{"gitID":"-"},"content":"** Cons: Difficult to extract out information for a particular time slot on a particular day."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing a Timetable"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"The following image shows how the tview Command works."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"image::ShowTimetableCommandHighLevelSequenceDiagram.png[width\u003d\"820\"]"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"The `TimetableChangedEvent` is handled by `StorageManager` which will save the new timetable details into the relevant"},{"lineNumber":676,"author":{"gitID":"-"},"content":"timetable display files."},{"lineNumber":677,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":678,"author":{"gitID":"-"},"content":"----"},{"lineNumber":679,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":680,"author":{"gitID":"-"},"content":"    public void handleTimetableChangedEvent(TimetableChangedEvent event) {"},{"lineNumber":681,"author":{"gitID":"-"},"content":"        setUpTimetableDisplayFiles(event.timetable.getTimetableDisplayInfo());"},{"lineNumber":682,"author":{"gitID":"-"},"content":"        setUpTimetablePageHtmlFile();"},{"lineNumber":683,"author":{"gitID":"-"},"content":"        raise(new ShowTimetableRequestEvent());"},{"lineNumber":684,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":685,"author":{"gitID":"-"},"content":"----"},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"The `ShowTimetableRequestEvent` is handled by both `ListPanel` and `MainWindow`."},{"lineNumber":688,"author":{"gitID":"-"},"content":"The following code snippets show how they are handled."},{"lineNumber":689,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":690,"author":{"gitID":"-"},"content":"----"},{"lineNumber":691,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":692,"author":{"gitID":"-"},"content":"    private void handleShowTimetableRequestEvent (ShowTimetableRequestEvent event) {"},{"lineNumber":693,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":694,"author":{"gitID":"-"},"content":"        scrollTo(PARTNER_INDEX); // selects Partner in ListPanel"},{"lineNumber":695,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":696,"author":{"gitID":"-"},"content":"----"},{"lineNumber":697,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":698,"author":{"gitID":"-"},"content":"----"},{"lineNumber":699,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":700,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":701,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":702,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":703,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"    public void handleShowTimetable() {"},{"lineNumber":706,"author":{"gitID":"-"},"content":"        browserPanel.loadTimetablePage(); // Loads Timetable Page in Browser Panel"},{"lineNumber":707,"author":{"gitID":"-"},"content":"        if (!browserPlaceholder.getChildren().contains(browserPanel.getRoot())) {"},{"lineNumber":708,"author":{"gitID":"-"},"content":"            browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":709,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":710,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":711,"author":{"gitID":"-"},"content":"----"},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":714,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of storing Timetable Information"},{"lineNumber":715,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Stores Information in a HTML file. Edits the javascript array in the HTML file to"},{"lineNumber":716,"author":{"gitID":"-"},"content":"change the contents of the tables."},{"lineNumber":717,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":718,"author":{"gitID":"-"},"content":"** Cons: GUI will be a static web page."},{"lineNumber":719,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use JavaFX"},{"lineNumber":720,"author":{"gitID":"-"},"content":"** Pros: Provides a friendlier GUI (able to drag and drop table view)."},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Cons: Takes longer to load and display."},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Comparing Timetables"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"The sequence diagram below shows interactions within the `Logic` Component for the `execute(“tc tt/http://modsn.us/q7cLP”)`"},{"lineNumber":727,"author":{"gitID":"-"},"content":"API call."},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"image::CompareTimetableSequenceDiagram.png[width\u003d\"820\"]"},{"lineNumber":730,"author":{"gitID":"-"},"content":"Similar to \u003c\u003cViewing a Timetable, Viewing a Timetable\u003e\u003e, the CompareTimetableCommand raises two Events:"},{"lineNumber":731,"author":{"gitID":"-"},"content":"`ShowTimetableRequestEvent` and `TimetableChangedEvent`. This updates the relevant files and refreshes the"},{"lineNumber":732,"author":{"gitID":"-"},"content":"Timetable Page displayed."},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"We use a boolean isComparing in each TimetableModuleSlot to differentiate between the text to display for the normal"},{"lineNumber":735,"author":{"gitID":"-"},"content":"Timetable and compared Timetable. +"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"In _setUpTimetableInfoCompare()_ in `TimetableUtil`: +"},{"lineNumber":738,"author":{"gitID":"-"},"content":"We call a method _setUpUnsortedModuleSlotsForComparing()_ that contains the following loop:"},{"lineNumber":739,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":740,"author":{"gitID":"-"},"content":"----"},{"lineNumber":741,"author":{"gitID":"-"},"content":"    for (TimetableModuleSlot t : allUnsortedModulesSlots) {"},{"lineNumber":742,"author":{"gitID":"-"},"content":"        t.setComparing(true);"},{"lineNumber":743,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":744,"author":{"gitID":"-"},"content":"----"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"In `TimetableModuleSlot`: +"},{"lineNumber":747,"author":{"gitID":"-"},"content":"We override the toString() method:"},{"lineNumber":748,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"----"},{"lineNumber":750,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":751,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":752,"author":{"gitID":"-"},"content":"        if (isComparing) {"},{"lineNumber":753,"author":{"gitID":"-"},"content":"            return isEmpty"},{"lineNumber":754,"author":{"gitID":"-"},"content":"                    ? \"\\\"\\\"\" : \"\\\"X\\\"\";"},{"lineNumber":755,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":756,"author":{"gitID":"-"},"content":"            return isEmpty"},{"lineNumber":757,"author":{"gitID":"-"},"content":"                    ? \"\\\"\\\"\" : \"\\\"\" + moduleCode + \"\\\"\";"},{"lineNumber":758,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":759,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":760,"author":{"gitID":"-"},"content":"----"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"The list of TimetableModuleSlots are formatted to look like an array, and is subsequently stored in a String which is stored in a file called `timetableDisplayInfo`."},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"`FileTimetableStorage` replaces the timetable array declared in `TimetablePage.html`, which replaces the contents in the table cells of the HTML file."},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":767,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of displaying common breaks"},{"lineNumber":768,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Replace all busy slots with \u0027X\u0027"},{"lineNumber":769,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":770,"author":{"gitID":"-"},"content":"** Cons: Not visually pleasing."},{"lineNumber":771,"author":{"gitID":"-"},"content":"* **Alternative 2:** Shade the cells a different colour."},{"lineNumber":772,"author":{"gitID":"-"},"content":"** Pros: More intuitive for the user."},{"lineNumber":773,"author":{"gitID":"-"},"content":"** Cons: More tedious to implement."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"// end::timetable[]"},{"lineNumber":777,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":778,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"traceurgan"},"content":"//tag::journal[]"},{"lineNumber":782,"author":{"gitID":"traceurgan"},"content":"\u003d\u003d\u003d Journal feature"},{"lineNumber":783,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"traceurgan"},"content":"A JournalEntry contains only two variables, a String corresponding to the `date` the entry was created and a"},{"lineNumber":786,"author":{"gitID":"traceurgan"},"content":"String containing its `text` contents. It is stored in the Journal, which consists of an `ObservableList \u003cJournalEntry\u003e`"},{"lineNumber":787,"author":{"gitID":"traceurgan"},"content":"and a `HashMap \u003cDate, JournalEntry\u003e`, and resides inside `ModelManager`. The journal supports adding, editing of"},{"lineNumber":788,"author":{"gitID":"traceurgan"},"content":"the current journal entry and saving journal entries. +"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"traceurgan"},"content":"The List data structure makes it easy to show an ordered list of items, and is ideal for adding and displaying my journal"},{"lineNumber":791,"author":{"gitID":"traceurgan"},"content":"entries. However, searching for a particular entry will be tedious as there is a need to iterate through the entire list."},{"lineNumber":792,"author":{"gitID":"traceurgan"},"content":"A HashMap is used alongside the list in order to search and get journal entries easily. All search and get operations"},{"lineNumber":793,"author":{"gitID":"traceurgan"},"content":"can be done in O(1), which makes it ideal for these specific operations. However, it does not allow for an ordered list"},{"lineNumber":794,"author":{"gitID":"traceurgan"},"content":"easily. Due to the use of both a List and a HashMap, all operations on the journal must be synchronised"},{"lineNumber":795,"author":{"gitID":"traceurgan"},"content":" for both data structures. +"},{"lineNumber":796,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":797,"author":{"gitID":"traceurgan"},"content":"Suppose that the user has just launched the application for the first time. The `Journal` hold a list of sample journal"},{"lineNumber":798,"author":{"gitID":"traceurgan"},"content":"entries. On the `jnew` command, the app will check if the journal contains a `JournalEntry` corresponding to the"},{"lineNumber":799,"author":{"gitID":"-"},"content":"current local date in the form (yyyymmdd). If it exists, its data (date and text) is read from the `JournalEntry` and a"},{"lineNumber":800,"author":{"gitID":"traceurgan"},"content":"copy of it is opened in a new `JournalWindow`. This is done using a HashMap\u003cDate, JournalEntry\u003e."},{"lineNumber":801,"author":{"gitID":"traceurgan"},"content":"If it does not exist, a new `JournalWindow` is created. When the window"},{"lineNumber":802,"author":{"gitID":"-"},"content":"is closed, a `handleJournalClose` method is called. If the `TextArea` is not empty, a `SaveEntryEvent` is raised. This"},{"lineNumber":803,"author":{"gitID":"-"},"content":"event will pass the data from the `JournalWindow` in the form of a `JournalEntry` to the event handler."},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"traceurgan"},"content":"The `ModelManager` will raise the SaveEntryEvent` by adding the `JournalEntry` to the `Journal`. If a"},{"lineNumber":806,"author":{"gitID":"traceurgan"},"content":"`JournalEntry` with the same date exits, it will update the previous entry. When the `ModelManager` makes a change to the"},{"lineNumber":807,"author":{"gitID":"traceurgan"},"content":"journal, an `indicateJournalEvent` is raised. +"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"traceurgan"},"content":"The `StorageManager` handles the reading and writing of journal entries.  This event gets the current Journal and passes"},{"lineNumber":810,"author":{"gitID":"traceurgan"},"content":"it to the event handler. The `StorageManager` handles the event by converting the journal into an xml file and saving it"},{"lineNumber":811,"author":{"gitID":"traceurgan"},"content":"in the root/data folder. If there is no journal.xml file present, it will create a new one."},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"traceurgan"},"content":"[NOTE]"},{"lineNumber":814,"author":{"gitID":"traceurgan"},"content":"The user cannot choose to save the `JournalEntry` under a different date. The user also cannot edit past"},{"lineNumber":815,"author":{"gitID":"traceurgan"},"content":"journal entries."},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `JournalWindow`"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"* **Alternative 1:** Use javafx to directly make a new window."},{"lineNumber":822,"author":{"gitID":"-"},"content":"** Pros: Easy to implement. Only requires a few lines of code in one or two files."},{"lineNumber":823,"author":{"gitID":"-"},"content":"** Cons: Not consistent with the rest of the app. Needs more effort to maintain when changes are made."},{"lineNumber":824,"author":{"gitID":"-"},"content":"* **Alternative 2:** Make use of the UI framework."},{"lineNumber":825,"author":{"gitID":"-"},"content":"** Pros: Consistent with rest of app."},{"lineNumber":826,"author":{"gitID":"-"},"content":"** Cons: Harder to implement. Requires understanding of the UI component. Required minor edits in many files."},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"traceurgan"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure of Journal"},{"lineNumber":829,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":830,"author":{"gitID":"traceurgan"},"content":"* **Alternative 1:** Use HashMap to store journal entries."},{"lineNumber":831,"author":{"gitID":"traceurgan"},"content":"** Pros: Easy to search and get."},{"lineNumber":832,"author":{"gitID":"traceurgan"},"content":"** Cons: Difficult to show ordered list."},{"lineNumber":833,"author":{"gitID":"traceurgan"},"content":"* **Alternative 2:** Use List to store journal entries."},{"lineNumber":834,"author":{"gitID":"traceurgan"},"content":"** Pros: Can show ordered list easily."},{"lineNumber":835,"author":{"gitID":"traceurgan"},"content":"** Cons: When there are many items in the list, searching may take very long as it has to iterate through the entire list."},{"lineNumber":836,"author":{"gitID":"traceurgan"},"content":"* **Alternative 3 (current choice):** Use both."},{"lineNumber":837,"author":{"gitID":"traceurgan"},"content":"** Pros: All operations can be done easily."},{"lineNumber":838,"author":{"gitID":"traceurgan"},"content":"** Cons: Need to set data structures on initialisation and sync all operations between the two data structures."},{"lineNumber":839,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Naming of journal entries"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Automatically uses current date \"YYYYMMDD\" as file name."},{"lineNumber":843,"author":{"gitID":"-"},"content":"** Pros: No need to worry about duplicate names. Easy to implement filtering (can filter by value easily)."},{"lineNumber":844,"author":{"gitID":"-"},"content":"** Cons: Lack of personalisation. Hard to distinguish between files."},{"lineNumber":845,"author":{"gitID":"-"},"content":"* **Alternative 2:** Allow user to name journal entries."},{"lineNumber":846,"author":{"gitID":"-"},"content":"** Pros: User can distinguish between files easily."},{"lineNumber":847,"author":{"gitID":"-"},"content":"** Cons: If duplicate names are allowed, we need to distinguish them with another method. If duplicate names are not allowed, user may struggle to find unique names for every entry."},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"traceurgan"},"content":"// end::journal[]"},{"lineNumber":850,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":852,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":853,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":860,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":865,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":878,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":879,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":880,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":883,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":886,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":887,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":890,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":897,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":902,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":909,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":922,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":923,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":924,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":925,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":926,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":927,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":928,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":929,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":930,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":934,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":937,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":940,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":941,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":958,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":965,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":966,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":967,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":972,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":973,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":976,"author":{"gitID":"-"},"content":"| [.small]#Return to \u003c\u003ctoc,Table of Contents\u003e\u003e# +"},{"lineNumber":977,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":980,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"traceurgan"},"content":"*Target user profile:*"},{"lineNumber":983,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"* is currently a student in a relationship with another student in NUS"},{"lineNumber":985,"author":{"gitID":"-"},"content":"* needs to remember special dates and moments"},{"lineNumber":986,"author":{"gitID":"-"},"content":"* needs to schedule meetings to find a good time to meet"},{"lineNumber":987,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":988,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":989,"author":{"gitID":"-"},"content":"* prefer typing over mouse input"},{"lineNumber":990,"author":{"gitID":"-"},"content":"* are reasonably comfortable using CLI apps"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"traceurgan"},"content":"*Value proposition:* all-in-one desktop app to help NUS couples make and remember memories with each other"},{"lineNumber":993,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":994,"author":{"gitID":"traceurgan"},"content":"*Feature contribution:*"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":998,"author":{"gitID":"-"},"content":"|Assignee |Major|Minor"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"// tag::Major-Minor[]"},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"|Chen Xing"},{"lineNumber":1003,"author":{"gitID":"-"},"content":"|Scheduler: This app allows user to schedule//delete/view planned meetings"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"|Accessibility: Reduce the effort when user enters command on the command box through custom keystrokes. +"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"Tracker: The system will update the time on the footer to show when the changes have been made."},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"// end::Major-Minor[]"},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"|Marlene"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"|Timetable viewer: To help you keep updated with your partner\u0027s school schedule"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"|Timetable comparator: To help couples identify common breaks during school term so they can plan meetings during their free time"},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"|Samuel"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"|Journal: Allow couples to record their thoughts and feelings to remember the time spent with their partner"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"|Tag (emotions) : Add/delete tags to journal entries (happy, sad, angry, funny)"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"|Daniel"},{"lineNumber":1018,"author":{"gitID":"HEARTOFAL1ON"},"content":"|Send motivational picture: Motivate partner by sending a motivational picture via the browser panel"},{"lineNumber":1019,"author":{"gitID":"HEARTOFAL1ON"},"content":"|Command aliases: Enable shortcut keywords for commands"},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1032,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"|`* * *` |pair of NUS students in a relationship |add/view my partner\u0027s NUS timetable for the week |keep track of my partner\u0027s free time"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"|`* * *` |person in a relationship |View,Add and Delete special events/ meetings (e.g. Valentine\u0027s day) in the same month |better plan for these dates"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"traceurgan"},"content":"|`* * *` |person in a relationship |add/view Journal entries |remember special memories"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"|`* * *` |pair of NUS students in a relationship |locate my partner from his NUS timetable |easily meet up with my partner on campus"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"|`* *` |user who values their privacy |encrypt _NUSCouples_ save data |prevent strangers from reading personal information such as my journal entries"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"|`* *` |As a part of a couple in NUS |encrypt _NUSCouples_ save data |prevent strangers from reading personal information such as my journal entries"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"|`* *` |user |able to execute keystrokes to lighten their typing | keep their spirits up"},{"lineNumber":1049,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"traceurgan"},"content":"|`*`|user who likes to customize things |change the theme or customize text color |"},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"|`*` |experienced user |have shortcut keys| do the same thing in a shorter time"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"|`*` |user |gets updated upon the changed of event| so he can be verified that changes has been made"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"// tag::UseCase[]"},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"traceurgan"},"content":"(For all use cases below, the *System* is the `NUSCouples` app and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Authenticate User with Google"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"1. User are required to generate and download their credential from google API credentials: https://console.developers.google.com/apis/dashboard?[Google Dashboard] and import into project resource directory."},{"lineNumber":1073,"author":{"gitID":"-"},"content":"2. NusCouples use the credential to authenticate with Google API using Auth2.0."},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"* 1a. The partner already has an existing google calendar hosted in google."},{"lineNumber":1082,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"** 1a1. NUSCouples redirects to google calendar account to authenticate using the user credential."},{"lineNumber":1085,"author":{"gitID":"-"},"content":"** 1a2. User confirms change."},{"lineNumber":1086,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"* 1b. The given credential is invalid."},{"lineNumber":1090,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"** 1b1. NUSCouples shows an error message and close."},{"lineNumber":1093,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1097,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View Calendar of User"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"1.User inside browser panel enters the command to view calendar at different view(s)."},{"lineNumber":1102,"author":{"gitID":"-"},"content":"2.NUSCouples displays the Calendar"},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"* 1a. There is an existing user in NUSCouples."},{"lineNumber":1111,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"** 1a1. _NUSCouples_ request to display Calendar of day/week/month/year from CalendarFX."},{"lineNumber":1114,"author":{"gitID":"-"},"content":"** 1a2. _NUSCouples_ populate the calendar on the browser panel"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add Event on Calendar"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"1.User inside browser panel enters the command to add appointment."},{"lineNumber":1127,"author":{"gitID":"-"},"content":"2.NUSCouples update the appointment list."},{"lineNumber":1128,"author":{"gitID":"-"},"content":"3.NUSCouples displays the Calendar of all the events in the appointment list and update the change of event on the footer."},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"* 1a. User didn\u0027t specify date of event"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"** 1a1. _NUSCouples_ shows an error"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"* 2a. NUSCouples add the new appointment into the list"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete Event on Calendar"},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1149,"author":{"gitID":"-"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":"1.User inside browser panel enters the command to delete appointment."},{"lineNumber":1151,"author":{"gitID":"-"},"content":"2.NUSCouples update the appointment list."},{"lineNumber":1152,"author":{"gitID":"-"},"content":"3.NUSCouples displays the Calendar of all the events in the appointment list."},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"* 1a. User didn\u0027t specify date of event"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"** 1a1. _NUSCouples_ shows an error"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"* 2a. NUSCouples cannot find the appointment into the list"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"** 2a1. NUSCouples displays error message"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Keyboard Accessibility"},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"1.User enters a long command but want\u0027s to add something at the front or back"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"2.User press Shift Ctrl (move cursor to the front) Shift Alt (move cursor to the back)"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"* 1a. User is using MAC"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"** 1a1. enter `option` key instead of `Alt` key"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"* 2a. User doesn\u0027t have keystroke Shift/Alt/Ctrl."},{"lineNumber":1191,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"** 2a1. This feature can\u0027t be used"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"// end::UseCase[]"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View Timetable of Partner"},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"1.  User requests to view timetable of his/her partner."},{"lineNumber":1205,"author":{"gitID":"-"},"content":"2.  _NUSCouples_ displays the timetable."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"* 1a. The specified person does not have a timetable."},{"lineNumber":1213,"author":{"gitID":"-"},"content":"** 1a1. _NUSCouples_ shows an error message."},{"lineNumber":1214,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1219,"author":{"gitID":"-"},"content":""},{"lineNumber":1220,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add New Journal Entry"},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"-"},"content":"1.  User requests to create new journal entry."},{"lineNumber":1226,"author":{"gitID":"-"},"content":"2.  _NUSCouples_ opens new journal window."},{"lineNumber":1227,"author":{"gitID":"-"},"content":"3.  User enters text and closes journal window."},{"lineNumber":1228,"author":{"gitID":"-"},"content":"4.  _NUSCouples_ saves new journal entry in journal."},{"lineNumber":1229,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":"* 1a. Journal entry with the current local date exists."},{"lineNumber":1235,"author":{"gitID":"-"},"content":"** 1a.1 _NUSCouples_ reads data and a new copy of the journal entry is opened in a journal window. +"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"      Use case resumes at step 3."},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"* 3a. Journal entry with the current local date exists."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"** 3a.1 _NUSCouples_ overwrites journal entry in journal. +"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1246,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1247,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1248,"author":{"gitID":"-"},"content":".  Should be usable by a novice after reading the \u003c\u003cUserGuide#, User Guide\u003e\u003e."},{"lineNumber":1249,"author":{"gitID":"-"},"content":".  Should be able to handle any invalid inputs."},{"lineNumber":1250,"author":{"gitID":"-"},"content":".  Should respond to user inputs within 2 seconds."},{"lineNumber":1251,"author":{"gitID":"-"},"content":".  Should be able to work on both 32-bit and 64-bit environments."},{"lineNumber":1252,"author":{"gitID":"-"},"content":".  Should have commands that are intuitive and easy to remember."},{"lineNumber":1253,"author":{"gitID":"-"},"content":".  Should be able to control almost everything from the CLI."},{"lineNumber":1254,"author":{"gitID":"-"},"content":".  The application should be connected to the internet."},{"lineNumber":1255,"author":{"gitID":"-"},"content":".  Should able to store \u003c100 appointments"},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1260,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"[[Third-Party-API]] Third-Party API::"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"NUSMods, CalendarFX"},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1266,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1278,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1283,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1286,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1287,"author":{"gitID":"-"},"content":""},{"lineNumber":1288,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1298,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1299,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1304,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1305,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1314,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1316,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1318,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"traceurgan":53,"-":1273,"HEARTOFAL1ON":3}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"some random string\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"i/ string\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_TIMETABLE_DESC,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                Timetable.MESSAGE_TIMETABLE_CONSTRAINTS); // invalid timetable"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String userInput \u003d PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TIMETABLE_DESC_AMY + NAME_DESC_AMY;"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .withTimetable(VALID_TIMETABLE_AMY).build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String userInput \u003d PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String userInput \u003d NAME_DESC_AMY;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        userInput \u003d PHONE_DESC_AMY;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        userInput \u003d EMAIL_DESC_AMY;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        userInput \u003d ADDRESS_DESC_AMY;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // timetable"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        userInput \u003d TIMETABLE_DESC_AMY;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTimetable(VALID_TIMETABLE_AMY).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String userInput \u003d PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"traceurgan"},"content":"                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TIMETABLE_DESC_AMY"},{"lineNumber":144,"author":{"gitID":"traceurgan"},"content":"                + TIMETABLE_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimetable(VALID_TIMETABLE_BOB)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        String userInput \u003d INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        userInput \u003d EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + TIMETABLE_DESC_BOB;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                .withTimetable(VALID_TIMETABLE_BOB).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(descriptor);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":2,"-":168}},{"path":"src/test/java/seedu/address/logic/parser/NusCouplesParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ShowTimetableCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class NusCouplesParserTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final NusCouplesParser parser \u003d new NusCouplesParser();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":44,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":45,"author":{"gitID":"HEARTOFAL1ON"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"HEARTOFAL1ON"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":47,"author":{"gitID":"HEARTOFAL1ON"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":48,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":51,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":58,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":59,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":60,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":61,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":63,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":64,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":67,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD);"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"        assertEquals(new DeleteCommand(), command);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":72,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":73,"author":{"gitID":"HEARTOFAL1ON"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":74,"author":{"gitID":"HEARTOFAL1ON"},"content":"                DeleteCommand.COMMAND_ALIAS);"},{"lineNumber":75,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertEquals(new DeleteCommand(), command);"},{"lineNumber":76,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":78,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":79,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(descriptor), command);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":89,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":90,"author":{"gitID":"HEARTOFAL1ON"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":91,"author":{"gitID":"HEARTOFAL1ON"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":92,"author":{"gitID":"HEARTOFAL1ON"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":93,"author":{"gitID":"HEARTOFAL1ON"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":94,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertEquals(new EditCommand(descriptor), command);"},{"lineNumber":95,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":97,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":104,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":105,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":106,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":107,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":109,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":116,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":117,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":118,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":119,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":121,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":135,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":136,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":137,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":138,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":139,"author":{"gitID":"HEARTOFAL1ON"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"HEARTOFAL1ON"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":141,"author":{"gitID":"HEARTOFAL1ON"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":142,"author":{"gitID":"HEARTOFAL1ON"},"content":"        } catch (ParseException pe) {"},{"lineNumber":143,"author":{"gitID":"HEARTOFAL1ON"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":144,"author":{"gitID":"HEARTOFAL1ON"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":147,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        ShowTimetableCommand command \u003d (ShowTimetableCommand) parser.parseCommand("},{"lineNumber":150,"author":{"gitID":"-"},"content":"                ShowTimetableCommand.COMMAND_WORD);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(new ShowTimetableCommand(), command);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":155,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":156,"author":{"gitID":"HEARTOFAL1ON"},"content":"        ShowTimetableCommand command \u003d (ShowTimetableCommand) parser.parseCommand("},{"lineNumber":157,"author":{"gitID":"HEARTOFAL1ON"},"content":"                ShowTimetableCommand.COMMAND_ALIAS);"},{"lineNumber":158,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertEquals(new ShowTimetableCommand(), command);"},{"lineNumber":159,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":161,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 1\") instanceof RedoCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":168,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_redoCommandWordAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":169,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":170,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"},{"lineNumber":171,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":173,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author HEARTOFAL1ON"},{"lineNumber":180,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void parseCommand_undoCommandWordAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":181,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":182,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"},{"lineNumber":183,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":185,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Test //@@author"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":1,"-":111,"HEARTOFAL1ON":86}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_DESC;"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimetable(VALID_TIMETABLE_BOB)"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"                .build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // multiple timetables - last timetable accepted"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":"                        + ADDRESS_DESC_BOB + TIMETABLE_DESC_AMY + TIMETABLE_DESC_BOB,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTimetable(VALID_TIMETABLE_AMY)"},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"                .withAppointment().build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + TIMETABLE_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                + TIMETABLE_DESC_BOB, expectedMessage);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                + TIMETABLE_DESC_BOB, expectedMessage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                + TIMETABLE_DESC_BOB, expectedMessage);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                + TIMETABLE_DESC_BOB, expectedMessage);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // missing timetable prefix"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + VALID_TIMETABLE_BOB, expectedMessage);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + VALID_TIMETABLE_BOB, expectedMessage);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + TIMETABLE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":128,"author":{"gitID":"traceurgan"},"content":"                + TIMETABLE_DESC_BOB, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"traceurgan"},"content":"                + TIMETABLE_DESC_BOB, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":136,"author":{"gitID":"traceurgan"},"content":"                + TIMETABLE_DESC_BOB, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // invalid timetable"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":140,"author":{"gitID":"traceurgan"},"content":"                + INVALID_TIMETABLE_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                + TIMETABLE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"traceurgan"},"content":"                        + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"},{"lineNumber":152,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"traceurgan":28,"-":124}},{"path":"src/test/java/seedu/address/logic/parser/AddAppointmentParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":"public class AddAppointmentParserTest {"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"    private AddAppointmentParser parser \u003d new AddAppointmentParser();"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"    public void prefixesNotPresent() throws ParseException {"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"        parser.parse(\"1 lunch tomorrow 5pm\");"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"    public void illegalExpression() throws ParseException {"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"        parser.parse(\"n/@@@@ d/2018/02/10 10:10\");"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"    public void nonParsableString() throws ParseException {"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"        parser.parse(\"appt d/lunch ,cant parse this string\");"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"    public void parseDateExpression() throws ParseException, java.text.ParseException {"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"        AddAppointmentCommand command \u003d parser.parse(\"appt 1 d/Lunch, tomorrow 5pm\");"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"        Appointment appointment \u003d AddAppointmentParser.getAppointmentFromString(\"Lunch, tomorrow 5pm\");"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"        assertEquals(new AddAppointmentCommand(appointment), command);"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"    public void parseAppointmentsWithDuration() {"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"            AddAppointmentCommand command \u003d parser.parse(\"appt 1 d/Lunch, tomorrow 5pm to 7pm\");"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"            Appointment appointment \u003d AddAppointmentParser.getAppointmentFromString(\"Lunch, tomorrow 5pm to 7pm\");"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"            assertEquals(new AddAppointmentCommand(appointment), command);"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"        } catch (ParseException e) {"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"            e.printStackTrace();"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":46,"traceurgan":1,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/ShowCalendarCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.HideTimetableRequestEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":" * Contains integration tests (interaction with the Model) for {@code ShowCalendarCommand}."},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"public class ShowCalendarCommandTest {"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"    private Model withPartnerModel;"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    private Model noPartnerModel;"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"        withPartnerModel \u003d new ModelManager(getTypicalPerson(), getTypicalJournal(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"        noPartnerModel \u003d new ModelManager(null, getTypicalJournal(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"        ShowCalendarCommand showCalendarCommand \u003d new ShowCalendarCommand();"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"        // different types -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(showCalendarCommand.equals(1));"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        // null -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(showCalendarCommand.equals(null));"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"    public void execute_success() throws IllegalArgumentException {"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"        ShowCalendarCommand showCalendarCommand \u003d prepareCommand(withPartnerModel);"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"            CommandResult commandResult \u003d showCalendarCommand.execute();"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"            assertEquals(showCalendarCommand.MESSAGE_DESELECT_PERSON_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"        } catch (CommandException ce) {"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof HideTimetableRequestEvent);"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"    public void execute_failure() throws IllegalArgumentException {"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"        ShowCalendarCommand showCalendarCommand \u003d prepareCommand(noPartnerModel);"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"            showCalendarCommand.execute();"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"        } catch (CommandException ce) {"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"            assertEquals(showCalendarCommand.MESSAGE_DESELECT_PERSON_FAILURE, ce.getMessage());"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"     * Returns a {@code ShowTimetableCommand} with new CommandHistory and new UndoRedoStack."},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"    private ShowCalendarCommand prepareCommand(Model myModel) {"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"        ShowCalendarCommand showCalendarCommand \u003d new ShowCalendarCommand();"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"        showCalendarCommand.setData(myModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":"        return showCalendarCommand;"},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":64,"traceurgan":1,"-":21}},{"path":"src/test/java/seedu/address/logic/parser/CancelAppointmentParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CancelAppointmentCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":"public class CancelAppointmentParserTest {"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"    public void parseException() throws ParseException {"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"        String str \u003d \"this cant be parsed\";"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"        CancelAppointmentParser parser \u003d new CancelAppointmentParser();"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"        parser.parse(str);"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    public void parseWithoutKeyWordWith() throws ParseException {"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"        String str \u003d \"Lunch Alice Pauline\";"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"        CancelAppointmentParser parser \u003d new CancelAppointmentParser();"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"        parser.parse(str);"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"    public void parseSuccess() throws ParseException {"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"        String str \u003d \"Lunch with Alice Pauline\";"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"        CancelAppointmentParser parser \u003d new CancelAppointmentParser();"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"        CancelAppointmentCommand command \u003d (CancelAppointmentCommand) parser.parse(str);"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"        CancelAppointmentCommand command2 \u003d new CancelAppointmentCommand(\"Alice Pauline\", \"Lunch\");"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"        assertEquals(command, command2);"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":32,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/MotivateCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"HEARTOFAL1ON"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":3,"author":{"gitID":"HEARTOFAL1ON"},"content":"/*import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"HEARTOFAL1ON"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"HEARTOFAL1ON"},"content":"import static seedu.address.logic.commands.MotivateCommand.MESSAGE_MOTIVATE_ACKNOWLEDGEMENT;*/"},{"lineNumber":6,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":7,"author":{"gitID":"HEARTOFAL1ON"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"HEARTOFAL1ON"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":11,"author":{"gitID":"HEARTOFAL1ON"},"content":"//import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":12,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":13,"author":{"gitID":"HEARTOFAL1ON"},"content":"public class MotivateCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void execute_motivate_success() {"},{"lineNumber":19,"author":{"gitID":"HEARTOFAL1ON"},"content":"        //CommandResult result \u003d new MotivateCommand().execute();"},{"lineNumber":20,"author":{"gitID":"HEARTOFAL1ON"},"content":"        String result \u003d new MotivateCommand().execute();"},{"lineNumber":21,"author":{"gitID":"HEARTOFAL1ON"},"content":"        /*assertEquals(MESSAGE_MOTIVATE_ACKNOWLEDGEMENT, result.feedbackToUser);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"},{"lineNumber":23,"author":{"gitID":"HEARTOFAL1ON"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);*/"},{"lineNumber":24,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"HEARTOFAL1ON"},"content":"}"}],"authorContributionMap":{"-":6,"HEARTOFAL1ON":19}},{"path":"src/test/java/seedu/address/logic/commands/NewJournalCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.NewJournalCommand.NEW_JOURNAL_ENTRY_CREATED;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"public class NewJournalCommandTest {"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"    public void execute_newjournal_success() {"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"        CommandResult result \u003d new NewJournalCommand().execute();"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"        assertEquals(NEW_JOURNAL_ENTRY_CREATED, result.feedbackToUser);"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":9,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    public void execute_emptyJournal_success() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    public void execute_nonEmptyJournal_success() {"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"        Model model \u003d new ModelManager(null, getTypicalJournal(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":3,"-":33}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_TIMETABLE_AMY \u003d \"http://modsn.us/wNuIW\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_TIMETABLE_BOB \u003d \"http://modsn.us/q7cLP\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_AMY \u003d \"Lunch, tomorrow 5pm\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_BOB \u003d \"Lunch, tomorrow 5pm\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String TIMETABLE_DESC_AMY \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String TIMETABLE_DESC_BOB \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String INVALID_TIMETABLE_DESC \u003d \" \" + PREFIX_TIMETABLE"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"www.google.com\"; // host should be modsn.us"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\r  \\n\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        //TODO: include appointments"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"                .withTimetable(VALID_TIMETABLE_AMY).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"                .withTimetable(VALID_TIMETABLE_BOB).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":99,"author":{"gitID":"traceurgan"},"content":"        Person expectedPerson \u003d new Person(actualModel.getPartner());"},{"lineNumber":100,"author":{"gitID":"traceurgan"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getPersonAsList());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":107,"author":{"gitID":"traceurgan"},"content":"            assertEquals(expectedPerson, actualModel.getPartner());"},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"            assertEquals(expectedFilteredList, actualModel.getPersonAsList());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Deletes the partner in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"traceurgan"},"content":"    public static void deletePerson(Model model) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"traceurgan"},"content":"            model.deletePerson();"},{"lineNumber":118,"author":{"gitID":"traceurgan"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":119,"author":{"gitID":"traceurgan"},"content":"            throw new AssertionError(\"Person in does not exist in model.\", npe);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Edits the partner in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static void editPerson(Model model) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            model.editPerson(new Person(model.getPartner()));"},{"lineNumber":129,"author":{"gitID":"traceurgan"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":130,"author":{"gitID":"traceurgan"},"content":"            throw new AssertionError(\"Person in does not exist in model.\", npe);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":14,"-":137}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Ignore;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"@Ignore"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    private final Model model \u003d new ModelManager(getTypicalPerson(), getTypicalJournal(), new UserPrefs());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    private Model expectedModel \u003d new ModelManager(null , getTypicalJournal(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"        expectedModel.deletePerson();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"        // undo() should undo delete person"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        expectedModel \u003d new ModelManager(getTypicalPerson(), getTypicalJournal(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        expectedModel.deletePerson();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"     * Deletes the person in the model."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"                model.deletePerson();"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"            } catch (NullPointerException npe) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":11,"-":50}},{"path":"src/test/java/seedu/address/logic/commands/ShowTimetableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowTimetableRequestEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":" * Contains integration tests (interaction with the Model) for {@code ShowTimetableCommand}."},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"public class ShowTimetableCommandTest {"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    private Model withPartnerModel;"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"    private Model noPartnerModel;"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"        withPartnerModel \u003d new ModelManager(getTypicalPerson(), getTypicalJournal(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"        noPartnerModel \u003d new ModelManager(null, getTypicalJournal(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    public void equals() {"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"        ShowTimetableCommand showTimetableCommand \u003d new ShowTimetableCommand();"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"        // different types -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(showTimetableCommand.equals(1));"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(showTimetableCommand.equals(null));"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"    public void execute_success() throws IllegalArgumentException {"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"        ShowTimetableCommand showTimetableCommand \u003d prepareCommand(withPartnerModel);"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"            CommandResult commandResult \u003d showTimetableCommand.execute();"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"            assertEquals(ShowTimetableCommand.MESSAGE_SELECT_PERSON_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"        } catch (CommandException ce) {"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowTimetableRequestEvent);"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"    public void execute_failure() throws IllegalArgumentException {"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"        ShowTimetableCommand showTimetableCommand \u003d prepareCommand(noPartnerModel);"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"            showTimetableCommand.execute();"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"        } catch (CommandException ce) {"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"            assertEquals(MESSAGE_INVALID_PERSON, ce.getMessage());"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"     * Returns a {@code ShowTimetableCommand} with new CommandHistory and new UndoRedoStack."},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"    private ShowTimetableCommand prepareCommand(Model myModel) {"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"        ShowTimetableCommand showTimetableCommand \u003d new ShowTimetableCommand();"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":"        showTimetableCommand.setData(myModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"        return showTimetableCommand;"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":64,"traceurgan":2,"-":21}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddAppointmentParser;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"public class AddAppointmentCommandTest {"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"    public void execute() throws ParseException, CommandException {"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"            //Invalid date"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"            String arg \u003d \"lunch, yesterday 5pm\";"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"            Command command \u003d setCommand(setAppointment(arg));"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"            assertEquals(result.feedbackToUser, AddAppointmentCommand.INVALID_DATE);"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"            //Set to valid date"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"            arg \u003d \"lunch, tomorrow 5pm\";"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"            command \u003d setCommand(setAppointment(arg));"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"            result \u003d command.execute();"},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"            assertEquals(result.feedbackToUser, AddAppointmentCommand.MESSAGE_SUCCESS);"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"            //Set to valid date with end time"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"            arg \u003d \"lunch, tomorrow 5pm to 7pm\";"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":"            command \u003d setCommand(setAppointment(arg));"},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"            result \u003d command.execute();"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"            assertEquals(result.feedbackToUser, AddAppointmentCommand.MESSAGE_SUCCESS);"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"        } catch (seedu.address.logic.parser.exceptions.ParseException ive) {"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"            fail();"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"     * Util methods to set appointment command"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"    private Command setCommand(Appointment appointment) {"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":"        AddAppointmentCommand command \u003d new AddAppointmentCommand(appointment);"},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":"        Model model \u003d new ModelManager(getTypicalPerson(), getTypicalJournal(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"        return command;"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":"    private Appointment setAppointment(String str) throws seedu.address.logic.parser.exceptions.ParseException {"},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"        return AddAppointmentParser.getAppointmentFromString(str);"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":53,"traceurgan":1,"-":21}},{"path":"src/test/java/seedu/address/storage/FileTimetableStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.Assert.assertDoesNotThrow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getFilePathInSandboxFolder;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.google.common.base.Charsets;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.google.common.io.Resources;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"public class FileTimetableStorageTest {"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"    private static final String TEST_PATH \u003d getFilePathInSandboxFolder(\"testReadingWriting\");"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"    private static final String EXPECTED_TIMETABLE_PAGE_HTML_PATH \u003d \"TimetableTest/expectedTimetablePage.html\";"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    private static final String EXPECTED_TIMETABLE_DISPLAY_INFO_FILE_PATH \u003d"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"            \"TimetableTest/expectedTimetableDisplayInfoView\";"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    private static final String TIMETABLE_PAGE_HTML_PATH \u003d getFilePathInSandboxFolder(\"TimetablePage.html\");"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"    private static final String TIMETABLE_PAGE_CSS_PATH \u003d getFilePathInSandboxFolder(\"TimetableStyle.css\");"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"    private static final String TIMETABLE_DISPLAY_INFO_FILE_PATH \u003d"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"            getFilePathInSandboxFolder(\"timetableDisplayInfo\");"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    private static String expectedTimetableDisplayInfoContents;"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"    private static String expectedTimetableHtmlContents;"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    private FileTimetableStorage fileTimetableStorage;"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"    public void initialize() throws IOException {"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"        fileTimetableStorage \u003d new FileTimetableStorage(TIMETABLE_PAGE_HTML_PATH, TIMETABLE_PAGE_CSS_PATH,"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"                TIMETABLE_DISPLAY_INFO_FILE_PATH);"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"        File testFile \u003d new File(TEST_PATH);"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"        File file1 \u003d new File(TIMETABLE_PAGE_HTML_PATH);"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"        File file2 \u003d new File(TIMETABLE_PAGE_CSS_PATH);"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        File file3 \u003d new File(TIMETABLE_DISPLAY_INFO_FILE_PATH);"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"        PrintWriter writer \u003d new PrintWriter(testFile);"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"        writer.print(\"hello 123\\n\");"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"        writer.close();"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"        writer \u003d new PrintWriter(file1);"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"        writer.print(\"\");"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"        writer.close();"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"        writer \u003d new PrintWriter(file2);"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"        writer.print(\"\");"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"        writer.close();"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"        writer \u003d new PrintWriter(file3);"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"        writer.print(\"\");"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"        writer.close();"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"        URL timetableDisplayInfoViewUrl \u003d getTestFileUrl(EXPECTED_TIMETABLE_DISPLAY_INFO_FILE_PATH);"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"        expectedTimetableDisplayInfoContents \u003d Resources.toString(timetableDisplayInfoViewUrl, Charsets.UTF_8);"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"        URL timetablePageUrl \u003d getTestFileUrl(EXPECTED_TIMETABLE_PAGE_HTML_PATH);"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"        expectedTimetableHtmlContents \u003d Resources.toString(timetablePageUrl, Charsets.UTF_8);"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"    public void setUpTimetableDisplayFiles() throws IOException {"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"        fileTimetableStorage.setUpTimetableDisplayFiles(expectedTimetableDisplayInfoContents);"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedTimetableHtmlContents,"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"                FileUtil.readFromFile(new File(TIMETABLE_PAGE_HTML_PATH)));"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedTimetableDisplayInfoContents,"},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"                FileUtil.readFromFile(new File(TIMETABLE_DISPLAY_INFO_FILE_PATH)));"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(SampleDataUtil.getDefaultTimetablePageCss(),"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"                FileUtil.readFromFile(new File(TIMETABLE_PAGE_CSS_PATH)));"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"    public void writeToFile() throws IOException {"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":"        String toWrite \u003d \"hello 123\\n\";"},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"        fileTimetableStorage.writeToFile(toWrite, TEST_PATH);"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":"        File testFile \u003d new File(TEST_PATH);"},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":"        assertDoesNotThrow(() -\u003e FileUtil.readFromFile(testFile));"},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(toWrite, FileUtil.readFromFile(testFile));"},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":"    public void getFileContents() throws FileNotFoundException {"},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":"        String expected \u003d \"hello 123\\n\";"},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"        String actual \u003d fileTimetableStorage.getFileContents(TEST_PATH);"},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"        assertDoesNotThrow(() -\u003e fileTimetableStorage.getFileContents(TEST_PATH));"},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expected, actual);"},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"    public void replaceLineExcludingStartEnd() {"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":"        String contents \u003d \"This is a story about the weather.\\n\""},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"                + \"Today it rained and the ground became muddy.\\n\""},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"                + \"After the rain stopped, the sun came out.\\n\";"},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":"        String replace \u003d \"Yesterday it didn\u0027t rain at all and\";"},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"        String start \u003d \"Today\";"},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":"        String end \u003d \",\";"},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":"        String expected \u003d \"This is a story about the weather.\\n\""},{"lineNumber":111,"author":{"gitID":"marlenekoh"},"content":"                + \"Yesterday it didn\u0027t rain at all and the sun came out.\\n\";"},{"lineNumber":112,"author":{"gitID":"marlenekoh"},"content":"        String result \u003d fileTimetableStorage.replaceLineExcludingStartEnd(contents, replace, start, end);"},{"lineNumber":113,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expected, result);"},{"lineNumber":114,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":116,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":117,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"marlenekoh"},"content":"     * Returns an url to the test resource"},{"lineNumber":119,"author":{"gitID":"marlenekoh"},"content":"     * @param testFilePath path of the test resource"},{"lineNumber":120,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"marlenekoh"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":122,"author":{"gitID":"marlenekoh"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":123,"author":{"gitID":"marlenekoh"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":124,"author":{"gitID":"marlenekoh"},"content":"        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"},{"lineNumber":125,"author":{"gitID":"marlenekoh"},"content":"        return testFileUrl;"},{"lineNumber":126,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":104,"-":23}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"        seedu.address.model.person.Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"        seedu.address.model.person.Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_MULTIPLE_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"traceurgan"},"content":"    private AddCommand getAddCommandForPerson(seedu.address.model.person.Person person, Model model) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"traceurgan"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"traceurgan"},"content":"        public void editPerson(ReadOnlyPerson editedPerson) throws NullPointerException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":113,"author":{"gitID":"traceurgan"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"traceurgan"},"content":"        public Person updatePerson(ReadOnlyPerson editedPerson) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"traceurgan"},"content":"            return null;"},{"lineNumber":117,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":119,"author":{"gitID":"traceurgan"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public void addJournalEntry(JournalEntry journalEntry) throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"traceurgan"},"content":"        public boolean contains(Date date) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"traceurgan"},"content":"            return false;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"chenxing1992"},"content":"        //@@author chenxing1992"},{"lineNumber":131,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"chenxing1992"},"content":"        public void addAppointment(ReadOnlyPerson person, Appointment appointment) throws PersonNotFoundException {"},{"lineNumber":133,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":134,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":136,"author":{"gitID":"chenxing1992"},"content":"        //@@author chenxing1992"},{"lineNumber":137,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"chenxing1992"},"content":"        public void removeAppointment(ReadOnlyPerson target, Appointment appointment) throws PersonNotFoundException {"},{"lineNumber":139,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":140,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":142,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"chenxing1992"},"content":"        public void indicateTimetableChanged(Timetable timetable) {"},{"lineNumber":144,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":147,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"chenxing1992"},"content":"        public void requestHideTimetable() {"},{"lineNumber":149,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":152,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"chenxing1992"},"content":"        public void requestShowTimetable() {"},{"lineNumber":154,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":157,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"chenxing1992"},"content":"        public int getLast() {"},{"lineNumber":159,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"chenxing1992"},"content":"            return 0;"},{"lineNumber":161,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":163,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"chenxing1992"},"content":"        public JournalEntry getJournalEntry(Date date) {"},{"lineNumber":165,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"chenxing1992"},"content":"            return null;"},{"lineNumber":167,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":169,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"chenxing1992"},"content":"        public void viewJournalEntry(Date date) throws Exception {"},{"lineNumber":171,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":174,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"chenxing1992"},"content":"        public void resetPersonData(ReadOnlyPerson newData) {"},{"lineNumber":176,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":179,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"chenxing1992"},"content":"        public ReadOnlyPerson getPartner() {"},{"lineNumber":181,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitID":"chenxing1992"},"content":"            return null;"},{"lineNumber":183,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":185,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"chenxing1992"},"content":"        public void resetJournalData(ReadOnlyJournal newData) {"},{"lineNumber":187,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":190,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"chenxing1992"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getPersonAsList() {"},{"lineNumber":192,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":193,"author":{"gitID":"chenxing1992"},"content":"            return null;"},{"lineNumber":194,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":196,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":197,"author":{"gitID":"chenxing1992"},"content":"        public ReadOnlyJournal getJournal() {"},{"lineNumber":198,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":199,"author":{"gitID":"chenxing1992"},"content":"            return null;"},{"lineNumber":200,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":202,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"chenxing1992"},"content":"        public ObservableList\u003cJournalEntry\u003e getJournalEntryList() {"},{"lineNumber":204,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"chenxing1992"},"content":"            return null;"},{"lineNumber":206,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":208,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"chenxing1992"},"content":"        public void deletePerson() {"},{"lineNumber":210,"author":{"gitID":"chenxing1992"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":211,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":214,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"chenxing1992"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":216,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"chenxing1992"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":218,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"chenxing1992"},"content":"        public void addPerson(seedu.address.model.person.ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":220,"author":{"gitID":"chenxing1992"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":221,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":223,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"chenxing1992"},"content":"        public ReadOnlyPerson getPartner() {"},{"lineNumber":225,"author":{"gitID":"chenxing1992"},"content":"            return new Person(ALICE);"},{"lineNumber":226,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":229,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"chenxing1992"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":231,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"chenxing1992"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":233,"author":{"gitID":"chenxing1992"},"content":"        final ArrayList\u003cReadOnlyPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":234,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":235,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"chenxing1992"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":237,"author":{"gitID":"chenxing1992"},"content":"            requireNonNull(person);"},{"lineNumber":238,"author":{"gitID":"chenxing1992"},"content":"            personsAdded.add(person);"},{"lineNumber":239,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":241,"author":{"gitID":"chenxing1992"},"content":"        @Override"},{"lineNumber":242,"author":{"gitID":"chenxing1992"},"content":"        public ReadOnlyPerson getPartner() {"},{"lineNumber":243,"author":{"gitID":"chenxing1992"},"content":"            return new Person(ALICE);"},{"lineNumber":244,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":247,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":118,"traceurgan":24,"-":105}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"        userPrefs.setPersonFilePath(\"data/person.xml\");"},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"        userPrefs.setNusCouplesName(\"NUSCouples\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":2,"-":133}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TIMETABLE \u003d \"www.google.com\";"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    private static final String INVALID_APPOINTMENT \u003d \"nuscouples\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d AMY.getName().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d AMY.getPhone().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d AMY.getEmail().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d AMY.getAddress().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_TIMETABLE \u003d AMY.getTimetable().toString();"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"    private static final List\u003cXmlAdaptedAppointment\u003e VALID_APPOINTMENT \u003d AMY.getAppointments().stream()"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"            .map(XmlAdaptedAppointment::new).collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(AMY);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(AMY, person.toModelType());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"                        VALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"                VALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"                        VALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"                VALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"                        VALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"                VALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":97,"author":{"gitID":"traceurgan"},"content":"                        VALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":105,"author":{"gitID":"traceurgan"},"content":"                VALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTimetable_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":114,"author":{"gitID":"traceurgan"},"content":"                        INVALID_TIMETABLE, VALID_APPOINTMENT);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Timetable.MESSAGE_TIMETABLE_CONSTRAINTS;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void toModelType_nullTimetable_throwsIllegalValueException() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":122,"author":{"gitID":"traceurgan"},"content":"                null, VALID_APPOINTMENT);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Timetable.class.getSimpleName());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":13,"-":114}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.model.PersonChangedEvent;"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"        XmlPersonStorage personStorage \u003d new XmlPersonStorage(getTempFilePath(\"p\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        XmlJournalStorage journalStorage \u003d new XmlJournalStorage(getTempFilePath(\"j\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        FileTimetableStorage timetableStorage \u003d new FileTimetableStorage(getTempFilePath(\"1\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                getTempFilePath(\"2\"), getTempFilePath(\"3\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(personStorage, journalStorage, userPrefsStorage, timetableStorage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":53,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":54,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"    public void personReadSave() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":"         * {@link XmlPersonStorage} class."},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"        Person original \u003d getTypicalPerson();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"        storageManager.savePerson(original);"},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"        ReadOnlyPerson retrieved \u003d storageManager.readPerson().get();"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":"        assertEquals(original, new Person(retrieved));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"traceurgan"},"content":"    public void getPersonFilePath() {"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"        assertNotNull(storageManager.getPersonFilePath());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"    public void handlePersonChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                \"dummy\"), new XmlJournalStorage(\"Dummy\"), new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                new FileTimetableStorage(\"dummy1\", \"dummy2\","},{"lineNumber":87,"author":{"gitID":"-"},"content":"                        \"dummy3\"));"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"        storage.handlePersonChangedEvent(new PersonChangedEvent(new Person(ALICE)));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlPersonStorage {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"traceurgan"},"content":"        public void savePerson(ReadOnlyPerson person, String filePath) throws IOException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":"    class XmlJournalStorageExceptionThrowingStub extends XmlJournalStorage {"},{"lineNumber":112,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":113,"author":{"gitID":"traceurgan"},"content":"        public XmlJournalStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"traceurgan"},"content":"        public void saveJournal(ReadOnlyJournal readOnlyJournal, String filePath) throws IOException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":24,"-":100}},{"path":"src/test/java/seedu/address/storage/XmlSerializableJournalTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Journal;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalJournalEntries;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"public class XmlSerializableJournalTest {"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath("},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"            \"src/test/data/XmlSerializableJournalTest/\");"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    private static final File TYPICAL_JOURNALENTRIES_FILE \u003d"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"            new File(TEST_DATA_FOLDER + \"typicalJournalEntriesJournalTest.xml\");"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    public void toModelType_typicalJournalEntriesFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"        XmlSerializableJournal dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_JOURNALENTRIES_FILE,"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"                XmlSerializableJournal.class);"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        Journal journalFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        Journal typicalJournalEntriesJournal \u003d TypicalJournalEntries.getTypicalJournal();"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"        assertEquals(journalFromFile, typicalJournalEntriesJournal);"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":20,"-":15}},{"path":"src/test/java/seedu/address/model/person/timetable/TimetableUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.Assert.assertDoesNotThrow;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.google.common.base.Charsets;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.google.common.io.Resources;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"public class TimetableUtilTest {"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"    private static final String VALID_LONG_URL \u003d \"https://nusmods.com/timetable/sem-2/\""},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"            + \"share?CS2101\u003dSEC:C01\u0026CS2103T\u003dTUT:C01\u0026CS3230\u003dLEC:1,TUT:4\u0026\""},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"            + \"CS3241\u003dLAB:3,LEC:1,TUT:3\u0026CS3247\u003dLAB:1,LEC:1\u0026GES1021\u003dLEC:SL1\";"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"    private static final String VALID_SHORT_URL \u003d \"http://modsn.us/wNuIW\";"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    private static final String INVALID_SHORT_URL \u003d \"http://modsn.us/123\";"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"    private static final String TIMETABLE_DISPLAY_INFO_VIEW_FILE_PATH \u003d"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"            \"TimetableTest/expectedTimetableDisplayInfoView\";"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"    private static final String TIMETABLE_DISPLAY_INFO_COMPARE_FILE_PATH \u003d"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"            \"TimetableTest/expectedTimetableDisplayInfoCompare\";"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"    private static final int CURRENT_SEMESTER \u003d 2;"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    private static String expectedTimetableDisplayInfoView;"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"    private static String expectedTimetableDisplayInfoCompare;"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"    private static HashMap\u003cString, TimetableModule\u003e expectedListOfModules;"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    public void initialize() throws IOException {"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"        // set up expectedListOfModules"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules \u003d new HashMap\u003cString, TimetableModule\u003e();"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, String\u003e tempLessonPair;"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Sectional Teaching\", \"C01\");"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS2101\", new TimetableModule(\"CS2101\","},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Tutorial\", \"C01\");"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS2103T\", new TimetableModule(\"CS2103T\","},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Lecture\", \"1\");"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Tutorial\", \"4\");"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS3230\", new TimetableModule(\"CS3230\","},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Laboratory\", \"3\");"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Lecture\", \"1\");"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Tutorial\", \"3\");"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS3241\", new TimetableModule(\"CS3241\","},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Laboratory\", \"1\");"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Lecture\", \"1\");"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS3247\", new TimetableModule(\"CS3247\","},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Lecture\", \"SL1\");"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"GES1021\", new TimetableModule(\"GES1021\","},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"        //set up expectedTimetableDisplayInfo Strings"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"        URL timetableDisplayInfoViewUrl \u003d getTestFileUrl(TIMETABLE_DISPLAY_INFO_VIEW_FILE_PATH);"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"        expectedTimetableDisplayInfoView \u003d Resources.toString(timetableDisplayInfoViewUrl, Charsets.UTF_8);"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"        URL timetableDisplayInfoCompareUrl \u003d getTestFileUrl(TIMETABLE_DISPLAY_INFO_COMPARE_FILE_PATH);"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":"        expectedTimetableDisplayInfoCompare \u003d Resources.toString(timetableDisplayInfoCompareUrl, Charsets.UTF_8);"},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":"    public void expandShortTimetableUrl_invalidShortUrl_throwsIllegalArgumentException() {"},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setExpandedTimetableUrl("},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"\")))); // empty string"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setExpandedTimetableUrl("},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"www.google.com\")))); // invalid host"},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setExpandedTimetableUrl("},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"http://www.facebook.com\")))); // invalid host"},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setExpandedTimetableUrl("},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"http://www.modsn.us/\")))); // invalid host"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setExpandedTimetableUrl("},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"http://www.modsn.us/q7cLP\")))); // invalid host"},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setExpandedTimetableUrl("},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"http://www.modsn.us/\")))); // code-part needs at least 1 character"},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":111,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"marlenekoh"},"content":"    public void expandShortTimetableUrl_validUrl() throws ParseException {"},{"lineNumber":113,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(VALID_SHORT_URL);"},{"lineNumber":114,"author":{"gitID":"marlenekoh"},"content":"        TimetableUtil.setExpandedTimetableUrl(timetable);"},{"lineNumber":115,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(timetable.getExpandedUrl(), VALID_LONG_URL);"},{"lineNumber":116,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":118,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"marlenekoh"},"content":"    public void expandShortTimetableUrl_invalidUrl_throwsParseException() {"},{"lineNumber":120,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e"},{"lineNumber":121,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setExpandedTimetableUrl(new Timetable(INVALID_SHORT_URL)));"},{"lineNumber":122,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":124,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"marlenekoh"},"content":"    public void setUpTimetableInfo() {"},{"lineNumber":126,"author":{"gitID":"marlenekoh"},"content":"        Timetable actualTimetable \u003d new Timetable(VALID_SHORT_URL);"},{"lineNumber":127,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":128,"author":{"gitID":"marlenekoh"},"content":"        assertDoesNotThrow(() -\u003e TimetableUtil.setExpandedTimetableUrl(actualTimetable));"},{"lineNumber":129,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(VALID_LONG_URL, actualTimetable.getExpandedUrl());"},{"lineNumber":130,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedListOfModules, actualTimetable.getModuleCodeToTimetableModule());"},{"lineNumber":131,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(CURRENT_SEMESTER, actualTimetable.getCurrentSemester());"},{"lineNumber":132,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedTimetableDisplayInfoView.trim(), actualTimetable.getTimetableDisplayInfo().trim());"},{"lineNumber":133,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":135,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"marlenekoh"},"content":"    public void setUpTimetableInfoView() {"},{"lineNumber":137,"author":{"gitID":"marlenekoh"},"content":"        Timetable actualTimetable \u003d new Timetable(VALID_SHORT_URL);"},{"lineNumber":138,"author":{"gitID":"marlenekoh"},"content":"        actualTimetable \u003d TimetableUtil.setUpTimetableInfoView(actualTimetable);"},{"lineNumber":139,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedTimetableDisplayInfoView.trim(), actualTimetable.getTimetableDisplayInfo().trim());"},{"lineNumber":140,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":142,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"marlenekoh"},"content":"    public void setUpTimetableInfoCompare() {"},{"lineNumber":144,"author":{"gitID":"marlenekoh"},"content":"        Timetable partnerTimetable \u003d new Timetable(VALID_SHORT_URL);"},{"lineNumber":145,"author":{"gitID":"marlenekoh"},"content":"        Timetable otherTimetable \u003d new Timetable(VALID_TIMETABLE_BOB);"},{"lineNumber":146,"author":{"gitID":"marlenekoh"},"content":"        Timetable actualTimetable \u003d TimetableUtil.setUpTimetableInfoCompare(partnerTimetable, otherTimetable);"},{"lineNumber":147,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedTimetableDisplayInfoCompare.trim(), actualTimetable.getTimetableDisplayInfo().trim());"},{"lineNumber":148,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":150,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"marlenekoh"},"content":"     * Returns an url to the test resource"},{"lineNumber":152,"author":{"gitID":"marlenekoh"},"content":"     * @param testFilePath path of the test resource"},{"lineNumber":153,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"marlenekoh"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":155,"author":{"gitID":"marlenekoh"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":156,"author":{"gitID":"marlenekoh"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":157,"author":{"gitID":"marlenekoh"},"content":"        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"},{"lineNumber":158,"author":{"gitID":"marlenekoh"},"content":"        return testFileUrl;"},{"lineNumber":159,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":138,"-":22}},{"path":"src/test/java/seedu/address/model/journalentry/DateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.model.journalentry;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"public class DateTest {"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"        String invalidDate \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    public void isValidDate() {"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"        // null phone number"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"        // invalid phone numbers"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"        assertFalse(Date.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        assertFalse(Date.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        assertFalse(Date.isValidDate(\"91\")); // less than 3 numbers"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"        assertFalse(Date.isValidDate(\"phone\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"        assertFalse(Date.isValidDate(\"9011p041\")); // alphabets within digits"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"        assertFalse(Date.isValidDate(\"9312 1534\")); // spaces within digits"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        // valid phone numbers"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"        assertTrue(Date.isValidDate(\"93121534\")); //exactly 8 digits"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":32,"-":8}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Ignore;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    //TODO: FIND OUT WHAT THIS IS"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Ignore"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"        modelManager.getPersonAsList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        Person person \u003d new Person(ALICE);"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        Journal journal \u003d getTypicalJournal();"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"        Person differentPerson \u003d new Person(AMY);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        ModelManager modelManager \u003d new ModelManager(person, journal, userPrefs);"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(person, journal, userPrefs);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        // different person -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentPerson, journal, userPrefs)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"        // empty journal -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentPerson, new Journal(), userPrefs)));"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"        differentUserPrefs.setNusCouplesName(\"differentName\");"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"        assertTrue(modelManager.equals(new ModelManager(person, journal, differentUserPrefs)));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":16,"-":45}},{"path":"src/test/java/seedu/address/model/person/timetable/TimetableTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":"public class TimetableTest {"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Timetable(null));"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"    public void constructor_invalidTimetable_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"        String invalidTimetable \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Timetable(invalidTimetable));"},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"    public void isValidTimetable() {"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"        // null address"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Timetable.isValidTimetable(null));"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"        // invalid timetables"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"www.google.com\")); // invalid host"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"http://www.facebook.com\")); // invalid host"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"http://www.modsn.us/\")); // invalid host"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"http://www.modsn.us/q7cLP\")); // invalid host"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"http://modsn.us/\")); // code-part needs at least 1 character"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"        // valid timetables"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(Timetable.isValidTimetable(\"http://modsn.us/wNuIW\"));"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(Timetable.isValidTimetable(\"http://modsn.us/q7cLP\")); // code-part can be alphanumeric"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"    public void  equals_assertsTrue() {"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(\"http://modsn.us/wNuIW\");"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetableCopy \u003d new Timetable(\"http://modsn.us/wNuIW\");"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"        // same short NUSMods URL -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(timetable.equals(timetableCopy));"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"        // same object -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(timetable.equals(timetable));"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"        // different attributes other than value -\u003e returns true"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"        // different timetableDisplayInfo, different listOfDays"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"        timetableCopy \u003d TimetableUtil.setUpTimetableInfoCompare(timetable, timetableCopy);"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(timetable.equals(timetableCopy));"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"    public void  equals_assertsFalse() {"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(\"http://modsn.us/wNuIW\");"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"        Timetable differentTimetable \u003d new Timetable(\"http://modsn.us/q7cLP\");"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"        // null -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(timetable.equals(null));"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"        // different short NUSMods URL -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(timetable.equals(differentTimetable));"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"    public void toString_assertEquals() {"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(\"http://modsn.us/wNuIW\");"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(\"http://modsn.us/wNuIW\", timetable.value);"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":69,"-":10}},{"path":"src/test/java/seedu/address/testutil/Assert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import junit.framework.AssertionFailedError;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class Assert {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expected} Exception."},{"lineNumber":12,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertThrows(expected, null, callable);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                                    VoidCallable callable) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            callable.call();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (Throwable actualException) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String errorMessage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            if (!actualException.getClass().isAssignableFrom(expectedException)) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","},{"lineNumber":32,"author":{"gitID":"-"},"content":"                        expectedException.getName(), actualException.getClass().getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                errorMessage \u003d String.format("},{"lineNumber":35,"author":{"gitID":"-"},"content":"                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                return;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionFailedError(errorMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        throw new AssertionFailedError(String.format("},{"lineNumber":44,"author":{"gitID":"-"},"content":"                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Represents a function which does not return anything and may throw an exception."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FunctionalInterface"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public interface VoidCallable {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        void call() throws Exception;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"     * Asserts that the {@code callable} does not throw any exception."},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"    public static void assertDoesNotThrow(VoidCallable callable) {"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"            callable.call();"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"        } catch (Throwable unexpectedException) {"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"            String errorMessage \u003d String.format(\"Expected nothing thrown, however %s thrown\","},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"                    unexpectedException.getMessage());"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"            throw new AssertionFailedError(errorMessage);"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":14,"-":54}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"    public static ReadOnlyPerson getPerson(Model model) {"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        return model.getPartner();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":2,"-":37}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    //TODO: ZAC NEEED TO ADD HIS APPTS HERE"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    // GO TO MODELMANAGERTEST AND UNIGNORE AND SHOULD BE OK"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@gmail.com\").withPhone(\"85355255\")"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"            .withTimetable(\"http://modsn.us/wNuIW\").withAppointment(\"Lunch, tomorrow 5pm to 7pm\").build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"            .withTimetable(VALID_TIMETABLE_AMY).withAppointment(\"Lunch, tomorrow 5pm to 7pm\").build();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"            .withTimetable(VALID_TIMETABLE_BOB).withAppointment(\"Lunch, tomorrow 5pm to 7pm\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"    public static ObservableList\u003cReadOnlyPerson\u003e getPersonAsList() {"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"        List\u003cReadOnlyPerson\u003e personList \u003d  FXCollections.observableArrayList();"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"        personList.add(ALICE);"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"        return (ObservableList\u003cReadOnlyPerson\u003e) personList;"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"    public static Person getTypicalPerson() {"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"        Person p \u003d new Person(ALICE);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"        return p;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":19,"-":39}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.model.util.SampleDataUtil.getAppointmentList;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TIMETABLE \u003d \"http://modsn.us/wNuIW\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Timetable timetable;"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"    private List\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        timetable \u003d new Timetable(DEFAULT_TIMETABLE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(name, phone, email,"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"                address, timetable, appointments);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d personToCopy.getName();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.phone \u003d personToCopy.getPhone();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.email \u003d personToCopy.getEmail();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.address \u003d personToCopy.getAddress();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.timetable \u003d personToCopy.getTimetable();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.appointments \u003d personToCopy.getAppointments();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Sets the {@code Timetable} of the {@code Person} that we are building."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public PersonBuilder withTimetable(String timetable) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        this.timetable \u003d new Timetable(timetable);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":"     * Sets appointment with Date of the person that we are building"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"traceurgan"},"content":"    public PersonBuilder withAppointment (String ... appointment) {"},{"lineNumber":105,"author":{"gitID":"traceurgan"},"content":"        this.appointments \u003d getAppointmentList(appointment);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, timetable, appointments);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":9,"-":104}},{"path":"src/test/java/seedu/address/storage/XmlJournalStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.TEST;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Journal;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"public class XmlJournalStorageTest {"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlJournalStorageTest/\");"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    private java.util.Optional\u003cReadOnlyJournal\u003e readJournal(String filePath) throws Exception {"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        return new XmlJournalStorage(filePath).readJournal(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"                : null;"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    public void readJournal_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"        readJournal(null);"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"        assertFalse(readJournal(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"        readJournal(\"NotXmlFormatJournal.xml\");"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"    public void readAndSaveJournal_allInOrder_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempJournal.xml\";"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"        Journal original \u003d getTypicalJournal();"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"        XmlJournalStorage xmlJournalStorage \u003d new XmlJournalStorage(filePath);"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"        //Save in new file and read back"},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":"        xmlJournalStorage.saveJournal(original, filePath);"},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":"        ReadOnlyJournal readBack \u003d xmlJournalStorage.readJournal(filePath).get();"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"        assertEquals(original, new Journal(readBack));"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"        //Save and read without specifying file path"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"        original.addJournalEntry(TEST);"},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"        xmlJournalStorage.saveJournal(original); //file path not specified"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":"        readBack \u003d xmlJournalStorage.readJournal().get(); //file path not specified"},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"        assertEquals(original, new Journal(readBack));"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":"    public void saveJournal_nullJournal_throwsNullPointerException() {"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"        saveJournal(null, \"SomeFile.xml\");"},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":84,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":"    private void saveJournal(ReadOnlyJournal journal, String filePath) {"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":"            new XmlJournalStorage(filePath).saveJournal(journal, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"        } catch (IOException ioe) {"},{"lineNumber":91,"author":{"gitID":"traceurgan"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":92,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":95,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":"    public void saveJournal_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":97,"author":{"gitID":"traceurgan"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":98,"author":{"gitID":"traceurgan"},"content":"        saveJournal(new Journal(), null);"},{"lineNumber":99,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":101,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":83,"-":19}},{"path":"src/test/java/seedu/address/testutil/TypicalJournalEntries.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Journal;"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":" * A utility class containing a list of {@code JournalEntry} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"public class TypicalJournalEntries {"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    public static final JournalEntry SAMPLE_ONE \u003d new JournalEntry(new Date(\"20180101\"), \"Sample text here.\");"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    public static final JournalEntry SAMPLE_TWO \u003d new JournalEntry(new Date(\"20181001\"), \"Sample two here.\");"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    public static final JournalEntry SAMPLE_THREE \u003d new JournalEntry(new Date(\"20181111\"), \"Sample three text.\");"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    //for manual adding during tests"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    public static final JournalEntry TEST \u003d new JournalEntry(new Date(\"20180328\"), \"Testing.\");"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    private TypicalJournalEntries() {} // prevents instantiation"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"     * Returns an {@code Journal} with all the typical journal entries."},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    public static Journal getTypicalJournal() {"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        Journal j \u003d new Journal();"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"        for (JournalEntry journalEntry : getTypicalJournalEntries()) {"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"            try {"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"                j.addJournalEntry(journalEntry);"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"            } catch (Exception e) {"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"        return j;"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"    public static List\u003cJournalEntry\u003e getTypicalJournalEntries() {"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(SAMPLE_ONE, SAMPLE_TWO, SAMPLE_THREE));"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":39,"-":9}},{"path":"src/test/java/seedu/address/model/JournalTest.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"public class JournalTest {"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    private final Journal journal \u003d new Journal();"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    public void constructor() {"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"        assertEquals(Collections.emptyList(), journal.getJournalEntryList());"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    public void resetJournalData_nullData() throws Exception {"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"        journal.resetJournalData(null);"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    public void resetData_withValidReadOnlyJournal_replacesData() {"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        Journal newData \u003d getTypicalJournal();"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"        journal.resetJournalData(newData);"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"        assertEquals(newData, journal);"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"    public void getJournalEntryList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"        journal.getJournalEntryList().remove(0);"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":36,"-":6}},{"path":"src/main/java/seedu/address/ui/JournalEntryText.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":" * The UI component that is responsible for receiving journal entry text."},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"public class JournalEntryText extends UiPart\u003cRegion\u003e {"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"    private static final String FXML \u003d \"JournalEntryText.fxml\";"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    private TextArea journalTextArea;"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    public JournalEntryText() {"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"        super(FXML);"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    public String getText() {"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"        return journalTextArea.getText();"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    public void setText(String text) {"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"        journalTextArea.setText(text);"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":23,"-":6}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.UnsupportedEncodingException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.net.URLDecoder;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.Duration;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.model.PersonChangedEvent;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.CalendarViewEvent;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String TIMETABLE_PAGE \u003d \"TimetablePage.html\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String JAR_DATA_FILE_FOLDER \u003d \"/data/\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String INTELLIJ_DATA_FILE_FOLDER \u003d \"\\\\data\\\\\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String FILE_PREFIX \u003d \"file:\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private CalendarView calendarView;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private ReadOnlyPerson partner;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"    public BrowserPanel(ReadOnlyPerson partner) {"},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"        super(FXML);"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"        this.partner \u003d partner;"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"        calendarView \u003d new CalendarView();"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":"        if (partner !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"            updateCalendar();"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"        disableViews();"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":79,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":80,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":81,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"chenxing1992"},"content":"     * Remove clutter from interface"},{"lineNumber":83,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"chenxing1992"},"content":"    private void disableViews() {"},{"lineNumber":85,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":86,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":87,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":88,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":89,"author":{"gitID":"chenxing1992"},"content":"        calendarView.showDayPage();"},{"lineNumber":90,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":92,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"chenxing1992"},"content":"     * Explicitly set the Root object to CalendarView"},{"lineNumber":94,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":96,"author":{"gitID":"chenxing1992"},"content":"    public CalendarView getCalendarRoot() {"},{"lineNumber":97,"author":{"gitID":"chenxing1992"},"content":"        return this.calendarView;"},{"lineNumber":98,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":100,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"chenxing1992"},"content":"     * Changes calendar view accordingly"},{"lineNumber":102,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"chenxing1992"},"content":"    private void showPage(Character c) {"},{"lineNumber":104,"author":{"gitID":"chenxing1992"},"content":"        switch(c) {"},{"lineNumber":105,"author":{"gitID":"chenxing1992"},"content":"        case (\u0027d\u0027):"},{"lineNumber":106,"author":{"gitID":"chenxing1992"},"content":"            calendarView.showDayPage();"},{"lineNumber":107,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":108,"author":{"gitID":"chenxing1992"},"content":"        case (\u0027w\u0027):"},{"lineNumber":109,"author":{"gitID":"chenxing1992"},"content":"            calendarView.showWeekPage();"},{"lineNumber":110,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":111,"author":{"gitID":"chenxing1992"},"content":"        case (\u0027m\u0027):"},{"lineNumber":112,"author":{"gitID":"chenxing1992"},"content":"            calendarView.showMonthPage();"},{"lineNumber":113,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":114,"author":{"gitID":"chenxing1992"},"content":"        case (\u0027y\u0027):"},{"lineNumber":115,"author":{"gitID":"chenxing1992"},"content":"            calendarView.showYearPage();"},{"lineNumber":116,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":117,"author":{"gitID":"chenxing1992"},"content":"        default:"},{"lineNumber":118,"author":{"gitID":"chenxing1992"},"content":"        //should not reach here"},{"lineNumber":119,"author":{"gitID":"chenxing1992"},"content":"        assert (false);"},{"lineNumber":120,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":123,"author":{"gitID":"chenxing1992"},"content":"    private void setTime() {"},{"lineNumber":124,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":125,"author":{"gitID":"chenxing1992"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":126,"author":{"gitID":"chenxing1992"},"content":"        calendarView.getCalendarSources().clear();"},{"lineNumber":127,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":129,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":130,"author":{"gitID":"chenxing1992"},"content":"    private Calendar getCalendar(int styleNum, ReadOnlyPerson person) {"},{"lineNumber":131,"author":{"gitID":"chenxing1992"},"content":"        Calendar calendar \u003d new Calendar(person.getName().toString());"},{"lineNumber":132,"author":{"gitID":"chenxing1992"},"content":"        calendar.setStyle(Calendar.Style.getStyle(styleNum));"},{"lineNumber":133,"author":{"gitID":"chenxing1992"},"content":"        calendar.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":134,"author":{"gitID":"chenxing1992"},"content":"        return calendar;"},{"lineNumber":135,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":137,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":138,"author":{"gitID":"chenxing1992"},"content":"    private ArrayList\u003cEntry\u003e getEntries(ReadOnlyPerson person) {"},{"lineNumber":139,"author":{"gitID":"chenxing1992"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":140,"author":{"gitID":"chenxing1992"},"content":"        for (Appointment appointment : person.getAppointments()) {"},{"lineNumber":141,"author":{"gitID":"chenxing1992"},"content":"            LocalDateTime ldtstart \u003d LocalDateTime.ofInstant(appointment.getDate().toInstant(),"},{"lineNumber":142,"author":{"gitID":"chenxing1992"},"content":"                    ZoneId.systemDefault());"},{"lineNumber":143,"author":{"gitID":"chenxing1992"},"content":"            LocalDateTime ldtend \u003d LocalDateTime.ofInstant(appointment.getEndDate().toInstant(),"},{"lineNumber":144,"author":{"gitID":"chenxing1992"},"content":"                    ZoneId.systemDefault());"},{"lineNumber":145,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":146,"author":{"gitID":"chenxing1992"},"content":"            entries.add(new Entry(appointment.getDescription() + \" with \" + person.getName(),"},{"lineNumber":147,"author":{"gitID":"chenxing1992"},"content":"                    new Interval(ldtstart, ldtend)));"},{"lineNumber":148,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"chenxing1992"},"content":"        return entries;"},{"lineNumber":150,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":152,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":153,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":154,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"chenxing1992"},"content":"     * Creates a new a calendar with the update information"},{"lineNumber":156,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"chenxing1992"},"content":"    private void updateCalendar() {"},{"lineNumber":158,"author":{"gitID":"chenxing1992"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"chenxing1992"},"content":"            setTime();"},{"lineNumber":160,"author":{"gitID":"chenxing1992"},"content":"            CalendarSource calendarSource \u003d new CalendarSource(\"Appointments\");"},{"lineNumber":161,"author":{"gitID":"chenxing1992"},"content":"            int styleNum \u003d 0;"},{"lineNumber":162,"author":{"gitID":"chenxing1992"},"content":"            Calendar calendar \u003d getCalendar(styleNum,  partner);"},{"lineNumber":163,"author":{"gitID":"chenxing1992"},"content":"            calendarSource.getCalendars().add(calendar);"},{"lineNumber":164,"author":{"gitID":"chenxing1992"},"content":"            ArrayList\u003cEntry\u003e entries \u003d getEntries(partner);"},{"lineNumber":165,"author":{"gitID":"chenxing1992"},"content":"            for (Entry entry : entries) {"},{"lineNumber":166,"author":{"gitID":"chenxing1992"},"content":"                calendar.addEntry(entry);"},{"lineNumber":167,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":168,"author":{"gitID":"chenxing1992"},"content":"            calendarView.getCalendarSources().add(calendarSource);"},{"lineNumber":169,"author":{"gitID":"chenxing1992"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":170,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":171,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":174,"author":{"gitID":"chenxing1992"},"content":"    @Subscribe"},{"lineNumber":175,"author":{"gitID":"chenxing1992"},"content":"    private void handleCalendarViewEvent(CalendarViewEvent event) {"},{"lineNumber":176,"author":{"gitID":"chenxing1992"},"content":"        Character c \u003d event.c;"},{"lineNumber":177,"author":{"gitID":"chenxing1992"},"content":"        Platform.runLater(() -\u003e showPage(c));"},{"lineNumber":178,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":180,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":181,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"marlenekoh"},"content":"     * Loads the timetable page of a person into browser panel."},{"lineNumber":183,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"marlenekoh"},"content":"    public void loadTimetablePage() {"},{"lineNumber":185,"author":{"gitID":"marlenekoh"},"content":"        String timetablePageUrl;"},{"lineNumber":186,"author":{"gitID":"marlenekoh"},"content":"        if (runningFromIntelliJ()) {"},{"lineNumber":187,"author":{"gitID":"marlenekoh"},"content":"            timetablePageUrl \u003d FILE_PREFIX + getIntellijRootDir() + INTELLIJ_DATA_FILE_FOLDER + TIMETABLE_PAGE;"},{"lineNumber":188,"author":{"gitID":"marlenekoh"},"content":"        } else {"},{"lineNumber":189,"author":{"gitID":"marlenekoh"},"content":"            timetablePageUrl \u003d getJarDir() + JAR_DATA_FILE_FOLDER + TIMETABLE_PAGE;"},{"lineNumber":190,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"marlenekoh"},"content":"        loadPage(timetablePageUrl);"},{"lineNumber":192,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":194,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"marlenekoh"},"content":"     * Gets the directory containing the root folder"},{"lineNumber":196,"author":{"gitID":"marlenekoh"},"content":"     * @return a String containing the directory path"},{"lineNumber":197,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"marlenekoh"},"content":"    private String getIntellijRootDir() {"},{"lineNumber":199,"author":{"gitID":"marlenekoh"},"content":"        return System.getProperty(\"user.dir\");"},{"lineNumber":200,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":202,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"marlenekoh"},"content":"     * Gets the directory containing the executing jar."},{"lineNumber":204,"author":{"gitID":"marlenekoh"},"content":"     * @return a String containing the directory path"},{"lineNumber":205,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"marlenekoh"},"content":"    private String getJarDir() {"},{"lineNumber":207,"author":{"gitID":"marlenekoh"},"content":"        String jarPath \u003d getClass().getProtectionDomain().getCodeSource().getLocation().toExternalForm();"},{"lineNumber":208,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"marlenekoh"},"content":"            jarPath \u003d URLDecoder.decode(jarPath, \"UTF-8\");"},{"lineNumber":210,"author":{"gitID":"marlenekoh"},"content":"        } catch (UnsupportedEncodingException e) {"},{"lineNumber":211,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"The Character Encoding is not supported.\");"},{"lineNumber":212,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"marlenekoh"},"content":"        return jarPath.substring(0, jarPath.lastIndexOf(\u0027/\u0027));"},{"lineNumber":214,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":216,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"marlenekoh"},"content":"     * Checks if the current code is running from IntelliJ (for debugging) or from the jar file."},{"lineNumber":218,"author":{"gitID":"marlenekoh"},"content":"     * @return true if running from IntelliJ"},{"lineNumber":219,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"marlenekoh"},"content":"    private static boolean runningFromIntelliJ() {"},{"lineNumber":221,"author":{"gitID":"marlenekoh"},"content":"        String classPath \u003d System.getProperty(\"java.class.path\");"},{"lineNumber":222,"author":{"gitID":"marlenekoh"},"content":"        Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":223,"author":{"gitID":"marlenekoh"},"content":"        return classPath.contains(\"idea_rt.jar\");"},{"lineNumber":224,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":226,"author":{"gitID":"marlenekoh"},"content":"    //@@author"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"traceurgan"},"content":"    private void loadPage(String url) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"traceurgan"},"content":"    public void loadDefaultPage() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":244,"author":{"gitID":"traceurgan"},"content":"    private void handleNewAppointmentEvent(PersonChangedEvent event) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        Platform.runLater("},{"lineNumber":246,"author":{"gitID":"-"},"content":"                this::updateCalendar"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chenxing1992":123,"marlenekoh":47,"traceurgan":5,"-":82}},{"path":"src/test/java/seedu/address/logic/commands/CompareTimetableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CompareTimetableCommand.MESSAGE_TIMETABLE_COMPARE_FAILURE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CompareTimetableCommand.MESSAGE_TIMETABLE_COMPARE_SUCCESS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJournalEntries.getTypicalJournal;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowTimetableRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"public class CompareTimetableCommandTest {"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    private static final String VALID_SHORT_URL \u003d \"http://modsn.us/wNuIW\";"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"    private Model withPartnerModel;"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    private Model noPartnerModel;"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"        withPartnerModel \u003d new ModelManager(getTypicalPerson(), getTypicalJournal(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"        noPartnerModel \u003d new ModelManager(null, getTypicalJournal(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"    public void execute_success() throws IllegalArgumentException {"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(VALID_SHORT_URL);"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        CompareTimetableCommand compareTimetableCommand \u003d prepareCommand(withPartnerModel, timetable);"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"            CommandResult result \u003d compareTimetableCommand.execute();"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"            assertEquals(MESSAGE_TIMETABLE_COMPARE_SUCCESS, result.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowTimetableRequestEvent);"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 2);"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"    public void execute_failure() throws IllegalArgumentException {"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(VALID_SHORT_URL);"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"        assertExecutionFailure(noPartnerModel, timetable, MESSAGE_INVALID_PERSON);"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"        assertExecutionFailure(noPartnerModel, null, MESSAGE_INVALID_PERSON);"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"        assertExecutionFailure(withPartnerModel, null, MESSAGE_TIMETABLE_COMPARE_FAILURE);"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(VALID_SHORT_URL);"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"        CompareTimetableCommand compareTimetableCommand \u003d new CompareTimetableCommand(timetable);"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"        // different types -\u003e returns false"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(compareTimetableCommand.equals(1));"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"        // null -\u003e returns false"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(compareTimetableCommand.equals(null));"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"     * Executes a {@code CompareTimetableCommand} with the given {@code model} and {@code timetable},"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"     * and checks that a {@code CommandException} is thrown with the {@code expectedMessage}."},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"    private void assertExecutionFailure(Model model, Timetable timetable, String expectedMessage) {"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":"        CompareTimetableCommand compareTimetableCommand \u003d prepareCommand(model, timetable);"},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"            compareTimetableCommand.execute();"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":"        } catch (CommandException ce) {"},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"     * Returns a {@code CompareTimetableCommand} with new CommandHistory and new UndoRedoStack."},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"     * @param myModel either contains null partner or valid partner"},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable the other person\u0027s timetable to compare with"},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":"    private CompareTimetableCommand prepareCommand(Model myModel, Timetable timetable) {"},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":"        CompareTimetableCommand compareTimetableCommand \u003d new CompareTimetableCommand(timetable);"},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"        compareTimetableCommand.setData(myModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":"        return compareTimetableCommand;"},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":79,"traceurgan":2,"-":24}},{"path":"src/main/java/seedu/address/ui/JournalWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.stage.Modality;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.SaveEntryEvent;"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":" * Controller for a journal page"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"public class JournalWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    private static final String FXML \u003d \"JournalWindow.fxml\";"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    private JournalEntryText journalEntryText;"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"    private Date date;"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    private StackPane journalTextPlaceholder;"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    private JournalWindow (Stage root, Date date) {"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"        super (FXML, root);"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"        this.date \u003d date;"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"        fillInnerParts();"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        root.setTitle(date + \" - Journal\");"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        root.initModality(Modality.APPLICATION_MODAL);"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"    private JournalWindow (Stage root, Date date, String text) {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        super (FXML, root);"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"        this.date \u003d date;"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        fillInnerParts(text);"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"        root.setTitle(date + \" - Journal\");"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"        root.initModality(Modality.APPLICATION_MODAL);"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"    public JournalWindow(Date date, String text) {"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"        this(new Stage(), date, text);"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"    public JournalWindow (Date date) {"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        this(new Stage(), date);"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"     * Fills placeholder with a editable TextArea"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"    private void fillInnerParts() {"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"        journalEntryText \u003d new JournalEntryText();"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"        journalTextPlaceholder.getChildren().add(journalEntryText.getRoot());"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"     * Fills placeholder with a editable TextArea"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":"    private void fillInnerParts(String text) {"},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"        journalEntryText \u003d new JournalEntryText();"},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":"        journalEntryText.setText(text);"},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":"        journalTextPlaceholder.getChildren().add(journalEntryText.getRoot());"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"     * Raise JournalEntrySaveEvent on journal window close if text area is not empty"},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"    private void handleJournalClose() {"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":"        if (!journalEntryText.getText().isEmpty()) {"},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"            JournalEntry journalEntry \u003d new JournalEntry(this.date, journalEntryText.getText());"},{"lineNumber":77,"author":{"gitID":"traceurgan"},"content":"            raise(new SaveEntryEvent(journalEntry));"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":"        return;"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"    public void show() {"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":"        getRoot().show();"},{"lineNumber":84,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"    public boolean isShowing() {"},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":"        return getRoot().isShowing();"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":81,"-":9}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.model.PersonChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":"    public void handlePersonChangedEvent(PersonChangedEvent pce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(pce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":3,"-":78}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import static javafx.scene.input.KeyCode.TAB;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.ui.HideTimetableRequestEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.ui.ShowJournalEntryRequestEvent;"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.ui.ShowTimetableRequestEvent;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private CalendarView calendarView;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private ListPanel listPanel;"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"    private CommandBox commandBox;"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"    private StatusBarFooter statusBarFooter;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private StackPane listPanelPlaceholder;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":92,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":114,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":120,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":124,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":137,"author":{"gitID":"traceurgan"},"content":"        browserPlaceholder.getChildren().clear();"},{"lineNumber":138,"author":{"gitID":"traceurgan"},"content":"        browserPanel \u003d new BrowserPanel(logic.getPartner());"},{"lineNumber":139,"author":{"gitID":"traceurgan"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getCalendarRoot());"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"traceurgan"},"content":"        listPanel \u003d new ListPanel(logic.getPersonAsList(), logic.getJournalEntryList());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        listPanelPlaceholder.getChildren().add(listPanel.getRoot());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"traceurgan"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"traceurgan"},"content":"        statusBarFooter \u003d new StatusBarFooter(prefs.getPersonFilePath());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"traceurgan"},"content":"        commandBox \u003d new CommandBox(logic);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e commandBox.getCommandTextField().requestFocus());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":198,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"marlenekoh"},"content":"     * Replaces the Calendar with Timetable Page in Browser Panel"},{"lineNumber":200,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"marlenekoh"},"content":"    private void handleShowTimetable() {"},{"lineNumber":202,"author":{"gitID":"marlenekoh"},"content":"        browserPlaceholder.getChildren().clear();"},{"lineNumber":203,"author":{"gitID":"marlenekoh"},"content":"        browserPanel.loadTimetablePage();"},{"lineNumber":204,"author":{"gitID":"marlenekoh"},"content":"        if (!browserPlaceholder.getChildren().contains(browserPanel.getRoot())) {"},{"lineNumber":205,"author":{"gitID":"marlenekoh"},"content":"            browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":206,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":209,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"marlenekoh"},"content":"     * Replaces the Timetable Page with Calendar in Browser Panel"},{"lineNumber":211,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"marlenekoh"},"content":"    private void handleHideTimetable() {"},{"lineNumber":213,"author":{"gitID":"marlenekoh"},"content":"        browserPlaceholder.getChildren().clear();"},{"lineNumber":214,"author":{"gitID":"marlenekoh"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getCalendarRoot());"},{"lineNumber":215,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":217,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"marlenekoh"},"content":"     * Shows journal entry."},{"lineNumber":219,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"marlenekoh"},"content":"    private void handleShowJournalEntry(JournalEntry journalEntry) {"},{"lineNumber":221,"author":{"gitID":"marlenekoh"},"content":"        browserPlaceholder.getChildren().clear();"},{"lineNumber":222,"author":{"gitID":"marlenekoh"},"content":"        JournalEntryView journalEntryView \u003d new JournalEntryView(journalEntry);"},{"lineNumber":223,"author":{"gitID":"marlenekoh"},"content":"        browserPlaceholder.getChildren().add(journalEntryView.getRoot());"},{"lineNumber":224,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":226,"author":{"gitID":"marlenekoh"},"content":"    //@@author"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":244,"author":{"gitID":"traceurgan"},"content":"        if (keyEvent.getCode() \u003d\u003d TAB) {"},{"lineNumber":245,"author":{"gitID":"traceurgan"},"content":"            keyEvent.consume();"},{"lineNumber":246,"author":{"gitID":"traceurgan"},"content":"            commandBoxRequestFocus();"},{"lineNumber":247,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":249,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":251,"author":{"gitID":"traceurgan"},"content":"    private void commandBoxRequestFocus() {"},{"lineNumber":252,"author":{"gitID":"traceurgan"},"content":"        this.commandBox.getCommandTextField().requestFocus();"},{"lineNumber":253,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public ListPanel getPersonListPanel() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        return this.listPanel;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":269,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":270,"author":{"gitID":"traceurgan"},"content":"    @Subscribe"},{"lineNumber":271,"author":{"gitID":"traceurgan"},"content":"    private void handleShowJournalEntryRequestEvent(ShowJournalEntryRequestEvent event) {"},{"lineNumber":272,"author":{"gitID":"traceurgan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":273,"author":{"gitID":"traceurgan"},"content":"        handleShowJournalEntry(event.journalEntry);"},{"lineNumber":274,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":276,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":277,"author":{"gitID":"marlenekoh"},"content":"    @Subscribe"},{"lineNumber":278,"author":{"gitID":"marlenekoh"},"content":"    private void handleShowTimetableRequestEvent(ShowTimetableRequestEvent event) {"},{"lineNumber":279,"author":{"gitID":"marlenekoh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":280,"author":{"gitID":"marlenekoh"},"content":"        handleShowTimetable();"},{"lineNumber":281,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":283,"author":{"gitID":"marlenekoh"},"content":"    @Subscribe"},{"lineNumber":284,"author":{"gitID":"marlenekoh"},"content":"    private void handleHideTimetableRequestEvent(HideTimetableRequestEvent event) {"},{"lineNumber":285,"author":{"gitID":"marlenekoh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":286,"author":{"gitID":"marlenekoh"},"content":"        handleHideTimetable();"},{"lineNumber":287,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":43,"traceurgan":36,"-":209}},{"path":"src/main/java/seedu/address/ui/JournalEntryCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"public class JournalEntryCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    private static final String FXML \u003d \"JournalEntryListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    public final JournalEntry journalEntry;"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    private Label date;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    private Label id;"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    private Label text;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    public JournalEntryCard(JournalEntry journalEntry, int displayedIndex) {"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"        this.journalEntry \u003d journalEntry;"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        date.setText(journalEntry.getDate().value);"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"        text.setText(journalEntry.getText());"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"        // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"        // instanceof handles nulls"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"        if (!(other instanceof JournalEntryCard)) {"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"            return false;"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"        // state check"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"        JournalEntryCard card \u003d (JournalEntryCard) other;"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 journalEntry.equals(card.journalEntry);"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":45,"-":8}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":46,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Deletes chunk in the situation where caret is at the far right."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @param newCaretPosition Passes in the existing caret position."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @return newCaretPosition shifted left by chunk."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private int farRightDeleteChunk(int newCaretPosition) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (isEmptyBefore(newCaretPosition)) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return shiftLeftIgnoringSpaces(newCaretPosition);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return shiftLeftIgnoringWords(newCaretPosition);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Deletes the word or a chunk of blank spaces on the left."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Does not matter if caret is at end of text or between lines. Method will automatically"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * detect and execute."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * 1. If Caret is at far left, break."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * 2. If Caret is at far right, check if left side is blank or word and execute appropriately."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * 3. If \" \" is present on the left of Caret, delete all blank spaces before."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * 4. If Caret is between word, execute normal delete method."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * 5. If Character is on the left and \" \" is on the right, delete chunk on left."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void deleteByChunk() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        int originalCaretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        int newCaretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        int mostRight \u003d commandTextField.getText().length();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (newCaretPosition \u003d\u003d 0) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } else if (newCaretPosition \u003d\u003d mostRight) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            newCaretPosition \u003d farRightDeleteChunk(newCaretPosition);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } else if (isEmptyBefore(newCaretPosition)) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            newCaretPosition \u003d shiftLeftIgnoringSpaces(newCaretPosition);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } else if (!isEmptyBefore(newCaretPosition) \u0026\u0026 !isEmptyAfter(newCaretPosition)) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            newCaretPosition -\u003d 1;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            newCaretPosition \u003d shiftLeftIgnoringWords(newCaretPosition);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setNewWord(newCaretPosition, originalCaretPosition);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(newCaretPosition);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Checks if caret is at either ends."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @param originalCaretPosition Caret to evaluate."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @return True if caret is either at far left or far right."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private boolean atEitherEnds(int originalCaretPosition) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        boolean atFarLeft \u003d (originalCaretPosition \u003d\u003d 0);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        boolean atFarRight \u003d (originalCaretPosition \u003d\u003d commandTextField.getText().length());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return atFarLeft || atFarRight;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Sets a new word with all string elements between the two parameters removed."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @param newCaretPosition      Left boundary of the word."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * @param originalCaretPosition Right boundary of the word."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void setNewWord(int newCaretPosition, int originalCaretPosition) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String before \u003d commandTextField.getText().substring(0, newCaretPosition);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String answer;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (atEitherEnds(originalCaretPosition)) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            answer \u003d before;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            String after \u003d commandTextField.getText().substring(originalCaretPosition);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            answer \u003d before + after;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandTextField.setText(answer);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Handles KeyPress Commands that are keyed with Shift button held down."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @param keyEvent Key event pressed by user with shift pressed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private void handleShiftPress(KeyEvent keyEvent) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        case ALT:"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            commandTextField.positionCaret(0);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        case CONTROL:"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        case DELETE:"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        case BACK_SPACE:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            deleteByChunk();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (keyEvent.isShiftDown()) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            handleShiftPress(keyEvent);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            handleStandardPress(keyEvent);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":159,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":160,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"chenxing1992"},"content":"     * Handles KeyPress Commands that are not keyed with Shift button held down."},{"lineNumber":162,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":163,"author":{"gitID":"chenxing1992"},"content":"     * @param keyEvent Key event pressed by user."},{"lineNumber":164,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"chenxing1992"},"content":"    private void handleStandardPress(KeyEvent keyEvent) {"},{"lineNumber":166,"author":{"gitID":"chenxing1992"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":167,"author":{"gitID":"chenxing1992"},"content":"        case UP:"},{"lineNumber":168,"author":{"gitID":"chenxing1992"},"content":"            keyEvent.consume();"},{"lineNumber":169,"author":{"gitID":"chenxing1992"},"content":"            navigateToPreviousInput();"},{"lineNumber":170,"author":{"gitID":"chenxing1992"},"content":"            break;"},{"lineNumber":171,"author":{"gitID":"chenxing1992"},"content":"        case DOWN:"},{"lineNumber":172,"author":{"gitID":"chenxing1992"},"content":"            keyEvent.consume();"},{"lineNumber":173,"author":{"gitID":"chenxing1992"},"content":"            navigateToNextInput();"},{"lineNumber":174,"author":{"gitID":"chenxing1992"},"content":"            break;"},{"lineNumber":175,"author":{"gitID":"chenxing1992"},"content":"        case ESCAPE:"},{"lineNumber":176,"author":{"gitID":"chenxing1992"},"content":"            keyEvent.consume();"},{"lineNumber":177,"author":{"gitID":"chenxing1992"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":178,"author":{"gitID":"chenxing1992"},"content":"            break;"},{"lineNumber":179,"author":{"gitID":"chenxing1992"},"content":"        case ALT:"},{"lineNumber":180,"author":{"gitID":"chenxing1992"},"content":"            keyEvent.consume();"},{"lineNumber":181,"author":{"gitID":"chenxing1992"},"content":"            shiftCaretLeftByWord();"},{"lineNumber":182,"author":{"gitID":"chenxing1992"},"content":"            break;"},{"lineNumber":183,"author":{"gitID":"chenxing1992"},"content":"        case CONTROL:"},{"lineNumber":184,"author":{"gitID":"chenxing1992"},"content":"            keyEvent.consume();"},{"lineNumber":185,"author":{"gitID":"chenxing1992"},"content":"            shiftCaretRightByWord();"},{"lineNumber":186,"author":{"gitID":"chenxing1992"},"content":"            break;"},{"lineNumber":187,"author":{"gitID":"chenxing1992"},"content":"        case RIGHT:"},{"lineNumber":188,"author":{"gitID":"chenxing1992"},"content":"            boolean isCaretWithin \u003d commandTextField.getCaretPosition() \u003c commandTextField.getText().length();"},{"lineNumber":189,"author":{"gitID":"chenxing1992"},"content":"            if (isCaretWithin) {"},{"lineNumber":190,"author":{"gitID":"chenxing1992"},"content":"                break;"},{"lineNumber":191,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":192,"author":{"gitID":"chenxing1992"},"content":"            addsNextPrefix();"},{"lineNumber":193,"author":{"gitID":"chenxing1992"},"content":"            break;"},{"lineNumber":194,"author":{"gitID":"chenxing1992"},"content":"        default:"},{"lineNumber":195,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":198,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":199,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"chenxing1992"},"content":"     * Adds prefix string to existing text input."},{"lineNumber":201,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":202,"author":{"gitID":"chenxing1992"},"content":"     * @param prefix Prefix to add."},{"lineNumber":203,"author":{"gitID":"chenxing1992"},"content":"     * @return Text input concatenated with prefix."},{"lineNumber":204,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"chenxing1992"},"content":"    private String concatPrefix(Prefix prefix) {"},{"lineNumber":206,"author":{"gitID":"chenxing1992"},"content":"        return commandTextField.getText().concat(\" \").concat(prefix.getPrefix());"},{"lineNumber":207,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":209,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":210,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"chenxing1992"},"content":"     * Adds the next prefix required for the input"},{"lineNumber":212,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"chenxing1992"},"content":"    private void addsNextPrefix() {"},{"lineNumber":214,"author":{"gitID":"chenxing1992"},"content":"        String finalText;"},{"lineNumber":215,"author":{"gitID":"chenxing1992"},"content":"        if (containsPrefix(\"name\")) {"},{"lineNumber":216,"author":{"gitID":"chenxing1992"},"content":"            finalText \u003d concatPrefix(PREFIX_NAME);"},{"lineNumber":217,"author":{"gitID":"chenxing1992"},"content":"        } else if (containsPrefix(\"phone\")) {"},{"lineNumber":218,"author":{"gitID":"chenxing1992"},"content":"            finalText \u003d concatPrefix(PREFIX_PHONE);"},{"lineNumber":219,"author":{"gitID":"chenxing1992"},"content":"        } else if (containsPrefix(\"email\")) {"},{"lineNumber":220,"author":{"gitID":"chenxing1992"},"content":"            finalText \u003d concatPrefix(PREFIX_EMAIL);"},{"lineNumber":221,"author":{"gitID":"chenxing1992"},"content":"        } else if (containsPrefix(\"address\")) {"},{"lineNumber":222,"author":{"gitID":"chenxing1992"},"content":"            finalText \u003d concatPrefix(PREFIX_ADDRESS);"},{"lineNumber":223,"author":{"gitID":"chenxing1992"},"content":"        } else if (containsPrefix(\"date\")) {"},{"lineNumber":224,"author":{"gitID":"chenxing1992"},"content":"            finalText \u003d concatPrefix(PREFIX_DATE);"},{"lineNumber":225,"author":{"gitID":"chenxing1992"},"content":"        } else if (containsPrefix(\"timetable\")) {"},{"lineNumber":226,"author":{"gitID":"chenxing1992"},"content":"            finalText \u003d concatPrefix(PREFIX_TIMETABLE);"},{"lineNumber":227,"author":{"gitID":"chenxing1992"},"content":"        } else {"},{"lineNumber":228,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":229,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"chenxing1992"},"content":"        commandTextField.setText(finalText);"},{"lineNumber":231,"author":{"gitID":"chenxing1992"},"content":"        commandTextField.positionCaret(finalText.length());"},{"lineNumber":232,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":234,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":235,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"chenxing1992"},"content":"     * Checks if add or edit KeyWord is in the input text. Also checks if prefix is in the input text."},{"lineNumber":237,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":238,"author":{"gitID":"chenxing1992"},"content":"     * @param element String to be evaluated."},{"lineNumber":239,"author":{"gitID":"chenxing1992"},"content":"     * @return True if contains add or edit keyword and relevant prefixes."},{"lineNumber":240,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"chenxing1992"},"content":"    private boolean containsPrefix(String element) {"},{"lineNumber":242,"author":{"gitID":"chenxing1992"},"content":"        switch (element) {"},{"lineNumber":243,"author":{"gitID":"chenxing1992"},"content":"        case \"name\":"},{"lineNumber":244,"author":{"gitID":"chenxing1992"},"content":"            return (!containsName() \u0026\u0026 (addPollSuccessful() || editPollSuccessful()));"},{"lineNumber":245,"author":{"gitID":"chenxing1992"},"content":"        case \"phone\":"},{"lineNumber":246,"author":{"gitID":"chenxing1992"},"content":"            return (!containsPhone() \u0026\u0026 (addPollSuccessful() || editPollSuccessful()));"},{"lineNumber":247,"author":{"gitID":"chenxing1992"},"content":"        case \"email\":"},{"lineNumber":248,"author":{"gitID":"chenxing1992"},"content":"            return (!containsEmail() \u0026\u0026 (addPollSuccessful() || editPollSuccessful()));"},{"lineNumber":249,"author":{"gitID":"chenxing1992"},"content":"        case \"address\":"},{"lineNumber":250,"author":{"gitID":"chenxing1992"},"content":"            return (!containsAddress() \u0026\u0026 (addPollSuccessful() || editPollSuccessful()));"},{"lineNumber":251,"author":{"gitID":"chenxing1992"},"content":"        case \"timetable\":"},{"lineNumber":252,"author":{"gitID":"chenxing1992"},"content":"            return (!containsTimeTable() \u0026\u0026 (addPollSuccessful() || editPollSuccessful()));"},{"lineNumber":253,"author":{"gitID":"chenxing1992"},"content":"        case \"date\":"},{"lineNumber":254,"author":{"gitID":"chenxing1992"},"content":"            return (!containsDate() \u0026\u0026 (addPollSuccessful() || editPollSuccessful()));"},{"lineNumber":255,"author":{"gitID":"chenxing1992"},"content":"        default:"},{"lineNumber":256,"author":{"gitID":"chenxing1992"},"content":"            return (containsAllCompulsoryPrefix() \u0026\u0026 (addPollSuccessful() || editPollSuccessful()));"},{"lineNumber":257,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":260,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":261,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"chenxing1992"},"content":"     * Checks if the commandTextField all prefixes excluding tag."},{"lineNumber":263,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":264,"author":{"gitID":"chenxing1992"},"content":"     * @return True if all prefixes are present."},{"lineNumber":265,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"chenxing1992"},"content":"    private boolean containsAllCompulsoryPrefix() {"},{"lineNumber":267,"author":{"gitID":"chenxing1992"},"content":"        return containsAddress() \u0026\u0026 containsEmail()"},{"lineNumber":268,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 containsName() \u0026\u0026 containsPhone()"},{"lineNumber":269,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 containsDate();"},{"lineNumber":270,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":272,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":273,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"chenxing1992"},"content":"     * Checks if sentence starts with \" edit \" or \" e \" and is followed by a valid INDEX."},{"lineNumber":275,"author":{"gitID":"chenxing1992"},"content":"     * Accounts for blank spaces in front."},{"lineNumber":276,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":277,"author":{"gitID":"chenxing1992"},"content":"     * @return True if sentence starts with \" edit \" or \" e \" and is followed by a valid INDEX."},{"lineNumber":278,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"chenxing1992"},"content":"    private boolean editPollSuccessful() {"},{"lineNumber":280,"author":{"gitID":"chenxing1992"},"content":"        String stringToEvaluate \u003d commandTextField.getText().trim();"},{"lineNumber":281,"author":{"gitID":"chenxing1992"},"content":"        if (stringToEvaluate.length() \u003c 3 || !stringToEvaluate.contains(\" \")) {"},{"lineNumber":282,"author":{"gitID":"chenxing1992"},"content":"            return false;"},{"lineNumber":283,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"chenxing1992"},"content":"        String[] splittedString \u003d stringToEvaluate.split(\" \");"},{"lineNumber":285,"author":{"gitID":"chenxing1992"},"content":"        boolean containsEditWord \u003d splittedString[0].equalsIgnoreCase(\"edit\");"},{"lineNumber":286,"author":{"gitID":"chenxing1992"},"content":"        boolean containsEditShorthand \u003d splittedString[0].equalsIgnoreCase(\"e\");"},{"lineNumber":287,"author":{"gitID":"chenxing1992"},"content":"        boolean containsEditCommand \u003d containsEditShorthand || containsEditWord;"},{"lineNumber":288,"author":{"gitID":"chenxing1992"},"content":"        String regex \u003d \"[0-9]+\";"},{"lineNumber":289,"author":{"gitID":"chenxing1992"},"content":"        boolean containsOnlyNumbers \u003d splittedString[1].matches(regex);"},{"lineNumber":290,"author":{"gitID":"chenxing1992"},"content":"        return containsEditCommand \u0026\u0026 containsOnlyNumbers;"},{"lineNumber":291,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":293,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"chenxing1992"},"content":"     * Checks if sentence starts with \" add \" or \" a \"."},{"lineNumber":295,"author":{"gitID":"chenxing1992"},"content":"     * Accounts for blank space in front."},{"lineNumber":296,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":297,"author":{"gitID":"chenxing1992"},"content":"     * @return True if if sentence starts with \" add \" or \" a \"."},{"lineNumber":298,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":299,"author":{"gitID":"chenxing1992"},"content":"    private boolean addPollSuccessful() {"},{"lineNumber":300,"author":{"gitID":"chenxing1992"},"content":"        String stringToEvaluate \u003d commandTextField.getText().trim();"},{"lineNumber":301,"author":{"gitID":"chenxing1992"},"content":"        if (stringToEvaluate.length() \u003d\u003d 0) {"},{"lineNumber":302,"author":{"gitID":"chenxing1992"},"content":"            return false;"},{"lineNumber":303,"author":{"gitID":"chenxing1992"},"content":"        } else if (stringToEvaluate.length() \u003d\u003d 1) {"},{"lineNumber":304,"author":{"gitID":"chenxing1992"},"content":"            return stringToEvaluate.equalsIgnoreCase(AddCommand.COMMAND_ALIAS);"},{"lineNumber":305,"author":{"gitID":"chenxing1992"},"content":"        } else if (stringToEvaluate.length() \u003d\u003d 2) {"},{"lineNumber":306,"author":{"gitID":"chenxing1992"},"content":"            return false;"},{"lineNumber":307,"author":{"gitID":"chenxing1992"},"content":"        } else if (stringToEvaluate.length() \u003d\u003d 3) {"},{"lineNumber":308,"author":{"gitID":"chenxing1992"},"content":"            return containsAInFirstTwoChar(stringToEvaluate)"},{"lineNumber":309,"author":{"gitID":"chenxing1992"},"content":"                    || stringToEvaluate.equalsIgnoreCase(AddCommand.COMMAND_WORD);"},{"lineNumber":310,"author":{"gitID":"chenxing1992"},"content":"        } else {"},{"lineNumber":311,"author":{"gitID":"chenxing1992"},"content":"            return containsAInFirstTwoChar(stringToEvaluate)"},{"lineNumber":312,"author":{"gitID":"chenxing1992"},"content":"                    || containsAddInFirstFourChar(stringToEvaluate);"},{"lineNumber":313,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":316,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":317,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":318,"author":{"gitID":"chenxing1992"},"content":"     * Checks if the first two elements of the string are \"a \"."},{"lineNumber":319,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":320,"author":{"gitID":"chenxing1992"},"content":"     * @param stringToEvaluate String to check."},{"lineNumber":321,"author":{"gitID":"chenxing1992"},"content":"     * @return True if the first two elements of the string are \"a \"."},{"lineNumber":322,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"chenxing1992"},"content":"    private boolean containsAInFirstTwoChar(String stringToEvaluate) {"},{"lineNumber":324,"author":{"gitID":"chenxing1992"},"content":"        return (Character.toString(stringToEvaluate.charAt(0)).equalsIgnoreCase(AddCommand.COMMAND_ALIAS)"},{"lineNumber":325,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 Character.toString(stringToEvaluate.charAt(1)).equals(\" \"));"},{"lineNumber":326,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":328,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":329,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":330,"author":{"gitID":"chenxing1992"},"content":"     * Checks if the first four elements of the string are \"add \"."},{"lineNumber":331,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":332,"author":{"gitID":"chenxing1992"},"content":"     * @param stringToEvaluate String to check."},{"lineNumber":333,"author":{"gitID":"chenxing1992"},"content":"     * @return True if the first four elements of the string are \"add \"."},{"lineNumber":334,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":335,"author":{"gitID":"chenxing1992"},"content":"    private boolean containsAddInFirstFourChar(String stringToEvaluate) {"},{"lineNumber":336,"author":{"gitID":"chenxing1992"},"content":"        return (stringToEvaluate.substring(0, 3).equalsIgnoreCase(AddCommand.COMMAND_WORD)"},{"lineNumber":337,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 Character.toString(stringToEvaluate.charAt(3)).equals(\" \"));"},{"lineNumber":338,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":340,"author":{"gitID":"chenxing1992"},"content":"    //@@author"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":342,"author":{"gitID":"-"},"content":"     * @return True if existing input has Date Prefix String."},{"lineNumber":343,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":344,"author":{"gitID":"-"},"content":"    private boolean containsDate() {"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        String currentInput \u003d commandTextField.getText();"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        return currentInput.contains(PREFIX_DATE.getPrefix());"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"content":"    //@@author"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":351,"author":{"gitID":"-"},"content":"     * @return True if existing input has Address Prefix String."},{"lineNumber":352,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    private boolean containsAddress() {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        String currentInput \u003d commandTextField.getText();"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        return currentInput.contains(PREFIX_ADDRESS.getPrefix());"},{"lineNumber":356,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"content":"    //@@author"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":360,"author":{"gitID":"-"},"content":"     * @return True if existing input has Address Prefix String."},{"lineNumber":361,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":362,"author":{"gitID":"-"},"content":"    private boolean containsTimeTable() {"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        String currentInput \u003d commandTextField.getText();"},{"lineNumber":364,"author":{"gitID":"-"},"content":"        return currentInput.contains(PREFIX_TIMETABLE.getPrefix());"},{"lineNumber":365,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"content":"    //@@author"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":369,"author":{"gitID":"-"},"content":"     * @return True if existing input has Email Prefix String."},{"lineNumber":370,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    private boolean containsEmail() {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        String currentInput \u003d commandTextField.getText();"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        return currentInput.contains(PREFIX_EMAIL.getPrefix());"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"content":"    //@@author"},{"lineNumber":377,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":378,"author":{"gitID":"-"},"content":"     * @return True if existing input has Phone Prefix String."},{"lineNumber":379,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":380,"author":{"gitID":"-"},"content":"    private boolean containsPhone() {"},{"lineNumber":381,"author":{"gitID":"-"},"content":"        String currentInput \u003d commandTextField.getText();"},{"lineNumber":382,"author":{"gitID":"-"},"content":"        return currentInput.contains(PREFIX_PHONE.getPrefix());"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"content":"    //@@author"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":387,"author":{"gitID":"-"},"content":"     * @return True if existing input has Name Prefix String."},{"lineNumber":388,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":389,"author":{"gitID":"-"},"content":"    private boolean containsName() {"},{"lineNumber":390,"author":{"gitID":"-"},"content":"        String currentInput \u003d commandTextField.getText();"},{"lineNumber":391,"author":{"gitID":"-"},"content":"        return currentInput.contains(PREFIX_NAME.getPrefix());"},{"lineNumber":392,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":395,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":396,"author":{"gitID":"chenxing1992"},"content":"     * Shifts the caret right to the right of the last character of the next word"},{"lineNumber":397,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":398,"author":{"gitID":"chenxing1992"},"content":"     * 1. If Caret is at far right, break"},{"lineNumber":399,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":400,"author":{"gitID":"chenxing1992"},"content":"     * 2. If Char is present on right of Caret, shift right until"},{"lineNumber":401,"author":{"gitID":"chenxing1992"},"content":"     * a) Caret is at far right or"},{"lineNumber":402,"author":{"gitID":"chenxing1992"},"content":"     * b) \"_\" is found"},{"lineNumber":403,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":404,"author":{"gitID":"chenxing1992"},"content":"     * 3. If \"_\" is present on right of Caret, shift right until 2. Condition holds"},{"lineNumber":405,"author":{"gitID":"chenxing1992"},"content":"     * Run Step 2"},{"lineNumber":406,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":407,"author":{"gitID":"chenxing1992"},"content":"    private void shiftCaretRightByWord() {"},{"lineNumber":408,"author":{"gitID":"chenxing1992"},"content":"        int newCaretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":409,"author":{"gitID":"chenxing1992"},"content":"        int maxAchievablePosition \u003d commandTextField.getText().length();"},{"lineNumber":410,"author":{"gitID":"chenxing1992"},"content":"        if (newCaretPosition \u003d\u003d maxAchievablePosition) {"},{"lineNumber":411,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":412,"author":{"gitID":"chenxing1992"},"content":"        } else if (isEmptyAfter(newCaretPosition)) {"},{"lineNumber":413,"author":{"gitID":"chenxing1992"},"content":"            newCaretPosition \u003d shiftRightIgnoringSpaces(newCaretPosition, maxAchievablePosition);"},{"lineNumber":414,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":415,"author":{"gitID":"chenxing1992"},"content":"        newCaretPosition \u003d shiftRightIgnoringWords(newCaretPosition, maxAchievablePosition);"},{"lineNumber":416,"author":{"gitID":"chenxing1992"},"content":"        commandTextField.positionCaret(newCaretPosition);"},{"lineNumber":417,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":418,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":419,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":420,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":421,"author":{"gitID":"chenxing1992"},"content":"     * Shifts the caret right, ignoring all empty space."},{"lineNumber":422,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":423,"author":{"gitID":"chenxing1992"},"content":"     * Note: Will not implement exception throwing here as shiftCaretRightByWord is set up in such a way"},{"lineNumber":424,"author":{"gitID":"chenxing1992"},"content":"     * that pre-conditions as follows are met. Do not want to write code which will affect test coverage"},{"lineNumber":425,"author":{"gitID":"chenxing1992"},"content":"     * which is impossible to resolve."},{"lineNumber":426,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":427,"author":{"gitID":"chenxing1992"},"content":"     * Pre-Condition 1: Current caret position must have an empty space string on the right."},{"lineNumber":428,"author":{"gitID":"chenxing1992"},"content":"     * It must never be called if there is a possibility of the string after"},{"lineNumber":429,"author":{"gitID":"chenxing1992"},"content":"     * it being not an empty space."},{"lineNumber":430,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":431,"author":{"gitID":"chenxing1992"},"content":"     * Pre-Condition 2: newCaretPosition should never be in the situation where there is a possibility"},{"lineNumber":432,"author":{"gitID":"chenxing1992"},"content":"     * of it being at most right position."},{"lineNumber":433,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":434,"author":{"gitID":"chenxing1992"},"content":"     * @param newCaretPosition      Current caret position."},{"lineNumber":435,"author":{"gitID":"chenxing1992"},"content":"     * @param maxAchievablePosition Right most bound of word."},{"lineNumber":436,"author":{"gitID":"chenxing1992"},"content":"     * @return New caret position."},{"lineNumber":437,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":438,"author":{"gitID":"chenxing1992"},"content":"    private int shiftRightIgnoringSpaces(int newCaretPosition, int maxAchievablePosition) {"},{"lineNumber":439,"author":{"gitID":"chenxing1992"},"content":"        int caretHolder \u003d newCaretPosition;"},{"lineNumber":440,"author":{"gitID":"chenxing1992"},"content":"        for (int i \u003d caretHolder; i \u003c maxAchievablePosition; i++) {"},{"lineNumber":441,"author":{"gitID":"chenxing1992"},"content":"            if (!isEmptyAfter(caretHolder)) {"},{"lineNumber":442,"author":{"gitID":"chenxing1992"},"content":"                break;"},{"lineNumber":443,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":444,"author":{"gitID":"chenxing1992"},"content":"            caretHolder +\u003d 1;"},{"lineNumber":445,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":446,"author":{"gitID":"chenxing1992"},"content":"        return caretHolder;"},{"lineNumber":447,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":448,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":449,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":450,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":451,"author":{"gitID":"chenxing1992"},"content":"     * Shifts the caret right, ignoring all char."},{"lineNumber":452,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":453,"author":{"gitID":"chenxing1992"},"content":"     * Note: Will not implement exception throwing here as shiftCaretRightByWord is set up in such a way"},{"lineNumber":454,"author":{"gitID":"chenxing1992"},"content":"     * that pre-conditions as follows are met. Do not want to write code which will affect test coverage"},{"lineNumber":455,"author":{"gitID":"chenxing1992"},"content":"     * which is impossible to resolve."},{"lineNumber":456,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":457,"author":{"gitID":"chenxing1992"},"content":"     * Pre-Condition 1: Current caret position must have an empty space string on the right."},{"lineNumber":458,"author":{"gitID":"chenxing1992"},"content":"     * It must never be called if there is a possibility of the string before"},{"lineNumber":459,"author":{"gitID":"chenxing1992"},"content":"     * it being not an empty space."},{"lineNumber":460,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":461,"author":{"gitID":"chenxing1992"},"content":"     * Pre-Condition 2: newCaretPosition should never be in the situation where there is a possibility"},{"lineNumber":462,"author":{"gitID":"chenxing1992"},"content":"     * of it being at most right position."},{"lineNumber":463,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":464,"author":{"gitID":"chenxing1992"},"content":"     * @param newCaretPosition      Current caret position."},{"lineNumber":465,"author":{"gitID":"chenxing1992"},"content":"     * @param maxAchievablePosition Right most caret position."},{"lineNumber":466,"author":{"gitID":"chenxing1992"},"content":"     * @return New caret position."},{"lineNumber":467,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":468,"author":{"gitID":"chenxing1992"},"content":"    private int shiftRightIgnoringWords(int newCaretPosition, int maxAchievablePosition) {"},{"lineNumber":469,"author":{"gitID":"chenxing1992"},"content":"        int caretHolder \u003d newCaretPosition;"},{"lineNumber":470,"author":{"gitID":"chenxing1992"},"content":"        for (int i \u003d caretHolder; i \u003c maxAchievablePosition; i++) {"},{"lineNumber":471,"author":{"gitID":"chenxing1992"},"content":"            if (isEmptyAfter(caretHolder)) {"},{"lineNumber":472,"author":{"gitID":"chenxing1992"},"content":"                break;"},{"lineNumber":473,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":474,"author":{"gitID":"chenxing1992"},"content":"            caretHolder +\u003d 1;"},{"lineNumber":475,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":476,"author":{"gitID":"chenxing1992"},"content":"        return caretHolder;"},{"lineNumber":477,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":478,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":479,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":480,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":481,"author":{"gitID":"chenxing1992"},"content":"     * Checks if string element after currentCaretPosition index is empty."},{"lineNumber":482,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":483,"author":{"gitID":"chenxing1992"},"content":"     * @param currentCaretPosition Current caret position."},{"lineNumber":484,"author":{"gitID":"chenxing1992"},"content":"     * @return True if string element after currentCaretPosition index is empty."},{"lineNumber":485,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":486,"author":{"gitID":"chenxing1992"},"content":"    private boolean isEmptyAfter(int currentCaretPosition) {"},{"lineNumber":487,"author":{"gitID":"chenxing1992"},"content":"        Character charAfter \u003d commandTextField.getText().charAt(currentCaretPosition);"},{"lineNumber":488,"author":{"gitID":"chenxing1992"},"content":"        String convertToString \u003d Character.toString(charAfter);"},{"lineNumber":489,"author":{"gitID":"chenxing1992"},"content":"        return (\" \".equals(convertToString));"},{"lineNumber":490,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":491,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":492,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":493,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":494,"author":{"gitID":"chenxing1992"},"content":"     * Checks if string element before currentCaretPosition index is empty."},{"lineNumber":495,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":496,"author":{"gitID":"chenxing1992"},"content":"     * @param currentCaretPosition Current caret position."},{"lineNumber":497,"author":{"gitID":"chenxing1992"},"content":"     * @return True if string element before currentCaretPosition index is empty."},{"lineNumber":498,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":499,"author":{"gitID":"chenxing1992"},"content":"    private boolean isEmptyBefore(int currentCaretPosition) {"},{"lineNumber":500,"author":{"gitID":"chenxing1992"},"content":"        Character charBefore \u003d commandTextField.getText().charAt(currentCaretPosition - 1);"},{"lineNumber":501,"author":{"gitID":"chenxing1992"},"content":"        String convertToString \u003d Character.toString(charBefore);"},{"lineNumber":502,"author":{"gitID":"chenxing1992"},"content":"        return (\" \".equals(convertToString));"},{"lineNumber":503,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":504,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":505,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":506,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":507,"author":{"gitID":"chenxing1992"},"content":"     * Shifts the caret left to the left of the first character of the next word"},{"lineNumber":508,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":509,"author":{"gitID":"chenxing1992"},"content":"     * 1. If Caret is at far left, break"},{"lineNumber":510,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":511,"author":{"gitID":"chenxing1992"},"content":"     * 2. If Char is present on left of Caret, shift left until"},{"lineNumber":512,"author":{"gitID":"chenxing1992"},"content":"     * a) Caret is at far left or"},{"lineNumber":513,"author":{"gitID":"chenxing1992"},"content":"     * b) \"_\" is found"},{"lineNumber":514,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":515,"author":{"gitID":"chenxing1992"},"content":"     * 3. If \"_\" is present on left of Caret, shift left until 2. Condition holds"},{"lineNumber":516,"author":{"gitID":"chenxing1992"},"content":"     * Run Step 2"},{"lineNumber":517,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":518,"author":{"gitID":"chenxing1992"},"content":"    private void shiftCaretLeftByWord() {"},{"lineNumber":519,"author":{"gitID":"chenxing1992"},"content":"        int newCaretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":520,"author":{"gitID":"chenxing1992"},"content":"        if (newCaretPosition \u003d\u003d 0) {"},{"lineNumber":521,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":522,"author":{"gitID":"chenxing1992"},"content":"        } else if (isEmptyBefore(newCaretPosition)) {"},{"lineNumber":523,"author":{"gitID":"chenxing1992"},"content":"            newCaretPosition \u003d shiftLeftIgnoringSpaces(newCaretPosition);"},{"lineNumber":524,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":525,"author":{"gitID":"chenxing1992"},"content":"        newCaretPosition \u003d shiftLeftIgnoringWords(newCaretPosition);"},{"lineNumber":526,"author":{"gitID":"chenxing1992"},"content":"        commandTextField.positionCaret(newCaretPosition);"},{"lineNumber":527,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":528,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":529,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":530,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":531,"author":{"gitID":"chenxing1992"},"content":"     * Shifts the caret left, ignoring all char."},{"lineNumber":532,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":533,"author":{"gitID":"chenxing1992"},"content":"     * Note: Will not implement exception throwing here as shiftCaretLeftByWord is set up in such a way"},{"lineNumber":534,"author":{"gitID":"chenxing1992"},"content":"     * that pre-conditions as follows are met. Do not want to write code which will affect test coverage"},{"lineNumber":535,"author":{"gitID":"chenxing1992"},"content":"     * which is impossible to resolve."},{"lineNumber":536,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":537,"author":{"gitID":"chenxing1992"},"content":"     * Pre-Condition 1: Current caret position must have an empty space string on the left."},{"lineNumber":538,"author":{"gitID":"chenxing1992"},"content":"     * It must never be called if there is a possibility of the string before"},{"lineNumber":539,"author":{"gitID":"chenxing1992"},"content":"     * it being not an empty space."},{"lineNumber":540,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":541,"author":{"gitID":"chenxing1992"},"content":"     * Pre-Condition 2: newCaretPosition should never be in the situation where there is a possibility"},{"lineNumber":542,"author":{"gitID":"chenxing1992"},"content":"     * of it being 0."},{"lineNumber":543,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":544,"author":{"gitID":"chenxing1992"},"content":"     * @param newCaretPosition Current caret position."},{"lineNumber":545,"author":{"gitID":"chenxing1992"},"content":"     * @return New caret position."},{"lineNumber":546,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":547,"author":{"gitID":"chenxing1992"},"content":"    private int shiftLeftIgnoringWords(int newCaretPosition) {"},{"lineNumber":548,"author":{"gitID":"chenxing1992"},"content":"        int caretHolder \u003d newCaretPosition;"},{"lineNumber":549,"author":{"gitID":"chenxing1992"},"content":"        for (int i \u003d caretHolder; i \u003e 0; i--) {"},{"lineNumber":550,"author":{"gitID":"chenxing1992"},"content":"            if (isEmptyBefore(caretHolder)) {"},{"lineNumber":551,"author":{"gitID":"chenxing1992"},"content":"                break;"},{"lineNumber":552,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":553,"author":{"gitID":"chenxing1992"},"content":"            caretHolder -\u003d 1;"},{"lineNumber":554,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":555,"author":{"gitID":"chenxing1992"},"content":"        return caretHolder;"},{"lineNumber":556,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":557,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":558,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":559,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":560,"author":{"gitID":"chenxing1992"},"content":"     * Shifts the caret left, ignoring all empty spaces."},{"lineNumber":561,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":562,"author":{"gitID":"chenxing1992"},"content":"     * Note: Will not implement exception throwing here as shiftCaretLeftByWord is set up in such a way"},{"lineNumber":563,"author":{"gitID":"chenxing1992"},"content":"     * that pre-conditions as follows are met. Do not want to write code which will affect test coverage"},{"lineNumber":564,"author":{"gitID":"chenxing1992"},"content":"     * which is impossible to resolve."},{"lineNumber":565,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":566,"author":{"gitID":"chenxing1992"},"content":"     * Pre-Condition 1: Current caret position must have an empty space string on the left."},{"lineNumber":567,"author":{"gitID":"chenxing1992"},"content":"     * It must never be called if there is a possibility of the string before."},{"lineNumber":568,"author":{"gitID":"chenxing1992"},"content":"     * it being not an empty space."},{"lineNumber":569,"author":{"gitID":"chenxing1992"},"content":"     * \u003cp\u003e"},{"lineNumber":570,"author":{"gitID":"chenxing1992"},"content":"     * Pre-Condition 2: newCaretPosition should never be in the situation where there is a possibility"},{"lineNumber":571,"author":{"gitID":"chenxing1992"},"content":"     * of it being 0."},{"lineNumber":572,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":573,"author":{"gitID":"chenxing1992"},"content":"     * @param newCaretPosition Current caret position."},{"lineNumber":574,"author":{"gitID":"chenxing1992"},"content":"     * @return New caret position."},{"lineNumber":575,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":576,"author":{"gitID":"chenxing1992"},"content":"    private int shiftLeftIgnoringSpaces(int newCaretPosition) {"},{"lineNumber":577,"author":{"gitID":"chenxing1992"},"content":"        int caretHolder \u003d newCaretPosition;"},{"lineNumber":578,"author":{"gitID":"chenxing1992"},"content":"        for (int i \u003d caretHolder; i \u003e 0; i--) {"},{"lineNumber":579,"author":{"gitID":"chenxing1992"},"content":"            if (!isEmptyBefore(caretHolder)) {"},{"lineNumber":580,"author":{"gitID":"chenxing1992"},"content":"                break;"},{"lineNumber":581,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":582,"author":{"gitID":"chenxing1992"},"content":"            caretHolder -\u003d 1;"},{"lineNumber":583,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":584,"author":{"gitID":"chenxing1992"},"content":"        return caretHolder;"},{"lineNumber":585,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":586,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":587,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":588,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":589,"author":{"gitID":"chenxing1992"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":590,"author":{"gitID":"chenxing1992"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":591,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":592,"author":{"gitID":"chenxing1992"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":593,"author":{"gitID":"chenxing1992"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":594,"author":{"gitID":"chenxing1992"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":595,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":596,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":597,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":598,"author":{"gitID":"chenxing1992"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":599,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":600,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":601,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":602,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":603,"author":{"gitID":"chenxing1992"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":604,"author":{"gitID":"chenxing1992"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":605,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":606,"author":{"gitID":"chenxing1992"},"content":"    private void navigateToNextInput() {"},{"lineNumber":607,"author":{"gitID":"chenxing1992"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":608,"author":{"gitID":"chenxing1992"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":609,"author":{"gitID":"chenxing1992"},"content":"            return;"},{"lineNumber":610,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":611,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":612,"author":{"gitID":"chenxing1992"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":613,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":614,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":615,"author":{"gitID":"chenxing1992"},"content":"    //@@author"},{"lineNumber":616,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":617,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":618,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":619,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":620,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":621,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":622,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":623,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":626,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":627,"author":{"gitID":"chenxing1992"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":628,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":629,"author":{"gitID":"chenxing1992"},"content":"    @FXML"},{"lineNumber":630,"author":{"gitID":"chenxing1992"},"content":"    private void handleCommandInputChanged() { //here"},{"lineNumber":631,"author":{"gitID":"chenxing1992"},"content":"        try {"},{"lineNumber":632,"author":{"gitID":"chenxing1992"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":633,"author":{"gitID":"chenxing1992"},"content":"            initHistory();"},{"lineNumber":634,"author":{"gitID":"chenxing1992"},"content":"            historySnapshot.next();"},{"lineNumber":635,"author":{"gitID":"chenxing1992"},"content":"            // process result of the command"},{"lineNumber":636,"author":{"gitID":"chenxing1992"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":637,"author":{"gitID":"chenxing1992"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":638,"author":{"gitID":"chenxing1992"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":639,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":640,"author":{"gitID":"chenxing1992"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":641,"author":{"gitID":"chenxing1992"},"content":"            initHistory();"},{"lineNumber":642,"author":{"gitID":"chenxing1992"},"content":"            // handle command failure"},{"lineNumber":643,"author":{"gitID":"chenxing1992"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":644,"author":{"gitID":"chenxing1992"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":645,"author":{"gitID":"chenxing1992"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":646,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":647,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":648,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":649,"author":{"gitID":"chenxing1992"},"content":"    //@@author"},{"lineNumber":650,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":651,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":652,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":653,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":654,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":655,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":656,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":657,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":658,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":659,"content":"    //@@author"},{"lineNumber":660,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":661,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":662,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":663,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":664,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":665,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":666,"content":"    //@@author"},{"lineNumber":667,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":668,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":669,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":670,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":671,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":674,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":675,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":678,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":679,"content":"    //@@author"},{"lineNumber":680,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":681,"author":{"gitID":"-"},"content":"     * @return the text field for testing purposes"},{"lineNumber":682,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":683,"author":{"gitID":"-"},"content":"    public TextField getCommandTextField() {"},{"lineNumber":684,"author":{"gitID":"-"},"content":"        return commandTextField;"},{"lineNumber":685,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"traceurgan"},"content":"    public void commandBoxRequestFocus() {"},{"lineNumber":688,"author":{"gitID":"traceurgan"},"content":"        this.commandTextField.requestFocus();"},{"lineNumber":689,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":690,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":8,"chenxing1992":430,"traceurgan":3,"-":249}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON \u003d \"There is no one in NUSCouples.\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":1,"-":12}},{"path":"src/main/java/seedu/address/ui/JournalEntryView.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"import javafx.scene.text.Text;"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.JournalChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"public class JournalEntryView extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    private static final String FXML \u003d \"JournalEntryView.fxml\";"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    private final StringProperty date \u003d new SimpleStringProperty(\"\");"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    private final StringProperty text \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"    private Text journalDate;"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    private Text journalText;"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    public JournalEntryView(JournalEntry journalEntry) {"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        date.setValue(journalEntry.getDate().value);"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        text.setValue(journalEntry.getText());"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"        journalDate.textProperty().bind(date);"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        journalText.textProperty().bind(text);"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"    @Subscribe"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"    private void handleJournalChangedEvent(JournalChangedEvent event) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"        if (event.data.getJournalEntryList().size() !\u003d 0) {"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"            int last \u003d event.data.getLast();"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"            JournalEntry je \u003d event.data.getJournalEntryList().get(last);"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"            Platform.runLater(() -\u003e date.setValue(je.getDate().value));"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"            Platform.runLater(() -\u003e text.setValue(je.getText()));"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":35,"-":19}},{"path":"src/main/java/seedu/address/ui/ListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Person.PARTNER_INDEX;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.ui.HideTimetableRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.ui.ShowTimetableRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ListPanel.fxml\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private ListView\u003cJournalEntryCard\u003e journalEntryListView;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"    public ListPanel(ObservableList\u003cReadOnlyPerson\u003e personList, ObservableList\u003cJournalEntry\u003e journalEntryList) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setConnections(personList, journalEntryList);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"    private void setConnections("},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"            ObservableList\u003cReadOnlyPerson\u003e personList, ObservableList\u003cJournalEntry\u003e journalEntryList) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":48,"author":{"gitID":"-"},"content":"                personList, person -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ObservableList\u003cJournalEntryCard\u003e mappedListToo \u003d EasyBind.map(journalEntryList, journalEntry -\u003e"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                new JournalEntryCard(journalEntry, journalEntryList.indexOf(journalEntry) + 1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        journalEntryListView.setItems(mappedListToo);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        journalEntryListView.setCellFactory(listView -\u003e new JournalEntryListViewCell());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                    } else {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                        logger.fine(\"Deselecting partner\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                        raise(new HideTimetableRequestEvent());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":"     * Deselects the {@code PersonCard} at the {@code index}."},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"traceurgan"},"content":"    private void deselect() {"},{"lineNumber":92,"author":{"gitID":"traceurgan"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":93,"author":{"gitID":"traceurgan"},"content":"            personListView.getSelectionModel().clearSelection();"},{"lineNumber":94,"author":{"gitID":"traceurgan"},"content":"        });"},{"lineNumber":95,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"    @Subscribe"},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":"    private void handleShowTimetableRequestEvent (ShowTimetableRequestEvent event) {"},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":"        scrollTo(PARTNER_INDEX);"},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"    @Subscribe"},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"    private void handleHideTimetableRequestEvent (HideTimetableRequestEvent event) {"},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"        deselect();"},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":"    //@@author"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":130,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"traceurgan"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":132,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"traceurgan"},"content":"    class JournalEntryListViewCell extends ListCell\u003cJournalEntryCard\u003e {"},{"lineNumber":134,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":135,"author":{"gitID":"traceurgan"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"traceurgan"},"content":"        protected void updateItem(JournalEntryCard journalEntryCard, boolean empty) {"},{"lineNumber":137,"author":{"gitID":"traceurgan"},"content":"            super.updateItem(journalEntryCard, empty);"},{"lineNumber":138,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":139,"author":{"gitID":"traceurgan"},"content":"            if (empty || journalEntryCard \u003d\u003d null) {"},{"lineNumber":140,"author":{"gitID":"traceurgan"},"content":"                setGraphic(null);"},{"lineNumber":141,"author":{"gitID":"traceurgan"},"content":"                setText(null);"},{"lineNumber":142,"author":{"gitID":"traceurgan"},"content":"            } else {"},{"lineNumber":143,"author":{"gitID":"traceurgan"},"content":"                setGraphic(journalEntryCard.getRoot());"},{"lineNumber":144,"author":{"gitID":"traceurgan"},"content":"            }"},{"lineNumber":145,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":148,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"marlenekoh":14,"traceurgan":34,"-":100}},{"path":"src/main/java/seedu/address/commons/events/ui/MotivateCommandRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"HEARTOFAL1ON"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":3,"author":{"gitID":"HEARTOFAL1ON"},"content":"//@@author HEARTOFAL1ON"},{"lineNumber":4,"author":{"gitID":"HEARTOFAL1ON"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"HEARTOFAL1ON"},"content":" * Indicates a request for the \"motivate\" command"},{"lineNumber":6,"author":{"gitID":"HEARTOFAL1ON"},"content":" */"},{"lineNumber":7,"author":{"gitID":"HEARTOFAL1ON"},"content":"public class MotivateCommandRequestEvent {"},{"lineNumber":8,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Override"},{"lineNumber":9,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":11,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"HEARTOFAL1ON"},"content":"}"}],"authorContributionMap":{"HEARTOFAL1ON":12}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Person.PARTNER_INDEX;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    public JumpToListRequestEvent() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d PARTNER_INDEX;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":1,"-":22}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowJournalWindowRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":" * An event requesting to view the Journal Window."},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"public class ShowJournalWindowRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"    public final Date date;"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    public ShowJournalWindowRequestEvent (Date date) {"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":19,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowTimetableRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":" * An event requesting to view the partner\u0027s timetable."},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"public class ShowTimetableRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    public ShowTimetableRequestEvent() {"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":14,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/HideTimetableRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":5,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":" * An event requesting to view the partner\u0027s timetable."},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":"public class HideTimetableRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"    public HideTimetableRequestEvent() {"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":14,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/CalendarViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":6,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":7,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chenxing1992"},"content":" * Indicates a request to change calendar view"},{"lineNumber":9,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":10,"author":{"gitID":"chenxing1992"},"content":"public class CalendarViewEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":"    public final Character c;"},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":"    public CalendarViewEvent(Character c) {"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"        this.c \u003d c;"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":19,"-":4}},{"path":"src/main/java/seedu/address/commons/events/model/SaveEntryEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"/** Indicates a journal entry should be created/updated*/"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"public class SaveEntryEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"    public final JournalEntry journalEntry;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"    public SaveEntryEvent(JournalEntry journalEntry) {"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"        this.journalEntry \u003d journalEntry;"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"        return \"Saving entry...\";"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":15,"-":5}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowJournalEntryRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":" * An event requesting to view a journal entry."},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"public class ShowJournalEntryRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"    public final JournalEntry journalEntry;"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    public ShowJournalEntryRequestEvent (JournalEntry journalEntry) {"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"        this.journalEntry \u003d journalEntry;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":12,"-":10}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    /** Returns an unmodifiable view of the list of journal entries */"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    ObservableList\u003cJournalEntry\u003e getJournalEntryList();"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getPersonAsList();"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"    ReadOnlyPerson getPartner();"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":11,"-":22}},{"path":"src/main/java/seedu/address/commons/events/model/TimetableChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":"/** Indicates the Timetable of the partner has changed*/"},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":"public class TimetableChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"    public final Timetable timetable;"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    public TimetableChangedEvent(Timetable timetable) {"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":"        this.timetable \u003d timetable;"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"        return timetable.value;"},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":14,"-":5}},{"path":"src/main/java/seedu/address/commons/events/model/JournalChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"/** Indicates the Journal in the model has changed*/"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"public class JournalChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"    public final ReadOnlyJournal data;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"    public JournalChangedEvent(ReadOnlyJournal data) {"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"        this.data \u003d data;"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"        return \"number of journal entries \" + data.getJournalEntryList().size();"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":15,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"                        PREFIX_TIMETABLE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TIMETABLE)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Timetable timetable \u003d ParserUtil.parseTimetable(argMultimap.getValue(PREFIX_TIMETABLE)).get();"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"            List\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"            Appointment appointment;"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_DATE)) {"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"                appointment \u003d AddAppointmentParser.getAppointmentFromString(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"                appointmentList.add(appointment);"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"            Person person \u003d new Person(name, phone, email, address, timetable, appointmentList);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":12,"-":63}},{"path":"src/main/java/seedu/address/commons/events/model/PersonChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"public class PersonChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"    public final ReadOnlyPerson data;"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"    public PersonChangedEvent(ReadOnlyPerson data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"        if (data !\u003d null) {"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"            return \"Current person\" + data.getName().toString();"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"            return \"There is no person saved.\";"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":12,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    public static final Prefix PREFIX_JOURNAL \u003d new Prefix(\"j/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TIMETABLE \u003d new Prefix(\"tt/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/NusCouplesParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import seedu.address.logic.commands.CalendarViewCommand;"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"import seedu.address.logic.commands.CancelAppointmentCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"import seedu.address.logic.commands.CompareTimetableCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.NewJournalCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ShowCalendarCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ShowTimetableCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"import seedu.address.logic.commands.ViewJournalCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class NusCouplesParser {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return getCommand(commandWord, arguments);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Command getCommand(String commandWord, String arguments) throws ParseException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case AddCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":62,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new AddCommandParser().parse(arguments); //@@author"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case EditCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":66,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new EditCommandParser().parse(arguments); //@@author"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case ShowTimetableCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case ShowTimetableCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":70,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new ShowTimetableCommand(); //@@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case ShowCalendarCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case ShowCalendarCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new ShowCalendarCommand();"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"        case CompareTimetableCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"traceurgan"},"content":"        case CompareTimetableCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"            return new CompareTimetableCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"        case ViewJournalCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"        case ViewJournalCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"            return new ViewJournalCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case DeleteCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":86,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new DeleteCommand(); //@@author"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case ClearCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":90,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new ClearCommand(); //@@author"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case HistoryCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":94,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new HistoryCommand(); //@@author"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case ExitCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":98,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new ExitCommand(); //@@author"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case NewJournalCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case NewJournalCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":102,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new NewJournalCommand(); //@@author"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case HelpCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":106,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new HelpCommand(); //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case UndoCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":110,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new UndoCommand(); //@@author"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"HEARTOFAL1ON"},"content":"        case RedoCommand.COMMAND_ALIAS: //@@author HEARTOFAL1ON"},{"lineNumber":114,"author":{"gitID":"HEARTOFAL1ON"},"content":"            return new RedoCommand(); //@@author"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"traceurgan"},"content":"        case CalendarViewCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"traceurgan"},"content":"        case CalendarViewCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"traceurgan"},"content":"            return new CalendarViewParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":120,"author":{"gitID":"traceurgan"},"content":"        case CancelAppointmentCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"traceurgan"},"content":"            return new CancelAppointmentParser().parse(arguments);"},{"lineNumber":122,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":123,"author":{"gitID":"traceurgan"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"traceurgan"},"content":"        case AddAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":125,"author":{"gitID":"traceurgan"},"content":"            return new AddAppointmentParser().parse(arguments);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":24,"-":87,"HEARTOFAL1ON":22}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"traceurgan"},"content":"     * Parses a {@code String date} into an {@code Date}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"traceurgan"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":107,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":109,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(date);"},{"lineNumber":110,"author":{"gitID":"traceurgan"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":"        if (!Date.isValidDate(date)) {"},{"lineNumber":112,"author":{"gitID":"traceurgan"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"traceurgan"},"content":"        return new Date(trimmedDate);"},{"lineNumber":115,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":117,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"traceurgan"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e} if {@code date} is present."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"traceurgan"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":122,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(date);"},{"lineNumber":123,"author":{"gitID":"traceurgan"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":124,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static Timetable parseTimetable(String timetable) throws IllegalValueException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        requireNonNull(timetable);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String trimmedTimetable \u003d timetable.trim();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (!Timetable.isValidTimetable(trimmedTimetable)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Timetable.MESSAGE_TIMETABLE_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return new Timetable(trimmedTimetable);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e timetableUrl} into an {@code Optional\u003cTimetable\u003e} if {@code timetableUrl}"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * is present."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static Optional\u003cTimetable\u003e parseTimetable(Optional\u003cString\u003e timetableUrl) throws IllegalValueException {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        requireNonNull(timetableUrl);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return timetableUrl.isPresent() ? Optional.of(parseTimetable(timetableUrl.get())) : Optional.empty();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":22,"-":152}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"                        PREFIX_TIMETABLE);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            ParserUtil.parseTimetable(argMultimap.getValue(PREFIX_TIMETABLE))"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                    .ifPresent(editPersonDescriptor::setTimetable);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"        return new EditCommand(editPersonDescriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":3,"-":47}},{"path":"src/main/java/seedu/address/logic/parser/CalendarViewParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CalendarViewCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":" * Parser for CalendarViewCommand"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"public class CalendarViewParser implements Parser {"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"    public Command parse(String userInput) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"        userInput \u003d userInput.trim();"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"        if (userInput.length() !\u003d 1 || !isValid(userInput)) {"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"        return new CalendarViewCommand(userInput.charAt(0));"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"     * Util method to check if the parameters is either w,d,y or m."},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"    private boolean isValid(String str) {"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"        assert(str.length() \u003d\u003d 1);"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"        switch (str.charAt(0)) {"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"        case(\u0027w\u0027):"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"        case(\u0027d\u0027):"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"        case(\u0027y\u0027):"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"        case(\u0027m\u0027):"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"            return true;"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"        default:"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":"            return false;"},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":34,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/CancelAppointmentParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CancelAppointmentCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":" * Parse input arguments and create a new CancelAppointmentCommand Object"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"public class CancelAppointmentParser implements Parser {"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":"    public Command parse(String userInput) throws ParseException {"},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"        if (!userInput.contains(\"with\")) {"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"                    CancelAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"        String description \u003d userInput.substring(0, userInput.indexOf(\"with\") - 1);"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"        String personName \u003d userInput.substring(userInput.indexOf(\"with\") + 5);"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":"        return new CancelAppointmentCommand(personName, description);"},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":20,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"            + \": Deletes the person shown in the main window.\\n\""},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ReadOnlyPerson personToDelete;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return getCommandResult();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    private CommandResult getCommandResult() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"            this.name \u003d personToDelete.getName();"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"            model.deletePerson();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            model.requestHideTimetable();"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, name));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"            this.personToDelete \u003d model.getPartner();"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":15,"-":48}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Calendar;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.joestelmach.natty.DateGroup;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":" * Parse input arguments and creates a new AddAppointmentCommand Object"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"public class AddAppointmentParser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":"     * and returns an AddAppointmentCommand object for execution."},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"    public AddAppointmentCommand parse(String userInput) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"        String[] args \u003d userInput.split(\" \");"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"        ArgumentMultimap argumentMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_DATE);"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_DATE)) {"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"            Appointment appointment \u003d getAppointmentFromString(argumentMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"            return new AddAppointmentCommand(appointment);"},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":"            throw new ParseException(\"Please input an index for appointment.\\n\""},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"                    + String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"     * Natty parser that takes in a string and returns an appointment"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":"    public static Appointment getAppointmentFromString(String str) throws ParseException {"},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"        String[] args \u003d str.split(\",\");"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"        if (args.length !\u003d 2) {"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"            throw new ParseException(\"Please follow format for adding appointment.\\n\""},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"                    + AddAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"        String description \u003d args[0];"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":"        com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"        List\u003cDateGroup\u003e groups \u003d parser.parse(args[1]);"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":"        if (groups.size() \u003d\u003d 0) {"},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":"            throw new ParseException(\"Please be more specific with your appointment time\");"},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":80,"author":{"gitID":"chenxing1992"},"content":"        //If there is a start and end time that is parsed"},{"lineNumber":81,"author":{"gitID":"chenxing1992"},"content":"        if (groups.get(0).getDates().size() \u003d\u003d 2) {"},{"lineNumber":82,"author":{"gitID":"chenxing1992"},"content":"            calendar.setTime(groups.get(0).getDates().get(0));"},{"lineNumber":83,"author":{"gitID":"chenxing1992"},"content":"            Calendar calendarEnd \u003d Calendar.getInstance();"},{"lineNumber":84,"author":{"gitID":"chenxing1992"},"content":"            calendarEnd.setTime(groups.get(0).getDates().get(1));"},{"lineNumber":85,"author":{"gitID":"chenxing1992"},"content":"            return new Appointment(description, calendar, calendarEnd);"},{"lineNumber":86,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":88,"author":{"gitID":"chenxing1992"},"content":"        //Only one date parsed"},{"lineNumber":89,"author":{"gitID":"chenxing1992"},"content":"        calendar.setTime(groups.get(0).getDates().get(0));"},{"lineNumber":90,"author":{"gitID":"chenxing1992"},"content":"        return new Appointment(description, calendar, null);"},{"lineNumber":91,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":93,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":78,"traceurgan":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ViewJournalCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JOURNAL;"},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"import seedu.address.logic.commands.ViewJournalCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"public class ViewJournalCommandParser implements Parser\u003cViewJournalCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    public ViewJournalCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_JOURNAL);"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_JOURNAL)"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewJournalCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_JOURNAL)).get();"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"            return new ViewJournalCommand(date);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":18,"-":31}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.Journal;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":" * Clears the journal."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Journal has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"        model.resetJournalData(new Journal());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":4,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/ShowCalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":" * Deselects your partner from NUSCouples."},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"public class ShowCalendarCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    public static final String COMMAND_WORD \u003d \"cview\";"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":"    public static final String COMMAND_ALIAS \u003d \"cv\";"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"            + \": Shows your calendar view.\\n\""},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"    public static final String MESSAGE_DESELECT_PERSON_SUCCESS \u003d \"Calendar view displayed.\";"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    public static final String MESSAGE_DESELECT_PERSON_FAILURE \u003d \"Calendar view is already displayed.\";"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"    private ReadOnlyPerson partner;"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"    public ShowCalendarCommand() {"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"            partner \u003d model.getPartner();"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"            partner.getTimetable();"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"            model.requestHideTimetable();"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"            throw new CommandException(MESSAGE_DESELECT_PERSON_FAILURE);"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"        return new CommandResult(MESSAGE_DESELECT_PERSON_SUCCESS);"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"                || (other instanceof ShowCalendarCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"                \u0026\u0026 this.partner.equals(((ShowCalendarCommand) other).partner)); // state check"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":40,"traceurgan":3,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds your partner to NUSCouples. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"            + PREFIX_TIMETABLE + \"TIMETABLE_URL\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"            + PREFIX_TIMETABLE + \"http://modsn.us/wNuIW \";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"    public static final String MESSAGE_MULTIPLE_PERSON \u003d \"You can only have one person in NUSCouples.\\n\""},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"            + \"Use the edit command to change the existing person.\\n\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final ReadOnlyPerson toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_MULTIPLE_PERSON);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":5,"-":63}},{"path":"src/main/java/seedu/address/logic/commands/MotivateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"HEARTOFAL1ON"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":3,"author":{"gitID":"HEARTOFAL1ON"},"content":"//@@author HEARTOFAL1ON"},{"lineNumber":4,"author":{"gitID":"HEARTOFAL1ON"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"HEARTOFAL1ON"},"content":" * Sends a motivational picture via the Browser Panel."},{"lineNumber":6,"author":{"gitID":"HEARTOFAL1ON"},"content":" */"},{"lineNumber":7,"author":{"gitID":"HEARTOFAL1ON"},"content":"public class MotivateCommand {"},{"lineNumber":8,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":9,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static final String COMMAND_WORD \u003d \"motivate\";"},{"lineNumber":10,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":11,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sends a motivational picture via Browser \""},{"lineNumber":12,"author":{"gitID":"HEARTOFAL1ON"},"content":"            + \"Panel. \";"},{"lineNumber":13,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static final String MESSAGE_MOTIVATE_ACKNOWLEDGEMENT \u003d \"Picture sent!\";"},{"lineNumber":14,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":15,"author":{"gitID":"HEARTOFAL1ON"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return new CommandResult(MESSAGE_MOTIVATE_ACKNOWLEDGEMENT);"},{"lineNumber":19,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"HEARTOFAL1ON"},"content":"    */"},{"lineNumber":21,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public String execute() {"},{"lineNumber":22,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return MESSAGE_MOTIVATE_ACKNOWLEDGEMENT;"},{"lineNumber":23,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":25,"author":{"gitID":"HEARTOFAL1ON"},"content":"}"}],"authorContributionMap":{"HEARTOFAL1ON":25}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    private ReadOnlyPerson previousPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"        if (model.getPartner() \u003d\u003d null) {"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"            this.previousPerson \u003d null;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"            this.previousPerson \u003d new Person(model.getPartner());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"        requireAllNonNull(model, previousPerson);"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"        model.resetPersonData(previousPerson);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":8,"-":61}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"ed\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person in the main window \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TIMETABLE + \"TIMETABLE_URL] \""},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\" + MESSAGE_USAGE;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private ReadOnlyPerson personToEdit;"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"    private Name name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private ReadOnlyPerson editedPerson;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"    public EditCommand(EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"    //@@Author chenxing1992"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"            model.getPartner();"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":"        model.editPerson(editedPerson);"},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"        this.name \u003d editedPerson.getName();"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, name));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"        this.personToEdit \u003d model.getPartner();"},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"        if (personToEdit \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"traceurgan"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                                                     EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Timetable updatedTimetable \u003d editPersonDescriptor.getTimetable().orElse(personToEdit.getTimetable());"},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":"        List\u003cAppointment\u003e appointmentList \u003d personToEdit.getAppointments();"},{"lineNumber":103,"author":{"gitID":"traceurgan"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":104,"author":{"gitID":"traceurgan"},"content":"                updatedTimetable, appointmentList);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":121,"author":{"gitID":"traceurgan"},"content":"        return editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private Timetable timetable;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":141,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":142,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            setTimetable(toCopy.timetable);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":153,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":155,"author":{"gitID":"traceurgan"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.timetable);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setTimetable(Timetable timetable) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.timetable \u003d timetable;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cTimetable\u003e getTimetable() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(timetable);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":214,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":217,"author":{"gitID":"traceurgan"},"content":"                    \u0026\u0026 getTimetable().equals(e.getTimetable());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":25,"-":196}},{"path":"src/main/java/seedu/address/logic/commands/CompareTimetableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.TimetableUtil;"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":" * Compares the partner\u0027s timetable with a given timetable"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"public class CompareTimetableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    public static final String COMMAND_WORD \u003d \"tcompare\";"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    public static final String COMMAND_ALIAS \u003d \"tc\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"            + \": Compares your partner\u0027s timetable with a given timetable.\\n\""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"            + \"Parameters: \" + PREFIX_TIMETABLE + \"TIMETABLE_URL\\n\""},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"            + \"Example: \" + COMMAND_WORD + \" http://modsn.us/wNuIW\";"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    public static final String MESSAGE_TIMETABLE_COMPARE_SUCCESS \u003d \"Compared timetable\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TIMETABLE_COMPARE_FAILURE \u003d \"Invalid timetable provided.\\n\";"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ReadOnlyPerson partner;"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    private Timetable otherTimetable;"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    public CompareTimetableCommand(Timetable otherTimetable) {"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        this.otherTimetable \u003d otherTimetable;"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            partner \u003d model.getPartner();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            if (partner \u003d\u003d null) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                throw new NullPointerException();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON);"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (otherTimetable \u003d\u003d null) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_TIMETABLE_COMPARE_FAILURE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        otherTimetable \u003d TimetableUtil.setUpTimetableInfoCompare(partner.getTimetable(), otherTimetable);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        model.indicateTimetableChanged(otherTimetable);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        model.requestShowTimetable();"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"        return new CommandResult(MESSAGE_TIMETABLE_COMPARE_SUCCESS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"                || (other instanceof CompareTimetableCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 this.otherTimetable.equals(((CompareTimetableCommand) other).otherTimetable)); // state check"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":34,"-":27}},{"path":"src/main/java/seedu/address/logic/commands/ShowTimetableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.TimetableUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":" * Selects your partner from NUSCouples."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ShowTimetableCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"tview\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"tv\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \": Shows your partner\u0027s NUSMods timetable.\\n\""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"NUSMods timetable displayed.\";"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    private ReadOnlyPerson partner;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ShowTimetableCommand() { }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"            partner \u003d model.getPartner();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            Timetable timetable \u003d partner.getTimetable();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            TimetableUtil.setUpTimetableInfoView(timetable);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            model.indicateTimetableChanged(timetable);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            model.requestShowTimetable();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SELECT_PERSON_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof ShowTimetableCommand); // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":8,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/CalendarViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.CalendarViewEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":8,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"chenxing1992"},"content":" * Command to change calendar view"},{"lineNumber":10,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":"public class CalendarViewCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":"    public static final String COMMAND_ALIAS \u003d \"cal\";"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes calendar view. \\n\""},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":"            + COMMAND_ALIAS + \": Short hand equivalent for calendar. \\n\""},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"            + \"Parameter: \\n\""},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"            + \"Day view: d\\n\""},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"            + \"Week view: w\\n\""},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"            + \"Month view: m\\n\""},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"            + \"Year view: y\\n\";"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"View changed.\";"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    private Character arg;"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"    public CalendarViewCommand(Character c) {"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"        this.arg \u003d c;"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"        EventsCenter.getInstance().post(new CalendarViewEvent(arg));"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":30,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Calendar;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":" * Command to add appointment to a person in addressBook"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"public class AddAppointmentCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"    public static final String COMMAND_WORD \u003d \"appointment\";"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"    public static final String COMMAND_ALIAS \u003d \"appt\";"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to a person in address book. \\n\""},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"            + COMMAND_ALIAS + \": Shorthand equivalent for add. \\n\""},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":"            + \"Parameters: \" + COMMAND_WORD + \" INDEX \""},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"            + PREFIX_DATE + \"DESCRIPTION, TIME\" + \"\\n\""},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"            + \"Example 1:\" + COMMAND_WORD + \" 1 \""},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"            + PREFIX_DATE + \"Lunch, Next Monday 3pm\";"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added. \";"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"    public static final String INVALID_PERSON \u003d \"This person is not in your address book\";"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"    public static final String INVALID_DATE \u003d \"Invalid Date. Please enter a valid date.\";"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"    public static final String DUPLICATE_APPT \u003d \"Duplicate Event found on same timing. Please select other time.\";"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"    private final Appointment appointment;"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"    public AddAppointmentCommand(Appointment appointment) {"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"        this.appointment \u003d appointment;"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"        ReadOnlyPerson personToAddAppointment \u003d model.getPartner();"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"        if (appointment.getDate() !\u003d null \u0026\u0026 !isDateValid()) {"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"            return new CommandResult(INVALID_DATE);"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"            model.addAppointment(personToAddAppointment, appointment);"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"            return new CommandResult(INVALID_PERSON);"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":"     * Checks if appointment date set to after current time"},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":"    private boolean isDateValid() {"},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"        requireNonNull(appointment);"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"        return !appointment.getDate().before(calendar.getTime());"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 (this.appointment.equals(((AddAppointmentCommand) other).appointment)));"},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":79,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":67,"traceurgan":1,"-":11}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.NusCouplesParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final NusCouplesParser NusCouplesParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        NusCouplesParser \u003d new NusCouplesParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Command command \u003d NusCouplesParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cJournalEntry\u003e getJournalEntryList() {"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"        return model.getJournalEntryList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonAsList() {"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"        return model.getPersonAsList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"    public ReadOnlyPerson getPartner() {"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"        return  model.getPartner();"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":64,"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"traceurgan":7,"-":61}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.JournalChangedEvent;"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.model.PersonChangedEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.TimetableChangedEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Storage extends PersonStorage, UserPrefsStorage, JournalStorage, TimetableStorage {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"    String getPersonFilePath();"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"    Optional\u003cReadOnlyPerson\u003e readPerson() throws DataConversionException, IOException;"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"    Optional\u003cReadOnlyPerson\u003e readPerson(String filePath) throws DataConversionException, IOException;"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    void savePerson(ReadOnlyPerson person) throws IOException;"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"    void savePerson(ReadOnlyPerson person, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"     * Saves the current Person to the hard disk."},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"    @Subscribe"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"    void handlePersonChangedEvent(PersonChangedEvent event);"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"     * Saves the current version of the Journal to the hard disk."},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"    void handleJournalChangedEvent(JournalChangedEvent jce);"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"     * Saves the timetable display info to the hard disk."},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"    void handleTimetableChangedEvent(TimetableChangedEvent event);"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":9,"traceurgan":30,"-":29}},{"path":"src/main/java/seedu/address/logic/commands/ViewJournalCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JOURNAL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":" * Shows a journal entry from a date"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"public class ViewJournalCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"    public static final String COMMAND_WORD \u003d \"jview\";"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    public static final String COMMAND_ALIAS \u003d \"jv\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"            + \": Selects a journal entry by date and view its contents. \\n\""},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"            + \"Parameters: \""},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"            + PREFIX_JOURNAL + \"DATE\\n\""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"            + PREFIX_JOURNAL + \"20180414\\n\""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"            + \"This opens the journal entry created on the 14th of February 2018.\";"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    public static final String MESSAGE_VIEW_JOURNAL_ENTRY_SUCCESS \u003d \"Showing journal entry: %1$s\";"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    public static final String MESSAGE_JOURNAL_ENTRY_NOT_FOUND \u003d"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"            \"There is no journal entry written on: %1$s.\\n\""},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"            + \"Use the jnew command to add a new journal entry.\";"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    private Date date;"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    public ViewJournalCommand(Date date) {"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        this.date \u003d date;"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"            model.viewJournalEntry(date);"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        } catch (Exception e) {"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"            throw new CommandException(String.format(MESSAGE_JOURNAL_ENTRY_NOT_FOUND, this.date));"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"        return new CommandResult(String.format(MESSAGE_VIEW_JOURNAL_ENTRY_SUCCESS, this.date));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"                || (other instanceof ViewJournalCommand); // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":40,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/NewJournalCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowJournalWindowRequestEvent;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Creates a new window for typing journal entries"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class NewJournalCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"jnew\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"jn\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String NEW_JOURNAL_ENTRY_CREATED \u003d \"Journal Opened.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Gets current local date and concatenates into a String in the form \"yyyymmdd\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    private Date concatenateDate() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        int dd \u003d currentDate.getDayOfMonth();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        int mm \u003d currentDate.getMonth().getValue();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        int yyyy \u003d currentDate.getYear();"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"        return new Date(String.format(\"%04d\" + \"%02d\" + \"%02d\", yyyy , mm, dd));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowJournalWindowRequestEvent(concatenateDate()));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return new CommandResult(NEW_JOURNAL_ENTRY_CREATED);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":3,"-":32}},{"path":"src/main/java/seedu/address/logic/commands/CancelAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.CalendarViewEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.AppointmentNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":" * Command to cancel an existing appointment"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"public class CancelAppointmentCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"    public static final String COMMAND_WORD \u003d \"cancel\";"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"    public static final String NO_SUCH_PERSON_FOUND \u003d \"No such person found\";"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"    public static final String NO_SUCH_APPOINTMENT \u003d \"No such appointment found\";"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"appointment canceled.\";"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels an appointment from a person. \\n\""},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"            + \"Parameters: \" + \"DESCRIPTION with PERSON NAME \\n\""},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"            + \"Example 1:\" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":"            + \"Lunch with John Doe\";"},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    public static final String REFER_PROMPT \u003d \"Please refer to the appointment description.\";"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    private String personString;"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"    private String appointmentString;"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"    public CancelAppointmentCommand(String person, String appointment) {"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"        this.personString \u003d person;"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"        this.appointmentString \u003d appointment;"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"            ReadOnlyPerson person \u003d getPersonFromName(personString);"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"            Appointment appointment \u003d getAppointmentFromPerson(person, appointmentString);"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":"            model.removeAppointment(person, appointment);"},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"            throw new CommandException(NO_SUCH_PERSON_FOUND + \"\\n\" + REFER_PROMPT);"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"        } catch (AppointmentNotFoundException e) {"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"            throw new CommandException(NO_SUCH_APPOINTMENT + \"\\n\" + REFER_PROMPT);"},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"     * Util method to search for the correct appointment from a person using only the description."},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"     * May have multiple appointments if there is same description under one person, but the first one will be deleted"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"     * @throws AppointmentNotFoundException if appointment not found"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"    private Appointment getAppointmentFromPerson(ReadOnlyPerson person, String description)"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"            throws AppointmentNotFoundException {"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"        for (Appointment appointment : person.getAppointments()) {"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"            if (appointment.getDescription().equalsIgnoreCase(description.trim())) {"},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"                return appointment;"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"        //Show Daily page for calendar"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":"        EventsCenter.getInstance().post(new CalendarViewEvent(\u0027d\u0027));"},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"        throw new AppointmentNotFoundException();"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"     * Extract person from address book using name. If there are more than one contact with the same name,"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"     * the first one will be extracted"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":"     * @throws PersonNotFoundException if no such person is in the address book"},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"    private ReadOnlyPerson getPersonFromName(String personName) throws PersonNotFoundException {"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"        if (model.getPartner().getName().fullName.equalsIgnoreCase(personName.trim())) {"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"            return model.getPartner();"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":"        throw new PersonNotFoundException();"},{"lineNumber":79,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":81,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":82,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"chenxing1992"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"chenxing1992"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"chenxing1992"},"content":"                || (other instanceof CancelAppointmentCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 (this.appointmentString.equals(((CancelAppointmentCommand) other).appointmentString))"},{"lineNumber":87,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 (this.personString.equals(((CancelAppointmentCommand) other).personString)));"},{"lineNumber":88,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":79,"traceurgan":1,"-":9}},{"path":"src/main/java/seedu/address/storage/TimetableStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":" * Represents a storage for {@link seedu.address.model.person.timetable}."},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"public interface TimetableStorage {"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":"     * Creates TimetableStyle.css file at path {@code timetablePageCssPath}"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    void createTimetablePageCssFile();"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"     * Updates TimetablePage.html file at path {@code timetablePageHtmlPath} with new timetable module information"},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    void setUpTimetablePageHtmlFile();"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":"     * Writes the given string to {@code timetableInfoFilePath}"},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"     * @param toWrite contents to write to {@code timetableInfoFilePath}"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"    void setUpTimetableDisplayFiles(String toWrite);"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"     * Writes a string to the file at {@code path}"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"     * @param toWrite the String to write"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"     * @param path the path of the file"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    void writeToFile(String toWrite, String path);"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"     * Gets file contents from the file at the given path"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"     * @return String containing file contents"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    String getFileContents(String path) throws FileNotFoundException;"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"     * Replaces some text of {@code contents} with {@code replace}"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"     * @param contents original content of the javascript file"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"     * @param replace new text"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"     * @param start of text in {@code contents} to replace (exclusive)"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"     * @param end of text in {@code contents} to replace (exclusive)"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"     * @return new content"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"    String replaceLineExcludingStartEnd(String contents, String replace, String start, String end);"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":45,"-":4}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.JournalChangedEvent;"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.model.PersonChangedEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.TimetableChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowTimetableRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    private PersonStorage personStorage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private JournalStorage journalStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private TimetableStorage timetableStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public StorageManager(PersonStorage personStorage, JournalStorage journalStorage,"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                          UserPrefsStorage userPrefsStorage, TimetableStorage timetableStorage) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        this.personStorage \u003d personStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.journalStorage \u003d journalStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.timetableStorage \u003d timetableStorage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":"    public String getPersonFilePath() {"},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"        return personStorage.getPersonFilePath();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"    public Optional\u003cReadOnlyPerson\u003e readPerson() throws DataConversionException, IOException {"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"        return readPerson(personStorage.getPersonFilePath());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"    public Optional\u003cReadOnlyPerson\u003e readPerson(String filePath) throws DataConversionException, IOException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"        return personStorage.readPerson(filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"    public void savePerson(ReadOnlyPerson person) throws IOException {"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"        savePerson(person, personStorage.getPersonFilePath());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"    public void savePerson(ReadOnlyPerson person, String filePath) throws IOException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":"        personStorage.savePerson(person, filePath);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":93,"author":{"gitID":"traceurgan"},"content":"    public void handlePersonChangedEvent(PersonChangedEvent event) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":"            savePerson(event.data);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Journal methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":105,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"traceurgan"},"content":"    public String getJournalFilePath() {"},{"lineNumber":107,"author":{"gitID":"traceurgan"},"content":"        return journalStorage.getJournalFilePath();"},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":110,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":"    public Optional\u003cReadOnlyJournal\u003e readJournal() throws DataConversionException, IOException {"},{"lineNumber":112,"author":{"gitID":"traceurgan"},"content":"        return readJournal(journalStorage.getJournalFilePath());"},{"lineNumber":113,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":115,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"traceurgan"},"content":"    public Optional\u003cReadOnlyJournal\u003e readJournal(String filePath) throws DataConversionException, IOException {"},{"lineNumber":117,"author":{"gitID":"traceurgan"},"content":"        return journalStorage.readJournal(filePath);"},{"lineNumber":118,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":120,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"traceurgan"},"content":"    public void saveJournal(ReadOnlyJournal journal) throws IOException {"},{"lineNumber":122,"author":{"gitID":"traceurgan"},"content":"        saveJournal(journal, journalStorage.getJournalFilePath());"},{"lineNumber":123,"author":{"gitID":"traceurgan"},"content":"        logger.info(getJournalFilePath());"},{"lineNumber":124,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":126,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"traceurgan"},"content":"    public void saveJournal(ReadOnlyJournal journal, String filePath) throws IOException {"},{"lineNumber":128,"author":{"gitID":"traceurgan"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":129,"author":{"gitID":"traceurgan"},"content":"        journalStorage.saveJournal(journal, filePath);"},{"lineNumber":130,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":132,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"traceurgan"},"content":"     * Saves the current version of the Journal Book to the hard disk."},{"lineNumber":134,"author":{"gitID":"traceurgan"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":135,"author":{"gitID":"traceurgan"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":136,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"traceurgan"},"content":"    @Subscribe"},{"lineNumber":138,"author":{"gitID":"traceurgan"},"content":"    public void handleJournalChangedEvent(JournalChangedEvent event) {"},{"lineNumber":139,"author":{"gitID":"traceurgan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":140,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"traceurgan"},"content":"            saveJournal(event.data);"},{"lineNumber":142,"author":{"gitID":"traceurgan"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"traceurgan"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":144,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":147,"author":{"gitID":"traceurgan"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timetable methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":148,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":149,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":150,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"marlenekoh"},"content":"    public void createTimetablePageCssFile() {"},{"lineNumber":152,"author":{"gitID":"marlenekoh"},"content":"        timetableStorage.createTimetablePageCssFile();"},{"lineNumber":153,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":155,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"marlenekoh"},"content":"    public void setUpTimetablePageHtmlFile() {"},{"lineNumber":157,"author":{"gitID":"marlenekoh"},"content":"        timetableStorage.setUpTimetablePageHtmlFile();"},{"lineNumber":158,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":160,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"marlenekoh"},"content":"    public void setUpTimetableDisplayFiles(String toWrite) {"},{"lineNumber":162,"author":{"gitID":"marlenekoh"},"content":"        timetableStorage.setUpTimetableDisplayFiles(toWrite);"},{"lineNumber":163,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":165,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"marlenekoh"},"content":"    public void writeToFile(String toWrite, String path) {"},{"lineNumber":167,"author":{"gitID":"marlenekoh"},"content":"        timetableStorage.writeToFile(toWrite, path);"},{"lineNumber":168,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":170,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"marlenekoh"},"content":"    public String getFileContents(String path) throws FileNotFoundException {"},{"lineNumber":172,"author":{"gitID":"marlenekoh"},"content":"        return timetableStorage.getFileContents(path);"},{"lineNumber":173,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":175,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"marlenekoh"},"content":"    public String replaceLineExcludingStartEnd(String contents, String replace, String start, String end) {"},{"lineNumber":177,"author":{"gitID":"marlenekoh"},"content":"        return timetableStorage.replaceLineExcludingStartEnd(contents, replace, start, end);"},{"lineNumber":178,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":180,"author":{"gitID":"marlenekoh"},"content":"    @Subscribe"},{"lineNumber":181,"author":{"gitID":"marlenekoh"},"content":"    public void handleTimetableChangedEvent(TimetableChangedEvent event) {"},{"lineNumber":182,"author":{"gitID":"marlenekoh"},"content":"        setUpTimetableDisplayFiles(event.timetable.getTimetableDisplayInfo());"},{"lineNumber":183,"author":{"gitID":"marlenekoh"},"content":"        setUpTimetablePageHtmlFile();"},{"lineNumber":184,"author":{"gitID":"marlenekoh"},"content":"        raise(new ShowTimetableRequestEvent());"},{"lineNumber":185,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":38,"traceurgan":61,"-":87}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":" * AXB-friendly version of the appointment list of a person"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"    private String description;"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"    private String appointmentStart;"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"    private String appointmentEnd;"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"     * Constructs an XmlAdaptedAppointment."},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"     * Converts a given appointment into this class for JAXB use"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"        description \u003d source.getDescription();"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"        appointmentStart \u003d source.getDateInStringFormat();"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"        appointmentEnd \u003d source.getDateEndInStringFormat();"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"     * Creates a XmlAdaptedAppointment from the given strings."},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"    public XmlAdaptedAppointment(String description, String appointmentStart, String appointmentEnd) {"},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"        this.description \u003d description;"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":"        this.appointmentStart \u003d appointmentStart;"},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"        this.appointmentEnd \u003d appointmentEnd;"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"        XmlAdaptedAppointment otherXmlAdaptedAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"        return this.description.equals(otherXmlAdaptedAppointment.description)"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 this.appointmentStart.equals(otherXmlAdaptedAppointment.appointmentStart)"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 this.appointmentEnd.equals(otherXmlAdaptedAppointment.appointmentEnd);"},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"     * Converts this jaxb-friendly adapted appointment object into the model\u0027s appointment object."},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"     * @throws ParseException if there were any data constraints violated in the adapted person"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"    public Appointment toModelType() throws ParseException {"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"        String description \u003d this.description;"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"        Calendar calendarStart \u003d Calendar.getInstance();"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"        calendarStart.setTime(Appointment.DATE_FORMATTER.parse(appointmentStart));"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":"        Calendar calendarEnd \u003d Calendar.getInstance();"},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":"        calendarEnd.setTime(Appointment.DATE_FORMATTER.parse(appointmentEnd));"},{"lineNumber":79,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":80,"author":{"gitID":"chenxing1992"},"content":"        return new Appointment(description, calendarStart, calendarEnd);"},{"lineNumber":81,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":83,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":74,"traceurgan":1,"-":8}},{"path":"src/main/java/seedu/address/storage/JournalStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":" * Represents a storage for {@link seedu.address.model.Journal}."},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"public interface JournalStorage {"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    String getJournalFilePath();"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"     * Returns AddressBook data as a {@link ReadOnlyJournal}."},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    Optional\u003cReadOnlyJournal\u003e readJournal() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"     * @see #getJournalFilePath()"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    Optional\u003cReadOnlyJournal\u003e readJournal(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"     * Saves the given {@link ReadOnlyJournal} to the storage."},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"     * @param journal cannot be null."},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"    void saveJournal(ReadOnlyJournal journal) throws IOException;"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"     * @see #saveJournal(ReadOnlyJournal)"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"    void saveJournal(ReadOnlyJournal journal, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":37,"-":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedJournalEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":" * JAXB-friendly version of the JournalEntry."},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"public class XmlAdaptedJournalEntry {"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    private String date;"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    private String text;"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"     * Constructs an XmlAdaptedJournalEntry."},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    public XmlAdaptedJournalEntry() {}"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"     * Constructs an {@code XmlAdaptedJournalEntry} with the given journal entry details."},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"    public XmlAdaptedJournalEntry(String date, String text) {"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"        this.date \u003d date;"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        this.text \u003d text;"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"     * Converts a given Journal Entry into this class for JAXB use."},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"    public XmlAdaptedJournalEntry(JournalEntry source) {"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"        date \u003d source.getDate().value;"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"        text \u003d source.getText();"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"            return true;"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        if (!(other instanceof XmlAdaptedJournalEntry)) {"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"        XmlAdaptedJournalEntry otherJournalEntry \u003d (XmlAdaptedJournalEntry) other;"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"        return this.date.equals(otherJournalEntry.date)"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 this.text.equals(otherJournalEntry.text);"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"     * Converts this jaxb-friendly adapted journal entry object into the model\u0027s JournalEntry object."},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted journal entry"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":"    public JournalEntry toModelType() throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":"        if (this.date \u003d\u003d null) { //impossible, date is generated when new journal entry is created"},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":"            throw new IllegalValueException(\"Date missing\");"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"        final Date date \u003d new Date(this.date);"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"        return new JournalEntry(date, text);"},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":67,"-":7}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String timetable;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments \u003d new ArrayList\u003cXmlAdaptedAppointment\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String timetable,"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"                            List\u003cXmlAdaptedAppointment\u003e appointments) {"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.timetable \u003d timetable;"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"        this.appointments \u003d appointments;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        timetable \u003d source.getTimetable().value;"},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"        for (Appointment appointment : source.getAppointments()) {"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":"            appointments.add(new XmlAdaptedAppointment(appointment));"},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":"    public Person toModelType() throws IllegalValueException, ParseException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (this.timetable \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                    Timetable.class.getSimpleName()));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!Timetable.isValidTimetable(this.timetable)) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Timetable.MESSAGE_TIMETABLE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final Timetable timetable \u003d new Timetable(this.timetable);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"traceurgan"},"content":"        final List\u003cAppointment\u003e personAppointmentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":127,"author":{"gitID":"traceurgan"},"content":"        for (XmlAdaptedAppointment appointment : appointments) {"},{"lineNumber":128,"author":{"gitID":"traceurgan"},"content":"            personAppointmentList.add(appointment.toModelType());"},{"lineNumber":129,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"traceurgan"},"content":"        return new Person(name, phone, email, address, timetable, personAppointmentList);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":148,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 Objects.equals(timetable, otherPerson.timetable)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                \u0026\u0026 appointments.equals(otherPerson.appointments);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":18,"-":133}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    public static void saveDataToFile(File file, XmlSerializablePerson addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    public static XmlSerializablePerson loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            IOException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"            XmlSerializablePerson xmlBook \u003d  XmlUtil.getDataFromFile(file, XmlSerializablePerson.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            return xmlBook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static XmlSerializableJournal loadJournalFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            IOException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            XmlSerializableJournal xmlJournal \u003d  XmlUtil.getDataFromFile(file, XmlSerializableJournal.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            return xmlJournal;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Saves the given journal data to the specified file."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void saveJournalToFile(File file, XmlSerializableJournal journal)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, journal);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":3,"-":61}},{"path":"src/main/java/seedu/address/storage/XmlSerializableJournal.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Journal;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":" * An Immutable Journal that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"@XmlRootElement(name \u003d \"journal\")"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"public class XmlSerializableJournal {"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    private List\u003cXmlAdaptedJournalEntry\u003e journalEntries;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"     * Creates an empty XmlSerializableJournal."},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    public XmlSerializableJournal() {"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"        journalEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"     * Conversion"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"    public XmlSerializableJournal (ReadOnlyJournal src) {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        this();"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        journalEntries.addAll(src.getJournalEntryList().stream().map("},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"                XmlAdaptedJournalEntry::new).collect(Collectors.toList()));"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"     * Converts this journal into the model\u0027s {@code Journal} object."},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"     * {@code XmlAdaptedJournalEntry}."},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"    public Journal toModelType() throws Exception {"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"        Journal journal \u003d new Journal();"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        for (XmlAdaptedJournalEntry p : journalEntries) {"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"            journal.addJournalEntry(p.toModelType());"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"        return journal;"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"            return true;"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"        if (!(other instanceof XmlSerializableJournal)) {"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":"        XmlSerializableJournal otherJournal \u003d (XmlSerializableJournal) other;"},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":"        return journalEntries.equals(otherJournal.journalEntries);"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":56,"-":13}},{"path":"src/main/java/seedu/address/storage/XmlSerializablePerson.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Person.PARTNER_INDEX;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":"import java.text.ParseException;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":" * An Immutable Person that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"@XmlRootElement(name \u003d \"person\")"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"public class XmlSerializablePerson {"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    private ArrayList\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"     * Creates an empty XmlSerializablePerson."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    public XmlSerializablePerson() {"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"        persons \u003d new ArrayList\u003cXmlAdaptedPerson\u003e();"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"     * Conversion"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"    public XmlSerializablePerson(ReadOnlyPerson src) {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        this();"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        persons.add(new XmlAdaptedPerson(src));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"    public Person toModelType() throws IllegalValueException, ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return persons.get(PARTNER_INDEX).toModelType();"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"    public int getSize() {"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"        return persons.size();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"        if (!(other instanceof XmlSerializablePerson)) {"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":"        XmlSerializablePerson xsp \u003d (XmlSerializablePerson) other;"},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"        if (persons.size() !\u003d 0) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return persons.get(PARTNER_INDEX).equals(xsp.persons.get(PARTNER_INDEX));"},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"            return persons.size() \u003d\u003d (xsp.persons.size());"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":43,"-":28}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Journal;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.FileTimetableStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JournalStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"import seedu.address.storage.PersonStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlJournalStorage;"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"import seedu.address.storage.XmlPersonStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"        PersonStorage personStorage \u003d new XmlPersonStorage(userPrefs.getPersonFilePath());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        JournalStorage journalStorage \u003d new XmlJournalStorage(userPrefs.getJournalFilePath());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FileTimetableStorage timetableStorage \u003d new FileTimetableStorage(userPrefs.getTimetablePageHtmlPath(),"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                userPrefs.getTimetablePageCssPath(), userPrefs.getTimetableInfoFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(personStorage, journalStorage, userPrefsStorage, timetableStorage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":"        Optional\u003cReadOnlyPerson\u003e personOptional;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyJournal\u003e journalOptional;"},{"lineNumber":98,"author":{"gitID":"traceurgan"},"content":"        ReadOnlyPerson personData;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ReadOnlyJournal journalData;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"traceurgan"},"content":"            personOptional \u003d storage.readPerson();"},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":"            if (personOptional.isPresent()) {"},{"lineNumber":103,"author":{"gitID":"traceurgan"},"content":"                logger.info(\"Data file found. Will be starting with current Person\");"},{"lineNumber":104,"author":{"gitID":"traceurgan"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"traceurgan"},"content":"            if (!personOptional.isPresent()) {"},{"lineNumber":106,"author":{"gitID":"traceurgan"},"content":"                logger.info(\"Data file not found. Will be starting with a empty Person\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"            personData \u003d personOptional.orElse(null);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":110,"author":{"gitID":"traceurgan"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Person\");"},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":"            personData \u003d null;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":113,"author":{"gitID":"traceurgan"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Person\");"},{"lineNumber":114,"author":{"gitID":"traceurgan"},"content":"            personData \u003d null;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            journalOptional \u003d storage.readJournal();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            if (journalOptional.isPresent()) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                logger.info(\"Data file found. Will be starting with current Journal\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            if (!journalOptional.isPresent()) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Journal\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            journalData \u003d journalOptional.orElseGet(SampleDataUtil::getSampleJournal);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":127,"author":{"gitID":"traceurgan"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Journal\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            journalData \u003d new Journal();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":130,"author":{"gitID":"traceurgan"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Journal\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            journalData \u003d new Journal();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"traceurgan"},"content":"        return new ModelManager(personData, journalData, userPrefs);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":164,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":192,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Main"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":20,"-":224}},{"path":"src/main/java/seedu/address/storage/PersonStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":" * Represents a storage for {@link Person}."},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"public interface PersonStorage {"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    String getPersonFilePath();"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"     * Returns Person data as a {@link ReadOnlyPerson}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    Optional\u003cReadOnlyPerson\u003e readPerson() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"     * @see #getPersonFilePath() () FilePath()"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    Optional\u003cReadOnlyPerson\u003e readPerson(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"     * Saves the given {@link ReadOnlyPerson} to the storage."},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"     * @param person cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"    void savePerson(ReadOnlyPerson person) throws IOException;"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"     * @see #savePerson(ReadOnlyPerson)"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"    void savePerson(ReadOnlyPerson person, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":32,"-":13}},{"path":"src/main/java/seedu/address/storage/XmlJournalStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"public class XmlJournalStorage implements JournalStorage {"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlJournalStorage.class);"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    public XmlJournalStorage(String filePath) {"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"    public String getJournalFilePath() {"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    public Optional\u003cReadOnlyJournal\u003e readJournal() throws DataConversionException, IOException {"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"        return readJournal(filePath);"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"     * Similar to {@link #readJournal()} ()}"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"    public Optional\u003cReadOnlyJournal\u003e readJournal(String filePath) throws DataConversionException,"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"            IOException {"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(filePath);"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"        File journalFile \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"        if (!journalFile.exists()) {"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"            logger.info(\"Journal file \"  + journalFile  + \" not found\");"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"        XmlSerializableJournal xmlJournal \u003d XmlFileStorage.loadJournalFromSaveFile(new File(filePath));"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"            return Optional.of(xmlJournal.toModelType());"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"        } catch (Exception e) {"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"            logger.info(\"Illegal values found in \" + journalFile + \": \" + e.getMessage());"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"            throw new DataConversionException(e);"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":"    public void saveJournal(ReadOnlyJournal journal) throws IOException {"},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"        saveJournal(journal, filePath);"},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"     * Similar to {@link #saveJournal(ReadOnlyJournal)}"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"    public void saveJournal(ReadOnlyJournal journal, String filePath) throws IOException {"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(journal);"},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":77,"author":{"gitID":"traceurgan"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"        XmlFileStorage.saveJournalToFile(file, new XmlSerializableJournal(journal));"},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":67,"-":14}},{"path":"src/main/java/seedu/address/model/journalentry/JournalEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.journalentry;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":" * Represents a JournalEntry in the journal."},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"public class JournalEntry {"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"    private final Date date;"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    private String text;"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"     * Every field must be present and not null."},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    public JournalEntry(Date date, String text) {"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"        requireAllNonNull(date, text);"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"        this.date \u003d date;"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"        this.text \u003d text;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    public Date getDate() {"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"        return date;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"    public String getText() {"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"        return text;"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"            return true;"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"        if (!(other instanceof JournalEntry)) {"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"            return false;"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"        JournalEntry otherJournalEntry \u003d (JournalEntry) other;"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"        return otherJournalEntry.getDate().equals(this.getDate())"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 otherJournalEntry.getText().equals(this.getText());"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"        return Objects.hash(date);"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":48,"-":6}},{"path":"src/main/java/seedu/address/storage/FileTimetableStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileReader;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":" * A class to write and read Timetable data stored on the hard disk."},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"public class FileTimetableStorage implements TimetableStorage {"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(FileTimetableStorage.class);"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"    private String timetablePageHtmlPath;"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":"    private String timetablePageCssPath;"},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"    private String timetableDisplayInfoFilePath;"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"    public FileTimetableStorage(String timetablePageHtmlPath, String timetablePageCssPath,"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"                                String timetableDisplayInfoFilePath) {"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"        this.timetablePageHtmlPath \u003d timetablePageHtmlPath;"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"        this.timetablePageCssPath \u003d timetablePageCssPath;"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"        this.timetableDisplayInfoFilePath \u003d timetableDisplayInfoFilePath;"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    public String getTimetablePageHtmlPath() {"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"        return timetablePageHtmlPath;"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    public String getTimetablePageCssPath() {"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"        return timetablePageCssPath;"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"    public String getTimetableDisplayInfoFilePath() {"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"        return timetableDisplayInfoFilePath;"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"    public void setUpTimetableDisplayFiles(String toWrite) {"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"        writeToFile(toWrite, timetableDisplayInfoFilePath);"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        createTimetablePageCssFile();"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"        setUpTimetablePageHtmlFile();"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"    public void createTimetablePageCssFile() {"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"            writeToFile(SampleDataUtil.getDefaultTimetablePageCss(), timetablePageCssPath);"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"            logger.severe(\"Unable to get default timetable style\");"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"    public void setUpTimetablePageHtmlFile() {"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"            writeToFile(SampleDataUtil.getDefaultTimetablePageHtml(), timetablePageHtmlPath);"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"            String oldContent \u003d getFileContents(timetablePageHtmlPath);"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"            String toReplace \u003d getFileContents(timetableDisplayInfoFilePath);"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"            String newContent \u003d replaceLineExcludingStartEnd(oldContent, toReplace, \"timetable\", \"];\");"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"            writeToFile(newContent, timetablePageHtmlPath);"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"File not found\");"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"        } catch (IOException e) {"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"            logger.severe(\"Unable to get default timetable page\");"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"    public void writeToFile(String toWrite, String path) {"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"        File file \u003d new File(path);"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"            PrintWriter printWriter \u003d new PrintWriter(file);"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"            printWriter.write(toWrite);"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"            printWriter.close();"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"File not found\");"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":"    public String getFileContents(String path) throws FileNotFoundException {"},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":"        File file \u003d new File(path);"},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":"            if (file.exists()) {"},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":"                BufferedReader br \u003d new BufferedReader(new FileReader(file));"},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"                StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":"                String line \u003d br.readLine();"},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"                while (line !\u003d null) {"},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"                    sb.append(line);"},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"                    sb.append(\"\\n\");"},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":"                    line \u003d br.readLine();"},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":"                }"},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":"                br.close();"},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"                return sb.toString();"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":"            } else {"},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"                throw new FileNotFoundException(\"File does not exist\");"},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":"        } catch (IOException e) {"},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Exception in reading file\");"},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":"        return null;"},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":112,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"marlenekoh"},"content":"    public String replaceLineExcludingStartEnd(String contents, String replace, String start, String end) {"},{"lineNumber":114,"author":{"gitID":"marlenekoh"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":115,"author":{"gitID":"marlenekoh"},"content":"        int startPos \u003d contents.indexOf(start);"},{"lineNumber":116,"author":{"gitID":"marlenekoh"},"content":"        int endPos \u003d contents.indexOf(end);"},{"lineNumber":117,"author":{"gitID":"marlenekoh"},"content":"        sb.append(contents.substring(0, startPos));"},{"lineNumber":118,"author":{"gitID":"marlenekoh"},"content":"        sb.append(replace);"},{"lineNumber":119,"author":{"gitID":"marlenekoh"},"content":"        sb.append(contents.substring(endPos + end.length()));"},{"lineNumber":120,"author":{"gitID":"marlenekoh"},"content":"        return sb.toString();"},{"lineNumber":121,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":109,"-":13}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.base.Charsets;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.io.Resources;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddAppointmentParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Journal;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    public static ReadOnlyPerson getSamplePerson() {"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        return new Person (new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Timetable(\"http://modsn.us/56jUQ\"),"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"                new ArrayList\u003c\u003e(getAppointmentList(\"Lunch, tomorrow 5pm to 7pm\")));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static JournalEntry[] getSampleJournalEntries() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new JournalEntry[]{"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"            new JournalEntry(new Date(\"20180205\"), \"Sample Text One\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"            new JournalEntry(new Date(\"20180301\"), \"Sample Text Two\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"            new JournalEntry(new Date(\"20180305\"), \"Sample Text Three\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static ReadOnlyJournal getSampleJournal() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Journal sampleJ \u003d new Journal();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            for (JournalEntry sampleJournalEntries : getSampleJournalEntries()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                sampleJ.addJournalEntry(sampleJournalEntries);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return sampleJ;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate journal entries\", e);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"     * Returns an appointment list containing the list of appointment given"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static List\u003cAppointment\u003e getAppointmentList(String... strings) {"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"        List\u003cAppointment\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                list.add(AddAppointmentParser.getAppointmentFromString(s));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            } catch (ParseException e) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"sample data cannot contain invalid appointments\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return list;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"    public static String getDefaultTimetablePageHtml() throws IOException {"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"        URL url \u003d MainApp.class.getResource(\"/view/TimetablePage.html\");"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"        return Resources.toString(url, Charsets.UTF_8);"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"    public static String getDefaultTimetablePageCss() throws IOException {"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"        URL url \u003d MainApp.class.getResource(\"/view/TimetableStyle.css\");"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"        return Resources.toString(url, Charsets.UTF_8);"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":12,"traceurgan":10,"-":63}},{"path":"src/main/java/seedu/address/storage/XmlPersonStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"public class XmlPersonStorage implements PersonStorage {"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlPersonStorage.class);"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    public XmlPersonStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"    public String getPersonFilePath() {"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"    public Optional\u003cReadOnlyPerson\u003e readPerson() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        return readPerson(filePath);"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"     * Similar to {@link #readPerson()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"    public Optional\u003cReadOnlyPerson\u003e readPerson(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"                                                                                 IOException {"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"        File personFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        if (!personFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"            logger.info(\"AddressBook file \"  + personFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"        XmlSerializablePerson xmlPerson \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"        if (xmlPerson.getSize() \u003d\u003d 0) {"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"            return Optional.empty();"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"            return Optional.of(xmlPerson.toModelType());"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"        } catch (IllegalValueException | ParseException ive) {"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"            logger.info(\"Illegal values found in \" + personFile + \": \" + ive.getMessage());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"    public void savePerson(ReadOnlyPerson person) throws IOException {"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"        savePerson(person, filePath);"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":"     * Similar to {@link #savePerson(ReadOnlyPerson)} (ReadOnlyPerson)}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"    public void savePerson(ReadOnlyPerson person, String filePath) throws IOException {"},{"lineNumber":77,"author":{"gitID":"traceurgan"},"content":"        XmlSerializablePerson xsp;"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"        if (person \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":"            xsp \u003d new XmlSerializablePerson();"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"            requireNonNull(person);"},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"            xsp \u003d new XmlSerializablePerson(person);"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"        XmlFileStorage.saveDataToFile(file, xsp);"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":60,"-":31}},{"path":"src/main/java/seedu/address/model/journalentry/UniqueJournalEntryList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.journalentry;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":" * A list of journal entries that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":" *"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":" *"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":" * @see JournalEntry#equals(Object)"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"public class UniqueJournalEntryList implements Iterable \u003cJournalEntry\u003e {"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    private final ObservableList\u003cJournalEntry\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    private final HashMap\u003cDate, JournalEntry\u003e journalMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"    public boolean contains(JournalEntry toCheck) {"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"        return journalMap.containsKey(toCheck.getDate());"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"     * Returns last entry"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"    public int getLast() {"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"        return (internalList.size() - 1);"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"     * Adds a journal entry to the list."},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"     * @throws Exception if the journal entry to add is a duplicate of an existing journal entry in the list."},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"    public void add(JournalEntry toAdd) throws Exception {"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(toAdd);"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"        if (contains(toAdd)) {"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"            throw new Exception();"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"        internalList.add(toAdd);"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"        journalMap.put(toAdd.getDate(), toAdd);"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"    * Replaces the journal entry {@code target} in the list with {@code editedPerson}."},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"    *"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"    * @throws Exception if the replacement is equivalent to another existing journal entry in the list."},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"    * @throws Exception if {@code target} could not be found in the list."},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"    */"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"    public void setJournalEntries(UniqueJournalEntryList replacement, HashMap\u003cDate, JournalEntry\u003e journalMap) {"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"        this.journalMap.putAll(journalMap);"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":"    public void setJournalEntries(List\u003cJournalEntry\u003e journalEntries) throws Exception {"},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":"        requireAllNonNull(journalEntries);"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"        final UniqueJournalEntryList replacement \u003d new UniqueJournalEntryList();"},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"        final HashMap\u003cDate, JournalEntry\u003e replacementMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"        for (final JournalEntry journalEntry : journalEntries) {"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"            replacement.add(journalEntry);"},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"            replacementMap.put(journalEntry.getDate(), journalEntry);"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"        setJournalEntries(replacement, replacementMap);"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":77,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"    public ObservableList\u003cJournalEntry\u003e asObservableList() {"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":84,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"     * Returns the journalMap."},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":"    public HashMap\u003cDate, JournalEntry\u003e getJournalMap() {"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"        return journalMap;"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":91,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"traceurgan"},"content":"    public Iterator\u003cJournalEntry\u003e iterator() {"},{"lineNumber":93,"author":{"gitID":"traceurgan"},"content":"        return internalList.iterator();"},{"lineNumber":94,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"traceurgan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitID":"traceurgan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":99,"author":{"gitID":"traceurgan"},"content":"                || (other instanceof UniqueJournalEntryList // instanceof handles nulls"},{"lineNumber":100,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueJournalEntryList) other).internalList));"},{"lineNumber":101,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":103,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"traceurgan"},"content":"     * Updates journal entry."},{"lineNumber":105,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"traceurgan"},"content":"    public void updateJournalEntry(JournalEntry journalEntry, int last) {"},{"lineNumber":107,"author":{"gitID":"traceurgan"},"content":"        internalList.set(last, journalEntry);"},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"        journalMap.replace(journalEntry.getDate(), journalEntry);"},{"lineNumber":109,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":"    public JournalEntry getJournalEntry(Date date) {"},{"lineNumber":112,"author":{"gitID":"traceurgan"},"content":"        return journalMap.get(date);"},{"lineNumber":113,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":103,"-":11}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * Returns true if a given string is a valid person\u0027s address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"HEARTOFAL1ON":1}},{"path":"src/main/java/seedu/address/model/journalentry/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.model.journalentry;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":" * Represents a Journal Entry\u0027s Date in the journal."},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"public class Date {"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"            \"Date can only contain numbers, and must be 8 digits long\";"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{8}\";"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"     * Constructs a {@code Date}."},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"     * @param date A valid date."},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    public Date(String date) {"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(date);"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"        this.value \u003d date;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"                || (other instanceof Date // instanceof handles nulls"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 this.value.equals(((Date) other).value)); // state check"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"        return Integer.valueOf(value);"},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":33,"-":19}},{"path":"src/main/java/seedu/address/model/person/exceptions/AppointmentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":4,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"chenxing1992"},"content":" * Signals that the appointment cannot be found"},{"lineNumber":6,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":7,"author":{"gitID":"chenxing1992"},"content":"public class AppointmentNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":6,"-":2}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.AppointmentList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"    ObjectProperty\u003cTimetable\u003e timeTableProperty();"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"    ObjectProperty\u003cAppointmentList\u003e appointmentProperty();"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"    Name getName();"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    Phone getPhone();"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"    Email getEmail();"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"    Address getAddress();"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"    Timetable getTimetable();"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"    List\u003cAppointment\u003e getAppointments();"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"    /**Same state detected will return true."},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"    default boolean equals(ReadOnlyPerson rp) {"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":"        return rp \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"                || (rp !\u003d null // this is first to avoid NPE below"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 rp.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 rp.getPhone().equals(this.getPhone())"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 rp.getEmail().equals(this.getEmail())"},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 rp.getAddress().equals(this.getAddress())"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 rp.getTimetable().equals((this.getTimetable()))"},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 rp.getAppointments().equals(this.getAppointments()));"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"     * Show all contact in detail as text"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"    default String getAsText() {"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"        final StringBuilder b \u003d new StringBuilder();"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"        b.append(getName())"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"                .append(\" Phone: \")"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"                .append(getPhone())"},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"                .append(\" Email: \")"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"                .append(getEmail())"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"                .append(\" Address: \")"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"                .append(getAddress())"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":"                .append(\" TimeTable: \")"},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"                .append(getTimetable());"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"        return b.toString();"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"}"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":""}],"authorContributionMap":{"chenxing1992":61,"traceurgan":3,"-":6}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.AppointmentList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":" * Represents a Person in the address book."},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"    public static final int PARTNER_INDEX \u003d 0;"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"    private ObjectProperty\u003cTimetable\u003e timetable;"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"    private ObjectProperty\u003cAppointmentList\u003e appointments;"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"                  Timetable timetable, List\u003cAppointment\u003e appointments) {"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"        requireAllNonNull(name, phone, email, address, timetable);"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"        this.timetable \u003d new SimpleObjectProperty\u003c\u003e(timetable);"},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"        if (appointments !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":"            this.appointments \u003d new SimpleObjectProperty\u003c\u003e(new AppointmentList(appointments));"},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(),"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"                source.getTimetable(), source.getAppointments());"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"        return name;"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":"        return phone;"},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"        return email;"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":"        return address;"},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":"    public ObjectProperty\u003cTimetable\u003e timeTableProperty() {"},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":"        return timetable;"},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"chenxing1992"},"content":"    public ObjectProperty\u003cAppointmentList\u003e appointmentProperty() {"},{"lineNumber":81,"author":{"gitID":"chenxing1992"},"content":"        return appointments;"},{"lineNumber":82,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":84,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"chenxing1992"},"content":"    public Name getName() {"},{"lineNumber":86,"author":{"gitID":"chenxing1992"},"content":"        return name.get();"},{"lineNumber":87,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":89,"author":{"gitID":"chenxing1992"},"content":"    public void setName(Name name) {"},{"lineNumber":90,"author":{"gitID":"chenxing1992"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":91,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":93,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"chenxing1992"},"content":"    public Phone getPhone() {"},{"lineNumber":95,"author":{"gitID":"chenxing1992"},"content":"        return phone.get();"},{"lineNumber":96,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":98,"author":{"gitID":"chenxing1992"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":99,"author":{"gitID":"chenxing1992"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":100,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":102,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"chenxing1992"},"content":"    public Email getEmail() {"},{"lineNumber":104,"author":{"gitID":"chenxing1992"},"content":"        return email.get();"},{"lineNumber":105,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":107,"author":{"gitID":"chenxing1992"},"content":"    public void setEmail(Email email) {"},{"lineNumber":108,"author":{"gitID":"chenxing1992"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":109,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":111,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"chenxing1992"},"content":"    public Address getAddress() {"},{"lineNumber":113,"author":{"gitID":"chenxing1992"},"content":"        return address.get();"},{"lineNumber":114,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":116,"author":{"gitID":"chenxing1992"},"content":"    public void setAddress(Address address) {"},{"lineNumber":117,"author":{"gitID":"chenxing1992"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":118,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":120,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"chenxing1992"},"content":"    public Timetable getTimetable() {"},{"lineNumber":122,"author":{"gitID":"chenxing1992"},"content":"        return timetable.get();"},{"lineNumber":123,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":125,"author":{"gitID":"chenxing1992"},"content":"    public void setTimetable(Timetable timetable) {"},{"lineNumber":126,"author":{"gitID":"chenxing1992"},"content":"        this.timetable.set(requireNonNull(timetable));"},{"lineNumber":127,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":129,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"chenxing1992"},"content":"    public List\u003cAppointment\u003e getAppointments() {"},{"lineNumber":131,"author":{"gitID":"chenxing1992"},"content":"        return appointments.get().toList();"},{"lineNumber":132,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":134,"author":{"gitID":"chenxing1992"},"content":"    public void setAppointment(List\u003cAppointment\u003e appointments) {"},{"lineNumber":135,"author":{"gitID":"chenxing1992"},"content":"        this.appointments.set(new AppointmentList(appointments));"},{"lineNumber":136,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":138,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"chenxing1992"},"content":"    public boolean equals(Object other) {"},{"lineNumber":140,"author":{"gitID":"chenxing1992"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":141,"author":{"gitID":"chenxing1992"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":142,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 this.equals((ReadOnlyPerson) other));"},{"lineNumber":143,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":145,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"chenxing1992"},"content":"    public int hashCode() {"},{"lineNumber":147,"author":{"gitID":"chenxing1992"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":148,"author":{"gitID":"chenxing1992"},"content":"        return Objects.hash(name, phone, email, address, timetable);"},{"lineNumber":149,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":151,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"chenxing1992"},"content":"    public String toString() {"},{"lineNumber":153,"author":{"gitID":"chenxing1992"},"content":"        return getName().toString();"},{"lineNumber":154,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"chenxing1992"},"content":"}"},{"lineNumber":156,"author":{"gitID":"chenxing1992"},"content":""}],"authorContributionMap":{"chenxing1992":142,"traceurgan":3,"-":11}},{"path":"src/main/java/seedu/address/model/person/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.model.person.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.text.DateFormat;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Calendar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":11,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":" *  appointment class to hold all the start and end time of the appointment and the description"},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":" *  */"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":"public class Appointment {"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":"    private static final String DATE_FORMAT \u003d \"yyyy/MM/dd HH:mm\";"},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":"    public static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":"    private String description;"},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"    private Date date;"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"    private Date endDate;"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"    public Appointment(String description, Calendar calendar, Calendar calendarEnd) {"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":"        requireNonNull(calendar);"},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"        requireNonNull(description);"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":"        this.description \u003d description;"},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"        this.date \u003d calendar.getTime();"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"        if (calendarEnd !\u003d null) {"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"            this.endDate \u003d calendarEnd.getTime();"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"        } else {"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"            calendar.add(Calendar.HOUR, 1);"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"            this.endDate \u003d calendar.getTime();"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":"    public String getDescription() {"},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"        return this.description;"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"    public Date getDate() {"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"        return this.date;"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"    public Date getEndDate() {"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":"        return endDate;"},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"        if (date !\u003d null) {"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"            return \"appointment on \" + DATE_FORMATTER.format(date);"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":"        } else {"},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"            return \"No appointment\";"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"     * @return starting appointment time in the format yyyy/MM/dd HH:mm"},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"    public String getDateInStringFormat() {"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"        return DATE_FORMATTER.format(date);"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":"     * @return ending appointment time in the format yyyy/MM/dd HH:mm"},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"    public String getDateEndInStringFormat() {"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"        return DATE_FORMATTER.format(endDate);"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"                || (other instanceof Appointment // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 this.getDateInStringFormat().equals(((Appointment) other).getDateInStringFormat()))"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 this.getDateEndInStringFormat().equals(((Appointment) other).getDateEndInStringFormat());"},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":69,"traceurgan":1,"-":8}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateAppointmentFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":4,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"chenxing1992"},"content":" * Signals that the appointment cannot be found"},{"lineNumber":6,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":7,"author":{"gitID":"chenxing1992"},"content":"public class DuplicateAppointmentFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":6,"-":2}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableModule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":" * Represents a module from NUSMods timetable."},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"public class TimetableModule {"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"    private final String moduleCode;"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    private HashMap\u003cString, String\u003e listOfLessons; // Key is lesson type, Value is class type"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"    public TimetableModule(String moduleCode, HashMap\u003cString, String\u003e listOfLessons) {"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"        this.listOfLessons \u003d listOfLessons;"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"    public String getModuleCode() {"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"        return moduleCode;"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":"    public HashMap\u003cString, String\u003e getListOfLessons() {"},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"        return listOfLessons;"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"        return (other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"                || (other instanceof TimetableModule // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"                \u0026\u0026 this.moduleCode.equals(((TimetableModule) other).moduleCode)"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"                \u0026\u0026 this.listOfLessons.equals(((TimetableModule) other).listOfLessons))); // state check"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":29,"-":4}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableModuleSlot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":4,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"marlenekoh"},"content":" * Represents the module information of one module slot in one day"},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":"public class TimetableModuleSlot implements Comparable\u003cTimetableModuleSlot\u003e {"},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":"    private String moduleCode;"},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"    private String lessonType;"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"    private String classType;"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    private String weekFreq;"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":"    private String day;"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"    private String venue;"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    private String startTime;"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"    private String endTime;"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"    private boolean isComparing; // for comparing timetables"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"    private final boolean isEmpty; // for displaying normal timetable"},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    public TimetableModuleSlot() {"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"        this.moduleCode \u003d null;"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"        this.lessonType \u003d null;"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":"        this.classType \u003d null;"},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"        this.weekFreq \u003d null;"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"        this.day \u003d null;"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"        this.venue \u003d null;"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"        this.startTime \u003d null;"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"        this.endTime \u003d null;"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"        isEmpty \u003d true;"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"        isComparing \u003d false;"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    public TimetableModuleSlot(String moduleCode, String lessonType, String classType, String weekFreq, String day,"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"                               String venue, String startTime, String endTime) {"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"        this.lessonType \u003d lessonType;"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"        this.classType \u003d classType;"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"        this.weekFreq \u003d weekFreq;"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"        this.day \u003d day;"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"        this.venue \u003d venue;"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"        isEmpty \u003d false;"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"        isComparing \u003d false;"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"    public String getModuleCode() {"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        return moduleCode;"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"    public String getLessonType() {"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"        return lessonType;"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"    public String getClassType() {"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"        return classType;"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"    public String getWeekFreq() {"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"        return weekFreq;"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"    public String getDay() {"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"        return day;"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"    public String getVenue() {"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"        return venue;"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"    public String getStartTime() {"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"        return startTime;"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"    public String getEndTime() {"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"        return endTime;"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"    public void setComparing(boolean comparing) {"},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"        isComparing \u003d comparing;"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"    public int compareTo(TimetableModuleSlot other) {"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":"        return this.startTime.compareTo(other.startTime);"},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":"    public String toString() {"},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":"        if (isComparing) {"},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":"            return isEmpty"},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":"                    ? \"\\\"\\\"\" : \"\\\"X\\\"\";"},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":"        } else {"},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"            return isEmpty"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":"                    ? \"\\\"\\\"\" : \"\\\"\" + moduleCode + \"\\\"\";"},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":95,"-":2}},{"path":"src/main/java/seedu/address/model/person/timetable/Timetable.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":" * Represents the NUSMODS timetable of the partner"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"public class Timetable {"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    public static final String MESSAGE_TIMETABLE_CONSTRAINTS \u003d \"Short NUSMods timetable URL should be of the format \""},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"            + \"http://modsn.us/code-part \""},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"            + \"1. The URL should start with http://modsn.us/\\n\""},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"            + \"2. The code-part should not be empty and should only contain alphanumeric characters.\";"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    private static final String SHORT_NUSMODS_URL_REGEX \u003d \"http://modsn.us/\";"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"    private static final String CODE_PART_REGEX \u003d \"[\\\\w]+\";"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"    private static final String TIMETABLE_VALIDATION_REGEX \u003d SHORT_NUSMODS_URL_REGEX + CODE_PART_REGEX;"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"    private int currentSemester;"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"    private HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"            daysToTimetableModuleSlots; // HashMap of \u003cDay, Sorted list of TimetableModuleSlots\u003e"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"    private HashMap\u003cString, TimetableModule\u003e moduleCodeToTimetableModule; // contains all TimetableModules"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"    private ArrayList\u003cTimetableModuleSlot\u003e allModulesSlots; //ArrayList containing all TimetableModuleSlots"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"    private String expandedUrl;"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    private String timetableDisplayInfo;"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"    public Timetable(String timetableUrl) {"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(timetableUrl);"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"        checkArgument(isValidTimetable(timetableUrl), MESSAGE_TIMETABLE_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"        this.value \u003d timetableUrl;"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"        setUpTimetable();"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"    private void setUpTimetable() {"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"        TimetableUtil.setUpTimetableInfo(this);"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getter and Setter methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"    public String getExpandedUrl() {"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        return expandedUrl;"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"    public void setExpandedUrl(String expandedUrl) {"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"        this.expandedUrl \u003d expandedUrl;"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"    public void setModuleCodeToTimetableModule(HashMap\u003cString, TimetableModule\u003e moduleCodeToTimetableModule) {"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"        this.moduleCodeToTimetableModule \u003d moduleCodeToTimetableModule;"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"    public HashMap\u003cString, TimetableModule\u003e getModuleCodeToTimetableModule() {"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"        return moduleCodeToTimetableModule;"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"    public int getCurrentSemester() {"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"        return currentSemester;"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"    public void setCurrentSemester(int currentSemester) {"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"        this.currentSemester \u003d currentSemester;"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"    public void setDaysToTimetableModuleSlots("},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"            HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e daysToTimetableModuleSlots) {"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"        this.daysToTimetableModuleSlots \u003d daysToTimetableModuleSlots;"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"    public HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e getDaysToTimetableModuleSlots() {"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"        return daysToTimetableModuleSlots;"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"    public ArrayList\u003cTimetableModuleSlot\u003e getAllModulesSlots() {"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"        return allModulesSlots;"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"    public void setAllModulesSlots(ArrayList\u003cTimetableModuleSlot\u003e allModulesSlots) {"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":"        this.allModulesSlots \u003d allModulesSlots;"},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"    public void setTimetableDisplayInfo(String timetableDisplayInfo) {"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":"        this.timetableDisplayInfo \u003d timetableDisplayInfo;"},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":"    public String getTimetableDisplayInfo() {"},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":"        return timetableDisplayInfo;"},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"     * Returns if a given string is a valid short NUSMods timetable URL."},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"    public static boolean isValidTimetable(String test) {"},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":"        return test.matches(TIMETABLE_VALIDATION_REGEX);"},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":"    public String toString() {"},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"        return value;"},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":"                || (other instanceof Timetable // instanceof handles nulls"},{"lineNumber":111,"author":{"gitID":"marlenekoh"},"content":"                \u0026\u0026 this.value.equals(((Timetable) other).value)); // state check"},{"lineNumber":112,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":105,"-":8}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"    private String personFilePath \u003d \"data/person.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String journalFilePath \u003d \"data/journal.xml\";"},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"    private String nusCouplesName \u003d \"NUSCouples\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String timetablePageHtmlPath \u003d \"data/TimetablePage.html\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private String timetablePageCssPath \u003d \"data/TimetableStyle.css\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private String timetableInfoFilePath \u003d \"data/timetableDisplayInfo\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"    public String getPersonFilePath() {"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"        return personFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getJournalFilePath() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return journalFilePath;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"    public void setPersonFilePath(String personFilePath) {"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"        this.personFilePath \u003d personFilePath;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"    public String getNusCouplesName() {"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"        return nusCouplesName;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"    public void setNusCouplesName(String nusCouplesName) {"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"        this.nusCouplesName \u003d nusCouplesName;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getTimetablePageHtmlPath() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return timetablePageHtmlPath;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getTimetableInfoFilePath() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return timetableInfoFilePath;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getTimetablePageCssPath() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return timetablePageCssPath;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 Objects.equals(personFilePath, o.personFilePath)"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 Objects.equals(journalFilePath, o.journalFilePath)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(nusCouplesName, o.nusCouplesName)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(timetableInfoFilePath, o.timetableInfoFilePath)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(timetablePageHtmlPath, o.timetablePageHtmlPath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":"        return Objects.hash(guiSettings, personFilePath, nusCouplesName);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":"        sb.append(\"\\nLocal person data file location : \" + personFilePath);"},{"lineNumber":97,"author":{"gitID":"traceurgan"},"content":"        sb.append(\"\\nLocal journal data file location : \" + journalFilePath);"},{"lineNumber":98,"author":{"gitID":"traceurgan"},"content":"        sb.append(\"\\nNUSCouples name : \" + nusCouplesName);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":16,"-":86}},{"path":"src/main/java/seedu/address/model/person/appointment/AppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"traceurgan"},"content":"package seedu.address.model.person.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"chenxing1992"},"content":"//@@author chenxing1992"},{"lineNumber":13,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":14,"author":{"gitID":"chenxing1992"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"chenxing1992"},"content":" * A list of appointments of a person"},{"lineNumber":16,"author":{"gitID":"chenxing1992"},"content":" */"},{"lineNumber":17,"author":{"gitID":"chenxing1992"},"content":"public class AppointmentList {"},{"lineNumber":18,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":19,"author":{"gitID":"chenxing1992"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":20,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":21,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"chenxing1992"},"content":"     * Constructs empty appointment list"},{"lineNumber":23,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"chenxing1992"},"content":"    public AppointmentList() {"},{"lineNumber":25,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":26,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":28,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"chenxing1992"},"content":"     * Contructs an appointment list with new appointments"},{"lineNumber":30,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"chenxing1992"},"content":"    public AppointmentList(List\u003cAppointment\u003e appointments) {"},{"lineNumber":32,"author":{"gitID":"chenxing1992"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":33,"author":{"gitID":"chenxing1992"},"content":"        sortAppointmentsInChronologicalOrder(appointments);"},{"lineNumber":34,"author":{"gitID":"chenxing1992"},"content":"        internalList.addAll(appointments);"},{"lineNumber":35,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":36,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":38,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"chenxing1992"},"content":"     * @param appointments list must be sorted"},{"lineNumber":40,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"chenxing1992"},"content":"    private void requireAllSorted(List\u003cAppointment\u003e appointments) {"},{"lineNumber":42,"author":{"gitID":"chenxing1992"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {"},{"lineNumber":43,"author":{"gitID":"chenxing1992"},"content":"            assert !appointments.get(i + 1).getDate().before(appointments.get(i).getDate());"},{"lineNumber":44,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":47,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"chenxing1992"},"content":"     * Sorts all the appointments in the list before adding it to the internal list"},{"lineNumber":49,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"chenxing1992"},"content":"    private void sortAppointmentsInChronologicalOrder(List\u003cAppointment\u003e appointment) {"},{"lineNumber":51,"author":{"gitID":"chenxing1992"},"content":"        requireNonNull(appointment);"},{"lineNumber":52,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"        appointment.sort((o1, o2) -\u003e {"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"            if (o1.getDate().toInstant().isBefore(o2.getDate().toInstant())) {"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"                return -1;"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"            } else {"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"                return 1;"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"        });"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"        requireAllSorted(appointment);"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":64,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"chenxing1992"},"content":"     * Returns true if list contains and equivalent appointment"},{"lineNumber":66,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"chenxing1992"},"content":"    public boolean contains (Appointment appointment) {"},{"lineNumber":68,"author":{"gitID":"chenxing1992"},"content":"        return internalList.contains(appointment);"},{"lineNumber":69,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":71,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"chenxing1992"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"chenxing1992"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"chenxing1992"},"content":"                || (other instanceof AppointmentList // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"chenxing1992"},"content":"                \u0026\u0026 this.internalList.equals(((AppointmentList) other).internalList));"},{"lineNumber":76,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":78,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"chenxing1992"},"content":"     * Returns all appointments in this list as a list."},{"lineNumber":80,"author":{"gitID":"chenxing1992"},"content":"     * This List is mutable and change-insulated against the internal list."},{"lineNumber":81,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"chenxing1992"},"content":"    public List\u003cAppointment\u003e toList() {"},{"lineNumber":83,"author":{"gitID":"chenxing1992"},"content":"        return new ArrayList\u003c\u003e(internalList);"},{"lineNumber":84,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":86,"author":{"gitID":"chenxing1992"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"chenxing1992"},"content":"    public String toString() {"},{"lineNumber":88,"author":{"gitID":"chenxing1992"},"content":"        if (internalList.isEmpty()) {"},{"lineNumber":89,"author":{"gitID":"chenxing1992"},"content":"            return \"No appointment set\";"},{"lineNumber":90,"author":{"gitID":"chenxing1992"},"content":"        } else {"},{"lineNumber":91,"author":{"gitID":"chenxing1992"},"content":"            return internalList.size() \u003d\u003d 1 ? \"\" + internalList.size() + \" appointment set\""},{"lineNumber":92,"author":{"gitID":"chenxing1992"},"content":"                    : \"\" + internalList.size() + \" appointments set\";"},{"lineNumber":93,"author":{"gitID":"chenxing1992"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"chenxing1992"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":96,"author":{"gitID":"chenxing1992"},"content":"}"}],"authorContributionMap":{"chenxing1992":85,"traceurgan":1,"-":10}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"    /** Clears existing backing model for journal and replaces with the provided new data. */"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    void resetJournalData(ReadOnlyJournal newData);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    /** Clears existing backing model for person and replaces with the provided new data. */"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":"    void resetPersonData(ReadOnlyPerson newData);"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"    /** Returns the Person */"},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    ReadOnlyPerson getPartner();"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"    /** Returns the Journal */"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"    ReadOnlyJournal getJournal();"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"    /** Adds the given person */"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"    void addJournalEntry(JournalEntry journalEntry) throws Exception;"},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    boolean contains(Date date);"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"    /** Returns an unmodifiable view of the journal entry list */"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":"    ObservableList\u003cJournalEntry\u003e getJournalEntryList();"},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":"    ObservableList \u003cReadOnlyPerson\u003e getPersonAsList();"},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"    //@@author"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void deletePerson() throws NullPointerException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Edits the given person */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void editPerson(ReadOnlyPerson editedPerson) throws NullPointerException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /** Updates the given person */"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"    Person updatePerson(ReadOnlyPerson editedPerson);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"chenxing1992"},"content":"    //@@author chenxing1992"},{"lineNumber":54,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"chenxing1992"},"content":"     * Adds appointment to a person"},{"lineNumber":56,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"chenxing1992"},"content":"    void addAppointment(ReadOnlyPerson target, Appointment appointment) throws PersonNotFoundException;"},{"lineNumber":58,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":59,"author":{"gitID":"chenxing1992"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"chenxing1992"},"content":"     * Removes appointment from a person"},{"lineNumber":61,"author":{"gitID":"chenxing1992"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"chenxing1992"},"content":"    void removeAppointment(ReadOnlyPerson target, Appointment appointment) throws PersonNotFoundException;"},{"lineNumber":63,"author":{"gitID":"chenxing1992"},"content":""},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"     * Raises an event to indicate the timetable storage has changed."},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"    void indicateTimetableChanged(Timetable timetable);"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"     * Raises an event to hide timetable."},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"    void requestHideTimetable();"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"     * Raises an event to show timetable."},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"    void requestShowTimetable();"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"    int getLast();"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"    JournalEntry getJournalEntry(Date date);"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":84,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"     * Opens an existing journal entry"},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"     * @param date"},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"    void viewJournalEntry(Date date) throws Exception;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chenxing1992":11,"marlenekoh":16,"traceurgan":36,"-":26}},{"path":"src/main/java/seedu/address/model/ReadOnlyJournal.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":" * Unmodifiable view of an journal"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"public interface ReadOnlyJournal {"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":13,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"traceurgan"},"content":"     * Returns an unmodifiable view of the journal entry list."},{"lineNumber":15,"author":{"gitID":"traceurgan"},"content":"     * This list will not contain any duplicate journal entries."},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"    ObservableList\u003cJournalEntry\u003e getJournalEntryList();"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"    int getLast();"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"    JournalEntry getJournalEntry(Date date);"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    boolean containsJournalEntry(Date date) throws Exception;"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":19,"-":5}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.JournalChangedEvent;"},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.model.PersonChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.SaveEntryEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.TimetableChangedEvent;"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.ui.HideTimetableRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.ui.ShowJournalEntryRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowJournalWindowRequestEvent;"},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"import seedu.address.commons.events.ui.ShowTimetableRequestEvent;"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.appointment.Appointment;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.TimetableUtil;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.ui.JournalWindow;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the NUSCouples data."},{"lineNumber":37,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"    private Person partner;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final Journal journal;"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e persons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"    public ModelManager(ReadOnlyPerson partner, ReadOnlyJournal journal, UserPrefs userPrefs) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"        requireAllNonNull(journal, userPrefs);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"        logger.fine("},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"                \"Initializing with partner: \" + partner + \" , journal\" + journal + \" and user prefs \" + userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"        if (partner \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"            partner \u003d null;"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"            this.partner \u003d new Person(partner);"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.journal \u003d new Journal(journal);"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":"        this.persons \u003d FXCollections.observableArrayList();"},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"        if (partner !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":"            persons.add(partner);"},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"        this(null, new Journal(), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"    public void resetJournalData(ReadOnlyJournal newData) {"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":"        journal.resetJournalData(newData);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        indicateJournalChanged();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requestHideTimetable();"},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"    public void resetPersonData(ReadOnlyPerson newData) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        partner \u003d new Person(newData);"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":"        updatePerson(partner);"},{"lineNumber":84,"author":{"gitID":"traceurgan"},"content":"        indicatePersonChanged(partner);"},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"        indicateTimetableChanged(partner.getTimetable());"},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":"    public ReadOnlyPerson getPartner() {"},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"        return partner;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"traceurgan"},"content":"    public ObservableList \u003cReadOnlyPerson\u003e getPersonAsList() {"},{"lineNumber":95,"author":{"gitID":"traceurgan"},"content":"        return persons;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the address book model has changed */"},{"lineNumber":99,"author":{"gitID":"traceurgan"},"content":"    private void indicatePersonChanged(Person person) {"},{"lineNumber":100,"author":{"gitID":"traceurgan"},"content":"        raise(new PersonChangedEvent(person));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"    public void indicateTimetableChanged(Timetable timetable) {"},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":"        raise(new TimetableChangedEvent(timetable));"},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":"    public void requestHideTimetable() {"},{"lineNumber":111,"author":{"gitID":"marlenekoh"},"content":"        raise(new HideTimetableRequestEvent());"},{"lineNumber":112,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":114,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"marlenekoh"},"content":"    public void requestShowTimetable() {"},{"lineNumber":116,"author":{"gitID":"marlenekoh"},"content":"        raise(new ShowTimetableRequestEvent());"},{"lineNumber":117,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":119,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"marlenekoh"},"content":"    public int getLast() {"},{"lineNumber":121,"author":{"gitID":"marlenekoh"},"content":"        return journal.getLast();"},{"lineNumber":122,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":124,"author":{"gitID":"marlenekoh"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson() throws NullPointerException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (partner \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new NullPointerException();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"traceurgan"},"content":"        partner \u003d updatePerson(null);"},{"lineNumber":131,"author":{"gitID":"traceurgan"},"content":"        indicatePersonChanged(partner);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        requestHideTimetable();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"traceurgan"},"content":"    public synchronized void addPerson(ReadOnlyPerson newPerson) throws DuplicatePersonException {"},{"lineNumber":137,"author":{"gitID":"traceurgan"},"content":"        if (this.partner !\u003d null) {"},{"lineNumber":138,"author":{"gitID":"traceurgan"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":139,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"traceurgan"},"content":"        requireAllNonNull(newPerson);"},{"lineNumber":141,"author":{"gitID":"traceurgan"},"content":"        this.partner \u003d (Person) newPerson;"},{"lineNumber":142,"author":{"gitID":"traceurgan"},"content":"        updatePerson(partner);"},{"lineNumber":143,"author":{"gitID":"traceurgan"},"content":"        indicatePersonChanged(partner);"},{"lineNumber":144,"author":{"gitID":"traceurgan"},"content":"        indicateTimetableChanged(partner.getTimetable());"},{"lineNumber":145,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":147,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"traceurgan"},"content":"     * Common method for making changes to person."},{"lineNumber":149,"author":{"gitID":"traceurgan"},"content":"     * */"},{"lineNumber":150,"author":{"gitID":"traceurgan"},"content":"    public Person updatePerson(ReadOnlyPerson editedPerson) {"},{"lineNumber":151,"author":{"gitID":"traceurgan"},"content":"        if (persons.isEmpty()) {"},{"lineNumber":152,"author":{"gitID":"traceurgan"},"content":"            persons.add(editedPerson);"},{"lineNumber":153,"author":{"gitID":"traceurgan"},"content":"        } else if (editedPerson \u003d\u003d null) {"},{"lineNumber":154,"author":{"gitID":"traceurgan"},"content":"            persons.remove(0);"},{"lineNumber":155,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":156,"author":{"gitID":"traceurgan"},"content":"            persons.set(0, editedPerson);"},{"lineNumber":157,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"traceurgan"},"content":"        return (Person) editedPerson;"},{"lineNumber":159,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":161,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"traceurgan"},"content":"    public void editPerson(ReadOnlyPerson editedPerson)"},{"lineNumber":163,"author":{"gitID":"traceurgan"},"content":"            throws NullPointerException {"},{"lineNumber":164,"author":{"gitID":"traceurgan"},"content":"        requireAllNonNull(this.partner, editedPerson);"},{"lineNumber":165,"author":{"gitID":"traceurgan"},"content":"        partner \u003d updatePerson(editedPerson);"},{"lineNumber":166,"author":{"gitID":"traceurgan"},"content":"        indicatePersonChanged(partner);"},{"lineNumber":167,"author":{"gitID":"traceurgan"},"content":"        indicateTimetableChanged(partner.getTimetable());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":171,"author":{"gitID":"marlenekoh"},"content":"    @Subscribe"},{"lineNumber":172,"author":{"gitID":"marlenekoh"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":173,"author":{"gitID":"marlenekoh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":174,"author":{"gitID":"marlenekoh"},"content":"        TimetableUtil.setUpTimetableInfoView(getPartner().getTimetable());"},{"lineNumber":175,"author":{"gitID":"marlenekoh"},"content":"        indicateTimetableChanged(getPartner().getTimetable());"},{"lineNumber":176,"author":{"gitID":"marlenekoh"},"content":"        raise(new ShowTimetableRequestEvent());"},{"lineNumber":177,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":179,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":180,"author":{"gitID":"traceurgan"},"content":"    @Subscribe"},{"lineNumber":181,"author":{"gitID":"traceurgan"},"content":"    public void handleSaveEntryEvent(SaveEntryEvent event) {"},{"lineNumber":182,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"traceurgan"},"content":"            addJournalEntry(event.journalEntry);"},{"lineNumber":184,"author":{"gitID":"traceurgan"},"content":"        } catch (Exception e) {"},{"lineNumber":185,"author":{"gitID":"traceurgan"},"content":"            logger.warning(\"Save failed\");"},{"lineNumber":186,"author":{"gitID":"traceurgan"},"content":"            JournalWindow journalWindow \u003d"},{"lineNumber":187,"author":{"gitID":"traceurgan"},"content":"                    new JournalWindow(event.journalEntry.getDate(), String.format("},{"lineNumber":188,"author":{"gitID":"traceurgan"},"content":"                            \"Save failed. Copy your text and try again.\\n\" + event.journalEntry.getText()));"},{"lineNumber":189,"author":{"gitID":"traceurgan"},"content":"            journalWindow.show();"},{"lineNumber":190,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":193,"author":{"gitID":"traceurgan"},"content":"    @Subscribe"},{"lineNumber":194,"author":{"gitID":"traceurgan"},"content":"    private void handleShowJournalWindowRequestEvent(ShowJournalWindowRequestEvent event) {"},{"lineNumber":195,"author":{"gitID":"traceurgan"},"content":"        JournalWindow journalWindow;"},{"lineNumber":196,"author":{"gitID":"traceurgan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":197,"author":{"gitID":"traceurgan"},"content":"        if ((getJournalEntryList().size() !\u003d 0) \u0026\u0026 (contains(event.date))) {"},{"lineNumber":198,"author":{"gitID":"traceurgan"},"content":"            journalWindow \u003d new JournalWindow("},{"lineNumber":199,"author":{"gitID":"traceurgan"},"content":"                    event.date, getJournal().getJournalEntry(event.date).getText());"},{"lineNumber":200,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":201,"author":{"gitID":"traceurgan"},"content":"            journalWindow \u003d new JournalWindow(event.date);"},{"lineNumber":202,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"traceurgan"},"content":"        journalWindow.show();"},{"lineNumber":204,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"traceurgan"},"content":"     * Adds appointment to a person in the internal list."},{"lineNumber":207,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":208,"author":{"gitID":"traceurgan"},"content":"     * @throws PersonNotFoundException if no such person exist in the internal list"},{"lineNumber":209,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"traceurgan"},"content":"    public void addAppointment(ReadOnlyPerson target, Appointment appointment) throws PersonNotFoundException {"},{"lineNumber":211,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(target);"},{"lineNumber":212,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(appointment);"},{"lineNumber":213,"author":{"gitID":"traceurgan"},"content":"        Person person \u003d (Person) getPartner();"},{"lineNumber":214,"author":{"gitID":"traceurgan"},"content":"        List\u003cAppointment\u003e list \u003d target.getAppointments();"},{"lineNumber":215,"author":{"gitID":"traceurgan"},"content":"        list.add(appointment);"},{"lineNumber":216,"author":{"gitID":"traceurgan"},"content":"        person.setAppointment(list);"},{"lineNumber":217,"author":{"gitID":"traceurgan"},"content":"        indicatePersonChanged(person);"},{"lineNumber":218,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":220,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"traceurgan"},"content":"     * Removes an appointment from a person in the internal list"},{"lineNumber":222,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":223,"author":{"gitID":"traceurgan"},"content":"     * @throws PersonNotFoundException if no such person exist in the internal list"},{"lineNumber":224,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"traceurgan"},"content":"    public void removeAppointment(ReadOnlyPerson target, Appointment appointment)"},{"lineNumber":226,"author":{"gitID":"traceurgan"},"content":"            throws PersonNotFoundException {"},{"lineNumber":227,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(target);"},{"lineNumber":228,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(appointment);"},{"lineNumber":229,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":230,"author":{"gitID":"traceurgan"},"content":"        Person person \u003d (Person) getPartner();"},{"lineNumber":231,"author":{"gitID":"traceurgan"},"content":"        List\u003cAppointment\u003e newApptList \u003d person.getAppointments();"},{"lineNumber":232,"author":{"gitID":"traceurgan"},"content":"        newApptList.remove(appointment);"},{"lineNumber":233,"author":{"gitID":"traceurgan"},"content":"        person.setAppointment(newApptList);"},{"lineNumber":234,"author":{"gitID":"traceurgan"},"content":"        indicatePersonChanged(person);"},{"lineNumber":235,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":236,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":238,"author":{"gitID":"traceurgan"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Journal Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":239,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":240,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":241,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":242,"author":{"gitID":"traceurgan"},"content":"    public ObservableList\u003cJournalEntry\u003e getJournalEntryList() {"},{"lineNumber":243,"author":{"gitID":"traceurgan"},"content":"        return journal.getJournalEntryList();"},{"lineNumber":244,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":246,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":247,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"traceurgan"},"content":"     * Raises an event to indicate the journal model has changed."},{"lineNumber":249,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"traceurgan"},"content":"    private void indicateJournalChanged() {"},{"lineNumber":251,"author":{"gitID":"traceurgan"},"content":"        raise(new JournalChangedEvent(journal));"},{"lineNumber":252,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":254,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"traceurgan"},"content":"    public boolean contains(Date date) {"},{"lineNumber":256,"author":{"gitID":"traceurgan"},"content":"        return journal.containsJournalEntry(date);"},{"lineNumber":257,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":259,"author":{"gitID":"traceurgan"},"content":"    //@@author traceurgan"},{"lineNumber":260,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"traceurgan"},"content":"    public ReadOnlyJournal getJournal() {"},{"lineNumber":262,"author":{"gitID":"traceurgan"},"content":"        return journal;"},{"lineNumber":263,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":265,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":266,"author":{"gitID":"traceurgan"},"content":"    public synchronized void addJournalEntry(JournalEntry journalEntry) throws Exception {"},{"lineNumber":267,"author":{"gitID":"traceurgan"},"content":"        if ((this.getJournalEntryList().size() !\u003d 0) \u0026\u0026 ("},{"lineNumber":268,"author":{"gitID":"traceurgan"},"content":"                contains(journalEntry.getDate()))) {"},{"lineNumber":269,"author":{"gitID":"traceurgan"},"content":"            journal.updateJournalEntry(journalEntry, journal.getLast());"},{"lineNumber":270,"author":{"gitID":"traceurgan"},"content":"            logger.info(\"Journal entry updated.\");"},{"lineNumber":271,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":272,"author":{"gitID":"traceurgan"},"content":"            journal.addJournalEntry(journalEntry);"},{"lineNumber":273,"author":{"gitID":"traceurgan"},"content":"            logger.info(\"Journal entry added.\");"},{"lineNumber":274,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"traceurgan"},"content":"        indicateJournalChanged();"},{"lineNumber":276,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":278,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":279,"author":{"gitID":"traceurgan"},"content":"    public JournalEntry getJournalEntry(Date date) {"},{"lineNumber":280,"author":{"gitID":"traceurgan"},"content":"        return journal.getJournalEntry(date);"},{"lineNumber":281,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":283,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":284,"author":{"gitID":"traceurgan"},"content":"    public void viewJournalEntry(Date date) throws Exception {"},{"lineNumber":285,"author":{"gitID":"traceurgan"},"content":"        if (contains(date)) {"},{"lineNumber":286,"author":{"gitID":"traceurgan"},"content":"            raise (new ShowJournalEntryRequestEvent(journal.getJournalEntry(date)));"},{"lineNumber":287,"author":{"gitID":"traceurgan"},"content":"        } else {"},{"lineNumber":288,"author":{"gitID":"traceurgan"},"content":"            throw new Exception();"},{"lineNumber":289,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":292,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":293,"author":{"gitID":"traceurgan"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":294,"author":{"gitID":"traceurgan"},"content":"        // short circuit if same object"},{"lineNumber":295,"author":{"gitID":"traceurgan"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":296,"author":{"gitID":"traceurgan"},"content":"            return true;"},{"lineNumber":297,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":299,"author":{"gitID":"traceurgan"},"content":"        // instanceof handles nulls"},{"lineNumber":300,"author":{"gitID":"traceurgan"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":301,"author":{"gitID":"traceurgan"},"content":"            return false;"},{"lineNumber":302,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":304,"author":{"gitID":"traceurgan"},"content":"        // state check"},{"lineNumber":305,"author":{"gitID":"traceurgan"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":306,"author":{"gitID":"traceurgan"},"content":"        return ((partner \u003d\u003d null \u0026\u0026 other.partner \u003d\u003d null)"},{"lineNumber":307,"author":{"gitID":"traceurgan"},"content":"                || (partner !\u003d null \u0026\u0026 other.partner !\u003d null \u0026\u0026 partner.equals(other.partner)))"},{"lineNumber":308,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 journal.equals(other.journal);"},{"lineNumber":309,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":311,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"marlenekoh":31,"traceurgan":212,"-":68}},{"path":"src/main/java/seedu/address/model/Journal.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.journalentry.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.UniqueJournalEntryList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"traceurgan"},"content":"//@@author traceurgan"},{"lineNumber":17,"author":{"gitID":"traceurgan"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":" * Wraps all data at the address-book level"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":" */"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"public class Journal implements ReadOnlyJournal {"},{"lineNumber":22,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":23,"author":{"gitID":"traceurgan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Journal.class);"},{"lineNumber":24,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":25,"author":{"gitID":"traceurgan"},"content":"    private final UniqueJournalEntryList journalEntries;"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"    /*"},{"lineNumber":28,"author":{"gitID":"traceurgan"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":30,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"traceurgan"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":32,"author":{"gitID":"traceurgan"},"content":"     *   among constructors."},{"lineNumber":33,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    {"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"        journalEntries \u003d new UniqueJournalEntryList();"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":38,"author":{"gitID":"traceurgan"},"content":"    public Journal() {}"},{"lineNumber":39,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":40,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"     * Creates an Journal using the Journal Entries {@code toBeCopied}"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"traceurgan"},"content":"    public Journal(ReadOnlyJournal toBeCopied) {"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"        resetJournalData(toBeCopied);"},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":"     * Resets the existing data of this {@code Journal} with {@code newData}."},{"lineNumber":50,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"traceurgan"},"content":"    public void resetJournalData(ReadOnlyJournal newData) {"},{"lineNumber":52,"author":{"gitID":"traceurgan"},"content":"        requireNonNull(newData);"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"        List\u003cJournalEntry\u003e syncedJournalEntryList \u003d newData.getJournalEntryList().stream()"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":"                .collect(Collectors.toList());"},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"            setJournalEntries(syncedJournalEntryList);"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"        } catch (Exception e) {"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":"            throw new AssertionError(\"Journal should not have duplicate entries\");"},{"lineNumber":60,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":63,"author":{"gitID":"traceurgan"},"content":"    //// person-level operations"},{"lineNumber":64,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":65,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"traceurgan"},"content":"     * Adds a journal entry to the journal."},{"lineNumber":67,"author":{"gitID":"traceurgan"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"traceurgan"},"content":"     * @throws Exception if an equivalent journal entry already exists."},{"lineNumber":69,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"traceurgan"},"content":"    public void addJournalEntry(JournalEntry j) throws Exception {"},{"lineNumber":71,"author":{"gitID":"traceurgan"},"content":"        journalEntries.add(j);"},{"lineNumber":72,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":74,"author":{"gitID":"traceurgan"},"content":"    public void setJournalEntries(List\u003cJournalEntry\u003e journalEntries) throws Exception {"},{"lineNumber":75,"author":{"gitID":"traceurgan"},"content":"        this.journalEntries.setJournalEntries(journalEntries);"},{"lineNumber":76,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":78,"author":{"gitID":"traceurgan"},"content":"    //// util methods"},{"lineNumber":79,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"    public ObservableList\u003cJournalEntry\u003e getJournalEntryList() {"},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"        return journalEntries.asObservableList();"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":"    public String toString() {"},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":"        return journalEntries.asObservableList().size() + \" journalEntries.\";"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"traceurgan"},"content":"    public int getLast() {"},{"lineNumber":92,"author":{"gitID":"traceurgan"},"content":"        return journalEntries.getLast();"},{"lineNumber":93,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":95,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":"    public JournalEntry getJournalEntry(Date date) {"},{"lineNumber":97,"author":{"gitID":"traceurgan"},"content":"        return journalEntries.getJournalEntry(date);"},{"lineNumber":98,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":100,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"traceurgan"},"content":"    public boolean containsJournalEntry(Date date) {"},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":"        return journalEntries.getJournalMap().containsKey(date);"},{"lineNumber":103,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":105,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"traceurgan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"traceurgan"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"                || (other instanceof Journal // instanceof handles nulls"},{"lineNumber":109,"author":{"gitID":"traceurgan"},"content":"                \u0026\u0026 this.journalEntries.equals(((Journal) other).journalEntries));"},{"lineNumber":110,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":112,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"traceurgan"},"content":"    public int hashCode() {"},{"lineNumber":114,"author":{"gitID":"traceurgan"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":115,"author":{"gitID":"traceurgan"},"content":"        return Objects.hash(journalEntries);"},{"lineNumber":116,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":118,"author":{"gitID":"traceurgan"},"content":"    void updateJournalEntry(JournalEntry journalEntry, int last) {"},{"lineNumber":119,"author":{"gitID":"traceurgan"},"content":"        journalEntries.updateJournalEntry(journalEntry, last);"},{"lineNumber":120,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"traceurgan"},"content":"}"}],"authorContributionMap":{"traceurgan":107,"-":14}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.HttpURLConnection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.ProtocolException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.json.simple.JSONArray;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.json.simple.JSONObject;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.json.simple.parser.JSONParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":" * A class containing utility methods for parsing an NUSMods short URL and setting up a Timetable"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"public class TimetableUtil {"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    public static final int MONDAY_INDEX \u003d 0;"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"    public static final int TUESDAY_INDEX \u003d 1;"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    public static final int WEDNESDAY_INDEX \u003d 2;"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"    public static final int THURSDAY_INDEX \u003d 3;"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"    public static final int FRIDAY_INDEX \u003d 4;"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"    public static final String[] DAYS \u003d {\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\"};"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    public static final String[] TIMES \u003d {"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"        \"0800\", \"0830\", \"0900\", \"0930\", \"1000\", \"1030\", \"1100\", \"1130\","},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"        \"1200\", \"1230\", \"1300\", \"1330\", \"1400\", \"1430\", \"1500\", \"1530\","},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"        \"1600\", \"1630\", \"1700\", \"1730\", \"1800\", \"1830\", \"1900\", \"1930\","},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"        \"2000\", \"2030\", \"2100\", \"2130\", \"2200\", \"2230\", \"2300\", \"2330\""},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"    };"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"    public static final String[] WEEKS \u003d {\"Odd Week\", \"Even Week\", \"Every Week\"};"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_QUESTION_MARK \u003d \"\\\\?\";"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_AMPERSAND \u003d \"\u0026\";"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_EQUALS \u003d \"\u003d\";"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_COMMA \u003d \",\";"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_COLON \u003d \":\";"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"    private static final String REPLACE_NON_DIGIT_CHARACTERS \u003d \"[^0-9]\";"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"    private static final String INVALID_SHORT_URL_RESULT \u003d \"http://modsn.us\";"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"    private static final String MESSAGE_INVALID_SHORT_URL \u003d \"Invalid short NUSMods URL provided.\";"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"    private static final String MESSAGE_INVALID_CLASS_TYPE \u003d \"Invalid class type\";"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"    private static final String MESSAGE_INVALID_DAY_TYPE \u003d \"Invalid day type\";"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"    private static final String HTTP_METHOD_GET \u003d \"GET\";"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"    private static final int HTTP_METHOD_RESPONSE_OK \u003d 200;"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"    private static final int SEM_NUMBER_INDEX \u003d 0;"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"    private static final int MODULE_INFORMATION_INDEX \u003d 1;"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"    private static final int MODULE_CODE_INDEX \u003d 0;"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"    private static final int MODULE_CODE_REMAINING_INDEX \u003d 1;"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"    private static final int LESSON_TYPE_INDEX \u003d 0;"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"    private static final int CLASS_TYPE_INDEX \u003d 1;"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"     * Sets up attributes of a given {@code Timetable}."},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable Timetable to be set up"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"    public static void setUpTimetableInfo(Timetable timetable) {"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"            setExpandedTimetableUrl(timetable);"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"            setSemNumFromExpandedUrl(timetable);"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"            setListOfModules(timetable);"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"            setListOfDays(timetable);"},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"            setTimetableDisplayInfo(timetable);"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"        } catch (ParseException e) {"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(MESSAGE_INVALID_SHORT_URL);"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":"     * Sets up timetable for viewing."},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable to set up"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":"     * @return a timetable containing the timetableDisplayInfo"},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":"    public static Timetable setUpTimetableInfoView(Timetable timetable) {"},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(timetable);"},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e unsortedModuleSlots \u003d"},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setUpUnsortedModuleSlotsForViewing(timetable);"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":"        timetable.setAllModulesSlots(unsortedModuleSlots);"},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e sortedModuleSlots \u003d"},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.sortModuleSlotsByDay(unsortedModuleSlots);"},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"        timetable.setDaysToTimetableModuleSlots(sortedModuleSlots);"},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":"        TimetableUtil.setTimetableDisplayInfo(timetable);"},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":"        return timetable;"},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"     * Sets up timetable for comparing."},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":"     * @param first timetable to compare"},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"     * @param second timetable to compare"},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":"     * @return a timetable containing the combined timetableDisplayInfo"},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":"    public static Timetable setUpTimetableInfoCompare(Timetable first, Timetable second) {"},{"lineNumber":111,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e unsortedModuleSlots \u003d"},{"lineNumber":112,"author":{"gitID":"marlenekoh"},"content":"                setUpUnsortedModuleSlotsForComparing(first, second);"},{"lineNumber":113,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e sortedModuleSlots \u003d"},{"lineNumber":114,"author":{"gitID":"marlenekoh"},"content":"                sortModuleSlotsByDay(unsortedModuleSlots);"},{"lineNumber":115,"author":{"gitID":"marlenekoh"},"content":"        second.setDaysToTimetableModuleSlots(sortedModuleSlots);"},{"lineNumber":116,"author":{"gitID":"marlenekoh"},"content":"        setTimetableDisplayInfo(second);"},{"lineNumber":117,"author":{"gitID":"marlenekoh"},"content":"        return second;"},{"lineNumber":118,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":120,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"marlenekoh"},"content":"     * Sets the expanded URL for {@code timetable}."},{"lineNumber":122,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable Timetable whose expanded URL is to be set"},{"lineNumber":123,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"marlenekoh"},"content":"    public static void setExpandedTimetableUrl(Timetable timetable) throws ParseException {"},{"lineNumber":125,"author":{"gitID":"marlenekoh"},"content":"        String expandedUrl \u003d expandShortTimetableUrl(timetable);"},{"lineNumber":126,"author":{"gitID":"marlenekoh"},"content":"        timetable.setExpandedUrl(expandedUrl);"},{"lineNumber":127,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":129,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"marlenekoh"},"content":"     * Expands short NUSMods timetable URL to a long NUSMods timetable URL from {@timetable}."},{"lineNumber":131,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable whose url is to be parsed"},{"lineNumber":132,"author":{"gitID":"marlenekoh"},"content":"     * @return expanded NUSMods timetable URL"},{"lineNumber":133,"author":{"gitID":"marlenekoh"},"content":"     * @throws ParseException if short url provided is invalid short NUSMods timetable URL"},{"lineNumber":134,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"marlenekoh"},"content":"    private static String expandShortTimetableUrl(Timetable timetable) throws ParseException {"},{"lineNumber":136,"author":{"gitID":"marlenekoh"},"content":"        String timetableUrl \u003d timetable.value;"},{"lineNumber":137,"author":{"gitID":"marlenekoh"},"content":"        checkArgument(Timetable.isValidTimetable(timetableUrl), Timetable.MESSAGE_TIMETABLE_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"marlenekoh"},"content":"        String expandedUrl \u003d null;"},{"lineNumber":139,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"marlenekoh"},"content":"            final URL shortUrl \u003d new URL(timetableUrl);"},{"lineNumber":141,"author":{"gitID":"marlenekoh"},"content":"            final HttpURLConnection urlConnection \u003d (HttpURLConnection) shortUrl.openConnection();"},{"lineNumber":142,"author":{"gitID":"marlenekoh"},"content":"            urlConnection.setInstanceFollowRedirects(false);"},{"lineNumber":143,"author":{"gitID":"marlenekoh"},"content":"            expandedUrl \u003d urlConnection.getHeaderField(\"location\");"},{"lineNumber":144,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":145,"author":{"gitID":"marlenekoh"},"content":"            if (expandedUrl.equals(INVALID_SHORT_URL_RESULT)) {"},{"lineNumber":146,"author":{"gitID":"marlenekoh"},"content":"                throw new ParseException(MESSAGE_INVALID_SHORT_URL);"},{"lineNumber":147,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"marlenekoh"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":149,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"URL provided is malformed\");"},{"lineNumber":150,"author":{"gitID":"marlenekoh"},"content":"        } catch (IOException e) {"},{"lineNumber":151,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Failed to open connection\");"},{"lineNumber":152,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"marlenekoh"},"content":"        return expandedUrl;"},{"lineNumber":154,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":156,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"marlenekoh"},"content":"     * Sets the {@code currentSemester} for {@code timetable}."},{"lineNumber":158,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable Timetable whose {@code currentSemester} is to be set"},{"lineNumber":159,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"marlenekoh"},"content":"    private static void setSemNumFromExpandedUrl(Timetable timetable) {"},{"lineNumber":161,"author":{"gitID":"marlenekoh"},"content":"        timetable.setCurrentSemester(getSemNumFromExpandedUrl(timetable));"},{"lineNumber":162,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":164,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"marlenekoh"},"content":"     * Parses for {@code currentSemester} from expandedUrl of {@code timetable}"},{"lineNumber":166,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable whose {@code currentSemester} is to be set"},{"lineNumber":167,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"marlenekoh"},"content":"    private static int getSemNumFromExpandedUrl(Timetable timetable) {"},{"lineNumber":169,"author":{"gitID":"marlenekoh"},"content":"        String expandedUrl \u003d timetable.getExpandedUrl();"},{"lineNumber":170,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(expandedUrl);"},{"lineNumber":171,"author":{"gitID":"marlenekoh"},"content":"        String[] moduleInformation \u003d expandedUrl.split(SPLIT_QUESTION_MARK);"},{"lineNumber":172,"author":{"gitID":"marlenekoh"},"content":"        return Integer.valueOf(moduleInformation[SEM_NUMBER_INDEX]"},{"lineNumber":173,"author":{"gitID":"marlenekoh"},"content":"                .replaceAll(REPLACE_NON_DIGIT_CHARACTERS, \"\"));"},{"lineNumber":174,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":176,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"marlenekoh"},"content":"     * Sets listOfModules in {@code timetable}"},{"lineNumber":178,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable whose long url is to be split"},{"lineNumber":179,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"marlenekoh"},"content":"    public static void setListOfModules(Timetable timetable) {"},{"lineNumber":181,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, TimetableModule\u003e listOfModules \u003d splitExpandedUrl(timetable);"},{"lineNumber":182,"author":{"gitID":"marlenekoh"},"content":"        timetable.setModuleCodeToTimetableModule(listOfModules);"},{"lineNumber":183,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":185,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"marlenekoh"},"content":"     * Splits expanded NUSMods timetable URL into the different {@code TimetableModule}s."},{"lineNumber":187,"author":{"gitID":"marlenekoh"},"content":"     * Expanded timetable URL is in the format ...?[MODULE_CODE]\u003d[LESSON_TYPE]:[CLASS_NUM]\u0026..."},{"lineNumber":188,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable whose long url is to be split"},{"lineNumber":189,"author":{"gitID":"marlenekoh"},"content":"     * @return HashMap containing list of modules"},{"lineNumber":190,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"marlenekoh"},"content":"    private static HashMap\u003cString, TimetableModule\u003e splitExpandedUrl(Timetable timetable) {"},{"lineNumber":192,"author":{"gitID":"marlenekoh"},"content":"        String expandedUrl \u003d timetable.getExpandedUrl();"},{"lineNumber":193,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(expandedUrl);"},{"lineNumber":194,"author":{"gitID":"marlenekoh"},"content":"        String[] moduleInformation \u003d expandedUrl.split(SPLIT_QUESTION_MARK);"},{"lineNumber":195,"author":{"gitID":"marlenekoh"},"content":"        String[] modules \u003d moduleInformation[MODULE_INFORMATION_INDEX].split(SPLIT_AMPERSAND);"},{"lineNumber":196,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":197,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, TimetableModule\u003e listOfModules \u003d new  HashMap\u003cString, TimetableModule\u003e();"},{"lineNumber":198,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, String\u003e listOfLessons;"},{"lineNumber":199,"author":{"gitID":"marlenekoh"},"content":"        String moduleCode;"},{"lineNumber":200,"author":{"gitID":"marlenekoh"},"content":"        String lessonType;"},{"lineNumber":201,"author":{"gitID":"marlenekoh"},"content":"        String classType;"},{"lineNumber":202,"author":{"gitID":"marlenekoh"},"content":"        String[] lessons;"},{"lineNumber":203,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":204,"author":{"gitID":"marlenekoh"},"content":"        for (String currentModule : modules) {"},{"lineNumber":205,"author":{"gitID":"marlenekoh"},"content":"            listOfLessons \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":206,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":207,"author":{"gitID":"marlenekoh"},"content":"            moduleCode \u003d currentModule.split(SPLIT_EQUALS)[MODULE_CODE_INDEX];"},{"lineNumber":208,"author":{"gitID":"marlenekoh"},"content":"            lessons \u003d currentModule.split(SPLIT_EQUALS)[MODULE_CODE_REMAINING_INDEX].split(SPLIT_COMMA);"},{"lineNumber":209,"author":{"gitID":"marlenekoh"},"content":"            for (String currLesson : lessons) {"},{"lineNumber":210,"author":{"gitID":"marlenekoh"},"content":"                lessonType \u003d currLesson.split(SPLIT_COLON)[LESSON_TYPE_INDEX];"},{"lineNumber":211,"author":{"gitID":"marlenekoh"},"content":"                classType \u003d currLesson.split(SPLIT_COLON)[CLASS_TYPE_INDEX];"},{"lineNumber":212,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":213,"author":{"gitID":"marlenekoh"},"content":"                try {"},{"lineNumber":214,"author":{"gitID":"marlenekoh"},"content":"                    listOfLessons.put(convertLessonType(lessonType), classType);"},{"lineNumber":215,"author":{"gitID":"marlenekoh"},"content":"                } catch (IllegalValueException e) {"},{"lineNumber":216,"author":{"gitID":"marlenekoh"},"content":"                    logger.warning(\"Unable to convert lesson type\");"},{"lineNumber":217,"author":{"gitID":"marlenekoh"},"content":"                }"},{"lineNumber":218,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":219,"author":{"gitID":"marlenekoh"},"content":"            listOfModules.put(moduleCode, new TimetableModule(moduleCode, listOfLessons));"},{"lineNumber":220,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"marlenekoh"},"content":"        return listOfModules;"},{"lineNumber":222,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":224,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"marlenekoh"},"content":"     * Sets {@code listOfDays} in {@code timetable} given using the NUSMods short url"},{"lineNumber":226,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable timetable to set List of days"},{"lineNumber":227,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"marlenekoh"},"content":"    public static void setListOfDays(Timetable timetable) {"},{"lineNumber":229,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(timetable.getModuleCodeToTimetableModule());"},{"lineNumber":230,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e allTimetableModuleSlots \u003d retrieveModuleSlotsFromApi(timetable);"},{"lineNumber":231,"author":{"gitID":"marlenekoh"},"content":"        timetable.setAllModulesSlots(allTimetableModuleSlots);"},{"lineNumber":232,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e sortedTimetableModuleSlots \u003d"},{"lineNumber":233,"author":{"gitID":"marlenekoh"},"content":"                sortModuleSlotsByDay(allTimetableModuleSlots);"},{"lineNumber":234,"author":{"gitID":"marlenekoh"},"content":"        timetable.setDaysToTimetableModuleSlots(sortedTimetableModuleSlots);"},{"lineNumber":235,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":237,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"marlenekoh"},"content":"     * Sets {@code timetableDisplayInfo} in {@code timetable} given using the {@code listOfDays}"},{"lineNumber":239,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable timetable to set timetableDisplayInfo"},{"lineNumber":240,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"marlenekoh"},"content":"    public static void setTimetableDisplayInfo(Timetable timetable) {"},{"lineNumber":242,"author":{"gitID":"marlenekoh"},"content":"        timetable.setTimetableDisplayInfo(formatTimetableDisplayInfo("},{"lineNumber":243,"author":{"gitID":"marlenekoh"},"content":"                convertListOfDaysToString(timetable.getDaysToTimetableModuleSlots())));"},{"lineNumber":244,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":246,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"marlenekoh"},"content":"     * Formats timetable display info string for use in {@code TimetablePage.html}."},{"lineNumber":248,"author":{"gitID":"marlenekoh"},"content":"     * @param timetableDisplayInfo the String to format"},{"lineNumber":249,"author":{"gitID":"marlenekoh"},"content":"     * @return the formatted String"},{"lineNumber":250,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"marlenekoh"},"content":"    private static String formatTimetableDisplayInfo(String timetableDisplayInfo) {"},{"lineNumber":252,"author":{"gitID":"marlenekoh"},"content":"        return \"timetable \u003d [\" + timetableDisplayInfo + \"];\\n\";"},{"lineNumber":253,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":255,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"marlenekoh"},"content":"     * Converts the {@code listOfDays} into a String object for parsing."},{"lineNumber":257,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"marlenekoh"},"content":"    private static String convertListOfDaysToString(HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e listOfDays) {"},{"lineNumber":259,"author":{"gitID":"marlenekoh"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":260,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":261,"author":{"gitID":"marlenekoh"},"content":"        for (int i \u003d 0; i \u003c TIMES.length; i++) {"},{"lineNumber":262,"author":{"gitID":"marlenekoh"},"content":"            if (i \u003c TIMES.length - 1) {"},{"lineNumber":263,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[MONDAY_INDEX]).get(i).toString());"},{"lineNumber":264,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":265,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[TUESDAY_INDEX]).get(i).toString());"},{"lineNumber":266,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":267,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[WEDNESDAY_INDEX]).get(i).toString());"},{"lineNumber":268,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":269,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[THURSDAY_INDEX]).get(i).toString());"},{"lineNumber":270,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":271,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[FRIDAY_INDEX]).get(i).toString());"},{"lineNumber":272,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":273,"author":{"gitID":"marlenekoh"},"content":"            } else {"},{"lineNumber":274,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[MONDAY_INDEX]).get(i).toString());"},{"lineNumber":275,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":276,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[TUESDAY_INDEX]).get(i).toString());"},{"lineNumber":277,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":278,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[WEDNESDAY_INDEX]).get(i).toString());"},{"lineNumber":279,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":280,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[THURSDAY_INDEX]).get(i).toString());"},{"lineNumber":281,"author":{"gitID":"marlenekoh"},"content":"                sb.append(\", \");"},{"lineNumber":282,"author":{"gitID":"marlenekoh"},"content":"                sb.append(listOfDays.get(DAYS[FRIDAY_INDEX]).get(i).toString());"},{"lineNumber":283,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":284,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"marlenekoh"},"content":"        return sb.toString();"},{"lineNumber":286,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":288,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"marlenekoh"},"content":"     * Gets module information from nusmods api for the all modules in listOfModules in {@code timetable}."},{"lineNumber":290,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable containing list of all modules"},{"lineNumber":291,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"marlenekoh"},"content":"    private static ArrayList\u003cTimetableModuleSlot\u003e retrieveModuleSlotsFromApi(Timetable timetable) {"},{"lineNumber":293,"author":{"gitID":"marlenekoh"},"content":"        String currentModuleInfo;"},{"lineNumber":294,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e allTimetableModuleSlots \u003d new ArrayList\u003cTimetableModuleSlot\u003e();"},{"lineNumber":295,"author":{"gitID":"marlenekoh"},"content":"        Set\u003cMap.Entry\u003cString, TimetableModule\u003e\u003e entrySet \u003d timetable.getModuleCodeToTimetableModule().entrySet();"},{"lineNumber":296,"author":{"gitID":"marlenekoh"},"content":"        String acadYear \u003d getAcadYear();"},{"lineNumber":297,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":298,"author":{"gitID":"marlenekoh"},"content":"        for (Map.Entry\u003cString, TimetableModule\u003e currentModule : entrySet) {"},{"lineNumber":299,"author":{"gitID":"marlenekoh"},"content":"            currentModuleInfo \u003d getJsonContentsFromNusModsApiForModule(acadYear,"},{"lineNumber":300,"author":{"gitID":"marlenekoh"},"content":"                    Integer.toString(timetable.getCurrentSemester()), currentModule.getKey());"},{"lineNumber":301,"author":{"gitID":"marlenekoh"},"content":"            allTimetableModuleSlots.addAll(getAllTimetableModuleSlots(currentModuleInfo, timetable,"},{"lineNumber":302,"author":{"gitID":"marlenekoh"},"content":"                    currentModule.getKey()));"},{"lineNumber":303,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"marlenekoh"},"content":"        return allTimetableModuleSlots;"},{"lineNumber":305,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":307,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":308,"author":{"gitID":"marlenekoh"},"content":"     * Calculates the current Academic Year for NUS students."},{"lineNumber":309,"author":{"gitID":"marlenekoh"},"content":"     * @return a String containing the current academic year."},{"lineNumber":310,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":311,"author":{"gitID":"marlenekoh"},"content":"    private static String getAcadYear() {"},{"lineNumber":312,"author":{"gitID":"marlenekoh"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":313,"author":{"gitID":"marlenekoh"},"content":"        String acadYear;"},{"lineNumber":314,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":315,"author":{"gitID":"marlenekoh"},"content":"        if (currentDate.getMonthValue() \u003c\u003d 6) {"},{"lineNumber":316,"author":{"gitID":"marlenekoh"},"content":"            acadYear \u003d (currentDate.getYear() - 1) + \"-\" + (currentDate.getYear());"},{"lineNumber":317,"author":{"gitID":"marlenekoh"},"content":"        } else {"},{"lineNumber":318,"author":{"gitID":"marlenekoh"},"content":"            acadYear \u003d currentDate.getYear() + \"-\" + (currentDate.getYear() + 1);"},{"lineNumber":319,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":320,"author":{"gitID":"marlenekoh"},"content":"        return acadYear;"},{"lineNumber":321,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":323,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":324,"author":{"gitID":"marlenekoh"},"content":"     * Retrieves json file from NUSMods api and converts to String"},{"lineNumber":325,"author":{"gitID":"marlenekoh"},"content":"     * @param acadYear String representing academic year"},{"lineNumber":326,"author":{"gitID":"marlenekoh"},"content":"     * @param semNum String representing semester number"},{"lineNumber":327,"author":{"gitID":"marlenekoh"},"content":"     * @param moduleCode String representing module code"},{"lineNumber":328,"author":{"gitID":"marlenekoh"},"content":"     * Format: http://api.nusmods.com/[acadYear]/[semNum]/modules/[moduleCode].json"},{"lineNumber":329,"author":{"gitID":"marlenekoh"},"content":"     * e.g. http://api.nusmods.com/2017-2018/2/modules/CS3241.json"},{"lineNumber":330,"author":{"gitID":"marlenekoh"},"content":"     * @return String containing contents of json file"},{"lineNumber":331,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":332,"author":{"gitID":"marlenekoh"},"content":"    private static String getJsonContentsFromNusModsApiForModule(String acadYear, String semNum, String moduleCode) {"},{"lineNumber":333,"author":{"gitID":"marlenekoh"},"content":"        String contents \u003d null;"},{"lineNumber":334,"author":{"gitID":"marlenekoh"},"content":"        String nusmodsApiUrlString \u003d \"http://api.nusmods.com/\" + acadYear + \"/\" + semNum + \"/modules/\" + moduleCode"},{"lineNumber":335,"author":{"gitID":"marlenekoh"},"content":"                + \".json\";"},{"lineNumber":336,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":337,"author":{"gitID":"marlenekoh"},"content":"            URL nusmodsApiUrl \u003d new URL(nusmodsApiUrlString);"},{"lineNumber":338,"author":{"gitID":"marlenekoh"},"content":"            HttpURLConnection urlConnection \u003d (HttpURLConnection) nusmodsApiUrl.openConnection();"},{"lineNumber":339,"author":{"gitID":"marlenekoh"},"content":"            urlConnection.setRequestMethod(HTTP_METHOD_GET);"},{"lineNumber":340,"author":{"gitID":"marlenekoh"},"content":"            int responseCode \u003d urlConnection.getResponseCode();"},{"lineNumber":341,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":342,"author":{"gitID":"marlenekoh"},"content":"            if (responseCode \u003d\u003d HTTP_METHOD_RESPONSE_OK) {"},{"lineNumber":343,"author":{"gitID":"marlenekoh"},"content":"                contents \u003d readStream(urlConnection.getInputStream());"},{"lineNumber":344,"author":{"gitID":"marlenekoh"},"content":"            } else {"},{"lineNumber":345,"author":{"gitID":"marlenekoh"},"content":"                contents \u003d \"Error in accessing API - \" + readStream(urlConnection.getErrorStream());"},{"lineNumber":346,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":347,"author":{"gitID":"marlenekoh"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":348,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"URL provided is malformed\");"},{"lineNumber":349,"author":{"gitID":"marlenekoh"},"content":"        } catch (ProtocolException e) {"},{"lineNumber":350,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Protocol exception\");"},{"lineNumber":351,"author":{"gitID":"marlenekoh"},"content":"        } catch (IOException e) {"},{"lineNumber":352,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Failed to open connection\");"},{"lineNumber":353,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":354,"author":{"gitID":"marlenekoh"},"content":"        return contents;"},{"lineNumber":355,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":357,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":358,"author":{"gitID":"marlenekoh"},"content":"     * Read the responded result and stores in a String"},{"lineNumber":359,"author":{"gitID":"marlenekoh"},"content":"     * @param inputStream from nusmods api"},{"lineNumber":360,"author":{"gitID":"marlenekoh"},"content":"     * @return String containing contents of nusmods api"},{"lineNumber":361,"author":{"gitID":"marlenekoh"},"content":"     * @throws IOException from readLine()"},{"lineNumber":362,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":363,"author":{"gitID":"marlenekoh"},"content":"    private static String readStream(InputStream inputStream) throws IOException {"},{"lineNumber":364,"author":{"gitID":"marlenekoh"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(inputStream));"},{"lineNumber":365,"author":{"gitID":"marlenekoh"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":366,"author":{"gitID":"marlenekoh"},"content":"        String inputLine;"},{"lineNumber":367,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":368,"author":{"gitID":"marlenekoh"},"content":"        while ((inputLine \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":369,"author":{"gitID":"marlenekoh"},"content":"            stringBuilder.append(inputLine);"},{"lineNumber":370,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":371,"author":{"gitID":"marlenekoh"},"content":"        reader.close();"},{"lineNumber":372,"author":{"gitID":"marlenekoh"},"content":"        return stringBuilder.toString();"},{"lineNumber":373,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":375,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":376,"author":{"gitID":"marlenekoh"},"content":"     * Parses contents of json file contents result from {@code readStream()}"},{"lineNumber":377,"author":{"gitID":"marlenekoh"},"content":"     * @param contents contents of json file in String"},{"lineNumber":378,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable timetable to set list of modules slots"},{"lineNumber":379,"author":{"gitID":"marlenekoh"},"content":"     * @param moduleCode current module"},{"lineNumber":380,"author":{"gitID":"marlenekoh"},"content":"     * @return all TimetableModuleSlots for the timetable"},{"lineNumber":381,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":382,"author":{"gitID":"marlenekoh"},"content":"    public static ArrayList\u003cTimetableModuleSlot\u003e getAllTimetableModuleSlots(String contents, Timetable timetable,"},{"lineNumber":383,"author":{"gitID":"marlenekoh"},"content":"                                                               String moduleCode) {"},{"lineNumber":384,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(timetable.getModuleCodeToTimetableModule());"},{"lineNumber":385,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":386,"author":{"gitID":"marlenekoh"},"content":"        JSONObject jsonObject \u003d null;"},{"lineNumber":387,"author":{"gitID":"marlenekoh"},"content":"        JSONParser parser \u003d new JSONParser();"},{"lineNumber":388,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e listOfModuleSlots \u003d new ArrayList\u003cTimetableModuleSlot\u003e();"},{"lineNumber":389,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":390,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":391,"author":{"gitID":"marlenekoh"},"content":"            Object obj \u003d parser.parse(contents);"},{"lineNumber":392,"author":{"gitID":"marlenekoh"},"content":"            jsonObject \u003d (JSONObject) obj;"},{"lineNumber":393,"author":{"gitID":"marlenekoh"},"content":"            JSONArray arrOfClassInformation \u003d null;"},{"lineNumber":394,"author":{"gitID":"marlenekoh"},"content":"            Object object \u003d jsonObject.get(\"Timetable\");"},{"lineNumber":395,"author":{"gitID":"marlenekoh"},"content":"            arrOfClassInformation \u003d (JSONArray) object;"},{"lineNumber":396,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":397,"author":{"gitID":"marlenekoh"},"content":"            String tempLessonType;"},{"lineNumber":398,"author":{"gitID":"marlenekoh"},"content":"            String tempClassType;"},{"lineNumber":399,"author":{"gitID":"marlenekoh"},"content":"            String tempWeekFreq;"},{"lineNumber":400,"author":{"gitID":"marlenekoh"},"content":"            String tempDay;"},{"lineNumber":401,"author":{"gitID":"marlenekoh"},"content":"            String tempStartTime;"},{"lineNumber":402,"author":{"gitID":"marlenekoh"},"content":"            String tempEndTime;"},{"lineNumber":403,"author":{"gitID":"marlenekoh"},"content":"            String tempVenue;"},{"lineNumber":404,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":405,"author":{"gitID":"marlenekoh"},"content":"            HashMap\u003cString, TimetableModule\u003e listOfModules \u003d timetable.getModuleCodeToTimetableModule();"},{"lineNumber":406,"author":{"gitID":"marlenekoh"},"content":"            TimetableModule timetableModule \u003d listOfModules.get(moduleCode);"},{"lineNumber":407,"author":{"gitID":"marlenekoh"},"content":"            HashMap\u003cString, String\u003e listOfLessons \u003d timetableModule.getListOfLessons();"},{"lineNumber":408,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":409,"author":{"gitID":"marlenekoh"},"content":"            for (Object t : arrOfClassInformation) {"},{"lineNumber":410,"author":{"gitID":"marlenekoh"},"content":"                tempLessonType \u003d ((JSONObject) t).get(\"LessonType\").toString();"},{"lineNumber":411,"author":{"gitID":"marlenekoh"},"content":"                tempClassType \u003d ((JSONObject) t).get(\"ClassNo\").toString();"},{"lineNumber":412,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":413,"author":{"gitID":"marlenekoh"},"content":"                if (listOfLessons.get(tempLessonType).equals(tempClassType)) {"},{"lineNumber":414,"author":{"gitID":"marlenekoh"},"content":"                    tempWeekFreq \u003d ((JSONObject) t).get(\"WeekText\").toString();"},{"lineNumber":415,"author":{"gitID":"marlenekoh"},"content":"                    tempDay \u003d ((JSONObject) t).get(\"DayText\").toString();"},{"lineNumber":416,"author":{"gitID":"marlenekoh"},"content":"                    tempStartTime \u003d ((JSONObject) t).get(\"StartTime\").toString();"},{"lineNumber":417,"author":{"gitID":"marlenekoh"},"content":"                    tempEndTime \u003d ((JSONObject) t).get(\"EndTime\").toString();"},{"lineNumber":418,"author":{"gitID":"marlenekoh"},"content":"                    tempVenue \u003d ((JSONObject) t).get(\"Venue\").toString();"},{"lineNumber":419,"author":{"gitID":"marlenekoh"},"content":"                    listOfModuleSlots.add(new TimetableModuleSlot(moduleCode, tempLessonType, tempClassType,"},{"lineNumber":420,"author":{"gitID":"marlenekoh"},"content":"                            tempWeekFreq, tempDay, tempVenue, tempStartTime, tempEndTime));"},{"lineNumber":421,"author":{"gitID":"marlenekoh"},"content":"                }"},{"lineNumber":422,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":423,"author":{"gitID":"marlenekoh"},"content":"        } catch (Exception e) {"},{"lineNumber":424,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Exception caught in parsing JSONObject\");"},{"lineNumber":425,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":426,"author":{"gitID":"marlenekoh"},"content":"        return listOfModuleSlots;"},{"lineNumber":427,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":428,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":429,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":430,"author":{"gitID":"marlenekoh"},"content":"     * Processes the given timetable for viewing."},{"lineNumber":431,"author":{"gitID":"marlenekoh"},"content":"     *"},{"lineNumber":432,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable to view"},{"lineNumber":433,"author":{"gitID":"marlenekoh"},"content":"     * @return an ArrayList containing the {@code TimetableModuleSlots} from the Timetable."},{"lineNumber":434,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":435,"author":{"gitID":"marlenekoh"},"content":"    public static ArrayList\u003cTimetableModuleSlot\u003e setUpUnsortedModuleSlotsForViewing(Timetable timetable) {"},{"lineNumber":436,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e allUnsortedModulesSlots \u003d timetable.getAllModulesSlots();"},{"lineNumber":437,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":438,"author":{"gitID":"marlenekoh"},"content":"        for (TimetableModuleSlot t : allUnsortedModulesSlots) {"},{"lineNumber":439,"author":{"gitID":"marlenekoh"},"content":"            t.setComparing(false);"},{"lineNumber":440,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":441,"author":{"gitID":"marlenekoh"},"content":"        return allUnsortedModulesSlots;"},{"lineNumber":442,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":444,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":445,"author":{"gitID":"marlenekoh"},"content":"     * Combines the two lists of {@code TimetableModuleSlots} from each timetable and process them for comparing."},{"lineNumber":446,"author":{"gitID":"marlenekoh"},"content":"     *"},{"lineNumber":447,"author":{"gitID":"marlenekoh"},"content":"     * @param first  Timetable to compare"},{"lineNumber":448,"author":{"gitID":"marlenekoh"},"content":"     * @param second Timetable to compare"},{"lineNumber":449,"author":{"gitID":"marlenekoh"},"content":"     * @return an ArrayList containing the combined {@code TimetableModuleSlots} from both Timetables."},{"lineNumber":450,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":451,"author":{"gitID":"marlenekoh"},"content":"    public static ArrayList\u003cTimetableModuleSlot\u003e setUpUnsortedModuleSlotsForComparing(Timetable first,"},{"lineNumber":452,"author":{"gitID":"marlenekoh"},"content":"                                                                                      Timetable second) {"},{"lineNumber":453,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e allUnsortedModulesSlots \u003d new ArrayList\u003cTimetableModuleSlot\u003e();"},{"lineNumber":454,"author":{"gitID":"marlenekoh"},"content":"        allUnsortedModulesSlots.addAll(first.getAllModulesSlots());"},{"lineNumber":455,"author":{"gitID":"marlenekoh"},"content":"        allUnsortedModulesSlots.addAll(second.getAllModulesSlots());"},{"lineNumber":456,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":457,"author":{"gitID":"marlenekoh"},"content":"        for (TimetableModuleSlot t : allUnsortedModulesSlots) {"},{"lineNumber":458,"author":{"gitID":"marlenekoh"},"content":"            t.setComparing(true);"},{"lineNumber":459,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":460,"author":{"gitID":"marlenekoh"},"content":"        return allUnsortedModulesSlots;"},{"lineNumber":461,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":462,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":463,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":464,"author":{"gitID":"marlenekoh"},"content":"     * Sorts TimetableModuleSlots"},{"lineNumber":465,"author":{"gitID":"marlenekoh"},"content":"     *"},{"lineNumber":466,"author":{"gitID":"marlenekoh"},"content":"     * @return HashMap of {@code Day}, {@code list of TimetableModuleSlots sorted by time}"},{"lineNumber":467,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":468,"author":{"gitID":"marlenekoh"},"content":"    public static HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e sortModuleSlotsByDay("},{"lineNumber":469,"author":{"gitID":"marlenekoh"},"content":"            ArrayList\u003cTimetableModuleSlot\u003e unsortedTimetableModuleSlots) {"},{"lineNumber":470,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cArrayList\u003cTimetableModuleSlot\u003e\u003e listOfDays \u003d new ArrayList\u003cArrayList\u003cTimetableModuleSlot\u003e\u003e();"},{"lineNumber":471,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":472,"author":{"gitID":"marlenekoh"},"content":"        // add ArrayList for Monday to Friday"},{"lineNumber":473,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":474,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":475,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":476,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":477,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":478,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":479,"author":{"gitID":"marlenekoh"},"content":"        for (TimetableModuleSlot t : unsortedTimetableModuleSlots) {"},{"lineNumber":480,"author":{"gitID":"marlenekoh"},"content":"            try {"},{"lineNumber":481,"author":{"gitID":"marlenekoh"},"content":"                listOfDays.get(convertDayToInteger(t.getDay())).add(t);"},{"lineNumber":482,"author":{"gitID":"marlenekoh"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":483,"author":{"gitID":"marlenekoh"},"content":"                logger.warning(\"Invalid day entered\");"},{"lineNumber":484,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":485,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":486,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":487,"author":{"gitID":"marlenekoh"},"content":"        for (ArrayList\u003cTimetableModuleSlot\u003e t : listOfDays) {"},{"lineNumber":488,"author":{"gitID":"marlenekoh"},"content":"            ArrayList\u003cTimetableModuleSlot\u003e temp \u003d sortModuleSlotsByTime(t);"},{"lineNumber":489,"author":{"gitID":"marlenekoh"},"content":"            t.clear();"},{"lineNumber":490,"author":{"gitID":"marlenekoh"},"content":"            t.addAll(temp);"},{"lineNumber":491,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":492,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":493,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e sortedTimetableModuleSlots \u003d"},{"lineNumber":494,"author":{"gitID":"marlenekoh"},"content":"                new HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e();"},{"lineNumber":495,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(DAYS[MONDAY_INDEX], listOfDays.get(MONDAY_INDEX));"},{"lineNumber":496,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(DAYS[TUESDAY_INDEX], listOfDays.get(TUESDAY_INDEX));"},{"lineNumber":497,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(DAYS[WEDNESDAY_INDEX], listOfDays.get(WEDNESDAY_INDEX));"},{"lineNumber":498,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(DAYS[THURSDAY_INDEX], listOfDays.get(THURSDAY_INDEX));"},{"lineNumber":499,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(DAYS[FRIDAY_INDEX], listOfDays.get(FRIDAY_INDEX));"},{"lineNumber":500,"author":{"gitID":"marlenekoh"},"content":"        return sortedTimetableModuleSlots;"},{"lineNumber":501,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":502,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":503,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":504,"author":{"gitID":"marlenekoh"},"content":"     * Sorts Module Slots by time"},{"lineNumber":505,"author":{"gitID":"marlenekoh"},"content":"     * @param timetableModuleSlots"},{"lineNumber":506,"author":{"gitID":"marlenekoh"},"content":"     * @return a list of sorted TimetableModuleSlots"},{"lineNumber":507,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":508,"author":{"gitID":"marlenekoh"},"content":"    private static ArrayList\u003cTimetableModuleSlot\u003e sortModuleSlotsByTime("},{"lineNumber":509,"author":{"gitID":"marlenekoh"},"content":"            ArrayList\u003cTimetableModuleSlot\u003e timetableModuleSlots) {"},{"lineNumber":510,"author":{"gitID":"marlenekoh"},"content":"        Collections.sort(timetableModuleSlots);"},{"lineNumber":511,"author":{"gitID":"marlenekoh"},"content":"        return splitIntoHalfHourSlots(timetableModuleSlots);"},{"lineNumber":512,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":513,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":514,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":515,"author":{"gitID":"marlenekoh"},"content":"     * Splits each TimetableModuleSlots into half hour slots and adds empty slots to represent breaks"},{"lineNumber":516,"author":{"gitID":"marlenekoh"},"content":"     *"},{"lineNumber":517,"author":{"gitID":"marlenekoh"},"content":"     * @param timetableModuleSlots the ArrayList to split into half hour slots"},{"lineNumber":518,"author":{"gitID":"marlenekoh"},"content":"     * @return an ArrayList of TimetableModuleSlot with each slot representing one half-hour slot in the timetable"},{"lineNumber":519,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":520,"author":{"gitID":"marlenekoh"},"content":"    private static ArrayList\u003cTimetableModuleSlot\u003e splitIntoHalfHourSlots("},{"lineNumber":521,"author":{"gitID":"marlenekoh"},"content":"            ArrayList\u003cTimetableModuleSlot\u003e timetableModuleSlots) {"},{"lineNumber":522,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e filled \u003d new ArrayList\u003cTimetableModuleSlot\u003e();"},{"lineNumber":523,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":524,"author":{"gitID":"marlenekoh"},"content":"        int j \u003d 0;"},{"lineNumber":525,"author":{"gitID":"marlenekoh"},"content":"        for (int i \u003d 0; i \u003c TIMES.length; i++) {"},{"lineNumber":526,"author":{"gitID":"marlenekoh"},"content":"            if (j \u003c timetableModuleSlots.size() \u0026\u0026 timetableModuleSlots.get(j).getStartTime().equals(TIMES[i])) {"},{"lineNumber":527,"author":{"gitID":"marlenekoh"},"content":"                while (!timetableModuleSlots.get(j).getEndTime().equals(TIMES[i])) {"},{"lineNumber":528,"author":{"gitID":"marlenekoh"},"content":"                    filled.add(timetableModuleSlots.get(j));"},{"lineNumber":529,"author":{"gitID":"marlenekoh"},"content":"                    i++;"},{"lineNumber":530,"author":{"gitID":"marlenekoh"},"content":"                }"},{"lineNumber":531,"author":{"gitID":"marlenekoh"},"content":"                j++;"},{"lineNumber":532,"author":{"gitID":"marlenekoh"},"content":"                i--;"},{"lineNumber":533,"author":{"gitID":"marlenekoh"},"content":"            } else if (j \u003c timetableModuleSlots.size()"},{"lineNumber":534,"author":{"gitID":"marlenekoh"},"content":"                    \u0026\u0026 Integer.valueOf(timetableModuleSlots.get(j).getStartTime()) \u003c Integer.valueOf(TIMES[i])"},{"lineNumber":535,"author":{"gitID":"marlenekoh"},"content":"                    \u0026\u0026 Integer.valueOf(timetableModuleSlots.get(j).getEndTime()) \u003e Integer.valueOf(TIMES[i])) {"},{"lineNumber":536,"author":{"gitID":"marlenekoh"},"content":"                while (!timetableModuleSlots.get(j).getEndTime().equals(TIMES[i])) {"},{"lineNumber":537,"author":{"gitID":"marlenekoh"},"content":"                    filled.add(timetableModuleSlots.get(j));"},{"lineNumber":538,"author":{"gitID":"marlenekoh"},"content":"                    i++;"},{"lineNumber":539,"author":{"gitID":"marlenekoh"},"content":"                }"},{"lineNumber":540,"author":{"gitID":"marlenekoh"},"content":"                j++;"},{"lineNumber":541,"author":{"gitID":"marlenekoh"},"content":"                i--;"},{"lineNumber":542,"author":{"gitID":"marlenekoh"},"content":"            } else {"},{"lineNumber":543,"author":{"gitID":"marlenekoh"},"content":"                filled.add(new TimetableModuleSlot());"},{"lineNumber":544,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":545,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":546,"author":{"gitID":"marlenekoh"},"content":"        return filled;"},{"lineNumber":547,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":548,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":549,"author":{"gitID":"marlenekoh"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Helper methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":550,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":551,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":552,"author":{"gitID":"marlenekoh"},"content":"     * Converts shortened lesson type from URL to long lesson type in API"},{"lineNumber":553,"author":{"gitID":"marlenekoh"},"content":"     * @param lessonType shortened lesson type from URL"},{"lineNumber":554,"author":{"gitID":"marlenekoh"},"content":"     * @return long lesson type in API"},{"lineNumber":555,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":556,"author":{"gitID":"marlenekoh"},"content":"    private static String convertLessonType(String lessonType) throws IllegalValueException {"},{"lineNumber":557,"author":{"gitID":"marlenekoh"},"content":"        switch (lessonType) {"},{"lineNumber":558,"author":{"gitID":"marlenekoh"},"content":"        case \"LEC\":"},{"lineNumber":559,"author":{"gitID":"marlenekoh"},"content":"            return \"Lecture\";"},{"lineNumber":560,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":561,"author":{"gitID":"marlenekoh"},"content":"        case \"TUT\":"},{"lineNumber":562,"author":{"gitID":"marlenekoh"},"content":"            return \"Tutorial\";"},{"lineNumber":563,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":564,"author":{"gitID":"marlenekoh"},"content":"        case \"LAB\":"},{"lineNumber":565,"author":{"gitID":"marlenekoh"},"content":"            return \"Laboratory\";"},{"lineNumber":566,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":567,"author":{"gitID":"marlenekoh"},"content":"        case \"SEM\":"},{"lineNumber":568,"author":{"gitID":"marlenekoh"},"content":"            return \"Seminar-Style Module Class\";"},{"lineNumber":569,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":570,"author":{"gitID":"marlenekoh"},"content":"        case \"SEC\":"},{"lineNumber":571,"author":{"gitID":"marlenekoh"},"content":"            return \"Sectional Teaching\";"},{"lineNumber":572,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":573,"author":{"gitID":"marlenekoh"},"content":"        case \"REC\":"},{"lineNumber":574,"author":{"gitID":"marlenekoh"},"content":"            return \"Recitation\";"},{"lineNumber":575,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":576,"author":{"gitID":"marlenekoh"},"content":"        case \"TUT2\":"},{"lineNumber":577,"author":{"gitID":"marlenekoh"},"content":"            return \"Tutorial Type 2\";"},{"lineNumber":578,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":579,"author":{"gitID":"marlenekoh"},"content":"        case \"TUT3\":"},{"lineNumber":580,"author":{"gitID":"marlenekoh"},"content":"            return \"Tutorial Type 3\";"},{"lineNumber":581,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":582,"author":{"gitID":"marlenekoh"},"content":"        default:"},{"lineNumber":583,"author":{"gitID":"marlenekoh"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_CLASS_TYPE);"},{"lineNumber":584,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":585,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":586,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":587,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":588,"author":{"gitID":"marlenekoh"},"content":"     * Converts {@code Day} to Integer for comparative purposes"},{"lineNumber":589,"author":{"gitID":"marlenekoh"},"content":"     * @param day in String"},{"lineNumber":590,"author":{"gitID":"marlenekoh"},"content":"     * @return int representing day"},{"lineNumber":591,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":592,"author":{"gitID":"marlenekoh"},"content":"    public static int convertDayToInteger(String day) throws IllegalValueException {"},{"lineNumber":593,"author":{"gitID":"marlenekoh"},"content":"        switch (day.toUpperCase()) {"},{"lineNumber":594,"author":{"gitID":"marlenekoh"},"content":"        case \"MONDAY\":"},{"lineNumber":595,"author":{"gitID":"marlenekoh"},"content":"            return MONDAY_INDEX;"},{"lineNumber":596,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":597,"author":{"gitID":"marlenekoh"},"content":"        case \"TUESDAY\":"},{"lineNumber":598,"author":{"gitID":"marlenekoh"},"content":"            return TUESDAY_INDEX;"},{"lineNumber":599,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":600,"author":{"gitID":"marlenekoh"},"content":"        case \"WEDNESDAY\":"},{"lineNumber":601,"author":{"gitID":"marlenekoh"},"content":"            return WEDNESDAY_INDEX;"},{"lineNumber":602,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":603,"author":{"gitID":"marlenekoh"},"content":"        case \"THURSDAY\":"},{"lineNumber":604,"author":{"gitID":"marlenekoh"},"content":"            return THURSDAY_INDEX;"},{"lineNumber":605,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":606,"author":{"gitID":"marlenekoh"},"content":"        case \"FRIDAY\":"},{"lineNumber":607,"author":{"gitID":"marlenekoh"},"content":"            return FRIDAY_INDEX;"},{"lineNumber":608,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":609,"author":{"gitID":"marlenekoh"},"content":"        default:"},{"lineNumber":610,"author":{"gitID":"marlenekoh"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_DAY_TYPE);"},{"lineNumber":611,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":612,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":613,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":583,"-":30}}]
