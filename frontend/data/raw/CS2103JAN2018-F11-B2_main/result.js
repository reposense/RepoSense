var resultJson = [{"path":"docs/team/destin.adoc","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"\u003d Destin Ngeow - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"\u003d\u003d PROJECT: TuitionCor"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"---"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"TuitionCor is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"* *Major enhancement*: *Morphed AddressBook - Level 4 into TuitionCor by adding support for clients in model, logic, storage*"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"** What it does: Extends or changes the Person related fields and commands in AddressBook to suit Clients in TuitionCor"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"** Justification: This changes the original AddressBook into TuitionCor and lay the foundation for future enhancements of TuitionCor."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"* *Minor enhancement*: added a remove command that allows user to easily edit the the frequently edited subjects without having to re-type the entire remaining subjects."},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B2/main/blob/master/collated/functional/shookshire.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B2/main/blob/master/collated/test/shookshire.md[Test code]]"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"** Enhancements to existing features:"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"*** Added new fields for the extension of Person to Client (Pull Requests https://github.com/CS2103JAN2018-F11-B2/main/pull/30[#30], https://github.com/CS2103JAN2018-F11-B2/main/pull/20[#20])"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"*** Edited the existing add, edit, delete commands to work on the new Client class instead (Pull requests https://github.com/CS2103JAN2018-F11-B2/main/pull/81[#81], https://github.com/CS2103JAN2018-F11-B2/main/pull/30[#30])"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"*** Remove command (Pull requests https://github.com/CS2103JAN2018-F11-B2/main/pull/89[#89])"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"*** Changing existing commands that work on Person to work on Client instead (Pull requests https://github.com/CS2103JAN2018-F11-B2/main/pull/65[#65])"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"*** Changed existing UI to display and to save students and tutors separately. (Pull requests https://github.com/CS2103JAN2018-F11-B2/main/pull/64[#64], https://github.com/CS2103JAN2018-F11-B2/main/pull/4[#4])"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"*** Edited existing junit test to work on clients after changes were made to logic and model (Pull requests https://github.com/CS2103JAN2018-F11-B2/main/pull/31[#31])"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"*** Allowed for multiple subjects, grades and location to be added with regex checking for each keyword individually instead of as a whole. (Pull requests https://github.com/CS2103JAN2018-F11-B2/main/pull/89[#89])"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"*** Updated the developer guide\u0027s model description to reflect the current implementation: https://github.com/CS2103JAN2018-F11-B2/main/pull/78[#78]"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"*** Added the initial intended features contribution to developer guide: https://github.com/CS2103JAN2018-F11-B2/main/pull/25[#25]"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"** Community:"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"*** Provided useful bug reports and suggestions for other teams. (Issues https://github.com/CS2103JAN2018-F14-B3/main/issues/178[#178], https://github.com/CS2103JAN2018-F14-B3/main/issues/180[#180], https://github.com/CS2103JAN2018-F14-B3/main/issues/170[#170])"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"include::../UserGuide.adoc[tag\u003dremove]"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"include::../UserGuide.adoc[tag\u003dgradeAdvancement]"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"include::../DeveloperGuide.adoc[tag\u003dmodelComponent]"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"include::../DeveloperGuide.adoc[tag\u003dmodelImplementation]"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"include::../DeveloperGuide.adoc[tag\u003dremoveTest]"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"\u003d\u003d Proposed implementations/features"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"* Automatic close feature"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"** Instead of throwing an error when the user tries to remove the last subject from a client, ask the user if he would prefer to close the client. If yes, call the close function for the given client."},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"* Function for changing the grades of the students"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"** All the students would promote to the next grade at the end of every year eg. from p1 to p2. This feature would allow for the user to easily change all the student\u0027s grades at the end of each school year instead of having to manually edit their profile."},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"** Alternatively, if a clock/calender feature is to be implemented in the future, this function can sync with that clock/calender to automatically change the grades of all the students at the end of the school year."}],"authorContributionMap":{"shookshire":50,"-":16}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"TuitionCor was developed by the https://github.com/CS2103JAN2018-F11-B2[CS2103JAN2018-F11-B2] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Ngeow Shan Yong Destin"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::destin.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"{empty}[https://github.com/shookshire[github]] [\u003c\u003cdestin#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":17,"author":{"gitID":"-"},"content":"Responsibilities: Model"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lim Hong Cho"},{"lineNumber":22,"author":{"gitID":"-"},"content":"image::hongCho.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"-"},"content":"{empty}[https://github.com/olimhc[github]] [\u003c\u003chongcho#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Zhu Jiahui"},{"lineNumber":31,"author":{"gitID":"-"},"content":"image::jiahui.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"{empty}[https://github.com/Zhu-Jiahui[github]] [\u003c\u003cZhu-Jiahui#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Responsibilities: Logic"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"shookshire":1,"-":36}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d TuitionCor - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"e0032017"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team F11-B2`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"TuitionCor is for those who *prefer to use a desktop app for managing client information*. More importantly, TuitionCor is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, TuitionCor can get your client management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":".  Download the latest `TuitionCor.jar` link:{repoURL}/releases[here]."},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your client information."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":".  By default, upon launching TuitionCor you will be shown the active client list. If you are a new user, the active client and closed list will be filled with sample students and tutors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Active client list contains two separate list. Clients shown here are those who looking for students or tutors here."},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** The list on the left represents the student\u0027s list where you can view information regarding students who are looking for tutors."},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** The list on the right represents the tutor\u0027s list where you can view information regarding tutors who are looking for students."},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Closed client list contains two separate list. Clients shown here are those who are no longer looking for students or tutors."},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** The list on the left represents the student\u0027s list where you can view information regarding closed students who are no longer looking for tutors."},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** The list on the right represents the tutor\u0027s list where you can view information regarding closed tutors who are no longer looking for students."},{"lineNumber":42,"author":{"gitID":"-"},"content":"** You can easily toggle between the closed and active client\u0027s list by command word `switch`."},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":45,"author":{"gitID":"-"},"content":"Commands available in active client\u0027s list: +"},{"lineNumber":46,"author":{"gitID":"-"},"content":"`addclient` `clear` `close` `delete` `edit` `exit` `find` `help` `history` `list` `match` `redo` `undo` `remove` `sort` `switch`"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"Commands available in closed client\u0027s list: +"},{"lineNumber":50,"author":{"gitID":"-"},"content":"`clear` `exit` `find` `help` `history` `list` `redo` `undo` `restore` `switch`"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":53,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"* **`addclient`**`c/s n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 t/Urgent l/north g/s4 s/math` : adds a contact of a student named `John Doe` to TuitionCor."},{"lineNumber":58,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":59,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":".  Some pointers: +"},{"lineNumber":62,"author":{"gitID":"-"},"content":"Duplicates of similar students in the student\u0027s list is not allowed, vice versa for tutor\u0027s list. However, duplicate contacts between student\u0027s and tutor\u0027s list is allowed as it\u0027s possible for a tutor to also be a student. +"},{"lineNumber":63,"author":{"gitID":"-"},"content":"+"},{"lineNumber":64,"author":{"gitID":"-"},"content":"A duplication of student or tutor happens when they do not have at least one difference in the following fields: {Name, Address, Phone Number, Email}."},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":70,"author":{"gitID":"-"},"content":"*Breakdown of features*"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"*  In v1.2:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"** Supports addition of client, either tutor or students."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"*  In v1.3:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"** All commands are working and integrated with client."},{"lineNumber":77,"author":{"gitID":"-"},"content":"** Clients information are saved."},{"lineNumber":78,"author":{"gitID":"-"},"content":"** New match feature which allowing matching of student to tutors or tutor to students."},{"lineNumber":79,"author":{"gitID":"-"},"content":"** Sort feature which allows tutor\u0027s and student\u0027s list to be sorted by name, subject, location and grade."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"*  In v1.4:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"** Match function now includes a ranking system."},{"lineNumber":83,"author":{"gitID":"-"},"content":"***  The ranking system works according to the number of matched attributes."},{"lineNumber":84,"author":{"gitID":"-"},"content":"*** The matched attributes will be highlighted in orange."},{"lineNumber":85,"author":{"gitID":"-"},"content":"** Close and restore command which allows user to close or restore a particular student or tutor ."},{"lineNumber":86,"author":{"gitID":"-"},"content":"*** This allows user to close a tutor of student upon successful matching which will be stored in a closed tutor\u0027s or student\u0027s list for future reference."},{"lineNumber":87,"author":{"gitID":"-"},"content":"*** This also allows user to restore a client from the closed list to active list if the client were to become active again."},{"lineNumber":88,"author":{"gitID":"-"},"content":"** Switch command."},{"lineNumber":89,"author":{"gitID":"-"},"content":"*** Allows user to toggle between active list and closed list."},{"lineNumber":90,"author":{"gitID":"-"},"content":"** Enhance grade, subject and location to support multiple field."},{"lineNumber":91,"author":{"gitID":"-"},"content":"** Remove function to remove the specified subject."},{"lineNumber":92,"author":{"gitID":"-"},"content":"*** This allows the user to remove the specified subject from the client instead of having to type out all the remaining subjects in edit. This is under the consideration that the desired subject of the student would often change as he find\u0027s a tutor."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"*  In v1.5:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"** Issues received in v1.4 were carefully reviewed and relevant changes were made. We thank users for your generous feedback."},{"lineNumber":96,"author":{"gitID":"-"},"content":"*** Bugs found were fixed."},{"lineNumber":97,"author":{"gitID":"-"},"content":"*** Find function now works normally with same grades of different format. Eg: (P2 and Primary2)."},{"lineNumber":98,"author":{"gitID":"-"},"content":"*** Find function now supports multiple grade fields."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"*  Coming in v2.0:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"** Auto match function."},{"lineNumber":102,"author":{"gitID":"-"},"content":"*** Whenever a new client either student or tutor is added, a list of tutor or student who fits the criteria of the tutor or student will be displayed to the user."},{"lineNumber":103,"author":{"gitID":"-"},"content":"** Integration with Gmail."},{"lineNumber":104,"author":{"gitID":"-"},"content":"*** Users are able to link a valid Gmail account to TuitionCor."},{"lineNumber":105,"author":{"gitID":"-"},"content":"*** This allows TuitionCor to be able to send email notification to clients."},{"lineNumber":106,"author":{"gitID":"-"},"content":"** Email notification"},{"lineNumber":107,"author":{"gitID":"-"},"content":"*** This allows users to to send a client through email relevant contact information regarding their assigned Tutors or Students upon a successful matching."},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"** Automatic Close function"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"*** An optional feature that will automatically Close a student (storing his/her contact into backup) when the last subject has been removed."},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"** Automatic change of grade for students"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"*** Either by allowing TuitionCor to sync with the computer\u0027s clock or through manually calling the command, all student\u0027s grade will be changed eg. from p1 to p2."},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"** Timetable availability"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"*** Include a timetable into TuitionCor similar to a personal reminder app. However, this timetable would instead be used to show the availability of the student/tutor to allow for better matching."},{"lineNumber":114,"author":{"gitID":"-"},"content":"** Addition grade fields to be added."},{"lineNumber":115,"author":{"gitID":"-"},"content":"*** Polytechnic and ITE."},{"lineNumber":116,"author":{"gitID":"-"},"content":"** Matching Specific grade or subject attributes."},{"lineNumber":117,"author":{"gitID":"-"},"content":"*** Current match command only matches the first grade or subject attribute when a client has more than 1 grade or subject attribute."},{"lineNumber":118,"author":{"gitID":"-"},"content":"*** Search all the grade and subject attribute and highlight the specific matched attribute only."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":121,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* There are alias for some of the commands, which helps users to save some time. e.g. for addclient command, you can use ac n/... or a n/..."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `addclient n/NAME`, `NAME` is a parameter which can be used as `addclient n/John Doe`."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":129,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"// tag::addclient[]"},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a client: `addclient` `[Since v1.2]`"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"Adds a client to TuitionCor +"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"Format: `addclient c/CATEGORY n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... l/LOCATION g/GRADE s/SUBJECT`"},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"Alias Format: `ac c/CATEGORY n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... l/LOCATION g/GRADE s/SUBJECT`"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"[TIP]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"A client can have any number of tags (including 0)"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":146,"author":{"gitID":"-"},"content":"The type of location and grade accepted can be found below."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"****"},{"lineNumber":149,"author":{"gitID":"-"},"content":"* It\u0027s required to indicate the category the particular client belongs to."},{"lineNumber":150,"author":{"gitID":"-"},"content":"* Accepted case-insensitive location available for user input are `[North,South,East,West,Central]`. Any other type of location will be invalid."},{"lineNumber":151,"author":{"gitID":"-"},"content":"* Accepted case-insensitive grade available for user input are as follows:"},{"lineNumber":152,"author":{"gitID":"-"},"content":"** Format of grade are in this particular format \u0027LEVEL YEAR\u0027 or alias format \u0027ALIASLEVEL YEAR\u0027 without any spacing in-between. Example: \u0027Primary1\u0027 or \u0027P1\u0027."},{"lineNumber":153,"author":{"gitID":"-"},"content":"** LEVEL available are `[Kindergarten, Primary, Secondary, Tertiary, University]`. Alias LEVEL are `[K,P,S,J,U]` respectively."},{"lineNumber":154,"author":{"gitID":"-"},"content":"** INDEX available varies differently for each Level."},{"lineNumber":155,"author":{"gitID":"-"},"content":"*** For Kindergarten INDEX available are `[1,2,3]`."},{"lineNumber":156,"author":{"gitID":"-"},"content":"*** For Primary INDEX available are `[1,2,3,4,5,6]`."},{"lineNumber":157,"author":{"gitID":"-"},"content":"*** For Secondary INDEX available are `[1,2,3,4,5]`."},{"lineNumber":158,"author":{"gitID":"-"},"content":"*** For Tertiary INDEX available are `[1,2]`."},{"lineNumber":159,"author":{"gitID":"-"},"content":"*** For University INDEX available are `[1,2,3,4]`."},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"* Subject are split based on black space. Hence a single subject has to be typed without any space."},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"** Example: \"chinese studies\" would be treated as two separate subject \"chinese\" and \"studies\" by other commands. Hence it should be typed without a blank space such as \"chineseStudies\"."},{"lineNumber":162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"Examples:"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"* `addclient c/t n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 t/urgent l/north g/p1 s/math`"},{"lineNumber":167,"author":{"gitID":"-"},"content":"* `ac c/s n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/urgent l/south g/primary1 s/math`"},{"lineNumber":168,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":"// end::addclient[]"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"e0032017"},"content":"Alias Format: `l`"},{"lineNumber":177,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"// tag::sorting[]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting a client: \u0027sort\u0027 `[Since v1.3]`"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"Sorting tutor\u0027s list based on name +"},{"lineNumber":182,"author":{"gitID":"-"},"content":"Format: `sort n c/t` +"},{"lineNumber":183,"author":{"gitID":"-"},"content":"Alias Format: `so n c/t`"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"Sorting tutor\u0027s list based on location +"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Format: `sort l c/t` +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Alias Format: `so l c/t`"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"Sorting tutor\u0027s list based on grade +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"Format: `sort g c/t` +"},{"lineNumber":191,"author":{"gitID":"-"},"content":"Alias Format: `so g c/t`"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"Sorting tutor\u0027s list based on subject +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"Format: `sort s c/t` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"Alias Format: `so s c/t`"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"Sorting student\u0027s list based on name +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"Format: `sort n c/s` +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"Alias Format: `so n c/s`"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"Sorting student\u0027s list based on location +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Format: `sort l c/s` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"Alias Format: `so l c/s`"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"Sorting student\u0027s list based on grade +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"Format: `sort g c/s` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"Alias Format: `so g c/s`"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Sorting student\u0027s list based on subject +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"Format: `sort s c/s` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"Alias Format: `so s c/s`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"****"},{"lineNumber":214,"author":{"gitID":"-"},"content":"Sorts the client based on the selected category, either `t` for tutors or `s` for students based on a chosen sort type `n` for name, `g` for grade, `s` for subject and `l` for location."},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"Sorting by name, grade, location and subjects are based on alphabetical order. +"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"In an event there are mutiple attributes for grade, location or subject, they will be sorted accordingly to the *first* grade, subject and location for the respective field."},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"Sorting by grade are based on ascending order of seniority `[Kindergarten-\u003ePrimary-\u003eSecondary-\u003eJunior College-\u003eUniversity]`"},{"lineNumber":221,"author":{"gitID":"-"},"content":"****"},{"lineNumber":222,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"* `sort l c/t` +"},{"lineNumber":225,"author":{"gitID":"-"},"content":"Tutor\u0027s list displayed will be sorted base on location."},{"lineNumber":226,"author":{"gitID":"-"},"content":"* `sort s c/t` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"Tutor\u0027s list displayed will be sorted base on subject."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* `sort n c/t` +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"Tutor\u0027s list displayed will be sorted base on name."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* `sort g c/t` +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"Tutor\u0027s list displayed will be sorted base on grade."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"* `sort l c/s` +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"Student\u0027s list displayed will be sorted base on location."},{"lineNumber":235,"author":{"gitID":"-"},"content":"* `sort s c/s` +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"Student\u0027s list displayed will be sorted base on subject."},{"lineNumber":237,"author":{"gitID":"-"},"content":"* `sort n c/s` +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"Student\u0027s list displayed will be sorted base on name."},{"lineNumber":239,"author":{"gitID":"-"},"content":"* `sort g c/s` +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"Student\u0027s list displayed will be sorted base on grade."},{"lineNumber":241,"author":{"gitID":"-"},"content":"// end::sorting[]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"// tag::switch[]"},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Switching between active and closed client\u0027s list : `switch` `[Since v1.4]`"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Switch the display between active and closed client\u0027s list. +"},{"lineNumber":247,"author":{"gitID":"-"},"content":"Format: `switch` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"Alias Format: `sw`"},{"lineNumber":249,"author":{"gitID":"-"},"content":"// end::switch[]"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"// tag::close[]"},{"lineNumber":252,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Closing a client : `close` `[Since v1.4]`"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"Close an existing and active student in active student\u0027s list. +"},{"lineNumber":255,"author":{"gitID":"-"},"content":"Format: `close INDEX c/s` +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"Alias Format: `cs INDEX c/s`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"Close an existing and active tutor in active student\u0027s list. +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Format: `close INDEX c/t` +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"Alias Format: `cs INDEX c/t`"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":263,"author":{"gitID":"-"},"content":"This command is only available when viewing the active client\u0027s list. Use command word `switch` to toggle from closed list to active list."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"****"},{"lineNumber":266,"author":{"gitID":"-"},"content":"* Close the client based on selected category either c/s for students or c/t for tutors at the specified `INDEX`. The index refers to the index number shown in the last tutors or students listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":267,"author":{"gitID":"-"},"content":"* Closed student or tutor will be removed from the active list. They can now be found in the closed list which is accessible by command word `switch`."},{"lineNumber":268,"author":{"gitID":"-"},"content":"****"},{"lineNumber":269,"author":{"gitID":"-"},"content":"// end::close[]"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"// tag::restore[]"},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Restoring a client : `restore` `[Since v1.4]`"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"Restore an existing and closed student in the closed student\u0027s list. +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"Format: `restore INDEX c/s` +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"Alias Format: `res INDEX c/s`"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"Restore an existing and closed tutor in the closed tutor\u0027s list. +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"Format: `restore INDEX c/t` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"Alias Format: `res INDEX c/t`"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":283,"author":{"gitID":"-"},"content":"This command is only available when viewing the closed client\u0027s list. Use command word `switch` to toggle from active list to closed list."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"****"},{"lineNumber":286,"author":{"gitID":"-"},"content":"* Restore the client based on selected category either c/s for students or c/t for tutors at the specified `INDEX`. The index refers to the index number shown in the last tutors or students listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":287,"author":{"gitID":"-"},"content":"* Restored student or tutor will be removed from the closed list. They can now be found in the active list which is accessible by command word `switch`."},{"lineNumber":288,"author":{"gitID":"-"},"content":"****"},{"lineNumber":289,"author":{"gitID":"-"},"content":"// end::restore[]"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a client : `edit` `[Since v1.3]`"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"Edits an existing student in the address book. +"},{"lineNumber":294,"author":{"gitID":"-"},"content":"Format: `edit INDEX c/s [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":295,"author":{"gitID":"-"},"content":"Alias Format: `e INDEX c/s  [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"Edits an existing tutor in the address book. +"},{"lineNumber":298,"author":{"gitID":"-"},"content":"Format: `edit INDEX c/t [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":299,"author":{"gitID":"-"},"content":"Alias Format: `e INDEX c/t  [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"****"},{"lineNumber":302,"author":{"gitID":"-"},"content":"* Edits the client based on selected category either c/s for students or c/t for tutors at the specified `INDEX`. The index refers to the index number shown in the last tutors or students listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":303,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":304,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":305,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":306,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":307,"author":{"gitID":"-"},"content":"****"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"* `edit 1 c/s  p/91234567 e/johndoe@example.com` +"},{"lineNumber":312,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st student to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":313,"author":{"gitID":"-"},"content":"* `e 2 c/s n/Betsy Crower t/` +"},{"lineNumber":314,"author":{"gitID":"-"},"content":"Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."},{"lineNumber":315,"author":{"gitID":"-"},"content":"* `edit 1 c/t  p/93213456 e/doe@example.com` +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st tutor to be `93213456` and `doe@example.com` respectively."},{"lineNumber":317,"author":{"gitID":"-"},"content":"* `e 2 c/t n/Beatty Crower t/` +"},{"lineNumber":318,"author":{"gitID":"-"},"content":"Edits the name of the 2nd tutor to be `Beatty Crower` and clears all existing tags."},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"shookshire"},"content":"// tag::remove[]"},{"lineNumber":321,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Remove a subject of a client : `remove` `[Since v1.4]`"},{"lineNumber":323,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":324,"author":{"gitID":"shookshire"},"content":"Removes the specific subject from an existing student in the address book. +"},{"lineNumber":325,"author":{"gitID":"shookshire"},"content":"Format: `remove INDEX c/s s/SUBJECT`"},{"lineNumber":326,"author":{"gitID":"shookshire"},"content":"Alias Format: `re INDEX c/s s/SUBJECT`"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"Edits an existing tutor in the address book. +"},{"lineNumber":329,"author":{"gitID":"shookshire"},"content":"Format: `edit INDEX c/t s/SUBJECT`"},{"lineNumber":330,"author":{"gitID":"shookshire"},"content":"Alias Format: `re INDEX c/t s/SUBJECT`"},{"lineNumber":331,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":332,"author":{"gitID":"shookshire"},"content":"****"},{"lineNumber":333,"author":{"gitID":"shookshire"},"content":"* Removes the specified subject from the client based on selected category either c/s for students or c/t for tutors at the specified `INDEX`. The index refers to the index number shown in the last tutors or students listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":334,"author":{"gitID":"shookshire"},"content":"* The provided subject has to be a single word without spacing or special characters."},{"lineNumber":335,"author":{"gitID":"shookshire"},"content":"* If the subject exist (it matches one of the subjects in the specified client\u0027s Subject field) it would be removed."},{"lineNumber":336,"author":{"gitID":"shookshire"},"content":"* A client cannot have an empty subject field. Clients with only one subject left should be deleted or closed instead"},{"lineNumber":337,"author":{"gitID":"shookshire"},"content":"* The specified subject has to be exact with the subjects of the specified client. Partial words like typing \"math\" in attempt to remove \"mathematics\" would not work."},{"lineNumber":338,"author":{"gitID":"shookshire"},"content":"****"},{"lineNumber":339,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":340,"author":{"gitID":"shookshire"},"content":"Examples:"},{"lineNumber":341,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":342,"author":{"gitID":"shookshire"},"content":"* `remove 1 c/s s/math` +"},{"lineNumber":343,"author":{"gitID":"shookshire"},"content":"Removes the \"math\" subject from the 1st student."},{"lineNumber":344,"author":{"gitID":"shookshire"},"content":"* `re 2 c/t s/physics` +"},{"lineNumber":345,"author":{"gitID":"shookshire"},"content":"Removes the \"physics\" subject from the 2nd tutor."},{"lineNumber":346,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"// end::remove[]"},{"lineNumber":348,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"// tag::find[]"},{"lineNumber":350,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating clients: `find` `[Since v1.3]`"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"Finds clients that contain any of the given keywords. +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"e0032017"},"content":"Alias Format: `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":356,"author":{"gitID":"-"},"content":"****"},{"lineNumber":357,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":358,"author":{"gitID":"-"},"content":"* *For grades only*, alias grades will match original grades. e.g `p2` will match `primary2`."},{"lineNumber":359,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":360,"author":{"gitID":"-"},"content":"* Not only the name is searched, but all the fields of a client is searched."},{"lineNumber":361,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":362,"author":{"gitID":"-"},"content":"* Clients matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":363,"author":{"gitID":"-"},"content":"****"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":368,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":369,"author":{"gitID":"-"},"content":"* `find p2` +"},{"lineNumber":370,"author":{"gitID":"-"},"content":"Returns any client having grades `p2` or `primary2`"},{"lineNumber":371,"author":{"gitID":"e0032017"},"content":"* `f Betsy Tim John` +"},{"lineNumber":372,"author":{"gitID":"-"},"content":"Returns any client having names `Betsy`, `Tim`, or `John`"},{"lineNumber":373,"author":{"gitID":"-"},"content":"* `f 96528541` +"},{"lineNumber":374,"author":{"gitID":"-"},"content":"Returns any client having phone number `96528541`"},{"lineNumber":375,"author":{"gitID":"-"},"content":"* `f blk` +"},{"lineNumber":376,"author":{"gitID":"-"},"content":"Returns any client having keyword `blk`"},{"lineNumber":377,"author":{"gitID":"-"},"content":"// end::find[]"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"// tag::match[]"},{"lineNumber":380,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Matching potential clients: `match` `[Since v1.3]`"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"Matches potential tutors to selected student based on `INDEX` +"},{"lineNumber":383,"author":{"gitID":"-"},"content":"Format: `match INDEX c/s`"},{"lineNumber":384,"author":{"gitID":"-"},"content":"Alias Format: `m INDEX c/s`"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"Matches potential students to selected tutor based on `INDEX` +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"Format: `match INDEX c/t`"},{"lineNumber":388,"author":{"gitID":"-"},"content":"Alias Format: `m INDEX c/t`"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"****"},{"lineNumber":391,"author":{"gitID":"-"},"content":"* Matches the client based on selected category either c/s for students or c/t for tutors at the specified `INDEX`. The index refers to the index number shown in the last tutors or students listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":392,"author":{"gitID":"-"},"content":"* The match is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":393,"author":{"gitID":"-"},"content":"* Clients will be matched based on subject, grade or location."},{"lineNumber":394,"author":{"gitID":"-"},"content":"* Full words of a `grade` will be matched against Alias of a `grade` e.g. `Primary2` will be matched to `p2`"},{"lineNumber":395,"author":{"gitID":"-"},"content":"* Only clients that have any matches based on subject, grade or location will be displayed."},{"lineNumber":396,"author":{"gitID":"-"},"content":"* If the client have multiple grade or subject attributes, only the first grade or subject attribute is used to match any potential clients."},{"lineNumber":397,"author":{"gitID":"-"},"content":"* Matched clients will be listed from the most number of matched attributes to the least number of matched attributes."},{"lineNumber":398,"author":{"gitID":"-"},"content":"* Matched attributes will be highlighted in orange."},{"lineNumber":399,"author":{"gitID":"-"},"content":"****"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"* `match 1 c/t` +"},{"lineNumber":404,"author":{"gitID":"-"},"content":"At index 1 of tutor\u0027s list, John is a tutor finding students that are staying in west and is looking for s4 chemistry. This command will return a list of students that are staying in the west or s4 or Chemistry."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* `match 1 c/s` +"},{"lineNumber":407,"author":{"gitID":"-"},"content":"At index 1 of student\u0027s list, Jim is a student who requires tutors that are staying in west and teaching s4 chemistry. This command will return a list of tutors that are staying in the west or teaching s4 or teaching Chemistry."},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"// end::match[]"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a client : `delete` `[Since v1.3]`"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"Deletes the specified tutor from TuitionCor. +"},{"lineNumber":414,"author":{"gitID":"-"},"content":"Format: `delete INDEX c/t`"},{"lineNumber":415,"author":{"gitID":"-"},"content":"Alias Format: `d INDEX c/t`"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"Deletes the specified student from TuitionCor. +"},{"lineNumber":418,"author":{"gitID":"-"},"content":"Format: `delete INDEX c/s`"},{"lineNumber":419,"author":{"gitID":"-"},"content":"Alias Format: `d INDEX c/s`"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"****"},{"lineNumber":422,"author":{"gitID":"-"},"content":"* Deletes the client at the specified `INDEX`."},{"lineNumber":423,"author":{"gitID":"-"},"content":"* `c/t` and `c/s` refers to tutor\u0027s category respectively."},{"lineNumber":424,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":425,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":426,"author":{"gitID":"-"},"content":"****"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":431,"author":{"gitID":"-"},"content":"`delete 2 c/s` +"},{"lineNumber":432,"author":{"gitID":"-"},"content":"Deletes the 2nd student in the student\u0027s list from TuitionCor."},{"lineNumber":433,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":434,"author":{"gitID":"-"},"content":"`delete 2 c/t` +"},{"lineNumber":435,"author":{"gitID":"-"},"content":"Deletes the 2nd tutor in the tutor\u0027s list from TuitionCor."},{"lineNumber":436,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":437,"author":{"gitID":"-"},"content":"`d 1 c/t` +"},{"lineNumber":438,"author":{"gitID":"-"},"content":"Deletes the 1st person in the tutor\u0027s list based the results of the `find` command."},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":443,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"e0032017"},"content":"Alias Format: `h`"},{"lineNumber":446,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":447,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":448,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"Restores TuitionCor to the state before the previous _undoable_ command was executed. +"},{"lineNumber":455,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"e0032017"},"content":"Alias Format: `u`"},{"lineNumber":458,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":459,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":460,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the TuitionCor\u0027s content (`addclient`, `delete`, `edit` , `close` , `restore` and `clear`)."},{"lineNumber":461,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":466,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":467,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":470,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":471,"author":{"gitID":"e0032017"},"content":"`u` +"},{"lineNumber":472,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":475,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":476,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":477,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":482,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"e0032017"},"content":"Alias Format: `r`"},{"lineNumber":485,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":489,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":490,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":493,"author":{"gitID":"e0032017"},"content":"`r` +"},{"lineNumber":494,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":497,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":498,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":499,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":501,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":502,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` `[Since v1.0]`"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"Clears all entries from TuitionCor. +"},{"lineNumber":507,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"e0032017"},"content":"Alias Format: `c`"},{"lineNumber":510,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit` `[Since v1.0]`"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":514,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"e0032017"},"content":"Alias Format: `x`"},{"lineNumber":517,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"TuitionCor data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":521,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"shookshire"},"content":"// tag::gradeAdvancement[]"},{"lineNumber":524,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":525,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d advancement of Grade function `[coming in v2.0]`"},{"lineNumber":526,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":527,"author":{"gitID":"shookshire"},"content":"Advances all student\u0027s grades when this function is called (eg. change from p1 o p2)."},{"lineNumber":528,"author":{"gitID":"shookshire"},"content":"This is done under the consideration that all students would advance in grade at the end of the school year and having to edit every single entry would be very tedious when the data base is large."},{"lineNumber":529,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":530,"author":{"gitID":"shookshire"},"content":"Format: `advanceGrade INDEX...` +"},{"lineNumber":531,"author":{"gitID":"shookshire"},"content":"A success message of the format _Successfully advanced students Grades_ will be displayed and all students whose grade is not already at the highest limit would be advanced."},{"lineNumber":532,"author":{"gitID":"shookshire"},"content":"The students at the specified INDEXes would not have their Grade advanced."},{"lineNumber":533,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":534,"author":{"gitID":"shookshire"},"content":"Example:"},{"lineNumber":535,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":536,"author":{"gitID":"shookshire"},"content":"* `advanceGrade` +"},{"lineNumber":537,"author":{"gitID":"shookshire"},"content":"All students Grades are advanced"},{"lineNumber":538,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":539,"author":{"gitID":"shookshire"},"content":"* `advanceGrade 2 10` +"},{"lineNumber":540,"author":{"gitID":"shookshire"},"content":"All students except from index 2 and 10 would have their Grades advanced."},{"lineNumber":541,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":542,"author":{"gitID":"shookshire"},"content":"// end::gradeAdvancement[]"},{"lineNumber":543,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"// tag::gmail[]"},{"lineNumber":545,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Integration with Gmail `[coming in v2.0]`"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"Link a valid Gmail account to TuitionCor. +"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":550,"author":{"gitID":"-"},"content":"TuitionCor will only be linked to *one* valid Gmail account at any point of time"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"Format: `set e/EMAIL pw/PASSWORD` +"},{"lineNumber":553,"author":{"gitID":"-"},"content":"A success message of the format _Successfully linked EMAIL to TuitionCor_ will be displayed for successful linking."},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"A failure message of the format _Failed to link EMAIL to TuitionCor_ will be displayed for unsuccessful linking. Please check that you have inputted the correct email and password."},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"* `set e/BestCoordinatorInSg@gmail.com pw/Iamthebest` +"},{"lineNumber":560,"author":{"gitID":"-"},"content":"Links Gmail account `BestCoordinatorInSg@gmail.com` to TuitionCor upon a successful login."},{"lineNumber":561,"author":{"gitID":"-"},"content":"// end::gmail[]"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"// tag::email[]"},{"lineNumber":564,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Email notification function `[coming in v2.0]`"},{"lineNumber":565,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":566,"author":{"gitID":"-"},"content":"Please ensure that you have successfully linked a Gmail account to TuitionCor before you are able to use this function"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"Parameters:"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"Format: `notify INDEX c/CATEGORY INDEX c/CATEGORY`"},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":573,"author":{"gitID":"-"},"content":"The first `INDEX c/CATEGORY` refers to the client you would like to notify and send an email with the relevant contact details. +"},{"lineNumber":574,"author":{"gitID":"-"},"content":"The second `INDEX c/CATEGORY` refers to the client whose information you would like to send to the former client."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":577,"author":{"gitID":"-"},"content":"Both CATEGORY cannot be referring to the same category."},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":580,"author":{"gitID":"-"},"content":"The email notification sent to will be based on the email in the client\u0027s information."},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"* `notify 1 c/s 1 c/t` +"},{"lineNumber":585,"author":{"gitID":"-"},"content":"An email will be send to the first student on the students list using your linked Gmail account. The email will contain relevant information regarding the first tutor on the tutors list."},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"* `notify 2 c/t 1 c/s` +"},{"lineNumber":588,"author":{"gitID":"-"},"content":"An email will be send to the second tutor on the tutors list using your linked Gmail account. The email will contain relevant information regarding the first student on the students list. +"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"// end::email[]"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"// tag::automatch[]"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Auto match feature `[coming in v2.0]`"},{"lineNumber":595,"author":{"gitID":"-"},"content":"****"},{"lineNumber":596,"author":{"gitID":"-"},"content":"* When the user enters a new client. the system will auto generates a list of potential clients for this newly added client."},{"lineNumber":597,"author":{"gitID":"-"},"content":"* This is to enhance the efficiency of our user and shorten the time needed for the user to match potential clients."},{"lineNumber":598,"author":{"gitID":"-"},"content":"* The reason for this enhancement is to facilitate the user when a potential client makes a call to seek for assignments. With this enhancement, the system is able to generate a list of potential clients right after the client is added into the system. The user is then able to reply the client on the available assignments right away before the client even hangs up the phone."},{"lineNumber":599,"author":{"gitID":"-"},"content":"* One possible way of implementing it is to call for matching command with the client info after the addclient command has successfully executed."},{"lineNumber":600,"author":{"gitID":"-"},"content":"****"},{"lineNumber":601,"author":{"gitID":"-"},"content":"// end::automatch[]"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"// tag::matchmultiple[]"},{"lineNumber":604,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Match multiple grade and subject attributes `[coming in v2.0]`"},{"lineNumber":605,"author":{"gitID":"-"},"content":"****"},{"lineNumber":606,"author":{"gitID":"-"},"content":"* Currently, match command assumes all client has only one grade subject and location attribute. If a client has multiple grade attributes, match command only matches potential clients with his/her first grade attribute."},{"lineNumber":607,"author":{"gitID":"-"},"content":"* Enhancement could be made to match all the Grade attributes respectively and list the matching result from the highest match to the lowest match."},{"lineNumber":608,"author":{"gitID":"-"},"content":"* Only matched attributes should be highlighted."},{"lineNumber":609,"author":{"gitID":"-"},"content":"* One possible way of implementing it is to change Grade, Subject and Location to List\u003cString\u003e and compare them one by one with other clients."},{"lineNumber":610,"author":{"gitID":"-"},"content":"****"},{"lineNumber":611,"author":{"gitID":"-"},"content":"// end::matchmultiple[]"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":616,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TuitionCor folder."},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"shookshire"},"content":"* *AddClient* `addclient c/CATEGORY n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... l/LOCATION g/GRADE s/SUBJECT` +"},{"lineNumber":621,"author":{"gitID":"-"},"content":"e.g. `addclient c/t n/Tutor1 p/98765432 a/Blk 10 Singapore, #01-239 e/testing@example.com t/family l/north g/p3 s/physics` +"},{"lineNumber":622,"author":{"gitID":"shookshire"},"content":"Alias: `ac`"},{"lineNumber":623,"author":{"gitID":"-"},"content":"* *Clear* : `clear` +"},{"lineNumber":624,"author":{"gitID":"-"},"content":"Alias: `c`"},{"lineNumber":625,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":626,"author":{"gitID":"-"},"content":"e.g. `delete 3` +"},{"lineNumber":627,"author":{"gitID":"-"},"content":"Alias: `d`"},{"lineNumber":628,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":629,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com` +"},{"lineNumber":630,"author":{"gitID":"-"},"content":"Alias: `e`"},{"lineNumber":631,"author":{"gitID":"shookshire"},"content":"* *Remove* : `remove INDEX c/CATEGORY s/SUBJECT` +"},{"lineNumber":632,"author":{"gitID":"shookshire"},"content":"e.g. `remove 1 c/s s/math`"},{"lineNumber":633,"author":{"gitID":"shookshire"},"content":"Alias: `re`"},{"lineNumber":634,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":635,"author":{"gitID":"-"},"content":"e.g. `find James Jake` +"},{"lineNumber":636,"author":{"gitID":"-"},"content":"Alias: `f`"},{"lineNumber":637,"author":{"gitID":"-"},"content":"* *Match* : `match INDEX CATEGORY` +"},{"lineNumber":638,"author":{"gitID":"-"},"content":"e.g. `match 1 c/s` +"},{"lineNumber":639,"author":{"gitID":"-"},"content":"Alias: `m`"},{"lineNumber":640,"author":{"gitID":"-"},"content":"* *Sort* : `sort TYPE CATEGORY` +"},{"lineNumber":641,"author":{"gitID":"-"},"content":"eg. `sort n c/s` +"},{"lineNumber":642,"author":{"gitID":"-"},"content":"Alias: `so`"},{"lineNumber":643,"author":{"gitID":"-"},"content":"* *Close* : `close INDEX CATEGORY` +"},{"lineNumber":644,"author":{"gitID":"-"},"content":"eg. `close 1 c/s` +"},{"lineNumber":645,"author":{"gitID":"-"},"content":"Alias: `cs`"},{"lineNumber":646,"author":{"gitID":"-"},"content":"* *Restore* : `restore INDEX CATEGORY` +"},{"lineNumber":647,"author":{"gitID":"-"},"content":"eg. `restore 1 c/s` +"},{"lineNumber":648,"author":{"gitID":"-"},"content":"Alias: `res`"},{"lineNumber":649,"author":{"gitID":"-"},"content":"* *Switch* : `switch` +"},{"lineNumber":650,"author":{"gitID":"-"},"content":"Alias: `sw`"},{"lineNumber":651,"author":{"gitID":"-"},"content":"* *List* : `list` +"},{"lineNumber":652,"author":{"gitID":"-"},"content":"Alias: `l`"},{"lineNumber":653,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":654,"author":{"gitID":"-"},"content":"* *History* : `history` +"},{"lineNumber":655,"author":{"gitID":"-"},"content":"Alias: `h`"},{"lineNumber":656,"author":{"gitID":"-"},"content":"* *Undo* : `undo` +"},{"lineNumber":657,"author":{"gitID":"-"},"content":"Alias: `u`"},{"lineNumber":658,"author":{"gitID":"-"},"content":"* *Redo* : `redo` +"},{"lineNumber":659,"author":{"gitID":"-"},"content":"Alias: `r`"}],"authorContributionMap":{"e0032017":16,"shookshire":72,"-":571}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Client[] expectedStudentList \u003d SampleDataUtil.getSampleStudents();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertListMatching(getStudentListPanel(), expectedStudentList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":1,"-":50}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"                + \"    c/s   \";"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        Client deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CLIENT_SUCCESS, deletedPerson);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex + \" c/s\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\" + \" c/s\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\" + \" c/s\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"                getModel().getAddressBook().getStudentList().size() + 1);"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased() + \" c/s\";"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\" + \" c/s\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\" + \" c/s\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(\"DelETE 1\" + \" c/s\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"    private Client removePerson(Model model, Index index) {"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"        Client targetPerson \u003d getPerson(model, index);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"            model.deleteClient(targetPerson, new Category(\"s\"));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"        Client deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CLIENT_SUCCESS, deletedPerson);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased()"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"                        + \" c/s\", expectedModel, expectedResultMessage);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":24,"-":165}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_TUTOR_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.HOON;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.IDA;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"import static seedu.address.testutil.TypicalClients.TUTOR_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":77,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":78,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"        Client toAdd \u003d AMY;"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"        String command \u003d \"   \" + AddClientCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \" + LOCATION_DESC_AMY + \"  \""},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"                + GRADE_DESC_AMY + \"     \" + SUBJECT_DESC_AMY + \"    \" + CATEGORY_DESC_AMY + \"     \";"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(command, toAdd, new Category(\"s\"));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"        model.addStudent(toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        toAdd \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withLocation(VALID_LOCATION_AMY)"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"                .withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_FRIEND + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(command, toAdd, new Category(\"s\"));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        toAdd \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withLocation(VALID_LOCATION_AMY)"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"                .withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_FRIEND + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(command, toAdd, new Category(\"s\"));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        toAdd \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withLocation(VALID_LOCATION_AMY)"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"                .withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_FRIEND + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(command, toAdd, new Category(\"s\"));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        toAdd \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).withLocation(VALID_LOCATION_AMY)"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"                .withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_FRIEND + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(command, toAdd, new Category(\"s\"));"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + LOCATION_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + NAME_DESC_BOB + GRADE_DESC_BOB"},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + CATEGORY_DESC_BOB + SUBJECT_DESC_BOB;"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(command, toAdd, new Category(\"s\"));"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"        /* Case: add a person to tutor instead of student. */"},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":"        toAdd \u003d TUTOR_BOB;"},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + LOCATION_DESC_BOB"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_AMY + NAME_DESC_BOB + GRADE_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + CATEGORY_DESC_TUTOR_BOB + SUBJECT_DESC_BOB;"},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(command, toAdd, new Category(\"t\"));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"        command \u003d PersonUtil.getAddCommand(IDA);"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(command, AddClientCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalClients#ALICE"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":166,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(command, AddClientCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":176,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":204,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":209,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":213,"author":{"gitID":"shookshire"},"content":"        command \u003d AddClientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":214,"author":{"gitID":"shookshire"},"content":"                + INVALID_TAG_DESC + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"shookshire"},"content":"    private void assertCommandSuccess(Client toAdd) {"},{"lineNumber":233,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd, new Category(\"s\"));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":239,"author":{"gitID":"shookshire"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Client)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"shookshire"},"content":"    private void assertCommandSuccess(String command, Client toAdd, Category c) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"            if (c.isStudent()) {"},{"lineNumber":245,"author":{"gitID":"shookshire"},"content":"                expectedModel.addStudent(toAdd);"},{"lineNumber":246,"author":{"gitID":"shookshire"},"content":"            } else {"},{"lineNumber":247,"author":{"gitID":"shookshire"},"content":"                expectedModel.addTutor(toAdd);"},{"lineNumber":248,"author":{"gitID":"shookshire"},"content":"            }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"shookshire"},"content":"        String expectedResultMessage;"},{"lineNumber":253,"author":{"gitID":"shookshire"},"content":"        if (c.isStudent()) {"},{"lineNumber":254,"author":{"gitID":"shookshire"},"content":"            expectedResultMessage \u003d String.format(AddClientCommand.MESSAGE_SUCCESS_STUDENT, toAdd);"},{"lineNumber":255,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":256,"author":{"gitID":"shookshire"},"content":"            expectedResultMessage \u003d String.format(AddClientCommand.MESSAGE_SUCCESS_TUTOR, toAdd);"},{"lineNumber":257,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"shookshire"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Client)"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":87,"-":210}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    private static final Predicate\u003cClient\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"    public static void setFilteredList(Model model, List\u003cClient\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"        Optional\u003cPredicate\u003cClient\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredStudentList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    public static void setFilteredList(Model model, Client... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    private static Predicate\u003cClient\u003e getPredicateMatching(Client other) {"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        return client -\u003e client.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":8,"-":31}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalClients;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return TypicalClients.getTypicalAddressBook();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getStudentListPanel() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStudentListPanel();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":117,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"        assertEquals(getModel().getAddressBook().getStudentList().size(), getModel().getFilteredStudentList().size());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"        assertTrue(getModel().getFilteredStudentList().size() \u003c getModel().getAddressBook().getStudentList().size());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"        assertEquals(0, getModel().getAddressBook().getStudentList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":"        assertListMatching(getStudentListPanel(), expectedModel.getFilteredStudentList());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        getStudentListPanel().rememberSelectedPersonCard();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(getStudentListPanel().isAnyCardSelected());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertFalse(getStudentListPanel().isSelectedPersonCardChanged());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":238,"author":{"gitID":"shookshire"},"content":"            assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":5,"-":246}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalClosedStudents;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalStudents;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    private static final ObservableList\u003cClient\u003e TYPICAL_CLIENTS \u003d"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalStudents());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cClient\u003e TYPICAL_CLOSE_CLIENTS \u003d"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalClosedStudents());"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        StudentListPanel studentListPanel \u003d new StudentListPanel(TYPICAL_CLIENTS, TYPICAL_CLOSE_CLIENTS);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(studentListPanel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(studentListPanel.getRoot(),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_CLIENTS.size(); i++) {"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_CLIENTS.get(i));"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"            Client expectedPerson \u003d TYPICAL_CLIENTS.get(i);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":5,"-":57}},{"path":"src/test/java/seedu/address/ui/ClientCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"public class ClientCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"        // no tags"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"        Client personWithNoTags \u003d new ClientBuilder().withTags(new String[0]).build();"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"        ClientCard clientCard \u003d new ClientCard(personWithNoTags, 1);"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"        uiPartRule.setUiPart(clientCard);"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"        assertCardDisplay(clientCard, personWithNoTags, 1);"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        // with tags"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        Client personWithTags \u003d new ClientBuilder().build();"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"        clientCard \u003d new ClientCard(personWithTags, 2);"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"        uiPartRule.setUiPart(clientCard);"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        assertCardDisplay(clientCard, personWithTags, 2);"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        Client person \u003d new ClientBuilder().build();"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        ClientCard personCard \u003d new ClientCard(person, 0);"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        ClientCard copy \u003d new ClientCard(person, 0);"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        Client differentPerson \u003d new ClientBuilder().withName(\"differentName\").build();"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        assertFalse(personCard.equals(new ClientCard(differentPerson, 0)));"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"        assertFalse(personCard.equals(new ClientCard(person, 1)));"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"     * {@code expectedId}."},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"    private void assertCardDisplay(ClientCard clientCard, Client expectedClient, int expectedId) {"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(clientCard.getRoot());"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        // verify id is displayed correctly"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"        // verify person details are displayed correctly"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"        assertCardDisplaysPerson(expectedClient, personCardHandle);"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":62,"-":11}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1 c/s\");"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"        assertFalse(getModel().getAddressBook().getStudentList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 1 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + FIONA.getPhone().value;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, FIONA);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 1 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + FIONA.getEmail().value;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 1 persons found */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + FIONA.getAddress().value;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredStudentList().size(),"},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"                expectedModel.getFilteredTutorList().size());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":4,"-":182}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String LABEL_STYLE \u003d \"label\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        assertEquals(expectedCard.getLocation(), actualCard.getLocation());"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        assertEquals(expectedCard.getGrade(), actualCard.getGrade());"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        assertEquals(expectedCard.getSubject(), actualCard.getSubject());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    public static void assertCardDisplaysPerson(Client expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertTagEquals(expectedPerson, actualCard);"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        assertEquals(expectedPerson.getLocation().value, actualCard.getLocation());"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        assertEquals(expectedPerson.getGrade().value, actualCard.getGrade());"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        assertEquals(expectedPerson.getSubject().value, actualCard.getSubject());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Asserts that{@code actualCard} displays the same tag and colour of {@code expectedPerson}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param expectedPerson"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @param actualCard"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    private static void assertTagEquals(Client expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags()"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .stream().map(tag -\u003e tag.tagName)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        expectedTags.forEach(tag -\u003e assertEquals(Arrays"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .asList(LABEL_STYLE, getTagColorStyleFor(tag)), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the colour matches the particular tag label."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        switch(tagName) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case \"owesMoney\":"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return \"green\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case \"friends\":"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return \"yellow\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case \"friend\":"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return \"green\";"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case \"husband\":"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return \"yellow\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case \"colleagues\":"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return \"purple\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case \"classmates\":"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return \"green\";"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case \"neighbours\":"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return \"gold\";"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case \"family\":"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return \"purple\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case \"Urgent\":"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return \"wheat\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        case \"FemaleTutorsOnly\":"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return \"lightpink\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case \"ExtraCareRequired\":"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return \"red\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case \"Smart\":"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return \"blue\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case \"WillingToPay\":"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return \"lightpink\";"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return \"\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Client... persons) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cClient\u003e persons) {"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Client[0]));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":12,"-":137}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredStudentList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":1,"-":122}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.KEYWORD_MATCHING_MEIER;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \""},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_BOB + \"    \" + GRADE_DESC_BOB + \"  \" + SUBJECT_DESC_BOB + \"  \""},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB + \"  \";"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        Client editedPerson \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"                .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"        model.updateClient("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                getModel().getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased()),"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                editedPerson, new Category(\"s\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + LOCATION_DESC_BOB + GRADE_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"                + SUBJECT_DESC_BOB + CATEGORY_DESC_BOB;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND + CATEGORY_DESC_BOB;"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"        Client personToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"        editedPerson \u003d new ClientBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix()"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB;"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"        editedPerson \u003d new ClientBuilder(personToEdit).withTags().build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB + CATEGORY_DESC_BOB;"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"        personToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"        editedPerson \u003d new ClientBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getStudentList().size();"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB + CATEGORY_DESC_BOB,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB + CATEGORY_DESC_BOB,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB + CATEGORY_DESC_BOB,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB + CATEGORY_DESC_BOB,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB + CATEGORY_DESC_BOB,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + CATEGORY_DESC_BOB,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC"},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"                        + CATEGORY_DESC_BOB,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"                        + CATEGORY_DESC_BOB,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"                        + CATEGORY_DESC_BOB,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"                        + CATEGORY_DESC_BOB,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"                        + CATEGORY_DESC_BOB,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"        assertTrue(getModel().getAddressBook().getStudentList().contains(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        assertFalse(getModel().getFilteredStudentList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + CATEGORY_DESC_BOB;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + CATEGORY_DESC_BOB;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":197,"author":{"gitID":"shookshire"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Client, Index)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Client editedPerson) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"shookshire"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Client editedPerson,"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":215,"author":{"gitID":"shookshire"},"content":"            expectedModel.updateClient("},{"lineNumber":216,"author":{"gitID":"shookshire"},"content":"                    expectedModel.getFilteredStudentList().get(toEdit.getZeroBased()), editedPerson, new Category(\"s\"));"},{"lineNumber":217,"author":{"gitID":"shookshire"},"content":"            expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":220,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":253,"author":{"gitID":"shookshire"},"content":"        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":53,"-":230}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        assertEquals(9, dataFromFile.getStudentList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":81,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"                builder.withPerson(new ClientBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":3,"-":143}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        String deleteCommand \u003d \"delete 9 c/s\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        logic.getFilteredStudentList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":2,"-":122}},{"path":"src/test/java/seedu/address/logic/parser/RemoveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"public class RemoveCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    private RemoveCommandParser parser \u003d new RemoveCommandParser();"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    public void parse_validArgs_returnsRemoveCommand() {"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, \"1 c/s s/math\","},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"                new RemoveCommand(INDEX_FIRST_PERSON, new Subject(\"math\"), new Category(\"s\")));"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, \"1 c/t s/math\","},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"                new RemoveCommand(INDEX_FIRST_PERSON, new Subject(\"math\"), new Category(\"t\")));"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"        // Missing index"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, \"c/s s/math\","},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        // Missing subject"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, \"1 c/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        // Missing category"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, \"1 s/math\","},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":28,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    private static final String CATEGORY_STUDENT \u003d \" \" + PREFIX_CATEGORY + \"s\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + CATEGORY_STUDENT, MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, \"1 c/s\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + CATEGORY_STUDENT,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + CATEGORY_STUDENT,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC + CATEGORY_STUDENT,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC + CATEGORY_STUDENT,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC + CATEGORY_STUDENT,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                + CATEGORY_STUDENT, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                + CATEGORY_STUDENT, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                + TAG_EMPTY + CATEGORY_STUDENT, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + CATEGORY_STUDENT, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + CATEGORY_STUDENT, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY + CATEGORY_STUDENT,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + CATEGORY_STUDENT;"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + CATEGORY_STUDENT;"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":"                .withEmail(VALID_EMAIL_AMY).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY)"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":168,"author":{"gitID":"shookshire"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY)"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY + CATEGORY_DESC_AMY;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND + CATEGORY_DESC_AMY;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND)"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + CATEGORY_DESC_AMY;"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB + CATEGORY_STUDENT;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":210,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":211,"author":{"gitID":"shookshire"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":216,"author":{"gitID":"shookshire"},"content":"                + PHONE_DESC_BOB + CATEGORY_STUDENT;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":218,"author":{"gitID":"shookshire"},"content":"                .withAddress(VALID_ADDRESS_BOB).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":219,"author":{"gitID":"shookshire"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":226,"author":{"gitID":"shookshire"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY + CATEGORY_DESC_AMY;"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"shookshire"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().withCategory(\"s\").build();"},{"lineNumber":229,"author":{"gitID":"shookshire"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor, new Category(\"s\"));"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":36,"-":197}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CloseCommand;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RestoreCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SwitchCommand;"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.SearchContainsKeywordsPredicate;"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientUtil;"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        Client person \u003d new ClientBuilder().build();"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d (AddClientCommand) parser.parseCommand(ClientUtil.getAddClientCommand(person));"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        assertEquals(new AddClientCommand(person), command);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"        Client person \u003d new ClientBuilder().build();"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d (AddClientCommand) parser.parseCommand(AddClientCommand.COMMAND_ALIAS + \" \""},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"                + ClientUtil.getClientDetails(person));"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"        assertEquals(new AddClientCommand(person), command);"},{"lineNumber":62,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"    public void parseCommand_addClient() throws Exception {"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        Client client \u003d new ClientBuilder().build();"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d (AddClientCommand) parser.parseCommand(ClientUtil.getAddClientCommand(client));"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        assertEquals(new AddClientCommand(client), command);"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"    public void parseCommand_addClientAlias() throws Exception {"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        Client client \u003d new ClientBuilder().build();"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d (AddClientCommand) parser.parseCommand(AddClientCommand.COMMAND_ALIAS + \" \""},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"                + ClientUtil.getClientDetails(client));"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        assertEquals(new AddClientCommand(client), command);"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":83,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":85,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":87,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":88,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parseCommand_match() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        MatchCommand command \u003d (MatchCommand) parser.parseCommand("},{"lineNumber":94,"author":{"gitID":"-"},"content":"                MatchCommand.COMMAND_WORD + \" 3\" + \" c/s\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(new MatchCommand(INDEX_THIRD_PERSON, new Category(\"s\")), command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseCommand_matchAlias() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        MatchCommand command \u003d (MatchCommand) parser.parseCommand("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                MatchCommand.COMMAND_ALIAS + \" 3\" + \" c/s\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(new MatchCommand(INDEX_THIRD_PERSON, new Category(\"s\")), command);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseCommand_restore() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        RestoreCommand command \u003d (RestoreCommand) parser.parseCommand("},{"lineNumber":108,"author":{"gitID":"-"},"content":"                RestoreCommand.COMMAND_WORD + \" 3\" + \" c/s\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(new RestoreCommand(INDEX_THIRD_PERSON, new Category(\"s\")), command);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_restoreAlias() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        RestoreCommand command \u003d (RestoreCommand) parser.parseCommand("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                RestoreCommand.COMMAND_ALIAS + \" 3\" + \" c/s\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(new RestoreCommand(INDEX_THIRD_PERSON, new Category(\"s\")), command);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_close() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        CloseCommand command \u003d (CloseCommand) parser.parseCommand("},{"lineNumber":122,"author":{"gitID":"-"},"content":"                CloseCommand.COMMAND_WORD + \" 3\" + \" c/s\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(new CloseCommand(INDEX_THIRD_PERSON, new Category(\"s\")), command);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void parseCommand_closeAlias() throws Exception {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        CloseCommand command \u003d (CloseCommand) parser.parseCommand("},{"lineNumber":129,"author":{"gitID":"-"},"content":"                CloseCommand.COMMAND_ALIAS + \" 3\" + \" c/s\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(new CloseCommand(INDEX_THIRD_PERSON, new Category(\"s\")), command);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseCommand_switch() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(SwitchCommand.COMMAND_WORD) instanceof SwitchCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(SwitchCommand.COMMAND_WORD + \" 3\") instanceof SwitchCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseCommand_switchAlias() throws Exception {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(SwitchCommand.COMMAND_ALIAS) instanceof SwitchCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(SwitchCommand.COMMAND_ALIAS + \" 3\") instanceof SwitchCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" c/s\");"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON, new Category(\"s\")), command);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" c/s\");"},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON, new Category(\"s\")), command);"},{"lineNumber":157,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"        Client person \u003d new ClientBuilder().build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + ClientUtil.getClientDetails(person) + \" c/s\");"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor, new Category(\"s\")), command);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"        Client person \u003d new ClientBuilder().build();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":172,"author":{"gitID":"e0032017"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + ClientUtil.getClientDetails(person) + \" c/s\");"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor, new Category(\"s\")), command);"},{"lineNumber":175,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":185,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":186,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":187,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":193,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new SearchContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":201,"author":{"gitID":"e0032017"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new SearchContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":203,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":226,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":227,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":245,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":246,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":247,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":252,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":257,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":258,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":259,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":264,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":270,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":271,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":51,"shookshire":48,"-":187}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortByGradeCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortByLocationCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortByNameCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortBySubjectCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":"public class SortCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"    private static final Category CATEGORY_STUDENT \u003d new Category(\"s\");"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    private static final Category CATEGORY_TUTOR \u003d  new Category(\"t\");"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    public void parse_validArgs_returnsSortCommand() {"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"n c/s\", new SortByNameCommand(CATEGORY_STUDENT));"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"n c/t\", new SortByNameCommand(CATEGORY_TUTOR));"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"g c/s\", new SortByGradeCommand(CATEGORY_STUDENT));"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"g c/t\", new SortByGradeCommand(CATEGORY_TUTOR));"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"l c/s\", new SortByLocationCommand(CATEGORY_STUDENT));"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"l c/t\", new SortByLocationCommand(CATEGORY_TUTOR));"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"s c/s\", new SortBySubjectCommand(CATEGORY_STUDENT));"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"s c/t\", new SortBySubjectCommand(CATEGORY_TUTOR));"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"                SortCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"        // no sort type specified"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"   c/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"                SortCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"   c/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"                SortCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"        //no category prefix and category specified"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"n\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"                SortCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"        //no category specified"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"n c/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"                SortCommand.MESSAGE_USAGE));"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        //invalid type of sort"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"w c/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"                SortCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"        //invalid category"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"w c/w\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"                SortCommand.MESSAGE_USAGE));"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"        //invalid category prefix"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"n z/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"                SortCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":62,"-":15}},{"path":"src/test/java/seedu/address/logic/parser/MatchCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"content":"//@@author Zhu-Jiahui"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class MatchCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private MatchCommandParser parser \u003d new MatchCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsMatchCommand() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1 c/s\","},{"lineNumber":21,"author":{"gitID":"-"},"content":"                new MatchCommand(INDEX_FIRST_PERSON, new Category(\"s\")));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        // Missing index"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"c/s\","},{"lineNumber":28,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // Missing category"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\","},{"lineNumber":31,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"shookshire":1,"-":31}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, \"1 c/s\", new DeleteCommand(INDEX_FIRST_PERSON, new Category(\"s\")));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1 c/t\", new DeleteCommand(INDEX_FIRST_PERSON, new Category(\"t\")));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":2,"-":32}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d TuitionCor - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"e0032017"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":":forked from Team SE-EDU"},{"lineNumber":15,"author":{"gitID":"-"},"content":":Team SE-EDU: https://github.com/se-edu/addressbook-level4"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"By: `Team F11-B2`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":40,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":41,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":42,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":43,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":54,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":63,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":64,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":67,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-F11-B2/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-F11-B2/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":94,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":102,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":107,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":134,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":145,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":161,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `TutorListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":179,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":180,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":186,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":".  The command execution can affect the `Model` (e.g. adding a client) and/or raise events."},{"lineNumber":191,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1 c/s\")` API call."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":".Interactions Inside the Logic Component for the `delete 1 c/s` Command"},{"lineNumber":196,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"// tag::modelComponent[]"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":204,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":212,"author":{"gitID":"shookshire"},"content":"* exposes an unmodifiable `ObservableList\u003cClient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":214,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":215,"author":{"gitID":"shookshire"},"content":"// end::modelComponent[]"},{"lineNumber":216,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":221,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"shookshire"},"content":"// tag::modelImplementation[]"},{"lineNumber":240,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":241,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d Model"},{"lineNumber":242,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"The AddressBook currently stores Clients in separate UniqueClientList (students, tutors, closedStudents, closedTutors) depending on category the Client belongs to."},{"lineNumber":245,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":246,"author":{"gitID":"shookshire"},"content":"Due to students and tutors being stored as 2 separate UniqueClientList, commands that work on only 1 of the 2 list (eg. addclient, edit, delete etc.) would require the model to either expose 2 functions for the Command to call or to take in a Category argument which the model would then handle as shown below."},{"lineNumber":247,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":248,"author":{"gitID":"shookshire"},"content":"image::StudentTutorList.png[width\u003d\"800\"]"},{"lineNumber":249,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":250,"author":{"gitID":"shookshire"},"content":"Commands that work only on either students or tutors would have to declare which Category they wish to work on in the command input. For example for the delete command would have to input `delete 1 c/s` to represent that they wish to delete from students."},{"lineNumber":251,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":252,"author":{"gitID":"shookshire"},"content":"Hence, commands that work only on either students or tutors have to either be split into 2 functions or take in an additional argument stating which UniqueClientList to work on as shown below."},{"lineNumber":253,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":254,"author":{"gitID":"shookshire"},"content":".Example of splitting call into 2 functions"},{"lineNumber":255,"author":{"gitID":"shookshire"},"content":"image::SeparateFunctionForStudentTutor.png[width\u003d\"800\"]"},{"lineNumber":256,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":257,"author":{"gitID":"shookshire"},"content":"----"},{"lineNumber":258,"author":{"gitID":"shookshire"},"content":"public class updatePerson(Client target, Client editedClient, Category category) {"},{"lineNumber":259,"author":{"gitID":"shookshire"},"content":"    if (category.isStudent) {"},{"lineNumber":260,"author":{"gitID":"shookshire"},"content":"        // ... work on students ..."},{"lineNumber":261,"author":{"gitID":"shookshire"},"content":"    } else if (category.isTutor) {"},{"lineNumber":262,"author":{"gitID":"shookshire"},"content":"        // ... work on tutors ..."},{"lineNumber":263,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"shookshire"},"content":"}"},{"lineNumber":265,"author":{"gitID":"shookshire"},"content":"----"},{"lineNumber":266,"author":{"gitID":"shookshire"},"content":"Example of function that takes in additional argument to determine whether to work on students or tutors"},{"lineNumber":267,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":268,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d\u003d Design Considerations of Model"},{"lineNumber":269,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":270,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Keeping students and tutors in 1 or 2 list"},{"lineNumber":271,"author":{"gitID":"shookshire"},"content":"* **Alternative 1 (current choice):** Keep students and tutors separated in 2 UniqueClientList"},{"lineNumber":272,"author":{"gitID":"shookshire"},"content":"** Pros: Does not have to do an additional search through the list to differentiate students and tutors"},{"lineNumber":273,"author":{"gitID":"shookshire"},"content":"** Cons: Calls that work on only one of the 2 list would have to be separated."},{"lineNumber":274,"author":{"gitID":"shookshire"},"content":"* **Alternative 2:** Keep all clients in the same UniqueClientList and differentiate them using the clients\u0027 Category value"},{"lineNumber":275,"author":{"gitID":"shookshire"},"content":"** Pros: Easy to implement."},{"lineNumber":276,"author":{"gitID":"shookshire"},"content":"** Cons: Have to run an additional search through the list to differentiate students and tutors which could be slow when database is large."},{"lineNumber":277,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":278,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Whether to have different commands for students and tutors"},{"lineNumber":279,"author":{"gitID":"shookshire"},"content":"* **Alternative 1 (current choice):** Make the Category prefix compulsory for any command that work on only 1 list"},{"lineNumber":280,"author":{"gitID":"shookshire"},"content":"** Pros: Minimises number of commands and use already existing prefix instead."},{"lineNumber":281,"author":{"gitID":"shookshire"},"content":"** Cons: Needs to parse an additional prefix"},{"lineNumber":282,"author":{"gitID":"shookshire"},"content":"* **Alternative 2:** Have separate commands (eg. deleteStudent and deleteTutor instead of just delete)"},{"lineNumber":283,"author":{"gitID":"shookshire"},"content":"** Pros: Easy to implement."},{"lineNumber":284,"author":{"gitID":"shookshire"},"content":"** Cons: Large number of duplicated commands."},{"lineNumber":285,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":286,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d Client and the fields of Client"},{"lineNumber":287,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"shookshire"},"content":"The Client Class extends Person that consists of 5 fields (name, phone, email, address, tags) while Client has additional 4 fields (location, grade, subject, category)."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"shookshire"},"content":"All of the fields uses a specific class that takes a single String as it\u0027s value as shown below."},{"lineNumber":292,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":293,"author":{"gitID":"shookshire"},"content":".Example of Subject field with it\u0027s value"},{"lineNumber":294,"author":{"gitID":"shookshire"},"content":"image::ClientFieldExample.png[width\u003d\"800\"]"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"shookshire"},"content":"Hence, for fields that should actually take in multiple values (eg. Subject taking in \"math physics chemistry\") are currently stored as a single String while operations that work on the individual keywords have to manually split them into separate keywords through String operations."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"shookshire"},"content":"----"},{"lineNumber":299,"author":{"gitID":"shookshire"},"content":"private static Client createEditedPerson(Client personToEdit, Subject toRemove) {"},{"lineNumber":300,"author":{"gitID":"shookshire"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"shookshire"},"content":"        String editSubjects \u003d personToEdit.getSubject().value;"},{"lineNumber":303,"author":{"gitID":"shookshire"},"content":"        ArrayList\u003cString\u003e editSubjectArray \u003d new ArrayList\u003c\u003e(Arrays.asList(editSubjects.split(\" \")));"},{"lineNumber":304,"author":{"gitID":"shookshire"},"content":"        editSubjectArray.remove(toRemove.value);"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"shookshire"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":307,"author":{"gitID":"shookshire"},"content":"        ....."},{"lineNumber":308,"author":{"gitID":"shookshire"},"content":"----"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"shookshire"},"content":"As you can see from this section taken from Remove Command, after getting the String of the value of Subject, it has to use String operations to split it based on whitespace and reconstruct the string again later."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"shookshire"},"content":"On the other hand, a client can have multiple Tags as the Tag are stored through an UniqueTagList."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":315,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: To store multiple values in a single String or as separate objects in a list"},{"lineNumber":316,"author":{"gitID":"shookshire"},"content":"* **(Alternative 1 (current choice)):** Store all the values as a single String and have commands that work on individual keywords split them."},{"lineNumber":317,"author":{"gitID":"shookshire"},"content":"** Pros: Most commands simply require to read the value directly as a String and does not require to work on individual keyword. Does not require multiple types of unique list to be created for each of the field."},{"lineNumber":318,"author":{"gitID":"shookshire"},"content":"** Cons: Lacks in flexibility in being able to individual values."},{"lineNumber":319,"author":{"gitID":"shookshire"},"content":"* **(Alternative 2)** Create a list similar to UniqueTagList for each field that requires the storage of multiple values"},{"lineNumber":320,"author":{"gitID":"shookshire"},"content":"** Pros: Allows for greater flexibility and the ability to sync the various existing values in the AddressBook."},{"lineNumber":321,"author":{"gitID":"shookshire"},"content":"** Cons: Require many lists to be stored. Whenever more fields are added in future enhancements, it could potentially require the excessive creation of a new type unique list each time."},{"lineNumber":322,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":323,"author":{"gitID":"shookshire"},"content":"// end::modelImplementation[]"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":326,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":327,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":338,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":339,"author":{"gitID":"-"},"content":"----"},{"lineNumber":340,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":342,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":344,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"-"},"content":"}"},{"lineNumber":346,"author":{"gitID":"-"},"content":"----"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":349,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":350,"author":{"gitID":"-"},"content":"----"},{"lineNumber":351,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":352,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":357,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"-"},"content":"}"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":361,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":362,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":364,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"-"},"content":"}"},{"lineNumber":366,"author":{"gitID":"-"},"content":"----"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":379,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":388,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":397,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":416,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":417,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":418,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":419,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":420,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":425,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":426,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":427,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":428,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":429,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":435,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":436,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":437,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":438,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":439,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":440,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":446,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":447,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":448,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":449,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":450,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":451,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"// tag::match[]"},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Match Function"},{"lineNumber":455,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":456,"author":{"gitID":"-"},"content":"The match function behaves like a multi-layer find function. It helps to match clients that share one or more similar attributes."},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"For example, John is a Tutor client that is staying in the `west` of Singapore, and is looking for students that requires help in `s4`(secondary4) `math`."},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"first, locate John by either using `find John` or finding him in the tutor list. Observe John\u0027s Index number."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"image::MatchSequence1.png[width\u003d\"800\u0027]"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"from the sample image above, we can see that John\u0027s index number is 6 in tutors list."},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"image::MatchSequence2.png[width\u003d\"800\u0027]"},{"lineNumber":467,"author":{"gitID":"-"},"content":"Keying in the command in the format `match` `INDEX` `Category`. eg: `match 6 c/t`"},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"image::MatchSequence3.png[width\u003d\"800\u0027]"},{"lineNumber":470,"author":{"gitID":"-"},"content":"Match function returns a list with all the potential students for John with the highest match (all attributes matched) on top of the list."},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"All the matched attributes are highlighted in orange."},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step by Step breakdown"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"match function behaves like at double-layered find function. When a user enters `match 1 c/t`, the system will first need to extract the first tutor from the tutor\u0027s list."},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"To do this, first we need to identify the client is a tutor or a student."},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"The detailed code is shown below:"},{"lineNumber":481,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":482,"author":{"gitID":"-"},"content":"----"},{"lineNumber":483,"author":{"gitID":"-"},"content":"if (category.isStudent()) {"},{"lineNumber":484,"author":{"gitID":"-"},"content":"            lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":485,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":486,"author":{"gitID":"-"},"content":"            lastShownList \u003d model.getFilteredTutorList();"},{"lineNumber":487,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":488,"author":{"gitID":"-"},"content":"        clientToMatch \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"----"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":493,"author":{"gitID":"-"},"content":"If the user input format is invalid, an exception will be thrown"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"When the client is located, his data (location, grade and subject) are then sent to `MatchContainsKeywordsPredicate.java`"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"The detailed code is shown below:"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":501,"author":{"gitID":"-"},"content":"----"},{"lineNumber":502,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":503,"author":{"gitID":"shookshire"},"content":"    public boolean test(Client other) {"},{"lineNumber":504,"author":{"gitID":"-"},"content":"        boolean isMatch \u003d false;"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"        if(other.getLocation().equals(client.getLocation())) {"},{"lineNumber":507,"author":{"gitID":"-"},"content":"            isMatch \u003d true;"},{"lineNumber":508,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":509,"author":{"gitID":"-"},"content":"        if(other.getGrade().equals(client.getGrade())) {"},{"lineNumber":510,"author":{"gitID":"-"},"content":"            isMatch \u003d true;"},{"lineNumber":511,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":512,"author":{"gitID":"-"},"content":"        if(other.getSubject().equals(client.getSubject())) {"},{"lineNumber":513,"author":{"gitID":"-"},"content":"            isMatch \u003d true;"},{"lineNumber":514,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":515,"author":{"gitID":"-"},"content":"        return isMatch;"},{"lineNumber":516,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"----"},{"lineNumber":519,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":520,"author":{"gitID":"-"},"content":"If there is no match client found, an empty list will be shown."},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"image::MatchZeroClient.png[width\u003d\"800\u0027]"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"If the input client is a tutor, the tutor list will only be showing the particular of the input client."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"image::MatchSequence3.png[width\u003d\"800\u0027]"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"this is done in MatchContainsPersonsPredicate.java"},{"lineNumber":529,"author":{"gitID":"-"},"content":"The detailed code is shown below:"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":532,"author":{"gitID":"-"},"content":"----"},{"lineNumber":533,"author":{"gitID":"-"},"content":"public boolean test(Client other) {"},{"lineNumber":534,"author":{"gitID":"-"},"content":"        return other.toString().equals(client.toString());"},{"lineNumber":535,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":536,"author":{"gitID":"-"},"content":"----"},{"lineNumber":537,"author":{"gitID":"-"},"content":"A sequence diagram is shown below to show the current design when user input \"match 1 c/s\""},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"image::MatchSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: UserInput"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** User key in client index displayed with with client\u0027s category. e.g `match 1 c/t`."},{"lineNumber":546,"author":{"gitID":"-"},"content":"** Pros: There will be no mismatch since user specify the exact client to match with."},{"lineNumber":547,"author":{"gitID":"-"},"content":"** Cons: More user input and extra step is taken. User have to locate the client\u0027s index first before using match function."},{"lineNumber":548,"author":{"gitID":"-"},"content":"* **Alternative 2:** user key in the client\u0027s name. e.g `match John`."},{"lineNumber":549,"author":{"gitID":"-"},"content":"** Pros: More convenient for user to operate, lesser steps."},{"lineNumber":550,"author":{"gitID":"-"},"content":"** Cons: If there are 2 John stored in the application, there is a chance for the application to match a wrong client."},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Future Implementations"},{"lineNumber":553,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Optimise match function to accommodate multiple `Grade` and `Subject` fields per client."},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"image::MatchFunctionFutureImplementation.png[width\u003d\"800\"]"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"* As illustrated above, match function currently highlights all the grades/subjects of a client as long as one of the grade/subject is matched."},{"lineNumber":558,"author":{"gitID":"-"},"content":"* Future Implementation could be done to only highlight the respective matched grade/subject."},{"lineNumber":559,"author":{"gitID":"-"},"content":"// end::match[]"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"// tag::sorting[]"},{"lineNumber":562,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sort feature"},{"lineNumber":563,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"The sort command is facilitated by a `SortCommandParser` which implements `Parser\u003cSortCommand\u003e`. The sort function supports sorting of different fields, namely location, grade, subject and name, which updates the list according to the sorting method."},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"Different types of sorting methods extends abstract class `SortCommand` which extends `Command` that resides in Logic as shown in the model below."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"image::SortCommandClassDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"The different type of sort command are implemented this way:"},{"lineNumber":572,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":573,"author":{"gitID":"-"},"content":"----"},{"lineNumber":574,"author":{"gitID":"-"},"content":"public class SortByNameCommand extends SortCommand {"},{"lineNumber":575,"author":{"gitID":"-"},"content":"     @Override"},{"lineNumber":576,"author":{"gitID":"-"},"content":"     public CommandResult execute() {"},{"lineNumber":577,"author":{"gitID":"-"},"content":"         // ... list logic ..."},{"lineNumber":578,"author":{"gitID":"-"},"content":"     }"},{"lineNumber":579,"author":{"gitID":"-"},"content":"}"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"public class SortByLocationCommand extends SortCommand {"},{"lineNumber":582,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":583,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":584,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":585,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":586,"author":{"gitID":"-"},"content":"}"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"public class SortByGradeCommand extends SortCommand {"},{"lineNumber":589,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":590,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":591,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":592,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":593,"author":{"gitID":"-"},"content":"}"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"public class SortBySubjectCommand extends SortCommand {"},{"lineNumber":596,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":597,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":598,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":599,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":600,"author":{"gitID":"-"},"content":"}"},{"lineNumber":601,"author":{"gitID":"-"},"content":"----"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"When the user wants to sort the specific list according to his/her needs, `SortCommandParser` will parse the user input and decide which type of SortCommand to invoke."},{"lineNumber":604,"author":{"gitID":"-"},"content":"The implementation is as follows:"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":607,"author":{"gitID":"-"},"content":"----"},{"lineNumber":608,"author":{"gitID":"-"},"content":"public SortCommand parse(String args) throws ParseException {"},{"lineNumber":609,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":610,"author":{"gitID":"-"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_CATEGORY)"},{"lineNumber":613,"author":{"gitID":"-"},"content":"                || argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":614,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":615,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"        String sortType;"},{"lineNumber":618,"author":{"gitID":"-"},"content":"        Category category;"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":621,"author":{"gitID":"-"},"content":"            sortType \u003d argumentMultimap.getPreamble();"},{"lineNumber":622,"author":{"gitID":"-"},"content":"            category \u003d ParserUtil.parseCategory(argumentMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":623,"author":{"gitID":"-"},"content":"            return getSortCommandType(category, sortType);"},{"lineNumber":624,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":625,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":626,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":627,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":628,"author":{"gitID":"-"},"content":"----"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":631,"author":{"gitID":"-"},"content":"If the user input format is invalid, an ParseException will be thrown and an error message will be displayed to user."},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"A sequence diagram is shown below to show the current design when user input \"sort l c/t\"."},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"image::SortSequenceDiagram.PNG[width\u003d\"800\u0027]"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the different sort commands"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Make SortCommand an abstract method and allow the different sort commands to inherit from it."},{"lineNumber":642,"author":{"gitID":"-"},"content":"** Pros: Able to reuse constants from SortCommand"},{"lineNumber":643,"author":{"gitID":"-"},"content":"** Cons: SortCommand might be redundant"},{"lineNumber":644,"author":{"gitID":"-"},"content":"* **Alternative 2:** Implement multiple sort commands which extends command directly"},{"lineNumber":645,"author":{"gitID":"-"},"content":"** Pros: Might be easier to implement"},{"lineNumber":646,"author":{"gitID":"-"},"content":"** Cons: Messy"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Parsing of user input for sort command"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** SortCommandParser parse one single string user input. Eg. \u0027sort l c/t\u0027 which sort tutor list by location."},{"lineNumber":651,"author":{"gitID":"-"},"content":"** Pros: Able to utilise the current Logic and Model Component for command inputs"},{"lineNumber":652,"author":{"gitID":"-"},"content":"** Cons: Less intuitive to user."},{"lineNumber":653,"author":{"gitID":"-"},"content":"* **Alternative 2:** Allow multiple user input of before parsing to a command. Eg. User input sort and system will prompts for user to input which list to sort."},{"lineNumber":654,"author":{"gitID":"-"},"content":"** Pros: This is much more intuitive for user and allows further enhancements which require multiple command inputs."},{"lineNumber":655,"author":{"gitID":"-"},"content":"** Cons: This will require to overhaul of Logic and Model Component."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"// end::sorting[]"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"// tag::closedClientList[]"},{"lineNumber":661,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Closed client list"},{"lineNumber":662,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"The closed client list is where closed clients students or tutors information are stored and displayed."},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"The implementation of the storage is similar to how clients are stored in the TuitionCor. Two `UniqueClientList` namely `closedStudents` and `closedTutors` were created to store the information of closed students and tutors."},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"The addition of clients into their respective `UniqueClientList` are implemented this way:"},{"lineNumber":669,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":670,"author":{"gitID":"-"},"content":"----"},{"lineNumber":671,"author":{"gitID":"-"},"content":"    public void addClosedStudent(Client t) throws AssertionError {"},{"lineNumber":672,"author":{"gitID":"-"},"content":"        closedStudents.add(closedStudent);"},{"lineNumber":673,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"   public void addClosedTutor(Client t) throws AssertionError {"},{"lineNumber":676,"author":{"gitID":"-"},"content":"        closedTutors.add(closedTutor);"},{"lineNumber":677,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"   public void add(Client toAdd) throws AssertionError {"},{"lineNumber":680,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":681,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":682,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"It\u0027s impossible to have a duplicate person here\");"},{"lineNumber":683,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":684,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":685,"author":{"gitID":"-"},"content":"   }"},{"lineNumber":686,"author":{"gitID":"-"},"content":"----"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":689,"author":{"gitID":"-"},"content":" An `AssertionError` is also thrown as there should not exist any duplicated person in the active list."},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"Implementation of the removal of clients from the list are as follows:"},{"lineNumber":692,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":693,"author":{"gitID":"-"},"content":"----"},{"lineNumber":694,"author":{"gitID":"-"},"content":"    public boolean removeClosedClient(Client key, Category category) throws PersonNotFoundException {"},{"lineNumber":695,"author":{"gitID":"-"},"content":"        Boolean isSuccess;"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"        if (category.isStudent()) {"},{"lineNumber":698,"author":{"gitID":"-"},"content":"            isSuccess \u003d closedStudents.remove(key);"},{"lineNumber":699,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":700,"author":{"gitID":"-"},"content":"            isSuccess \u003d closedTutors.remove(key);"},{"lineNumber":701,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"        if (isSuccess) {"},{"lineNumber":704,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":705,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":706,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":707,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":708,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":709,"author":{"gitID":"-"},"content":"----"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"With the addition of closed client list, certain commands will be unique to only closed or active client list"},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"Commands available in closed client\u0027s list: +"},{"lineNumber":714,"author":{"gitID":"-"},"content":"`clear` `exit` `find` `help` `history` `list` `redo` `undo` `restore` `switch`"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"Commands available in active client\u0027s list: +"},{"lineNumber":717,"author":{"gitID":"-"},"content":"`addclient` `clear` `close` `delete` `edit` `exit` `find` `help` `history` `list` `match` `redo` `undo` `remove` `sort` `switch`"},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"A check is implemented this way in all commands features that available only when viewing active client list:"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":723,"author":{"gitID":"-"},"content":"----"},{"lineNumber":724,"author":{"gitID":"-"},"content":"    if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":725,"author":{"gitID":"-"},"content":"        throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":726,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":727,"author":{"gitID":"-"},"content":"----"},{"lineNumber":728,"author":{"gitID":"-"},"content":"This allows `CommandNotAvailableInClosedViewException` to be thrown when the"},{"lineNumber":729,"author":{"gitID":"-"},"content":"user is attempts to use a command unique to active list view while viewing closed list view."},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Integration of commands which were unique to active client list to closed client list."},{"lineNumber":734,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Limit the number of commands available to closed clients list."},{"lineNumber":735,"author":{"gitID":"-"},"content":"** Pros: This is easier to implement as there would be less changes to existing commands as certain commands are not relevant while viewing closed client list."},{"lineNumber":736,"author":{"gitID":"-"},"content":"** Cons: Design of unique commands would still have to be changed if they were to be made available to both list."},{"lineNumber":737,"author":{"gitID":"-"},"content":"* **Alternative 2:** Allow the display to automatically switch to either closed or active list list where the command is available upon user input."},{"lineNumber":738,"author":{"gitID":"-"},"content":"** Pros: This is more intuitive to users."},{"lineNumber":739,"author":{"gitID":"-"},"content":"** Cons: This is much harder to implement as this would include require changes to be made to the command structure."},{"lineNumber":740,"author":{"gitID":"-"},"content":"// end::closedClientList[]"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"// tag::close[]"},{"lineNumber":743,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Close feature"},{"lineNumber":744,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"The close command allows users to remove a particular client from the active client\u0027s list and stores it in the closed client\u0027s list."},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"* CloseCommand extends `UndoableCommand` and this is an undoable command. It overwrites `executeUndoableCommand` in abstract class `UndoableCommand`."},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"** It will first remove the the selected client from the active client list. If this particular client is not found, a `PersonNotFoundException` will be thrown."},{"lineNumber":751,"author":{"gitID":"-"},"content":"** After which, the particular removed client will be added to the closed client list. An `AssertionError` will be thrown if a duplicated client is detected as it should not be possible to have a duplicated client in the active client list in TuitionCor."},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"The implementation is as follows:"},{"lineNumber":754,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":755,"author":{"gitID":"-"},"content":"----"},{"lineNumber":756,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":757,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":758,"author":{"gitID":"-"},"content":"        requireNonNull(clientToClose);"},{"lineNumber":759,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":760,"author":{"gitID":"-"},"content":"            model.deleteClient(clientToClose, category);"},{"lineNumber":761,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":762,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target client cannot be missing\");"},{"lineNumber":763,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":766,"author":{"gitID":"-"},"content":"            if (category.isStudent()) {"},{"lineNumber":767,"author":{"gitID":"-"},"content":"                model.addClosedStudent(clientToClose);"},{"lineNumber":768,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":769,"author":{"gitID":"-"},"content":"                model.addClosedTutor(clientToClose);"},{"lineNumber":770,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":771,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":772,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The client should not be duplicated\");"},{"lineNumber":773,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"        if (category.isStudent()) {"},{"lineNumber":776,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_CLOSE_STUDENT_SUCCESS, clientToClose));"},{"lineNumber":777,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":778,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_CLOSE_TUTOR_SUCCESS, clientToClose));"},{"lineNumber":779,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":780,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":781,"author":{"gitID":"-"},"content":"----"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"A sequence diagram is shown below to show the current design when a user input \"close 1 c/s\""},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"image::CloseSequenceDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the close command"},{"lineNumber":790,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Current implementation calls model component twice to execute deleteClient and addClosedStudent or addClosedTutor."},{"lineNumber":791,"author":{"gitID":"-"},"content":"** Pros: This ensures that deleteClient is able to execute successfully before addClosedStudent is executed."},{"lineNumber":792,"author":{"gitID":"-"},"content":"** Cons: This reduces code efficiency."},{"lineNumber":793,"author":{"gitID":"-"},"content":"* **Alternative 2:** Implement a closeClient method in model to execute deleteClient and addClosedStudent or addClosedTutor."},{"lineNumber":794,"author":{"gitID":"-"},"content":"** Pros: Model can be called once."},{"lineNumber":795,"author":{"gitID":"-"},"content":"** Cons: New developers might no understand as this reduces code readability."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"// end::close[]"},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"// tag::restore[]"},{"lineNumber":801,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Restore feature"},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":804,"author":{"gitID":"-"},"content":"The restore command allows users to remove a particular client from the closed client\u0027s list and restore it back to the active client\u0027s list."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"* `RestoreCommand` extends `UndoableCommand` and this is an undoable command. It overwrites `executeUndoableCommand` in abstract class `UndoableCommand`."},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"** It will first remove the the selected client from the closed client list. If this particular client is not found, a `PersonNotFoundException` will be thrown."},{"lineNumber":809,"author":{"gitID":"-"},"content":"** After which, the particular removed client will be added to the active client list. An AssertionError will be thrown if a duplicated client is detected as it should not be possible to have a duplicated client in the closed client list in TuitionCor."},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"* This design is very similar to close command\u0027s design."},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"The implementation is as follows:"},{"lineNumber":814,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":815,"author":{"gitID":"-"},"content":"----"},{"lineNumber":816,"author":{"gitID":"-"},"content":"@Override"},{"lineNumber":817,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":818,"author":{"gitID":"-"},"content":"        requireNonNull(clientToRestore);"},{"lineNumber":819,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":820,"author":{"gitID":"-"},"content":"            model.deleteClosedClient(clientToRestore, category);"},{"lineNumber":821,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":822,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target client cannot be missing\");"},{"lineNumber":823,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":826,"author":{"gitID":"-"},"content":"            if (category.isStudent()) {"},{"lineNumber":827,"author":{"gitID":"-"},"content":"                model.addStudent(clientToRestore);"},{"lineNumber":828,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":829,"author":{"gitID":"-"},"content":"                model.addTutor(clientToRestore);"},{"lineNumber":830,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":831,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":832,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The client should not be duplicated\");"},{"lineNumber":833,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":"        if (category.isStudent()) {"},{"lineNumber":836,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_RESTORE_STUDENT_SUCCESS, clientToRestore));"},{"lineNumber":837,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":838,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_CLOSE_TUTOR_SUCCESS, clientToRestore));"},{"lineNumber":839,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":840,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":841,"author":{"gitID":"-"},"content":"----"},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"A sequence diagram is shown below to show the current design when a user input \"restore 1 c/s\""},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"image::RestoreSequenceDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"// end::restore[]"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"// tag::switch[]"},{"lineNumber":850,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Switch feature"},{"lineNumber":851,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"Switch commands allows user to toggle between the active and closed client\u0027s list and it extends `Command`."},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"* Implementation of Switch command that overrides `execute()` method in `Command` is as follows:"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":858,"author":{"gitID":"-"},"content":"----"},{"lineNumber":859,"author":{"gitID":"-"},"content":"@Override"},{"lineNumber":860,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":861,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ClientListSwitchEvent());"},{"lineNumber":862,"author":{"gitID":"-"},"content":"        listPanelController.switchDisplay();"},{"lineNumber":863,"author":{"gitID":"-"},"content":"        if (listPanelController.getCurrentListDisplayed() \u003d\u003d ListPanelController.DisplayType.closedList) {"},{"lineNumber":864,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS + MESSAGE_CLOSED_DISPLAY_LIST);"},{"lineNumber":865,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":866,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS + MESSAGE_ACTIVE_DISPLAY_LIST);"},{"lineNumber":867,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":868,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":869,"author":{"gitID":"-"},"content":"----"},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"* A `ListPanelController` is used to keep track of the currently displayed list and switch the list when called."},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":874,"author":{"gitID":"-"},"content":"----"},{"lineNumber":875,"author":{"gitID":"-"},"content":"    public void switchDisplay() {"},{"lineNumber":876,"author":{"gitID":"-"},"content":"        switch (currentlyDisplayed) {"},{"lineNumber":877,"author":{"gitID":"-"},"content":"        case activeList:"},{"lineNumber":878,"author":{"gitID":"-"},"content":"            currentlyDisplayed \u003d DisplayType.closedList;"},{"lineNumber":879,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"        case closedList:"},{"lineNumber":882,"author":{"gitID":"-"},"content":"            currentlyDisplayed \u003d DisplayType.activeList;"},{"lineNumber":883,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":886,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"This should not be possible.\");"},{"lineNumber":887,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":888,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":889,"author":{"gitID":"-"},"content":"----"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":"* Switch command uses `ClientListSwitchEvent` to raise an event whenever the user wants to toggle the list displayed."},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":894,"author":{"gitID":"-"},"content":"----"},{"lineNumber":895,"author":{"gitID":"-"},"content":"   public class ClientListSwitchEvent extends BaseEvent {"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"       @Override"},{"lineNumber":898,"author":{"gitID":"-"},"content":"       public String toString() {"},{"lineNumber":899,"author":{"gitID":"-"},"content":"           return this.getClass().getSimpleName();"},{"lineNumber":900,"author":{"gitID":"-"},"content":"       }"},{"lineNumber":901,"author":{"gitID":"-"},"content":"   }"},{"lineNumber":902,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":903,"author":{"gitID":"-"},"content":"----"},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"* When a event is raise it\u0027s handled by `handleClientListSwitchEvent` which resides in both `StudentListPanel` and `TutorListPanel`."},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":908,"author":{"gitID":"-"},"content":"----"},{"lineNumber":909,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":910,"author":{"gitID":"-"},"content":"    private void handleClientListSwitchEvent(ClientListSwitchEvent event) {"},{"lineNumber":911,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":912,"author":{"gitID":"-"},"content":"        switchListDisplay();"},{"lineNumber":913,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":914,"author":{"gitID":"-"},"content":"----"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"* This will allow `StudentListPanel` and `TutorListPanel` to be updated accordingly based on the current list that is on display."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":919,"author":{"gitID":"-"},"content":"----"},{"lineNumber":920,"author":{"gitID":"-"},"content":"    private void switchListDisplay() {"},{"lineNumber":921,"author":{"gitID":"-"},"content":"        ListPanelController listPanelController \u003d ListPanelController.getInstance();"},{"lineNumber":922,"author":{"gitID":"-"},"content":"        switch (listPanelController.getCurrentListDisplayed()) {"},{"lineNumber":923,"author":{"gitID":"-"},"content":"        case activeList:"},{"lineNumber":924,"author":{"gitID":"-"},"content":"            setConnectionsForClosedStudents();"},{"lineNumber":925,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"        case closedList:"},{"lineNumber":928,"author":{"gitID":"-"},"content":"            setConnectionsForStudents();"},{"lineNumber":929,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":932,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"This should not be possible.\");"},{"lineNumber":933,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":934,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":935,"author":{"gitID":"-"},"content":"----"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"* A sequence diagram is shown below when switch command is entered by user."},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"image::SwitchSequenceDiagram.PNG[width\u003d\"800\"]"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of switch command"},{"lineNumber":944,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Raise new event to indicate switch event."},{"lineNumber":945,"author":{"gitID":"-"},"content":"** Pros: Reduce direct coupling between components StudentListPanel and TutorListPanel with SwitchCommand"},{"lineNumber":946,"author":{"gitID":"-"},"content":"** Cons: Code might be harder to understand."},{"lineNumber":947,"author":{"gitID":"-"},"content":"* **Alternative 2:** Call a method in StudentListPanel and TutorListPanel to indicate a switch request."},{"lineNumber":948,"author":{"gitID":"-"},"content":"** Pros: Code is easier to understand."},{"lineNumber":949,"author":{"gitID":"-"},"content":"** Cons: Direct coupling occurs and changing a part might affect another component."},{"lineNumber":950,"author":{"gitID":"-"},"content":"// end::switch[]"},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":957,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":958,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":963,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":964,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":965,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":968,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":977,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":982,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":995,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":996,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":997,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1003,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1035,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1036,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1037,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1043,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1050,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1074,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1075,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1076,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":1095,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":1108,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":1112,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":1113,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1115,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":1116,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":1117,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1118,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":1129,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":1133,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":1135,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":1138,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":1139,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":1140,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":1141,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":1142,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1153,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1165,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1166,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1167,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1168,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1169,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1170,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1171,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1174,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1175,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1186,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1187,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1189,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1190,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1192,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1193,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1194,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1195,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":1198,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":1211,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":1213,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":1214,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1215,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":1216,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1217,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":1228,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":1233,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1235,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":1246,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1263,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1266,"author":{"gitID":"-"},"content":""},{"lineNumber":1267,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1268,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1269,"author":{"gitID":"-"},"content":""},{"lineNumber":1270,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1276,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1277,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1278,"author":{"gitID":"-"},"content":""},{"lineNumber":1279,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1282,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1283,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1284,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1292,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1299,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1304,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1311,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1316,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1317,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1320,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1331,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1336,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1339,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1350,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1353,"author":{"gitID":"-"},"content":""},{"lineNumber":1354,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1357,"author":{"gitID":"-"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1361,"author":{"gitID":"-"},"content":""},{"lineNumber":1362,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1363,"author":{"gitID":"-"},"content":""},{"lineNumber":1364,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1365,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1366,"author":{"gitID":"-"},"content":""},{"lineNumber":1367,"author":{"gitID":"-"},"content":"*Target user profile*: +"},{"lineNumber":1368,"author":{"gitID":"-"},"content":" Tuition coordinators who handle significant number of contacts and are comfortable with CLI applications."},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"-"},"content":"* Value proposition*:"},{"lineNumber":1371,"author":{"gitID":"-"},"content":"** TuitionCor is targeted at tuition coordinators who have to manage a large amount of contacts."},{"lineNumber":1372,"author":{"gitID":"-"},"content":"** The daily job-scope of a tuition coordinator involves the need to manage large amount of contacts and match the students to tutors according to their credentials, needs and location."},{"lineNumber":1373,"author":{"gitID":"-"},"content":"** Therefore, TuitionCor aims to facilitate this process and make the job of a tuition coordinator easier."},{"lineNumber":1374,"author":{"gitID":"-"},"content":""},{"lineNumber":1375,"author":{"gitID":"-"},"content":"* In addition, users are able to"},{"lineNumber":1376,"author":{"gitID":"-"},"content":"** Add clients"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"** Match students to tutors or vice versa"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"** Sort clients based on a particular aspect"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"** Find clients based on keywords"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"** Close assigned clients"},{"lineNumber":1381,"author":{"gitID":"-"},"content":"** Restore closed clients"},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1384,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1385,"author":{"gitID":"-"},"content":""},{"lineNumber":1386,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1387,"author":{"gitID":"-"},"content":""},{"lineNumber":1388,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1390,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1391,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person (tutor or student) |expand user\u0027s addressbook for future tuition coordination"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that the user no longer need"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1398,"author":{"gitID":"-"},"content":""},{"lineNumber":1399,"author":{"gitID":"-"},"content":"|`* * *` |user |sort contacts based on the clients\u0027 location (North, South, East, West, Central |better match students and tutors that are staying near each other."},{"lineNumber":1400,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1401,"author":{"gitID":"e0032017"},"content":"|`* * *` |user |edit the information stored |keep the information up to date"},{"lineNumber":1402,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":"|`* * *` |user |tag tutors and students with multiple fields |do multi-layer searching to better match tutors and students"},{"lineNumber":1404,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1405,"author":{"gitID":"-"},"content":"|`* * *` |user |categorise contacts between students and tutors |reduce the number of tagging required and make searching more convenient"},{"lineNumber":1406,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1407,"author":{"gitID":"-"},"content":"|`* * *` |user |group clients based on the subject they wish to study/teach (Math, Eng, Phy, Chem...) |find and match client easily by the subjects registered"},{"lineNumber":1408,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1409,"author":{"gitID":"-"},"content":"|`* * *` |user |record the gender preference the students/tutors have (male/female) |find and match client easily by the gender preference registered"},{"lineNumber":1410,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1411,"author":{"gitID":"e0032017"},"content":"|`* * *` |user |see and compare the price that students/tutors are willing to pay/accept|match them based on pricing"},{"lineNumber":1412,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1413,"author":{"gitID":"-"},"content":"|`* * *` |user |search by tags added to client |generate a list of clients that have the same tags"},{"lineNumber":1414,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1415,"author":{"gitID":"-"},"content":"|`* * *` |user |differentiate \"location\" \"subject\" and \"grade\" by colours |identify \"location\", \"subject\" and \"grade\" attributes easily"},{"lineNumber":1416,"author":{"gitID":"-"},"content":""},{"lineNumber":1417,"author":{"gitID":"-"},"content":"|`* * *` |user |sort the clients name |better organise my clients"},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"-"},"content":"|`* * *` |new user |sort contacts based on clients subjects |better organise my clients"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":"|`* * *` |new user |sort contacts based on clients grade |better organise my clients"},{"lineNumber":1422,"author":{"gitID":"-"},"content":""},{"lineNumber":1423,"author":{"gitID":"-"},"content":"|`* * *` |user |sort the clients based on a particular field |better organise my clients"},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":"|`* * *` |user |match a given client and app will show a list of clients sorted from the most suitable to the least suitable |give my clients more choices"},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":"|`* * *` |user |match clients that only fit certain requirements |clients will have more choice to choose from"},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"shookshire"},"content":"|`* * *` |user |easily remove the subjects of the students when they find tutors |edit the subjects of students whenever they find a suitable tutor easily"},{"lineNumber":1430,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":1431,"author":{"gitID":"shookshire"},"content":"|`* * *` |user |advance the grades of all the students in the application |change the grades of all the students without manually editing them one by one"},{"lineNumber":1432,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":1433,"author":{"gitID":"-"},"content":"|`* * *` |user |have an organised application | easily view, update and search the active clients and closed clients"},{"lineNumber":1434,"author":{"gitID":"-"},"content":""},{"lineNumber":1435,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1436,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1437,"author":{"gitID":"-"},"content":"|`* *` |user |search multiple tags |narrow down the search to clients that fit all the different tags searched."},{"lineNumber":1438,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1439,"author":{"gitID":"-"},"content":"|`* *` |user |easily delete all students/tutors |save time manually deleting"},{"lineNumber":1440,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1441,"author":{"gitID":"-"},"content":"|`* *` |user |get a list of all tutors that corresponds to a students requirements |give students more choices on which tutor they want"},{"lineNumber":1442,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1443,"author":{"gitID":"-"},"content":"|`* *` |user |get a list of all students that corresponds to a tutor\u0027s requirements |give tutors more choices on which students they want"},{"lineNumber":1444,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1445,"author":{"gitID":"e0032017"},"content":"|`* *` |user |automatically update the year of all students |need not manually change all the information during new year"},{"lineNumber":1446,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1447,"author":{"gitID":"e0032017"},"content":"|`* *` |user |update which time slot the tutor is already working |plan their timetable without any clash in timing"},{"lineNumber":1448,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1449,"author":{"gitID":"-"},"content":"|`* *` |user |have a ranking on how good the tutor is |understand which tutor the user should recommend more"},{"lineNumber":1450,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1451,"author":{"gitID":"e0032017"},"content":"|`* *` |user |highlight urgent tuition requests |set reminder to place more attention on these assignments"},{"lineNumber":1452,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1453,"author":{"gitID":"-"},"content":"|`* *` |user |blacklist certain tutors or students |make sure the user will not accept their assignments"},{"lineNumber":1454,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":"|`* *` |user |have the option to customise the font size and colour |make changes to the appearance to suit the user\u0027s preference"},{"lineNumber":1456,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1457,"author":{"gitID":"-"},"content":"|`* *` |user |have the option to customise the user\u0027s background |make the application more appealing to the user"},{"lineNumber":1458,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1459,"author":{"gitID":"e0032017"},"content":"|`* *` |user |email the contacts in the application |save the trouble from opening another web-browser or email application"},{"lineNumber":1460,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1461,"author":{"gitID":"-"},"content":"|`* *` |user |keep track of whether the tutors have paid their agent fee |keep track and remind those who have not paid."},{"lineNumber":1462,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1463,"author":{"gitID":"e0032017"},"content":"|`*` |user |directly navigate between contacts |save the trouble from returning to the main page every time"},{"lineNumber":1464,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":1465,"author":{"gitID":"e0032017"},"content":"|`*` |user |keep a record of how much the students improve |keep track of how good the tutor is"},{"lineNumber":1466,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1467,"author":{"gitID":"-"},"content":""},{"lineNumber":1468,"author":{"gitID":"-"},"content":""},{"lineNumber":1469,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1470,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1471,"author":{"gitID":"-"},"content":""},{"lineNumber":1472,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `TuitionCor` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1476,"author":{"gitID":"-"},"content":""},{"lineNumber":1477,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"shookshire"},"content":"1.  User requests to list clients"},{"lineNumber":1480,"author":{"gitID":"shookshire"},"content":"2.  TuitionCor shows a list of clients"},{"lineNumber":1481,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1482,"author":{"gitID":"-"},"content":"4.  TuitionCor deletes the person"},{"lineNumber":1483,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1484,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1485,"author":{"gitID":"-"},"content":""},{"lineNumber":1486,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1487,"author":{"gitID":"-"},"content":""},{"lineNumber":1488,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1489,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1490,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1491,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1492,"author":{"gitID":"-"},"content":""},{"lineNumber":1493,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1494,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1495,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1496,"author":{"gitID":"-"},"content":"** 3a1. TuitionCor shows an error message."},{"lineNumber":1497,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1498,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1499,"author":{"gitID":"-"},"content":""},{"lineNumber":1500,"author":{"gitID":"shookshire"},"content":"// tag::mssdestin[]"},{"lineNumber":1501,"author":{"gitID":"shookshire"},"content":"[discrete]"},{"lineNumber":1502,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d Use case: Remove specific keyword from client\u0027s subject"},{"lineNumber":1503,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":1504,"author":{"gitID":"shookshire"},"content":"*MSS*"},{"lineNumber":1505,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":1506,"author":{"gitID":"shookshire"},"content":"1.  User requests to list clients"},{"lineNumber":1507,"author":{"gitID":"shookshire"},"content":"2.  TuitionCor shows a list of clients"},{"lineNumber":1508,"author":{"gitID":"shookshire"},"content":"3.  User requests to remove a keyword from specific client"},{"lineNumber":1509,"author":{"gitID":"shookshire"},"content":"4.  TuitionCor removes the keyword from the subject field of the specified client"},{"lineNumber":1510,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1511,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1512,"author":{"gitID":"-"},"content":""},{"lineNumber":1513,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1514,"author":{"gitID":"-"},"content":""},{"lineNumber":1515,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1516,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1517,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1518,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1519,"author":{"gitID":"-"},"content":""},{"lineNumber":1520,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1521,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1522,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1523,"author":{"gitID":"-"},"content":"** 3a1. TuitionCor shows an error message."},{"lineNumber":1524,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1525,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1526,"author":{"gitID":"-"},"content":""},{"lineNumber":1527,"author":{"gitID":"shookshire"},"content":"* 4a. The given keyword does not exist."},{"lineNumber":1528,"author":{"gitID":"shookshire"},"content":"+"},{"lineNumber":1529,"author":{"gitID":"shookshire"},"content":"[none]"},{"lineNumber":1530,"author":{"gitID":"shookshire"},"content":"** 4a1. TuitionCor shows an error message."},{"lineNumber":1531,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1532,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1533,"author":{"gitID":"-"},"content":""},{"lineNumber":1534,"author":{"gitID":"shookshire"},"content":"* 4b. The given keyword the last subject in the specific client."},{"lineNumber":1535,"author":{"gitID":"shookshire"},"content":"+"},{"lineNumber":1536,"author":{"gitID":"shookshire"},"content":"[none]"},{"lineNumber":1537,"author":{"gitID":"shookshire"},"content":"** 4b1. TuitionCor shows an error message that suggest for the user to close the client instead."},{"lineNumber":1538,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1539,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1540,"author":{"gitID":"shookshire"},"content":"// end::mssdestin[]"},{"lineNumber":1541,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":1542,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1543,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sort student\u0027s or tutor\u0027s list by locality"},{"lineNumber":1544,"author":{"gitID":"-"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1546,"author":{"gitID":"-"},"content":""},{"lineNumber":1547,"author":{"gitID":"-"},"content":"1.  User types “sort l c/t” or “sort l c/s” in to the command line."},{"lineNumber":1548,"author":{"gitID":"-"},"content":"2.  TuitionCor will return either a list of students or tutors with respect to the command entered sorted based on their locality in alphabetical order."},{"lineNumber":1549,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1550,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1551,"author":{"gitID":"-"},"content":""},{"lineNumber":1552,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1553,"author":{"gitID":"-"},"content":""},{"lineNumber":1554,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1555,"author":{"gitID":"-"},"content":"* 1a. System detects an invalid input."},{"lineNumber":1556,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1557,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1558,"author":{"gitID":"-"},"content":"** 1a1. TuitionCor will display invalid command and display sort message usage."},{"lineNumber":1559,"author":{"gitID":"-"},"content":"** 1a2. User enter required information."},{"lineNumber":1560,"author":{"gitID":"-"},"content":"** 1a3. Steps 1a1 and 1a2 are repeated until valid input is entered."},{"lineNumber":1561,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1562,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1563,"author":{"gitID":"-"},"content":""},{"lineNumber":1564,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1565,"author":{"gitID":"-"},"content":"* 1b. System detects no further input."},{"lineNumber":1566,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1567,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1568,"author":{"gitID":"-"},"content":""},{"lineNumber":1569,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1570,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sort student\u0027s or tutor\u0027s list by grade"},{"lineNumber":1571,"author":{"gitID":"-"},"content":""},{"lineNumber":1572,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1573,"author":{"gitID":"-"},"content":""},{"lineNumber":1574,"author":{"gitID":"-"},"content":"1.  User types “sort g c/t” or “sort g c/s” in to the command line."},{"lineNumber":1575,"author":{"gitID":"-"},"content":"2.  TuitionCor will return either a list of students or tutors with respect to the command entered sorted based on their grade in ascending order of seniority."},{"lineNumber":1576,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1577,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1578,"author":{"gitID":"-"},"content":""},{"lineNumber":1579,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1580,"author":{"gitID":"-"},"content":""},{"lineNumber":1581,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1582,"author":{"gitID":"-"},"content":"* 1a. System detects an invalid input."},{"lineNumber":1583,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1584,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1585,"author":{"gitID":"-"},"content":"** 1a1. TuitionCor will display invalid command and display sort message usage."},{"lineNumber":1586,"author":{"gitID":"-"},"content":"** 1a2. User enter required information."},{"lineNumber":1587,"author":{"gitID":"-"},"content":"** 1a3. Steps 1a1 and 1a2 are repeated until valid input is entered."},{"lineNumber":1588,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1589,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1592,"author":{"gitID":"-"},"content":"* 1b. System detects no further input."},{"lineNumber":1593,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1594,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1595,"author":{"gitID":"-"},"content":""},{"lineNumber":1596,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sort student\u0027s or tutor\u0027s list by name"},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1600,"author":{"gitID":"-"},"content":""},{"lineNumber":1601,"author":{"gitID":"-"},"content":"1.  User types “sort n c/t” or “sort n c/s” in to the command line."},{"lineNumber":1602,"author":{"gitID":"-"},"content":"2.  TuitionCor will return either a list of students or tutors with respect to the command entered sorted based on their name in alphabetical order."},{"lineNumber":1603,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1604,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1605,"author":{"gitID":"-"},"content":""},{"lineNumber":1606,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1607,"author":{"gitID":"-"},"content":""},{"lineNumber":1608,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1609,"author":{"gitID":"-"},"content":"* 1a. System detects an invalid input."},{"lineNumber":1610,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1611,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1612,"author":{"gitID":"-"},"content":"** 1a1. TuitionCor will display invalid command and display sort message usage."},{"lineNumber":1613,"author":{"gitID":"-"},"content":"** 1a2. User enter required information."},{"lineNumber":1614,"author":{"gitID":"-"},"content":"** 1a3. Steps 1a1 and 1a2 are repeated until valid input is entered."},{"lineNumber":1615,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1616,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1617,"author":{"gitID":"-"},"content":""},{"lineNumber":1618,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1619,"author":{"gitID":"-"},"content":"* 1b. System detects no further input."},{"lineNumber":1620,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1621,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1622,"author":{"gitID":"-"},"content":""},{"lineNumber":1623,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1624,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sort student\u0027s or tutor\u0027s list by subject"},{"lineNumber":1625,"author":{"gitID":"-"},"content":""},{"lineNumber":1626,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1627,"author":{"gitID":"-"},"content":""},{"lineNumber":1628,"author":{"gitID":"-"},"content":"1.  User types “sort s c/t” or “sort s c/s” in to the command line."},{"lineNumber":1629,"author":{"gitID":"-"},"content":"2.  TuitionCor will return either a list of students or tutors with respect to the command entered sorted based on their subject in alphabetical order."},{"lineNumber":1630,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1631,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1632,"author":{"gitID":"-"},"content":""},{"lineNumber":1633,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1634,"author":{"gitID":"-"},"content":""},{"lineNumber":1635,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1636,"author":{"gitID":"-"},"content":"* 1a. System detects an invalid input."},{"lineNumber":1637,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1638,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1639,"author":{"gitID":"-"},"content":"** 1a1. TuitionCor will display invalid command and display sort message usage."},{"lineNumber":1640,"author":{"gitID":"-"},"content":"** 1a2. User enter required information."},{"lineNumber":1641,"author":{"gitID":"-"},"content":"** 1a3. Steps 1a1 and 1a2 are repeated until valid input is entered."},{"lineNumber":1642,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1643,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1644,"author":{"gitID":"-"},"content":""},{"lineNumber":1645,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1646,"author":{"gitID":"-"},"content":"* 1b. System detects no further input."},{"lineNumber":1647,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1648,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1649,"author":{"gitID":"-"},"content":""},{"lineNumber":1650,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1651,"author":{"gitID":"-"},"content":""},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"-"},"content":"// tag::matchmss[]"},{"lineNumber":1654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Matching a student"},{"lineNumber":1655,"author":{"gitID":"-"},"content":""},{"lineNumber":1656,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1657,"author":{"gitID":"-"},"content":""},{"lineNumber":1658,"author":{"gitID":"-"},"content":"1.  User enters \"match 1 c/s\"."},{"lineNumber":1659,"author":{"gitID":"-"},"content":"2.  TuitionCor displays information of the selected student in the student\u0027s list and all the relevant tutors which matches the student\u0027s needs in tutor\u0027s list."},{"lineNumber":1660,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1661,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1662,"author":{"gitID":"-"},"content":""},{"lineNumber":1663,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1664,"author":{"gitID":"-"},"content":""},{"lineNumber":1665,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1666,"author":{"gitID":"-"},"content":"* 1a. System detects an invalid input."},{"lineNumber":1667,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1668,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1669,"author":{"gitID":"-"},"content":"** 1a1. TuitionCor will display invalid command and display sort message usage."},{"lineNumber":1670,"author":{"gitID":"-"},"content":"** 1a2. User enter required information."},{"lineNumber":1671,"author":{"gitID":"-"},"content":"** 1a3. Steps 1a1 and 1a2 are repeated until valid input is entered."},{"lineNumber":1672,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1673,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1674,"author":{"gitID":"-"},"content":""},{"lineNumber":1675,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1676,"author":{"gitID":"-"},"content":"* 1a. System is unable to match any tutor to this student."},{"lineNumber":1677,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1678,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1679,"author":{"gitID":"-"},"content":"** 1a1. An empty tutor\u0027s list will be displayed to the user"},{"lineNumber":1680,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1681,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1682,"author":{"gitID":"-"},"content":""},{"lineNumber":1683,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1684,"author":{"gitID":"-"},"content":""},{"lineNumber":1685,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Matching a tutor"},{"lineNumber":1686,"author":{"gitID":"-"},"content":""},{"lineNumber":1687,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1688,"author":{"gitID":"-"},"content":""},{"lineNumber":1689,"author":{"gitID":"-"},"content":"1.  User enters \"match 1 c/t\"."},{"lineNumber":1690,"author":{"gitID":"-"},"content":"2.  TuitionCor displays information of the selected tutor in the tutor\u0027s list and all the relevant students which matches the tutor\u0027s credentials in student\u0027s list."},{"lineNumber":1691,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1692,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1693,"author":{"gitID":"-"},"content":""},{"lineNumber":1694,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1695,"author":{"gitID":"-"},"content":""},{"lineNumber":1696,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1697,"author":{"gitID":"-"},"content":"* 1a. System detects an invalid input."},{"lineNumber":1698,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1699,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1700,"author":{"gitID":"-"},"content":"** 1a1. TuitionCor will display invalid command and display sort message usage."},{"lineNumber":1701,"author":{"gitID":"-"},"content":"** 1a2. User enter required information."},{"lineNumber":1702,"author":{"gitID":"-"},"content":"** 1a3. Steps 1a1 and 1a2 are repeated until valid input is entered."},{"lineNumber":1703,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1704,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1705,"author":{"gitID":"-"},"content":""},{"lineNumber":1706,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1707,"author":{"gitID":"-"},"content":"* 1a. System is unable to match any student to this tutor."},{"lineNumber":1708,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1709,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1710,"author":{"gitID":"-"},"content":"** 1a1. An empty tutor\u0027s list will be displayed to the user"},{"lineNumber":1711,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1712,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1713,"author":{"gitID":"-"},"content":""},{"lineNumber":1714,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1715,"author":{"gitID":"-"},"content":""},{"lineNumber":1716,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1717,"author":{"gitID":"-"},"content":"// end::matchmss[]"},{"lineNumber":1718,"author":{"gitID":"-"},"content":""},{"lineNumber":1719,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1720,"author":{"gitID":"-"},"content":""},{"lineNumber":1721,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1722,"author":{"gitID":"-"},"content":".  Should be able to hold up to 5000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1723,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1724,"author":{"gitID":"-"},"content":".  Application should be able execute any command within 3 seconds."},{"lineNumber":1725,"author":{"gitID":"-"},"content":".  Application should have a self-explanatory installation process."},{"lineNumber":1726,"author":{"gitID":"-"},"content":".  Application should be less than 5mb in size."},{"lineNumber":1727,"author":{"gitID":"-"},"content":".  Application is expected to allow printing."},{"lineNumber":1728,"author":{"gitID":"-"},"content":".  Application should have an auto-save function upon exiting the application."},{"lineNumber":1729,"author":{"gitID":"-"},"content":""},{"lineNumber":1730,"author":{"gitID":"-"},"content":""},{"lineNumber":1731,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1732,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1733,"author":{"gitID":"-"},"content":""},{"lineNumber":1734,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1735,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1736,"author":{"gitID":"-"},"content":""},{"lineNumber":1737,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1738,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1739,"author":{"gitID":"-"},"content":""},{"lineNumber":1740,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1741,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1742,"author":{"gitID":"-"},"content":""},{"lineNumber":1743,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1744,"author":{"gitID":"-"},"content":""},{"lineNumber":1745,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1746,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1747,"author":{"gitID":"-"},"content":""},{"lineNumber":1748,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1749,"author":{"gitID":"-"},"content":""},{"lineNumber":1750,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1751,"author":{"gitID":"-"},"content":""},{"lineNumber":1752,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1753,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1754,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1755,"author":{"gitID":"-"},"content":""},{"lineNumber":1756,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1757,"author":{"gitID":"-"},"content":""},{"lineNumber":1758,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1759,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1760,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1761,"author":{"gitID":"-"},"content":""},{"lineNumber":1762,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d Deleting a client"},{"lineNumber":1763,"author":{"gitID":"-"},"content":""},{"lineNumber":1764,"author":{"gitID":"shookshire"},"content":". Deleting a client while all clients are listed"},{"lineNumber":1765,"author":{"gitID":"-"},"content":""},{"lineNumber":1766,"author":{"gitID":"shookshire"},"content":".. Prerequisites: List all clients using the `list` command. Multiple clients in the list."},{"lineNumber":1767,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1768,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1769,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1770,"author":{"gitID":"shookshire"},"content":"   Expected: No client is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1771,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1772,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1773,"author":{"gitID":"-"},"content":""},{"lineNumber":1774,"author":{"gitID":"shookshire"},"content":"// tag::removeTest[]"},{"lineNumber":1775,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":1776,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d Remove Subject keyword from a client"},{"lineNumber":1777,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":1778,"author":{"gitID":"shookshire"},"content":". Removing a keyword from the Subject field of a specified client"},{"lineNumber":1779,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":1780,"author":{"gitID":"shookshire"},"content":".. Prerequisites1: At least 1 student and 1 tutor has to be in TuitionCor."},{"lineNumber":1781,"author":{"gitID":"shookshire"},"content":".. Prerequisites2: Displayed list has to be active list."},{"lineNumber":1782,"author":{"gitID":"shookshire"},"content":".. Test case: `remove 1 c/s s/math` +"},{"lineNumber":1783,"author":{"gitID":"shookshire"},"content":"   Assumption1: First student in TuitionCor has \"math\" in the Subject field. For example the Subject field is \"physics chemistry math english\". Otherwise, replace \"math\" in the command with a word in the Subject field of the client."},{"lineNumber":1784,"author":{"gitID":"shookshire"},"content":"   Assumption2: First student in TuitionCor has more than 1 keyword in Subject field. (Each keyword is a single word separated by whitespace)"},{"lineNumber":1785,"author":{"gitID":"shookshire"},"content":"   Expected: \"math\" would be removed from Subject field of the first student. Given the above example, the remaining Subjects should be \"physics chemistry english\". Success message would be given. Timestamp in status bar is updated."},{"lineNumber":1786,"author":{"gitID":"shookshire"},"content":".. Test case: `remove 1 c/s s/math` +"},{"lineNumber":1787,"author":{"gitID":"shookshire"},"content":"   Assumption: First student in TuitionCor does not have \"math\" in the Subject field."},{"lineNumber":1788,"author":{"gitID":"shookshire"},"content":"   Expected: Error message \"The inputted message does not exist\""},{"lineNumber":1789,"author":{"gitID":"shookshire"},"content":".. Test case: `remove 1 c/s s/math` +"},{"lineNumber":1790,"author":{"gitID":"shookshire"},"content":"   Assumption: First student in TuitionCor has only \"math\" in Subject field."},{"lineNumber":1791,"author":{"gitID":"shookshire"},"content":"   Expected: Error message warning user that removing the last keyword in Subject field is not allowed and suggests user to close client instead."},{"lineNumber":1792,"author":{"gitID":"shookshire"},"content":".. Test case: `remove 1 c/t s/math` +"},{"lineNumber":1793,"author":{"gitID":"shookshire"},"content":"   Assumption1: First tutor in TuitionCor has \"math\" in the Subject field. For example the Subject field is \"physics chemistry math english\". Otherwise, replace \"math\" in the command with a word in the Subject field of the client."},{"lineNumber":1794,"author":{"gitID":"shookshire"},"content":"   Assumption2: First tutor in TuitionCor has more than 1 keyword in Subject field. (Each keyword is a single word separated by whitespace)"},{"lineNumber":1795,"author":{"gitID":"shookshire"},"content":"   Expected: \"math\" would be removed from Subject field of the first tutor. Given the above example, the remaining Subjects should be \"physics chemistry english\". Success message would be given. Timestamp in status bar is updated."},{"lineNumber":1796,"author":{"gitID":"shookshire"},"content":".. Test case: `remove 0 c/s s/math` +"},{"lineNumber":1797,"author":{"gitID":"shookshire"},"content":"   Expected: No keyword is removed from Subject field. Error details shown in status message. Status bar remains the same."},{"lineNumber":1798,"author":{"gitID":"shookshire"},"content":".. Other invalid remove commands to try: `remove c/s s/math` (missing INDEX), `remove x c/s s/math` (where x is a number larger than the list size) +"},{"lineNumber":1799,"author":{"gitID":"shookshire"},"content":"   `remove 1 s/math` (missing CATEGORY), `remove 1 c/g s/math` (invalid CATEGORY, CATEGORY should only be \"s\" or \"t\") +"},{"lineNumber":1800,"author":{"gitID":"shookshire"},"content":"   `remove 1 c/s` (missing SUBJECT), `remove 1 c/s s/chemistry physics` (invalid SUBJECT, SUBJECT should only be a single word with no special characters and no whitespace)."},{"lineNumber":1801,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1802,"author":{"gitID":"-"},"content":""},{"lineNumber":1803,"author":{"gitID":"shookshire"},"content":"// end::removeTest[]"},{"lineNumber":1804,"author":{"gitID":"-"},"content":""},{"lineNumber":1805,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting a list"},{"lineNumber":1806,"author":{"gitID":"-"},"content":""},{"lineNumber":1807,"author":{"gitID":"-"},"content":". Sorting a list while all clients are listed"},{"lineNumber":1808,"author":{"gitID":"-"},"content":""},{"lineNumber":1809,"author":{"gitID":"-"},"content":".. Prerequisites: List all clients using the `list` command. Multiple clients in either student list or tutor list. Displayed list must be active client list."},{"lineNumber":1810,"author":{"gitID":"-"},"content":".. Test case: `sort n c/t` +"},{"lineNumber":1811,"author":{"gitID":"-"},"content":"   Expected: Tutor\u0027s list is being sorted according alphabetical order based on the client\u0027s name."},{"lineNumber":1812,"author":{"gitID":"-"},"content":".. Test case: `sort l c/t` +"},{"lineNumber":1813,"author":{"gitID":"-"},"content":"   Expected: Tutor\u0027s list is being sorted according to their location in alphabetical order based on the location displayed or the *first* location displayed if there exist multiple locations."},{"lineNumber":1814,"author":{"gitID":"-"},"content":".. Test case: `sort s c/t` +"},{"lineNumber":1815,"author":{"gitID":"-"},"content":"   Expected: Tutor\u0027s list is being sorted according to their subject in alphabetical order based on the subject displayed or the *first* location displayed if there exist multiple locations."},{"lineNumber":1816,"author":{"gitID":"-"},"content":".. Test case: `sort g c/t` +"},{"lineNumber":1817,"author":{"gitID":"-"},"content":"   Expected: Tutor\u0027s list is being sorted according to grade in ascending seniority `[Kindergarten-\u003ePrimary-\u003eSecondary-\u003eJunior College-\u003eUniversity]`. It will be sorted based on the *first* grade if there exist multiple grades."},{"lineNumber":1818,"author":{"gitID":"-"},"content":""},{"lineNumber":1819,"author":{"gitID":"-"},"content":".. Test case: `sort n c/s` +"},{"lineNumber":1820,"author":{"gitID":"-"},"content":"   Expected: Student\u0027s list is being sorted according alphabetical order based on the client\u0027s name."},{"lineNumber":1821,"author":{"gitID":"-"},"content":".. Test case: `sort l c/s` +"},{"lineNumber":1822,"author":{"gitID":"-"},"content":"   Expected: Student\u0027s list is being sorted according to their location in alphabetical order based on the location displayed or the *first* location displayed if there exist multiple locations."},{"lineNumber":1823,"author":{"gitID":"-"},"content":".. Test case: `sort s c/s` +"},{"lineNumber":1824,"author":{"gitID":"-"},"content":"   Expected: Student\u0027s list is being sorted according to their subject in alphabetical order based on the subject displayed or the *first* location displayed if there exist multiple locations."},{"lineNumber":1825,"author":{"gitID":"-"},"content":".. Test case: `sort g c/s` +"},{"lineNumber":1826,"author":{"gitID":"-"},"content":"   Expected: Student\u0027s list is being sorted according to grade in ascending seniority `[Kindergarten-\u003ePrimary-\u003eSecondary-\u003eJunior College-\u003eUniversity]`. It will be sorted based on the *first* grade if there exist multiple grades."},{"lineNumber":1827,"author":{"gitID":"-"},"content":""},{"lineNumber":1828,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Switching the displayed client list"},{"lineNumber":1829,"author":{"gitID":"-"},"content":""},{"lineNumber":1830,"author":{"gitID":"-"},"content":". Default displayed list when launching TuitionCor"},{"lineNumber":1831,"author":{"gitID":"-"},"content":".. Launch the application +"},{"lineNumber":1832,"author":{"gitID":"-"},"content":"   Expected: Active client list is being displayed. `\u003cCurrently displaying active clients\u003e` should be shown in the status bar."},{"lineNumber":1833,"author":{"gitID":"-"},"content":""},{"lineNumber":1834,"author":{"gitID":"-"},"content":". Switching the display"},{"lineNumber":1835,"author":{"gitID":"-"},"content":".. Prerequisites: Currently in active client list."},{"lineNumber":1836,"author":{"gitID":"-"},"content":"... Test case: `switch` +"},{"lineNumber":1837,"author":{"gitID":"-"},"content":"   Expected: Closed client list is being displayed. `\u003cCurrently displaying closed clients\u003e` should be shown in the status bar."},{"lineNumber":1838,"author":{"gitID":"-"},"content":""},{"lineNumber":1839,"author":{"gitID":"-"},"content":".. Prerequisites: Currently in closed client list."},{"lineNumber":1840,"author":{"gitID":"-"},"content":"... Test case: `switch` +"},{"lineNumber":1841,"author":{"gitID":"-"},"content":"   Expected: Active client list is being displayed. `\u003cCurrently displaying active clients\u003e` should be shown in the status bar."},{"lineNumber":1842,"author":{"gitID":"-"},"content":""},{"lineNumber":1843,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Closing a client"},{"lineNumber":1844,"author":{"gitID":"-"},"content":""},{"lineNumber":1845,"author":{"gitID":"-"},"content":". Closing a client while all clients are listed."},{"lineNumber":1846,"author":{"gitID":"-"},"content":".. Prerequisites: List all clients using the `list` command. Clients displayed in either student list or tutor list. Minimally there must exist at least 1 student and 1 tutor in their respective list. Displayed list must be *active client list*."},{"lineNumber":1847,"author":{"gitID":"-"},"content":".. Test case: `close 1 c/s` +"},{"lineNumber":1848,"author":{"gitID":"-"},"content":"   Assumptions: Assuming that the first student on the student list takes on the name `Alex Yeoh`. +"},{"lineNumber":1849,"author":{"gitID":"-"},"content":"   Expected: Student Alex Yeoh is being closed and is no longer seen on the student list in active client list. Switching the display using `switch`, Alex Yeoh will be seen displayed on the student list in closed client list."},{"lineNumber":1850,"author":{"gitID":"-"},"content":""},{"lineNumber":1851,"author":{"gitID":"-"},"content":".. Test case: `close 1 c/t` +"},{"lineNumber":1852,"author":{"gitID":"-"},"content":"   Assumptions: Assuming that the first tutor on the tutor list takes on the name `George`. +"},{"lineNumber":1853,"author":{"gitID":"-"},"content":"   Expected: Tutor George is being closed and is no longer seen on the tutor list in active client list. Switching the display using `switch`, George will be seen displayed on the tutor list in closed client list."},{"lineNumber":1854,"author":{"gitID":"-"},"content":""},{"lineNumber":1855,"author":{"gitID":"-"},"content":". Closing a client while in closed client list."},{"lineNumber":1856,"author":{"gitID":"-"},"content":".. Prerequisites: List all clients using the `list` command. Clients displayed in either student list or tutor list. Minimally there must exist at least 1 student and 1 tutor in their respective list. Displayed list must be *closed client list*."},{"lineNumber":1857,"author":{"gitID":"-"},"content":".. Test case: `close 1 c/s` +"},{"lineNumber":1858,"author":{"gitID":"-"},"content":"   Expected: No students are being closed. Error details shown in the status message."},{"lineNumber":1859,"author":{"gitID":"-"},"content":""},{"lineNumber":1860,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Restoring a client"},{"lineNumber":1861,"author":{"gitID":"-"},"content":""},{"lineNumber":1862,"author":{"gitID":"-"},"content":". Restoring a client while all clients are listed."},{"lineNumber":1863,"author":{"gitID":"-"},"content":".. Prerequisites: List all clients using the `list` command. Clients displayed in either student list or tutor list. Minimally there must exist at least 1 student and 1 tutor in their respective list. Displayed list must be *closed client list*."},{"lineNumber":1864,"author":{"gitID":"-"},"content":".. Test case: `restore 1 c/s` +"},{"lineNumber":1865,"author":{"gitID":"-"},"content":"   Assumptions: Assuming that the first student on the student list takes on the name `Tom`. +"},{"lineNumber":1866,"author":{"gitID":"-"},"content":"   Expected: Student Tom is being restored and is no longer seen on the student list in closed client list. Switching the display using `switch`, Tom will be seen displayed on the student list in active client list."},{"lineNumber":1867,"author":{"gitID":"-"},"content":""},{"lineNumber":1868,"author":{"gitID":"-"},"content":".. Test case: `restore 1 c/t` +"},{"lineNumber":1869,"author":{"gitID":"-"},"content":"   Assumptions: Assuming that the first tutor on the tutor list takes on the name `Cindy`. +"},{"lineNumber":1870,"author":{"gitID":"-"},"content":"   Expected: Tutor Cindy is being restored and is no longer seen on the tutor list in closed client list. Switching the display using `switch`, Cindy will be seen displayed on the tutor list in active client list."},{"lineNumber":1871,"author":{"gitID":"-"},"content":""},{"lineNumber":1872,"author":{"gitID":"-"},"content":". Restoring a client while in active client list."},{"lineNumber":1873,"author":{"gitID":"-"},"content":".. Prerequisites: List all clients using the `list` command. Clients displayed in either student list or tutor list. Minimally there must exist at least 1 student and 1 tutor in their respective list. Displayed list must be *active client list*."},{"lineNumber":1874,"author":{"gitID":"-"},"content":".. Test case: `restore 1 c/s` +"},{"lineNumber":1875,"author":{"gitID":"-"},"content":"   Expected: No students are being restored. Error details shown in the status message."},{"lineNumber":1876,"author":{"gitID":"-"},"content":""},{"lineNumber":1877,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Matching a client"},{"lineNumber":1878,"author":{"gitID":"-"},"content":". Matching a client while all clients are listed."},{"lineNumber":1879,"author":{"gitID":"-"},"content":".. Prerequisites: List all clients using the `list` command. Clients displayed in either student list or tutor list. Minimally there must exist at least 1 student and 1 tutor in their respective list. Displayed list must be *active client list*."},{"lineNumber":1880,"author":{"gitID":"-"},"content":".. Test case: `match 1 c/s` +"},{"lineNumber":1881,"author":{"gitID":"-"},"content":"   Assumptions: Assuming that the first student on the student list with name `Alex Yeoh`, location `North`, grade `p2` and subject `math`. +"},{"lineNumber":1882,"author":{"gitID":"-"},"content":"   Expected: Student list will now only display Alex Yeoh. In the tutor list tutor James and Jennifer is being displayed. +"},{"lineNumber":1883,"author":{"gitID":"-"},"content":"   James is matched as his client card contains `Math` as his first subject and `North` as his first location. +"},{"lineNumber":1884,"author":{"gitID":"-"},"content":"   Jennifer is matched as her client card contains grade of `p2` and subject `math` is her only subject. +"},{"lineNumber":1885,"author":{"gitID":"-"},"content":"   The matched tutors fields are also being highlighted in orange."},{"lineNumber":1886,"author":{"gitID":"-"},"content":""},{"lineNumber":1887,"author":{"gitID":"-"},"content":".. Test case: `match 4 c/t` +"},{"lineNumber":1888,"author":{"gitID":"-"},"content":"   Assumptions: Assuming that the forth tutor on the tutor list with name `Nancy`, location `Central`, grade `u1 u2` and subject `physics`. +"},{"lineNumber":1889,"author":{"gitID":"-"},"content":"   Expected: Tutor list will now only display Nancy. In the student list, student Bernice Yu, Roy Balakrishnan, Charlotte Oliveiro and David Li is being displayed. +"},{"lineNumber":1890,"author":{"gitID":"-"},"content":"   Berenice Yu is matched as her client card contains location `Central` and `Physics`. +"},{"lineNumber":1891,"author":{"gitID":"-"},"content":"   Roy Balakrishnan is matched as his client card contains location `Central` and `Physics`. +"},{"lineNumber":1892,"author":{"gitID":"-"},"content":"   Charlotte Oliveiro is matched as as her client card contains `Physics` as her first subject. +"},{"lineNumber":1893,"author":{"gitID":"-"},"content":"   David Li is matched as his client card contains location `Central`. +"},{"lineNumber":1894,"author":{"gitID":"-"},"content":"   The matched students fields are also being highlighted in orange. +"},{"lineNumber":1895,"author":{"gitID":"-"},"content":"   The matched students are also being displayed in descending order based on the number of matched fields, with the student with the most matched fields displayed first."},{"lineNumber":1896,"author":{"gitID":"-"},"content":""},{"lineNumber":1897,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1898,"author":{"gitID":"-"},"content":"\u003d\u003d Feature Contribution"},{"lineNumber":1899,"author":{"gitID":"-"},"content":""},{"lineNumber":1900,"author":{"gitID":"-"},"content":"Given below are the minor and major feature contributions for each of our team member."},{"lineNumber":1901,"author":{"gitID":"-"},"content":""},{"lineNumber":1902,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Ngeow Shan Yong Destin"},{"lineNumber":1903,"author":{"gitID":"-"},"content":""},{"lineNumber":1904,"author":{"gitID":"-"},"content":". Major Contribution"},{"lineNumber":1905,"author":{"gitID":"-"},"content":""},{"lineNumber":1906,"author":{"gitID":"shookshire"},"content":".. Morphed AddressBook - Level 4 into TuitionCor by adding support for clients in model, logic, storage +"},{"lineNumber":1907,"author":{"gitID":"shookshire"},"content":"   Client class and commands that are specific to TuitionCor such as subject, which is not available in person."},{"lineNumber":1908,"author":{"gitID":"-"},"content":""},{"lineNumber":1909,"author":{"gitID":"-"},"content":". Minor Contribution"},{"lineNumber":1910,"author":{"gitID":"-"},"content":""},{"lineNumber":1911,"author":{"gitID":"-"},"content":".. Splitting storage of UniquePersonList into 2 List, 1 for Student and 1 for Tutor +"},{"lineNumber":1912,"author":{"gitID":"-"},"content":"   In TuitionCor all Client added would be either a student or a tutor, hence this would allow for easier organization of added entries. Also, this would remove the need to have to search through the entire list to see who are student or tutor at every command."},{"lineNumber":1913,"author":{"gitID":"-"},"content":""},{"lineNumber":1914,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Zhu Jiahui"},{"lineNumber":1915,"author":{"gitID":"-"},"content":""},{"lineNumber":1916,"author":{"gitID":"-"},"content":". Major Contribution"},{"lineNumber":1917,"author":{"gitID":"-"},"content":""},{"lineNumber":1918,"author":{"gitID":"-"},"content":".. Match Function +"},{"lineNumber":1919,"author":{"gitID":"-"},"content":"   This function matches a Student to any Tutor in TuitionCor that meets the requirements of the Student (or vice versa).This acts as the main purpose of TuitionCor, which is to help coordinate Students and Tutors."},{"lineNumber":1920,"author":{"gitID":"-"},"content":""},{"lineNumber":1921,"author":{"gitID":"-"},"content":". Minor Contribution"},{"lineNumber":1922,"author":{"gitID":"-"},"content":""},{"lineNumber":1923,"author":{"gitID":"-"},"content":".. Enhancement of Find function to be able to find all fields and not only the person name +"},{"lineNumber":1924,"author":{"gitID":"-"},"content":"   This allows the user be able to search for anything related to the person he wishes to find in TuitionCor. For example, he can now search the address or phone number and be able to find the person."},{"lineNumber":1925,"author":{"gitID":"-"},"content":""},{"lineNumber":1926,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lim Hong Cho"},{"lineNumber":1927,"author":{"gitID":"-"},"content":""},{"lineNumber":1928,"author":{"gitID":"-"},"content":". Major Contribution"},{"lineNumber":1929,"author":{"gitID":"-"},"content":""},{"lineNumber":1930,"author":{"gitID":"-"},"content":".. Close, restore and switch function +"},{"lineNumber":1931,"author":{"gitID":"-"},"content":"   This would allow user to close a client to the closed list or restore a client to the active list. Switch allows client to toggle between closed list and active list."},{"lineNumber":1932,"author":{"gitID":"-"},"content":""},{"lineNumber":1933,"author":{"gitID":"-"},"content":". Minor Contribution"},{"lineNumber":1934,"author":{"gitID":"-"},"content":""},{"lineNumber":1935,"author":{"gitID":"-"},"content":".. Sort +"},{"lineNumber":1936,"author":{"gitID":"-"},"content":"   This would allow the user to view the sorted list of Students and Tutors separately allowing for easier viewing of a specific category."}],"authorContributionMap":{"e0032017":32,"shookshire":143,"-":1761}},{"path":"src/test/java/seedu/address/logic/parser/AddClientCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_TUTOR_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOB;"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_TUTOR_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"public class AddClientCommandParserTest {"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"    private AddClientCommandParser parser \u003d new AddClientCommandParser();"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        Client expectedPerson \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"                .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_GRADE_BOB)"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        Client expectedTutor \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"                .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_GRADE_BOB)"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_TUTOR_BOB).build();"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        // whitespace only preamble"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, new AddClientCommand(expectedPerson));"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"        // multiple names - last name accepted"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, new AddClientCommand(expectedPerson));"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, new AddClientCommand(expectedPerson));"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"        // multiple emails - last email accepted"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, new AddClientCommand(expectedPerson));"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, new AddClientCommand(expectedPerson));"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"        // valid fields added to tutor"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_TUTOR_BOB, new AddClientCommand(expectedTutor));"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"        // multiple tags - all accepted"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"        Client expectedPersonMultipleTags \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"                .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_GRADE_BOB)"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, new AddClientCommand(expectedPersonMultipleTags));"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"        // zero tags"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        Client expectedPerson \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags()"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"                .withLocation(VALID_LOCATION_AMY).withGrade(VALID_GRADE_AMY).withSubject(VALID_GRADE_AMY)"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"                + LOCATION_DESC_AMY + GRADE_DESC_AMY + SUBJECT_DESC_AMY + CATEGORY_DESC_AMY,"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"                new AddClientCommand(expectedPerson));"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE);"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"        // missing name prefix"},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"                expectedMessage);"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"        // missing phone prefix"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":"                expectedMessage);"},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"        // missing email prefix"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":"                expectedMessage);"},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"        // missing address prefix"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"                expectedMessage);"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":150,"author":{"gitID":"shookshire"},"content":"        // all prefixes missing"},{"lineNumber":151,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":152,"author":{"gitID":"shookshire"},"content":"                expectedMessage);"},{"lineNumber":153,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":"        // invalid name"},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"        // invalid phone"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":167,"author":{"gitID":"shookshire"},"content":"        // invalid email"},{"lineNumber":168,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":172,"author":{"gitID":"shookshire"},"content":"        // invalid address"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"        // invalid tag"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"                + CATEGORY_DESC_BOB, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"                        + LOCATION_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB + CATEGORY_DESC_BOB,"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":"        // non-empty preamble"},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LOCATION_DESC_BOB + GRADE_DESC_BOB"},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":"                        + SUBJECT_DESC_BOB + CATEGORY_DESC_BOB,"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"},{"lineNumber":192,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":139,"-":54}},{"path":"src/test/java/seedu/address/logic/parser/RestoreCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RestoreCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":"public class RestoreCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"    private static final Category CATEGORY_STUDENT \u003d new Category(\"s\");"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":"    private static final Category CATEGORY_TUTOR \u003d  new Category(\"t\");"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"    private RestoreCommandParser parser \u003d new RestoreCommandParser();"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    public void parse_validArgs_returnsRestoreCommand() {"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"1 c/s\", new RestoreCommand(INDEX_FIRST_PERSON, CATEGORY_STUDENT));"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"1 c/t\", new RestoreCommand(INDEX_FIRST_PERSON, CATEGORY_TUTOR));"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"z c/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"1 c/z\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"1 w/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"        // no index specified"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"   c/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"   c/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"        //no category prefix and category"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"1 \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"        //no category specified"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"1 c/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        //negative index"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"-1 c/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"        //zero index"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"0 c/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"                RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":62,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        Client personToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        expectedModel.deleteClient(personToDelete, new Category(\"s\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        Client personToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, personToDelete);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        expectedModel.deleteClient(personToDelete, new Category(\"s\"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        Client personToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"        expectedModel.deleteClient(personToDelete, new Category(\"s\"));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"        Client personToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"        expectedModel.deleteClient(personToDelete, new Category(\"s\"));"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":"        assertNotEquals(personToDelete, model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index, new Category(\"s\"));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredStudentList(p -\u003e false);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"        assertTrue(model.getFilteredStudentList().isEmpty());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":19,"-":176}},{"path":"src/test/java/seedu/address/logic/parser/CloseCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CloseCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":"public class CloseCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"    private static final Category CATEGORY_STUDENT \u003d new Category(\"s\");"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":"    private static final Category CATEGORY_TUTOR \u003d  new Category(\"t\");"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"    private CloseCommandParser parser \u003d new CloseCommandParser();"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    public void parse_validArgs_returnsRestoreCommand() {"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"1 c/s\", new CloseCommand(INDEX_FIRST_PERSON, CATEGORY_STUDENT));"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"        assertParseSuccess(parser, \"1 c/t\", new CloseCommand(INDEX_FIRST_PERSON, CATEGORY_TUTOR));"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"z c/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"1 c/z\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser, \"1 w/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"        // no index specified"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"   c/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"   c/s\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"        //no category prefix and category"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"1 \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"        //no category specified"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"1 c/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        //negative index"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"-1 c/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"        //zero index"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"        assertParseFailure(parser,  \"0 c/t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"                CloseCommand.MESSAGE_USAGE));"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":61,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/SortBySubjectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.SortedClients.getSortedBySubjectAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.UnsortedClients.getUnsortedAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":" * Contains integration tests (interaction with the Model) for {@code SortBySubjectCommand}."},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"public class SortBySubjectCommandTest {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"    private SortBySubjectCommand sortBySubjectCommandForStudentList;"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    private SortBySubjectCommand sortBySubjectCommandForTutorList;"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"    private final Category studentCategory \u003d new Category(\"s\");"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"    private final Category tutorCategory \u003d new Category(\"t\");"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"    public void setup() {"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"        model \u003d new ModelManager(getUnsortedAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        expectedModel \u003d  new ModelManager(getSortedBySubjectAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"        sortBySubjectCommandForStudentList \u003d new SortBySubjectCommand(studentCategory);"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        sortBySubjectCommandForStudentList.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        sortBySubjectCommandForTutorList \u003d new SortBySubjectCommand(tutorCategory);"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"        sortBySubjectCommandForTutorList.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"    public void executeSortUnsortedToSortedBySubject() {"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccessForStudentList(sortBySubjectCommandForStudentList, ("},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"                SortBySubjectCommand.MESSAGE_SUCCESS_STUDENT + SortBySubjectCommand.MESSAGE_SORT_DESC));"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccessForTutorList(sortBySubjectCommandForTutorList, (SortBySubjectCommand.MESSAGE_SUCCESS_TUTOR"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"                + SortBySubjectCommand.MESSAGE_SORT_DESC));"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"     * Asserts that the code is successfully executed."},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"     * Asserts the command feedback is equal to expectedMessage."},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"     * Asserts actual FilteredList is equal to the expected FilteredList"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"     * Asserts the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"    private void assertCommandSuccessForStudentList(SortBySubjectCommand command, String expectedMessage) {"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedModel.getFilteredStudentList(), model.getFilteredStudentList());"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"        } catch (CommandException ce) {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"     * Asserts that the code is successfully executed."},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"     * Asserts the command feedback is equal to expectedMessage."},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"     * Asserts actual FilteredList is equal to the expected FilteredList"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"     * Asserts the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"    private void assertCommandSuccessForTutorList(SortBySubjectCommand command, String expectedMessage) {"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedModel.getFilteredTutorList(), model.getFilteredTutorList());"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"        } catch (CommandException ce) {"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":68,"-":18}},{"path":"src/test/java/seedu/address/logic/commands/SwitchCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.SortedClients.getSortedByGradeAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBookNew;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ClientListSwitchEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"public class SwitchCommandTest {"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"    private static ListPanelController listPanelController;"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"    private SwitchCommand switchCommand;"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    private EventsCollectorRule eventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"    private final String expectedSwitchToClosedListMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"            + SwitchCommand.MESSAGE_CLOSED_DISPLAY_LIST);"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"    private final String expectedSwitchToActiveListMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            + SwitchCommand.MESSAGE_ACTIVE_DISPLAY_LIST);"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"        eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"        model \u003d new ModelManager(getTypicalAddressBookNew(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        expectedModel \u003d  new ModelManager(getSortedByGradeAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        switchCommand \u003d new SwitchCommand();"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"        switchCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"        listPanelController \u003d ListPanelController.getInstance();"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"        listPanelController.setDefault();"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"     *Ensure display is at active client list after this class test."},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"    @AfterClass"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"            listPanelController.switchDisplay();"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"     * Asserts that the list is successfully switched."},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"    public void execute_switch_success() {"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"        CommandResult commandResult \u003d switchCommand.execute();"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"        assertEquals(expectedSwitchToClosedListMessage, commandResult.feedbackToUser);"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ClientListSwitchEvent);"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"        commandResult \u003d switchCommand.execute();"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        assertEquals(expectedSwitchToActiveListMessage, commandResult.feedbackToUser);"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":47,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        Client editedClient \u003d new ClientBuilder().build();"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedClient).build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedClient);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        expectedModel.updateClient(model.getFilteredStudentList().get(0), editedClient, new Category(\"s\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredStudentList().size());"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        Client lastPerson \u003d model.getFilteredStudentList().get(indexLastPerson.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"        ClientBuilder personInList \u003d new ClientBuilder(lastPerson);"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        Client editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        expectedModel.updateClient(lastPerson, editedPerson, new Category(\"s\"));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"        Client editedClient \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedClient);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"        Client personInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"        Client editedPerson \u003d new ClientBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"        expectedModel.updateClient(model.getFilteredStudentList().get(0), editedPerson, new Category(\"s\"));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"        Client firstPerson \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        Client personInList \u003d model.getAddressBook().getStudentList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"        Client editedPerson \u003d new ClientBuilder().build();"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"        Client personToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"        expectedModel.updateClient(personToEdit, editedPerson, new Category(\"s\"));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":206,"author":{"gitID":"shookshire"},"content":"        Client editedPerson \u003d new ClientBuilder().build();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":212,"author":{"gitID":"shookshire"},"content":"        Client personToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"shookshire"},"content":"        expectedModel.updateClient(personToEdit, editedPerson, new Category(\"s\"));"},{"lineNumber":221,"author":{"gitID":"shookshire"},"content":"        assertNotEquals(model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":249,"author":{"gitID":"shookshire"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY, new Category(\"s\"))));"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":252,"author":{"gitID":"shookshire"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB, new Category(\"s\"))));"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":259,"author":{"gitID":"shookshire"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor, new Category(\"s\"));"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":32,"-":231}},{"path":"src/test/java/seedu/address/logic/commands/RestoreCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalClosedClientsAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInActiveViewException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":" * Contains integration tests (interaction with the Model) for {@code RestoreCommandTest}."},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"public class RestoreCommandTest {"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"    private static ListPanelController listPanelController;"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"    private Model model \u003d new ModelManager(getTypicalClosedClientsAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"    private final Category studentCategory \u003d new Category(\"s\");"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"    private final Category tutorCategory \u003d new Category(\"t\");"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"     * Ensure display is displaying closed client list."},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"    @BeforeClass"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"    public static void setup() {"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        listPanelController \u003d ListPanelController.getInstance();"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        if (ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"            listPanelController.switchDisplay();"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"     *Ensure display is at active client list after this class test."},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"    @AfterClass"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"        listPanelController.setDefault();"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"     * Tests if a particular tutor is restored properly."},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"     * @throws Exception"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"    public void execute_restoreClientTutorFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"        RestoreCommand restoreCommand \u003d prepareCommand(Index.fromZeroBased(0), tutorCategory);"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"        expectedModel.deleteClosedClient(expectedModel.getFilteredClosedTutorList().get(0), tutorCategory);"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"        String expectedMessage \u003d String.format(RestoreCommand.MESSAGE_RESTORE_TUTOR_SUCCESS,"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"                model.getFilteredClosedTutorList().get(0));"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        expectedModel.addTutor(model.getFilteredClosedTutorList().get(0));"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccess(restoreCommand, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"     * Tests if a particular student is restored properly."},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"     * @throws Exception"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"    public void execute_closeClientStudentFilteredList_success() throws Exception {"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"        RestoreCommand restoreCommand \u003d prepareCommand(Index.fromZeroBased(0), studentCategory);"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        expectedModel.deleteClosedClient(expectedModel.getFilteredClosedStudentList().get(0), studentCategory);"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"        String expectedMessage \u003d String.format(RestoreCommand.MESSAGE_RESTORE_STUDENT_SUCCESS,"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"                model.getFilteredClosedStudentList().get(0));"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"        expectedModel.addStudent(model.getFilteredClosedStudentList().get(0));"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccess(restoreCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"olimhc"},"content":"    public void assertsRestoreNotAvailableInActiveList() throws Exception {"},{"lineNumber":88,"author":{"gitID":"olimhc"},"content":"        listPanelController.switchDisplay();"},{"lineNumber":89,"author":{"gitID":"olimhc"},"content":"        RestoreCommand restoreCommand \u003d prepareCommand(Index.fromZeroBased(0), studentCategory);"},{"lineNumber":90,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"olimhc"},"content":"            restoreCommand.execute();"},{"lineNumber":92,"author":{"gitID":"olimhc"},"content":"        } catch (CommandNotAvailableInActiveViewException cna) {"},{"lineNumber":93,"author":{"gitID":"olimhc"},"content":"            assertsRestoreNotAvailableInActiveList();"},{"lineNumber":94,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":97,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"olimhc"},"content":"     * Returns an {@code CloseCommand} with parameters {@code index} and {@code category}"},{"lineNumber":99,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"olimhc"},"content":"    private RestoreCommand prepareCommand(Index index, Category category) {"},{"lineNumber":101,"author":{"gitID":"olimhc"},"content":"        RestoreCommand restoreCommand \u003d new RestoreCommand(index, category);"},{"lineNumber":102,"author":{"gitID":"olimhc"},"content":"        restoreCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"olimhc"},"content":"        return restoreCommand;"},{"lineNumber":104,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":85,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/SortByGradeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.SortedClients.getSortedByGradeAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.UnsortedClients.getUnsortedAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":" * Contains integration tests (interaction with the Model) for {@code SortByGradeCommand}."},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"public class SortByGradeCommandTest {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"    private SortByGradeCommand sortByGradeCommandForStudentList;"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    private SortByGradeCommand sortByGradeCommandForTutorList;"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"    private final Category studentCategory \u003d new Category(\"s\");"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"    private final Category tutorCategory \u003d new Category(\"t\");"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"    public void setup() {"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"        model \u003d new ModelManager(getUnsortedAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        expectedModel \u003d  new ModelManager(getSortedByGradeAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"        sortByGradeCommandForStudentList \u003d new SortByGradeCommand(studentCategory);"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        sortByGradeCommandForStudentList.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        sortByGradeCommandForTutorList \u003d new SortByGradeCommand(tutorCategory);"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"        sortByGradeCommandForTutorList.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"    public void executeSortUnsortedToSortedByGrade() {"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccessForStudentList(sortByGradeCommandForStudentList, (SortByGradeCommand.MESSAGE_SUCCESS_STUDENT"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"                + SortByGradeCommand.MESSAGE_SORT_DESC));"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccessForTutorList(sortByGradeCommandForTutorList, (SortByGradeCommand.MESSAGE_SUCCESS_TUTOR"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"                + SortByGradeCommand.MESSAGE_SORT_DESC));"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"     * Asserts that the code is successfully executed."},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"     * Asserts the command feedback is equal to expectedMessage."},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"     * Asserts actual FilteredList is equal to the expected FilteredList"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"     * Asserts the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"    private void assertCommandSuccessForStudentList(SortByGradeCommand command, String expectedMessage) {"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedModel.getFilteredStudentList(), model.getFilteredStudentList());"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"        } catch (CommandException ce) {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"     * Asserts that the code is successfully executed."},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"     * Asserts the command feedback is equal to expectedMessage."},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"     * Asserts actual FilteredList is equal to the expected FilteredList"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"     * Asserts the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"    private void assertCommandSuccessForTutorList(SortByGradeCommand command, String expectedMessage) {"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedModel.getFilteredTutorList(), model.getFilteredTutorList());"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"        } catch (CommandException ce) {"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":68,"-":18}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.SearchContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    public static final String VALID_LOCATION_AMY \u003d \"north\";"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    public static final String VALID_LOCATION_BOB \u003d \"south\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_GRADE_AMY \u003d \"p1\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_GRADE_BOB \u003d \"s1\";"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    public static final String VALID_SUBJECT_AMY \u003d \"math\";"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    public static final String VALID_SUBJECT_BOB \u003d \"physics\";"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    public static final String VALID_CATEGORY_AMY \u003d \"s\";"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    public static final String VALID_CATEGORY_BOB \u003d \"s\";"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public static final String VALID_CATEGORY_TUTOR_BOB \u003d \"t\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"    public static final String LOCATION_DESC_AMY \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_AMY;"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"    public static final String LOCATION_DESC_BOB \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_BOB;"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"    public static final String GRADE_DESC_AMY \u003d \" \" + PREFIX_GRADE + VALID_GRADE_AMY;"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"    public static final String GRADE_DESC_BOB \u003d \" \" + PREFIX_GRADE + VALID_GRADE_BOB;"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_AMY;"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BOB;"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"    public static final String CATEGORY_DESC_AMY \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_AMY;"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"    public static final String CATEGORY_DESC_BOB \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_BOB;"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"    public static final String CATEGORY_DESC_TUTOR_BOB \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_TUTOR_BOB;"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION; // empty string not allowed for location"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"    public static final String INVALID_GRADE_DESC \u003d \" \" + PREFIX_GRADE; // empty string not allowed for grade"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"    public static final String INVALID_SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT; // empty string not allowed for subject"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            + \"a\"; // only \"s\" and \"t\" should be allowed in category"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"                .withTags(VALID_TAG_FRIEND).withLocation(VALID_LOCATION_AMY).withGrade(VALID_GRADE_AMY)"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"                .withSubject(VALID_SUBJECT_AMY).withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withLocation(VALID_LOCATION_BOB)"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"                .withGrade(VALID_GRADE_BOB).withSubject(VALID_SUBJECT_BOB).withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e expectedFilteredStudentList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e expectedFilteredTutorList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTutorList());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"            assertEquals(expectedFilteredStudentList, actualModel.getFilteredStudentList());"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"            assertEquals(expectedFilteredTutorList, actualModel.getFilteredTutorList());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":152,"author":{"gitID":"shookshire"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":"        Client student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredStudentList(new SearchContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"        assertEquals(1, model.getFilteredStudentList().size());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"     * Deletes the first student in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"        Client firstPerson \u003d model.getFilteredStudentList().get(0);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":167,"author":{"gitID":"shookshire"},"content":"            model.deleteClient(firstPerson, new Category(\"s\"));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":40,"-":150}},{"path":"src/test/java/seedu/address/logic/commands/RemoveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"//@@Author shookshire"},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":" * {@code RemoveCommand}."},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"public class RemoveCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(outOfBoundIndex, \"math\");"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        Client personToRemove \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(INDEX_FIRST_PERSON, \"math\");"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"        Client editedPerson \u003d new ClientBuilder(personToRemove).withSubject(\"chemistry physics\").build();"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_CLIENT_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        expectedModel.updateClient(model.getFilteredStudentList().get(0), editedPerson, new Category(\"s\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(outOfBoundIndex, \"math\");"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(removeCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"        Client personToRemove \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(INDEX_FIRST_PERSON, \"math\");"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"        Client editedPerson \u003d new ClientBuilder(personToRemove).withSubject(\"chemistry physics\").build();"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(RemoveCommand.MESSAGE_REMOVE_CLIENT_SUCCESS, editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        expectedModel.updateClient(model.getFilteredStudentList().get(0), editedPerson, new Category(\"s\"));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(removeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"    public void execute_invalidSubjectFormat_throwsCommandException() throws Exception {"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(INDEX_FIRST_PERSON, \"math chemistry\");"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(removeCommand, model, RemoveCommand.MESSAGE_USAGE);"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"    public void execute_invalidSubjectNonExist_throwsCommandException() throws Exception {"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(INDEX_FIRST_PERSON, \"chinese\");"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(removeCommand, model, RemoveCommand.MESSAGE_VALUE_DONT_EXIST);"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"    public void execute_invalidLastSubject_throwsCommandException() throws Exception {"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        RemoveCommand removeCommand \u003d prepareCommand(INDEX_SECOND_PERSON, \"physics\");"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(removeCommand, model, RemoveCommand.MESSAGE_LAST_VALUE);"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"     * Returns a {@code RemoveCommand} with the parameter {@code index}."},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"    private RemoveCommand prepareCommand(Index index, String subject) {"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        RemoveCommand removeCommand \u003d new RemoveCommand(index, new Subject(subject), new Category(\"s\"));"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"        removeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"        return removeCommand;"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":71,"-":46}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON, new Category(\"s\"));"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON, new Category(\"s\"));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":3,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/CloseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBookNew;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":" * Contains integration tests (interaction with the Model) for {@code CloseCommandTest}."},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"public class CloseCommandTest {"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    private static ListPanelController listPanelController \u003d ListPanelController.getInstance();"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBookNew(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"    private final Category studentCategory \u003d new Category(\"s\");"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"    private final Category tutorCategory \u003d new Category(\"t\");"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"     * Ensure that the list is always displaying active clients."},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"        listPanelController.setDefault();"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"     * Tests if a particular tutor is closed properly."},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"     * @throws Exception"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    public void execute_closeClientTutorFilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"        CloseCommand closeCommand \u003d prepareCommand(Index.fromZeroBased(0), tutorCategory);"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"        expectedModel.deleteClient(expectedModel.getFilteredTutorList().get(0), tutorCategory);"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"        String expectedMessage \u003d String.format(CloseCommand.MESSAGE_CLOSE_TUTOR_SUCCESS,"},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"                model.getFilteredTutorList().get(0));"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"        expectedModel.addClosedTutor(model.getFilteredTutorList().get(0));"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccess(closeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"     * Tests if a particular student is closed properly."},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"     * @throws Exception"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"    public void execute_closeClientStudentFilteredList_success() throws Exception {"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"        CloseCommand closeCommand \u003d prepareCommand(Index.fromZeroBased(0), studentCategory);"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        expectedModel.deleteClient(expectedModel.getFilteredStudentList().get(0), studentCategory);"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"        String expectedMessage \u003d String.format(CloseCommand.MESSAGE_CLOSE_STUDENT_SUCCESS,"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"                model.getFilteredStudentList().get(0));"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"        expectedModel.addClosedStudent(model.getFilteredStudentList().get(0));"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccess(closeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"    public void assertsRestoreNotAvailableInClosedList() throws Exception {"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"        ListPanelController listPanelController \u003d ListPanelController.getInstance();"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        listPanelController.switchDisplay();"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"        CloseCommand closeCommand \u003d prepareCommand(Index.fromZeroBased(0), studentCategory);"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"            closeCommand.execute();"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"        } catch (CommandNotAvailableInClosedViewException cna) {"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"            assertsRestoreNotAvailableInClosedList();"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":87,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"olimhc"},"content":"     * Returns an {@code CloseCommand} with parameters {@code index} and {@code category}"},{"lineNumber":89,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"olimhc"},"content":"    private CloseCommand prepareCommand(Index index, Category category) {"},{"lineNumber":91,"author":{"gitID":"olimhc"},"content":"        CloseCommand closeCommand \u003d new CloseCommand(index, category);"},{"lineNumber":92,"author":{"gitID":"olimhc"},"content":"        closeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"olimhc"},"content":"        return closeCommand;"},{"lineNumber":94,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":76,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"            Client personToDelete \u003d model.getFilteredStudentList().get(0);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"                model.deleteClient(personToDelete, new Category(\"s\"));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":4,"-":65}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON, new Category(\"s\"));"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON, new Category(\"s\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":43,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":3,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.SearchContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        SearchContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new SearchContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        SearchContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new SearchContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0, 0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3, 0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new FindCommand(new SearchContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"        assertEquals(expectedList, model.getFilteredStudentList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":3,"-":96}},{"path":"src/test/java/seedu/address/logic/commands/SortByLocationCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.SortedClients.getSortedByLocationAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.UnsortedClients.getUnsortedAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":" * Contains integration tests (interaction with the Model) for {@code SortByLocationCommand}."},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"public class SortByLocationCommandTest {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"    private SortByLocationCommand sortByLocationCommandForStudentList;"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    private SortByLocationCommand sortByLocationCommandForTutorList;"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"    private final Category studentCategory \u003d new Category(\"s\");"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"    private final Category tutorCategory \u003d new Category(\"t\");"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"    public void setup() {"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        model \u003d new ModelManager(getUnsortedAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"        expectedModel \u003d  new ModelManager(getSortedByLocationAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        sortByLocationCommandForStudentList \u003d new SortByLocationCommand(studentCategory);"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        sortByLocationCommandForStudentList.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"        sortByLocationCommandForTutorList \u003d new SortByLocationCommand(tutorCategory);"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"        sortByLocationCommandForTutorList.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    public void executeSortUnsortedToSortedByLocation() {"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccessForStudentList(sortByLocationCommandForStudentList, ("},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"                SortByLocationCommand.MESSAGE_SUCCESS_STUDENT + SortByLocationCommand.MESSAGE_SORT_DESC));"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccessForTutorList(sortByLocationCommandForTutorList, (SortByLocationCommand.MESSAGE_SUCCESS_TUTOR"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"                + SortByLocationCommand.MESSAGE_SORT_DESC));"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"     * Asserts that the code is successfully executed."},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"     * Asserts the command feedback is equal to expectedMessage."},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"     * Asserts actual FilteredList is equal to the expected FilteredList"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"     * Asserts the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"    private void assertCommandSuccessForStudentList(SortByLocationCommand command, String expectedMessage) {"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedModel.getFilteredStudentList(), model.getFilteredStudentList());"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        } catch (CommandException ce) {"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"     * Asserts that the code is successfully executed."},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"     * Asserts the command feedback is equal to expectedMessage."},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"     * Asserts actual FilteredList is equal to the expected FilteredList"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"     * Asserts the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"    private void assertCommandSuccessForTutorList(SortByLocationCommand command, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedModel.getFilteredTutorList(), model.getFilteredTutorList());"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"        } catch (CommandException ce) {"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":69,"-":18}},{"path":"src/test/java/seedu/address/logic/commands/SortByNameCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.SortedClients.getSortedByNameAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.UnsortedClients.getUnsortedAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":" * Contains integration tests (interaction with the Model) for {@code SortByNameCommand}."},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"public class SortByNameCommandTest {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"    private SortByNameCommand sortByNameCommandForStudentList;"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    private SortByNameCommand sortByNameCommandForTutorList;"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"    private final Category studentCategory \u003d new Category(\"s\");"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"    private final Category tutorCategory \u003d new Category(\"t\");"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"    public void setup() {"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"        model \u003d new ModelManager(getUnsortedAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        expectedModel \u003d  new ModelManager(getSortedByNameAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"        sortByNameCommandForStudentList \u003d new SortByNameCommand(studentCategory);"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        sortByNameCommandForStudentList.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        sortByNameCommandForTutorList \u003d new SortByNameCommand(tutorCategory);"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"        sortByNameCommandForTutorList.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"    public void executeSortUnsortedToSortedByName() {"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccessForStudentList(sortByNameCommandForStudentList, (SortByNameCommand.MESSAGE_SUCCESS_STUDENT"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"                        + SortByNameCommand.MESSAGE_SORT_DESC));"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"        assertCommandSuccessForTutorList(sortByNameCommandForTutorList, (SortByNameCommand.MESSAGE_SUCCESS_TUTOR"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"                        + SortByNameCommand.MESSAGE_SORT_DESC));"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"     * Asserts that the code is successfully executed."},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"     * Asserts the command feedback is equal to expectedMessage."},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"     * Asserts actual FilteredList is equal to the expected FilteredList"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"     * Asserts the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"    private void assertCommandSuccessForStudentList(SortByNameCommand command, String expectedMessage) {"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedModel.getFilteredStudentList(), model.getFilteredStudentList());"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"        } catch (CommandException ce) {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"     * Asserts that the code is successfully executed."},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"     * Asserts the command feedback is equal to expectedMessage."},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"     * Asserts actual FilteredList is equal to the expected FilteredList"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"     * Asserts the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"    private void assertCommandSuccessForTutorList(SortByNameCommand command, String expectedMessage) {"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"            CommandResult commandResult \u003d command.execute();"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedModel.getFilteredTutorList(), model.getFilteredTutorList());"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"            assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"        } catch (CommandException ce) {"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":68,"-":18}},{"path":"src/test/java/seedu/address/logic/commands/AddClientCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_TUTOR_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"public class AddClientCommandIntegrationTest {"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    private Model model;"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        Client validStudent \u003d new ClientBuilder().build();"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        expectedModel.addStudent(validStudent);"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(prepareCommand(validStudent, model), model,"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"                String.format(AddClientCommand.MESSAGE_SUCCESS_STUDENT, validStudent), expectedModel);"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"        Client validTutor \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"                .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_GRADE_BOB)"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_TUTOR_BOB).build();"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"        expectedModel.addTutor(validTutor);"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        assertCommandSuccess(prepareCommand(validTutor, model), model,"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"                String.format(AddClientCommand.MESSAGE_SUCCESS_TUTOR, validTutor), expectedModel);"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        Client personInList \u003d model.getAddressBook().getStudentList().get(0);"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddClientCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"    private AddClientCommand prepareCommand(Client client, Model model) {"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d new AddClientCommand(client);"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        return command;"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":55,"-":20}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"        original.addStudent(HOON);"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        original.removeClient(ALICE, new Category(\"s\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"        original.addStudent(IDA);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":4,"-":122}},{"path":"src/test/java/seedu/address/model/UniqueClientListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.UniqueClientList;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"public class UniqueClientListTest {"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"        UniqueClientList uniqueClientList \u003d new UniqueClientList();"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"        uniqueClientList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":14,"-":6}},{"path":"src/test/java/seedu/address/model/person/GradeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"public class GradeTest {"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Grade(null));"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    public void constructor_invalidSubject_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"        String invalidSubject \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Grade(invalidSubject));"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"    public void isValidGrade() {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        // null subject"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Grade.isValidGrade(null));"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        // invalid subject"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\"pri5\")); // invalid format"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\"primary 3\")); // spacing between \"primary\" and \"3\""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        // one or more invalid subject"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\"pri4 p2 p1 s3\")); // one invalid grade"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\"pre2 asdo feiwo\")); // many invalid grade"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\"p2 p2\")); // multiple same grade"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        // valid subject"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        assertTrue(Grade.isValidGrade(\"p3\")); //alias"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        assertTrue(Grade.isValidGrade(\"primary3\")); // full grade"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        assertTrue(Grade.isValidGrade(\"secondary3\")); // full grade"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        assertTrue(Grade.isValidGrade(\"p3 s3 s1 p4\")); // multiple valid grade"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":37,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/AddClientCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_TUTOR_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"public class AddClientCommandTest {"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    public void constructor_nullClient_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"        new AddClientCommand(null);"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        Client validClient \u003d new ClientBuilder().build();"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"        CommandResult commandResultStudent \u003d getAddClientCommandForStudent(validClient, modelStub).execute();"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        assertEquals(String.format(AddClientCommand.MESSAGE_SUCCESS_STUDENT, validClient),"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"                commandResultStudent.feedbackToUser);"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"        assertEquals(Arrays.asList(validClient), modelStub.studentsAdded);"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"        Client validTutor \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"                .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_GRADE_BOB)"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"                .withCategory(VALID_CATEGORY_TUTOR_BOB).build();"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        CommandResult commandResultTutor \u003d getAddClientCommandForTutor(validTutor, modelStub).execute();"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        assertEquals(String.format(AddClientCommand.MESSAGE_SUCCESS_TUTOR, validTutor),"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"                commandResultTutor.feedbackToUser);"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"        assertEquals(Arrays.asList(validTutor), modelStub.tutorsAdded);"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateClientException();"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        Client validClient \u003d new ClientBuilder().build();"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"        thrown.expectMessage(AddClientCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"        getAddClientCommandForStudent(validClient, modelStub).execute();"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"    public void equals() {"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"        AddClientCommand addAliceCommand \u003d new AddClientCommand(alice);"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        AddClientCommand addBobCommand \u003d new AddClientCommand(bob);"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        // same object -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"        // same values -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"        AddClientCommand addAliceCommandCopy \u003d new AddClientCommand(alice);"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"        // different types -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"        // null -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        // different person -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"     * Generates a new AddClientCommand with the details of the given student."},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"    private AddClientCommand getAddClientCommandForStudent(Client client, Model model) {"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d new AddClientCommand(client);"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"        return command;"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"     * Generates a new AddClientCommand with the details of the given tutor."},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"    private AddClientCommand getAddClientCommandForTutor(Client client, Model model) {"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d new AddClientCommand(client);"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"        return command;"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"    private class ModelStub implements Model {"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"            return null;"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"        public void deleteClient(Client target, Category category) throws PersonNotFoundException {"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":"        public void deleteClosedClient(Client target, Category category) throws PersonNotFoundException {"},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":151,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"shookshire"},"content":"        public void updateClient(Client target, Client editedPerson, Category category)"},{"lineNumber":153,"author":{"gitID":"shookshire"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"        public void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"        public void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":167,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"shookshire"},"content":"        public void addClosedTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":172,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"        public void addClosedStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getFilteredStudentList() {"},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"            return null;"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"        public void updateFilteredStudentList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getFilteredTutorList() {"},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"            return null;"},{"lineNumber":192,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":"        public void updateFilteredTutorList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":196,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getFilteredClosedTutorList() {"},{"lineNumber":201,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitID":"shookshire"},"content":"            return null;"},{"lineNumber":203,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":205,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"shookshire"},"content":"        public void updateFilteredClosedTutorList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":207,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":210,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getFilteredClosedStudentList() {"},{"lineNumber":212,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":213,"author":{"gitID":"shookshire"},"content":"            return null;"},{"lineNumber":214,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":216,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"shookshire"},"content":"        public void updateFilteredClosedStudentList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":218,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":219,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":221,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":222,"author":{"gitID":"shookshire"},"content":"        public void updateRankedStudentList() {"},{"lineNumber":223,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":224,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":226,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":227,"author":{"gitID":"shookshire"},"content":"        public void updateRankedTutorList() {"},{"lineNumber":228,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":229,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":231,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"shookshire"},"content":"        public void sortByNameFilteredClientTutorList() {"},{"lineNumber":233,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":234,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":236,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"shookshire"},"content":"        public void sortByLocationFilteredClientTutorList() {"},{"lineNumber":238,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":239,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":241,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":242,"author":{"gitID":"shookshire"},"content":"        public void sortByGradeFilteredClientTutorList() {"},{"lineNumber":243,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":246,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"shookshire"},"content":"        public void sortBySubjectFilteredClientTutorList() {"},{"lineNumber":248,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":249,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":251,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"shookshire"},"content":"        public void sortByNameFilteredClientStudentList() {"},{"lineNumber":253,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":254,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":256,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":257,"author":{"gitID":"shookshire"},"content":"        public void sortByLocationFilteredClientStudentList() {"},{"lineNumber":258,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":259,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":261,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"shookshire"},"content":"        public void sortByGradeFilteredClientStudentList() {"},{"lineNumber":263,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":264,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":266,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":267,"author":{"gitID":"shookshire"},"content":"        public void sortBySubjectFilteredClientStudentList() {"},{"lineNumber":268,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":269,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":271,"author":{"gitID":"shookshire"},"content":"        public void resetHighLight() {"},{"lineNumber":272,"author":{"gitID":"shookshire"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":273,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":276,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"shookshire"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":278,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"shookshire"},"content":"    private class ModelStubThrowingDuplicateClientException extends AddClientCommandTest.ModelStub {"},{"lineNumber":280,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":281,"author":{"gitID":"shookshire"},"content":"        public void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":282,"author":{"gitID":"shookshire"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":283,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":285,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":286,"author":{"gitID":"shookshire"},"content":"        public void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":287,"author":{"gitID":"shookshire"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":288,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":290,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":291,"author":{"gitID":"shookshire"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":292,"author":{"gitID":"shookshire"},"content":"            return new AddressBook();"},{"lineNumber":293,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":296,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"shookshire"},"content":"     * A Model stub that always accept the client being added."},{"lineNumber":298,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":299,"author":{"gitID":"shookshire"},"content":"    private class ModelStubAcceptingClientAdded extends AddClientCommandTest.ModelStub {"},{"lineNumber":300,"author":{"gitID":"shookshire"},"content":"        final ArrayList\u003cClient\u003e tutorsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":301,"author":{"gitID":"shookshire"},"content":"        final ArrayList\u003cClient\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":302,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":303,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":304,"author":{"gitID":"shookshire"},"content":"        public void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":305,"author":{"gitID":"shookshire"},"content":"            requireNonNull(tutor);"},{"lineNumber":306,"author":{"gitID":"shookshire"},"content":"            tutorsAdded.add(tutor);"},{"lineNumber":307,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":309,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":310,"author":{"gitID":"shookshire"},"content":"        public void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":311,"author":{"gitID":"shookshire"},"content":"            requireNonNull(student);"},{"lineNumber":312,"author":{"gitID":"shookshire"},"content":"            studentsAdded.add(student);"},{"lineNumber":313,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":315,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":316,"author":{"gitID":"shookshire"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":317,"author":{"gitID":"shookshire"},"content":"            return new AddressBook();"},{"lineNumber":318,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":321,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":291,"-":30}},{"path":"src/test/java/seedu/address/model/person/SubjectTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"public class SubjectTest {"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Subject(null));"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    public void constructor_invalidSubject_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"        String invalidSubject \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Subject(invalidSubject));"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"    public void isValidSubject() {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        // null subject"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.isValidSubject(null));"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        // invalid subject"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        assertFalse(Subject.isValidSubject(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        assertFalse(Subject.isValidSubject(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        // valid subject"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        assertTrue(Subject.isValidSubject(\"math\"));"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        assertTrue(Subject.isValidSubject(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        assertTrue(Subject.isValidSubject(\"math, physics, chemistry, english, chinese\")); // long subject"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":29,"-":9}},{"path":"src/test/java/seedu/address/model/person/LocationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"public class LocationTest {"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Location(null));"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    public void constructor_invalidLocation_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"        String invalidLocation \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"    public void isValidLocation() {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        // null location"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        // invalid location"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        assertFalse(Location.isValidLocation(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        assertFalse(Location.isValidLocation(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        assertFalse(Location.isValidLocation(\"sodv\")); // invalid location"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        assertFalse(Location.isValidLocation(\"north asdf\")); // one invalid location"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        assertFalse(Location.isValidLocation(\"fdsaob efowfds idb south\")); // multiple invalid location"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        assertFalse(Location.isValidLocation(\"north south north\")); // repeated location"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        // valid location"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        assertTrue(Location.isValidLocation(\"north\"));"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        assertTrue(Location.isValidLocation(\"south\"));"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        assertTrue(Location.isValidLocation(\"west\"));"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        assertTrue(Location.isValidLocation(\"east\"));"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        assertTrue(Location.isValidLocation(\"central\"));"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        assertTrue(Location.isValidLocation(\"central north south\")); // multiple valid location"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":36,"-":9}},{"path":"src/test/java/seedu/address/model/person/CategoryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"public class CategoryTest {"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Category(null));"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    public void constructor_invalidSubject_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"        String invalidSubject \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidSubject));"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public void isValidCategory() {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        // null subject"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"        // invalid subject"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        assertFalse(Category.isValidCategory(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        assertFalse(Category.isValidCategory(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        assertFalse(Category.isValidCategory(\"a\")); // character apart from s or t"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        assertFalse(Category.isValidCategory(\"st\")); // more than just character s or t"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        // valid subject"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        assertTrue(Category.isValidCategory(\"s\"));"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        assertTrue(Category.isValidCategory(\"t\"));"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":30,"-":8}},{"path":"src/test/java/seedu/address/model/person/SearchContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class SearchContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        SearchContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                new SearchContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        SearchContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                new SearchContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        SearchContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new SearchContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void test_searchContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        SearchContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                new SearchContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new SearchContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new SearchContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        predicate \u003d new SearchContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        predicate \u003d new SearchContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void test_searchDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        SearchContainsKeywordsPredicate predicate \u003d new SearchContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        predicate \u003d new SearchContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":8,"-":71}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTutorList());"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        assertEquals(Collections.emptyList(), addressBook.getStudentList());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e newStudents \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newStudents, newTags);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        addressBook.getStudentList().remove(0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        private final ObservableList\u003cClient\u003e students \u003d FXCollections.observableArrayList();"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        private final ObservableList\u003cClient\u003e tutors \u003d FXCollections.observableArrayList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cClient\u003e closedStudents \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cClient\u003e closedTutors \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"        AddressBookStub(Collection\u003cClient\u003e clients, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"            this.students.setAll(clients);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getStudentList() {"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"            return students;"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getTutorList() {"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"            return tutors;"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        public ObservableList\u003cClient\u003e getClosedStudentList() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return closedStudents;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        public ObservableList\u003cClient\u003e getClosedTutorList() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return closedTutors;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":20,"-":93}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalClients.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.SearchContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        modelManager.getFilteredStudentList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"        modelManager.updateFilteredStudentList(new SearchContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":4,"-":61}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    public AddressBookBuilder withPerson(Client person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"            addressBook.addStudent(person);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":3,"-":50}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    public EditPersonDescriptorBuilder(Client client) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        descriptor.setName(client.getName());"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        descriptor.setPhone(client.getPhone());"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        descriptor.setEmail(client.getEmail());"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        descriptor.setAddress(client.getAddress());"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        descriptor.setTags(client.getTags());"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        descriptor.setLocation(client.getLocation());"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        descriptor.setGrade(client.getGrade());"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        descriptor.setSubject(client.getSubject());"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"        descriptor.setCategory(client.getCategory());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"    //@@author shookshire"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"    public EditPersonDescriptorBuilder withLocation(String location) {"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        descriptor.setLocation(new Location(location));"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"    public EditPersonDescriptorBuilder withGrade(String grade) {"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        descriptor.setGrade(new Grade(grade));"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"    public EditPersonDescriptorBuilder withSubject(String subject) {"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        descriptor.setSubject(new Subject(subject));"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"    public EditPersonDescriptorBuilder withCategory(String category) {"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        descriptor.setCategory(new Category(category));"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"        return descriptor;"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":49,"-":79}},{"path":"src/test/java/seedu/address/testutil/TypicalClients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_AMY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOB;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_TUTOR_BOB;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class TypicalClients {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    //Typical Students"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"            .withTags(\"friends\").withLocation(\"north\").withGrade(\"p3\").withSubject(\"math chemistry physics\")"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"            .withCategory(\"s\").build();"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").withLocation(\"north\").withGrade(\"s2\").withSubject(\"physics\")"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"            .withCategory(\"s\").build();"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withLocation(\"south\").withGrade(\"j1\")"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withLocation(\"east\").withGrade(\"primary6\")"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"english\").withCategory(\"s\").build();"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withLocation(\"west\").withGrade(\"p3\")"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withLocation(\"north\").withGrade(\"secondary1\")"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    //Typical ClosedStudents"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final Client JIMMY \u003d new ClientBuilder().withName(\"JIMMY\").withPhone(\"62123123\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withEmail(\"jimmytan@example.com\").withAddress(\"San Diego\").withLocation(\"east\").withGrade(\"u1\")"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final Client DANNY \u003d new ClientBuilder().withName(\"DANNY\").withPhone(\"64233123\")"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            .withEmail(\"dannytan@example.com\").withAddress(\"Mexico\").withLocation(\"east\").withGrade(\"p1\")"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            .withSubject(\"science\").withCategory(\"s\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    //Typical Tutors"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final Client ANDREW \u003d new ClientBuilder().withName(\"ANDREW LIM\").withPhone(\"5212533\")"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withEmail(\"andrew@example.com\").withAddress(\"Andrew street\").withLocation(\"east\").withGrade(\"primary2\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withSubject(\"english\").withCategory(\"t\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final Client EDISON \u003d new ClientBuilder().withName(\"EDISON\").withPhone(\"2313224\")"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            .withEmail(\"EDISON@example.com\").withAddress(\"EDISON ave\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            .withSubject(\"math\").withCategory(\"t\").build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final Client FLOWER \u003d new ClientBuilder().withName(\"Flower\").withPhone(\"2182427\")"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            .withEmail(\"flowerislife@example.com\").withAddress(\"little flower\").withLocation(\"central\").withGrade(\"k1\")"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            .withSubject(\"physics\").withCategory(\"t\").build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final Client GERRARD \u003d new ClientBuilder().withName(\"GERRARD\").withPhone(\"8321242\")"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            .withEmail(\"liverpool@example.com\").withAddress(\"Anfield\").withLocation(\"west\").withGrade(\"u4\")"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            .withSubject(\"chemistry\").withCategory(\"t\").build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    //Typical ClosedTutors"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final Client NICKY \u003d new ClientBuilder().withName(\"Nicky\").withPhone(\"2712533\")"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            .withEmail(\"nicky@example.com\").withAddress(\"nicky street\").withLocation(\"east\").withGrade(\"primary3\")"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            .withSubject(\"english\").withCategory(\"t\").build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final Client ROMEO \u003d new ClientBuilder().withName(\"Romeo Tan\").withPhone(\"43432344\")"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            .withEmail(\"romeo@example.com\").withAddress(\"Romeo love ave\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            .withSubject(\"math\").withCategory(\"t\").build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final Client JULIET \u003d new ClientBuilder().withName(\"Juliet\").withPhone(\"4236427\")"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            .withEmail(\"romeoislife@example.com\").withAddress(\"juliet flower\").withLocation(\"central\").withGrade(\"k1\")"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            .withSubject(\"physics\").withCategory(\"t\").build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final Client SHAKESPEAR \u003d new ClientBuilder().withName(\"GERRARD\").withPhone(\"8321242\")"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            .withEmail(\"shakyshaky@example.com\").withAddress(\"Roman rome river\").withLocation(\"west\").withGrade(\"u4\")"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            .withSubject(\"literature\").withCategory(\"t\").build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withLocation(\"north\").withGrade(\"s1\")"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withLocation(\"north\").withGrade(\"k2\")"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"            .withLocation(VALID_LOCATION_AMY).withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"            .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"            .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"            .withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"    public static final Client TUTOR_BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"            .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"            .withCategory(VALID_CATEGORY_TUTOR_BOB).build();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private TypicalClients() {} // prevents instantiation"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical students."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        for (Client client : getTypicalStudents()) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"                ab.addStudent(client);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static List\u003cClient\u003e getTypicalStudents() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static List\u003cClient\u003e getTypicalClosedStudents() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(JIMMY, DANNY));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical clients (Includes students and tutors)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBookNew() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        for (Client client : getTypicalClients()) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                ab.addClient(client);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static List\u003cClient\u003e getTypicalClients() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON , CARL , DANIEL, ELLE, FIONA, GEORGE,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                ANDREW, EDISON, FLOWER, GERRARD));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalClosedClientsAddressBook() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        for (Client client : getTypicalClosedClients()) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                ab.addClosedClient(client);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            } catch (AssertionError assertionError) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public static List\u003cClient\u003e getTypicalClosedClients() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, ANDREW, GERRARD));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":53,"-":129}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":" * A utility class for Client."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public static String getAddCommand(Client person) {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        return AddClientCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    public static String getPersonDetails(Client person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_LOCATION + person.getLocation().value + \" \");"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_GRADE + person.getGrade().value + \" \");"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_SUBJECT + person.getSubject().value + \" \");"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_CATEGORY + person.getCategory().value);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":21,"-":25}},{"path":"src/test/java/seedu/address/testutil/ClientUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":" * A utility class for Client."},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"public class ClientUtil {"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"     * Returns an add command string for adding the {@code client}."},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"    public static String getAddClientCommand(Client client) {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        return AddClientCommand.COMMAND_WORD + \" \" + getClientDetails(client);"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"     * Returns the part of command string for the given {@code client}\u0027s details."},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    public static String getClientDetails(Client client) {"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_CATEGORY + client.getCategory().value + \" \");"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        client.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_LOCATION + client.getLocation().value + \" \");"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_GRADE + client.getGrade().value + \" \");"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_SUBJECT + client.getSubject().value + \" \");"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        return sb.toString();"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":46}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        return Index.fromOneBased(model.getAddressBook().getStudentList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        return Index.fromOneBased(model.getAddressBook().getStudentList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    public static Client getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        return model.getAddressBook().getStudentList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":5,"-":49}},{"path":"src/test/java/seedu/address/testutil/ClientBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":" * A utility class to help with building Client objects."},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"public class ClientBuilder {"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_LOCATION \u003d \"north\";"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_GRADE \u003d \"p3\";"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"physics\";"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_CATEGORY \u003d \"s\";"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    private Name name;"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"    private Phone phone;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    private Email email;"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    private Address address;"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    private Location location;"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    private Grade grade;"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    private Subject subject;"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    private Category category;"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder() {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"        location \u003d new Location(DEFAULT_LOCATION);"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        grade \u003d new Grade(DEFAULT_GRADE);"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        category \u003d new Category(DEFAULT_CATEGORY);"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"     * Initializes the ClientBuilder with the data of {@code ClientToCopy}."},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder(Client clientToCopy) {"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        name \u003d clientToCopy.getName();"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"        phone \u003d clientToCopy.getPhone();"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"        email \u003d clientToCopy.getEmail();"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        address \u003d clientToCopy.getAddress();"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        location \u003d clientToCopy.getLocation();"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        grade \u003d clientToCopy.getGrade();"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        subject \u003d clientToCopy.getSubject();"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Name} of the {@code Client} that we are building."},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withName(String name) {"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withTags(String ... tags) {"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Address} of the {@code Client} that we are building."},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withAddress(String address) {"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Phone} of the {@code Client} that we are building."},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withPhone(String phone) {"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Email} of the {@code Client} that we are building."},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withEmail(String email) {"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Location} of the {@code Client} that we are building."},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withLocation(String location) {"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"        this.location \u003d new Location(location);"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Grade} of the {@code Client} that we are building."},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withGrade(String grade) {"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"        this.grade \u003d new Grade(grade);"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Subject} of the {@code Client} that we are building."},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withSubject(String subject) {"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Category} of the {@code Client} that we are building."},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withCategory(String category) {"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"        this.category \u003d new Category(category);"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"    public Client build() {"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"        return new Client(name, phone, email, address, tags, location, grade, subject, category);"},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":140,"-":6}},{"path":"src/test/java/seedu/address/testutil/UnsortedClients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_AMY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOB;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":" * A utility class containing a list of {@code Clients} objects to be used in tests."},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"public class UnsortedClients {"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"    //Students"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"            .withTags(\"friends\").withLocation(\"north\").withGrade(\"k1\").withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"            .withTags(\"owesMoney\", \"friends\").withLocation(\"north\").withGrade(\"s2\").withSubject(\"physics\")"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"            .withCategory(\"s\").build();"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withLocation(\"south\").withGrade(\"j1\")"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withLocation(\"east\").withGrade(\"primary6\")"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"english\").withCategory(\"s\").build();"},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withLocation(\"west\").withGrade(\"p3\")"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withLocation(\"north\").withGrade(\"secondary1\")"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"    //Tutors"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"    public static final Client ANDREW \u003d new ClientBuilder().withName(\"ANDREW LIM\").withPhone(\"5212533\")"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"andrew@example.com\").withAddress(\"Andrew street\").withLocation(\"east\").withGrade(\"primary2\")"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"english\").withCategory(\"t\").build();"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"    public static final Client EDISON \u003d new ClientBuilder().withName(\"EDISON\").withPhone(\"2313224\")"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"EDISON@example.com\").withAddress(\"EDISON ave\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"math\").withCategory(\"t\").build();"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"    public static final Client FLOWER \u003d new ClientBuilder().withName(\"Flower\").withPhone(\"2182427\")"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"flowerislife@example.com\").withAddress(\"little flower\").withLocation(\"central\").withGrade(\"k1\")"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"physics\").withCategory(\"t\").build();"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"    public static final Client GERRARD \u003d new ClientBuilder().withName(\"GERRARD\").withPhone(\"8321242\")"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"liverpool@example.com\").withAddress(\"Anfield\").withLocation(\"west\").withGrade(\"u4\")"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"chemistry\").withCategory(\"t\").build();"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"    // Manually added"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withLocation(\"north\").withGrade(\"s1\")"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withLocation(\"north\").withGrade(\"k2\")"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":"            .withLocation(VALID_LOCATION_AMY).withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":87,"author":{"gitID":"olimhc"},"content":"            .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":88,"author":{"gitID":"olimhc"},"content":"    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":89,"author":{"gitID":"olimhc"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":90,"author":{"gitID":"olimhc"},"content":"            .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":91,"author":{"gitID":"olimhc"},"content":"            .withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":92,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":93,"author":{"gitID":"olimhc"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":94,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":95,"author":{"gitID":"olimhc"},"content":"    private UnsortedClients() {} // prevents instantiation"},{"lineNumber":96,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":97,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"olimhc"},"content":"     * Returns an {@code AddressBook} with all the typical clients."},{"lineNumber":99,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"olimhc"},"content":"    public static AddressBook getUnsortedAddressBook() {"},{"lineNumber":101,"author":{"gitID":"olimhc"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":102,"author":{"gitID":"olimhc"},"content":"        for (Client client : getUnsortedClients()) {"},{"lineNumber":103,"author":{"gitID":"olimhc"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"olimhc"},"content":"                ab.addClient(client);"},{"lineNumber":105,"author":{"gitID":"olimhc"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":106,"author":{"gitID":"olimhc"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":107,"author":{"gitID":"olimhc"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"olimhc"},"content":"        return ab;"},{"lineNumber":110,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":112,"author":{"gitID":"olimhc"},"content":"    public static List\u003cClient\u003e getUnsortedClients() {"},{"lineNumber":113,"author":{"gitID":"olimhc"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BENSON, CARL, ALICE, ELLE, FIONA, GEORGE,"},{"lineNumber":114,"author":{"gitID":"olimhc"},"content":"                DANIEL, GERRARD, EDISON, ANDREW, FLOWER));"},{"lineNumber":115,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":87,"shookshire":20,"-":9}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":" * Provides a handle to a client card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String LOCATION_FIELD_ID \u003d \"#places\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String GRADE_FIELD_ID \u003d \"#grades\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String SUBJECT_FIELD_ID \u003d \"#subjects\";"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    private final Label locationLabel;"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    private final Label gradeLabel;"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    private final Label subjectLabel;"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"        this.locationLabel \u003d getChildNode(LOCATION_FIELD_ID);"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"        this.gradeLabel \u003d getChildNode(GRADE_FIELD_ID);"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"        this.subjectLabel \u003d getChildNode(SUBJECT_FIELD_ID);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public String getLocation() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return locationLabel.getText();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public String getGrade() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return gradeLabel.getText();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public String getSubject() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return subjectLabel.getText();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return tagLabels.stream()"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .findFirst()"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":15,"-":90}},{"path":"src/test/java/seedu/address/testutil/SortedClients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_AMY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOB;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":" * A utility class containing a list of {@code Clients} objects to be used in tests."},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"public class SortedClients {"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"    //Students"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"            .withTags(\"friends\").withLocation(\"north\").withGrade(\"k1\").withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"            .withTags(\"owesMoney\", \"friends\").withLocation(\"north\").withGrade(\"s2\").withSubject(\"physics\")"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"            .withCategory(\"s\").build();"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withLocation(\"south\").withGrade(\"j1\")"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withLocation(\"east\").withGrade(\"primary6\")"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"english\").withCategory(\"s\").build();"},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withLocation(\"west\").withGrade(\"p3\")"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withLocation(\"north\").withGrade(\"secondary1\")"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"    //Tutors"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"    public static final Client ANDREW \u003d new ClientBuilder().withName(\"ANDREW LIM\").withPhone(\"5212533\")"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"andrew@example.com\").withAddress(\"Andrew street\").withLocation(\"east\").withGrade(\"primary2\")"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"english\").withCategory(\"t\").build();"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"    public static final Client EDISON \u003d new ClientBuilder().withName(\"EDISON\").withPhone(\"2313224\")"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"EDISON@example.com\").withAddress(\"EDISON ave\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"math\").withCategory(\"t\").build();"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"    public static final Client FLOWER \u003d new ClientBuilder().withName(\"Flower\").withPhone(\"2182427\")"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"flowerislife@example.com\").withAddress(\"little flower\").withLocation(\"central\").withGrade(\"k1\")"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"physics\").withCategory(\"t\").build();"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"    public static final Client GERRARD \u003d new ClientBuilder().withName(\"GERRARD\").withPhone(\"8321242\")"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"liverpool@example.com\").withAddress(\"Anfield\").withLocation(\"west\").withGrade(\"u4\")"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"chemistry\").withCategory(\"t\").build();"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"    // Manually added"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withLocation(\"north\").withGrade(\"s1\")"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withLocation(\"north\").withGrade(\"k2\")"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":"            .withLocation(VALID_LOCATION_AMY).withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":87,"author":{"gitID":"olimhc"},"content":"            .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":88,"author":{"gitID":"olimhc"},"content":"    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":89,"author":{"gitID":"olimhc"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":90,"author":{"gitID":"olimhc"},"content":"            .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":91,"author":{"gitID":"olimhc"},"content":"            .withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":92,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":93,"author":{"gitID":"olimhc"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":94,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":95,"author":{"gitID":"olimhc"},"content":"    private SortedClients() {} // prevents instantiation"},{"lineNumber":96,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":97,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"olimhc"},"content":"     * Returns an {@code AddressBook} with all the typical clients sorted by name."},{"lineNumber":99,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"olimhc"},"content":"    public static AddressBook getSortedByNameAddressBook() {"},{"lineNumber":101,"author":{"gitID":"olimhc"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":102,"author":{"gitID":"olimhc"},"content":"        for (Client client : getSortedByNameClients()) {"},{"lineNumber":103,"author":{"gitID":"olimhc"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"olimhc"},"content":"                ab.addClient(client);"},{"lineNumber":105,"author":{"gitID":"olimhc"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":106,"author":{"gitID":"olimhc"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":107,"author":{"gitID":"olimhc"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"olimhc"},"content":"        return ab;"},{"lineNumber":110,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":112,"author":{"gitID":"olimhc"},"content":"    public static List\u003cClient\u003e getSortedByNameClients() {"},{"lineNumber":113,"author":{"gitID":"olimhc"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE,"},{"lineNumber":114,"author":{"gitID":"olimhc"},"content":"                ANDREW, EDISON, FLOWER, GERRARD));"},{"lineNumber":115,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":117,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"olimhc"},"content":"     * Returns an {@code AddressBook} with all the typical clients sorted by grade."},{"lineNumber":119,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"olimhc"},"content":"    public static AddressBook getSortedByGradeAddressBook() {"},{"lineNumber":121,"author":{"gitID":"olimhc"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":122,"author":{"gitID":"olimhc"},"content":"        for (Client client : getSortedByGradeClients()) {"},{"lineNumber":123,"author":{"gitID":"olimhc"},"content":"            try {"},{"lineNumber":124,"author":{"gitID":"olimhc"},"content":"                ab.addClient(client);"},{"lineNumber":125,"author":{"gitID":"olimhc"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":126,"author":{"gitID":"olimhc"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":127,"author":{"gitID":"olimhc"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"olimhc"},"content":"        return ab;"},{"lineNumber":130,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":132,"author":{"gitID":"olimhc"},"content":"    public static List\u003cClient\u003e getSortedByGradeClients() {"},{"lineNumber":133,"author":{"gitID":"olimhc"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, ELLE, DANIEL, FIONA, BENSON, CARL, GEORGE,"},{"lineNumber":134,"author":{"gitID":"olimhc"},"content":"                FLOWER, ANDREW, EDISON, GERRARD));"},{"lineNumber":135,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":137,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"olimhc"},"content":"     * Returns an {@code AddressBook} with all the typical clients sorted by subject"},{"lineNumber":139,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"olimhc"},"content":"    public static AddressBook getSortedBySubjectAddressBook() {"},{"lineNumber":141,"author":{"gitID":"olimhc"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":142,"author":{"gitID":"olimhc"},"content":"        for (Client client : getSortedBySubjectClients()) {"},{"lineNumber":143,"author":{"gitID":"olimhc"},"content":"            try {"},{"lineNumber":144,"author":{"gitID":"olimhc"},"content":"                ab.addClient(client);"},{"lineNumber":145,"author":{"gitID":"olimhc"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":146,"author":{"gitID":"olimhc"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":147,"author":{"gitID":"olimhc"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"olimhc"},"content":"        return ab;"},{"lineNumber":150,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":152,"author":{"gitID":"olimhc"},"content":"    public static List\u003cClient\u003e getSortedBySubjectClients() {"},{"lineNumber":153,"author":{"gitID":"olimhc"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GEORGE, DANIEL, ALICE, ELLE, BENSON, CARL, FIONA,"},{"lineNumber":154,"author":{"gitID":"olimhc"},"content":"                GERRARD, ANDREW, EDISON, FLOWER));"},{"lineNumber":155,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":157,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"olimhc"},"content":"     * Returns an {@code AddressBook} with all the typical clients sorted by location"},{"lineNumber":159,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"olimhc"},"content":"    public static AddressBook getSortedByLocationAddressBook() {"},{"lineNumber":161,"author":{"gitID":"olimhc"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":162,"author":{"gitID":"olimhc"},"content":"        for (Client client : getSortedByLocationClients()) {"},{"lineNumber":163,"author":{"gitID":"olimhc"},"content":"            try {"},{"lineNumber":164,"author":{"gitID":"olimhc"},"content":"                ab.addClient(client);"},{"lineNumber":165,"author":{"gitID":"olimhc"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":166,"author":{"gitID":"olimhc"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":167,"author":{"gitID":"olimhc"},"content":"            }"},{"lineNumber":168,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"olimhc"},"content":"        return ab;"},{"lineNumber":170,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":172,"author":{"gitID":"olimhc"},"content":"    public static List\u003cClient\u003e getSortedByLocationClients() {"},{"lineNumber":173,"author":{"gitID":"olimhc"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(DANIEL, BENSON, ALICE, FIONA, CARL, ELLE, GEORGE,"},{"lineNumber":174,"author":{"gitID":"olimhc"},"content":"                FLOWER, ANDREW, GERRARD, EDISON));"},{"lineNumber":175,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":147,"shookshire":20,"-":9}},{"path":"src/main/java/seedu/address/ui/StudentListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ClientListSwitchEvent;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.events.ui.ClientPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":" * Panel containing the list of students."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class StudentListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StudentListPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    private ListView\u003cClientCard\u003e studentListView;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cClient\u003e studentList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cClient\u003e closedStudentList;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public StudentListPanel(ObservableList\u003cClient\u003e studentList, ObservableList\u003cClient\u003e closedStudentList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.studentList \u003d studentList;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.closedStudentList \u003d closedStudentList;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        setConnectionsForStudents();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setConnectionsForStudents() {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        ObservableList\u003cClientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"                studentList, (client) -\u003e new ClientCard(client, studentList.indexOf(client) + 1));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        studentListView.setItems(mappedList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void setConnectionsForClosedStudents() {"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        ObservableList\u003cClientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":54,"author":{"gitID":"-"},"content":"                closedStudentList, (client) -\u003e new ClientCard(client, closedStudentList.indexOf(client) + 1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        studentListView.setItems(mappedList);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"    //@@author olimhc"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"     * Switch the displayed student\u0027s list"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"    private void switchListDisplay() {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        ListPanelController listPanelController \u003d ListPanelController.getInstance();"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        switch (listPanelController.getCurrentListDisplayed()) {"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"        case activeList:"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"            setConnectionsForClosedStudents();"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"            break;"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"        case closedList:"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"            setConnectionsForStudents();"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"            break;"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"        default:"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"This should not be possible.\");"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        studentListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"                        logger.fine(\"Selection in student list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"                        raise(new ClientPanelSelectionChangedEvent(newValue));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"     * Scrolls to the {@code ClientCard} at the {@code index} and selects it."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            studentListView.scrollTo(index);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            studentListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"olimhc"},"content":"    //@@author olimhc"},{"lineNumber":108,"author":{"gitID":"olimhc"},"content":"    @Subscribe"},{"lineNumber":109,"author":{"gitID":"olimhc"},"content":"    private void handleClientListSwitchEvent(ClientListSwitchEvent event) {"},{"lineNumber":110,"author":{"gitID":"olimhc"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":111,"author":{"gitID":"olimhc"},"content":"        switchListDisplay();"},{"lineNumber":112,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"olimhc"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ClientCard}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"    class StudentListViewCell extends ListCell\u003cClientCard\u003e {"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        protected void updateItem(ClientCard client, boolean empty) {"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"            super.updateItem(client, empty);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"            if (empty || client \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"                setGraphic(client.getRoot());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"olimhc":27,"shookshire":16,"-":90}},{"path":"src/main/java/seedu/address/ui/util/ListPanelController.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":" * Stores the type of list being displayed"},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":"public class ListPanelController {"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ListPanelController.class);"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":"    private static ListPanelController instance \u003d null;"},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"     * An enum to store which the type of list displayed"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":"    public enum DisplayType {"},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"        closedList, activeList"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"     * Ensure that the active client list is always shown first"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    private static DisplayType currentlyDisplayed \u003d DisplayType.activeList;"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    public DisplayType getCurrentListDisplayed() {"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"        return currentlyDisplayed;"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"     * Switch the current display"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"    public void switchDisplay() {"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        switch (currentlyDisplayed) {"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"        case activeList:"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"            currentlyDisplayed \u003d DisplayType.closedList;"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"            logger.fine(\"Switching display to closed client list.\");"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"            break;"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"        case closedList:"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"            currentlyDisplayed \u003d DisplayType.activeList;"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"            logger.fine(\"Switching display to active client list.\");"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"            break;"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"        default:"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"This should not be possible.\");"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"     * Reset the display to its default mode showing active client list."},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"    public void setDefault() {"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"        if (!isCurrentDisplayActiveList()) {"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"            switchDisplay();"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"     * @return true if displayed list is active list"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"    public static boolean isCurrentDisplayActiveList() {"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"        if (currentlyDisplayed \u003d\u003d DisplayType.activeList) {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"            return true;"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"     * Ensure that only one instance of ListPanelController is created"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"     * @return instance"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"    public static ListPanelController getInstance() {"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"            instance \u003d new ListPanelController();"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"        return instance;"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":76,"-":6}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ClientListSwitchEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_ACTIVE_LIST \u003d \"\u003cCurrently displaying active clients\u003e\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_CLOSED_LIST \u003d \"\u003cCurrently displaying closed clients\u003e\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StatusBar displayStatus;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        setDisplayStatus(SYNC_STATUS_ACTIVE_LIST);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void setDisplayStatus(String status) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.displayStatus.setText(status));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"olimhc"},"content":"    //@@author olimhc"},{"lineNumber":93,"author":{"gitID":"olimhc"},"content":"    @Subscribe"},{"lineNumber":94,"author":{"gitID":"olimhc"},"content":"    private void handleClientListSwitchEvent(ClientListSwitchEvent event) {"},{"lineNumber":95,"author":{"gitID":"olimhc"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":96,"author":{"gitID":"olimhc"},"content":"        if (this.displayStatus.getText().equals(SYNC_STATUS_ACTIVE_LIST)) {"},{"lineNumber":97,"author":{"gitID":"olimhc"},"content":"            setDisplayStatus(SYNC_STATUS_CLOSED_LIST);"},{"lineNumber":98,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":99,"author":{"gitID":"olimhc"},"content":"            setDisplayStatus(SYNC_STATUS_ACTIVE_LIST);"},{"lineNumber":100,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"olimhc"},"content":"    //@@author"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"olimhc":11,"-":92}},{"path":"src/main/java/seedu/address/ui/ClientCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":" * An UI component that displays information of a {@code Client}."},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"public class ClientCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    private static final String FXML \u003d \"ClientListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    private static final String[] TAGS_COLOUR_STYLES \u003d"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"        { \"red\" , \"blue\" , \"green\" , \"yellow\" , \"purple\" , \"lightpink\" , \"gold\" , \"wheat\" };"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    private static final String MATCH_COLOUR_STYLE \u003d \"orange\";"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    private static final String UNMATCH_COLOUR_STYLE \u003d \"noFill\";"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    public final Client client;"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"    private HBox cardPane;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    private Label name;"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    private Label id;"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    private Label phone;"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    private Label address;"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    private Label email;"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    private Label places;"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    private Label grades;"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    private Label subjects;"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    private FlowPane tags;"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"    public ClientCard(Client client, int displayedIndex) {"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        super(FXML);"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"        this.client \u003d client;"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        name.setText(client.getName().fullName);"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"        phone.setText(client.getPhone().value);"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"        address.setText(client.getAddress().value);"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        email.setText(client.getEmail().value);"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"        intplaces(client);"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        intGrades(client);"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        intSubjects(client);"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        intTags(client);"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"     *@author olimhc-reused"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"     *Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits with minor modification"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"     * Initialises tags"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"     * @param client"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    private void intTags(Client client) {"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        client.getTags().forEach(tag -\u003e {"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"            Label newLabel \u003d new Label(tag.tagName);"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"            newLabel.getStyleClass().add(getColour(tag.tagName));"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"            tags.getChildren().add(newLabel);"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"        });"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"    //@@author Zhu-Jiahui"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Initialises Location"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * If Location is matched with the client, Location field will be highlighted."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @param client"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void intplaces(Client client) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        places.setText(client.getLocation().value);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (client.getMatchedLocation() \u003d\u003d true) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            places.getStyleClass().add(MATCH_COLOUR_STYLE);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            places.getStyleClass().add(UNMATCH_COLOUR_STYLE);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Initialises Grade"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * If Grade is matched with the client, Grade field will be highlighted."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param client"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void intGrades(Client client) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        grades.setText(client.getGrade().value);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (client.getMatchedGrade() \u003d\u003d true) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            grades.getStyleClass().add(MATCH_COLOUR_STYLE);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            grades.getStyleClass().add(UNMATCH_COLOUR_STYLE);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *@author Zhu-Jiahui"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Initialises Subject"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * If Subject is matched with the client, Subject field will be highlighted."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @param client"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private void intSubjects(Client client) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        subjects.setText(client.getSubject().value);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (client.getMatchedSubject() \u003d\u003d true) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            subjects.getStyleClass().add(MATCH_COLOUR_STYLE);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            subjects.getStyleClass().add(UNMATCH_COLOUR_STYLE);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @param name"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @return String colour"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private String getColour(String name) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return TAGS_COLOUR_STYLES[(Math.abs(name.hashCode() % TAGS_COLOUR_STYLES.length))];"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":153,"author":{"gitID":"shookshire"},"content":"        if (!(other instanceof ClientCard)) {"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":"            return false;"},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":"        // state check"},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"        ClientCard card \u003d (ClientCard) other;"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 client.equals(card.client);"},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"null":1,"shookshire":87,"-":74}},{"path":"src/test/java/seedu/address/testutil/MatchedClients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_AMY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOB;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"content":"//@@author Zhu-Jiahui"},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Clients} objects to be used in tests."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class MatchedClients {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    //Students"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").withLocation(\"north\").withGrade(\"k1\").withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").withLocation(\"north\").withGrade(\"s2\").withSubject(\"physics\")"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"            .withCategory(\"s\").build();"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withLocation(\"south\").withGrade(\"j1\")"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withLocation(\"east\").withGrade(\"primary6\")"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"english\").withCategory(\"s\").build();"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withLocation(\"west\").withGrade(\"p3\")"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withLocation(\"north\").withGrade(\"secondary1\")"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    //Tutors"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Client ANDREW \u003d new ClientBuilder().withName(\"ANDREW LIM\").withPhone(\"5212533\")"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withEmail(\"andrew@example.com\").withAddress(\"Andrew street\").withLocation(\"east\").withGrade(\"primary2\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withSubject(\"english\").withCategory(\"t\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final Client EDISON \u003d new ClientBuilder().withName(\"EDISON\").withPhone(\"2313224\")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withEmail(\"EDISON@example.com\").withAddress(\"EDISON ave\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            .withSubject(\"math\").withCategory(\"t\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final Client FLOWER \u003d new ClientBuilder().withName(\"Flower\").withPhone(\"2182427\")"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withEmail(\"flowerislife@example.com\").withAddress(\"little flower\").withLocation(\"central\").withGrade(\"k1\")"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withSubject(\"physics\").withCategory(\"t\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final Client GERRARD \u003d new ClientBuilder().withName(\"GERRARD\").withPhone(\"8321242\")"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withEmail(\"liverpool@example.com\").withAddress(\"Anfield\").withLocation(\"west\").withGrade(\"u4\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withSubject(\"chemistry\").withCategory(\"t\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withLocation(\"north\").withGrade(\"s1\")"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withLocation(\"north\").withGrade(\"k2\")"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"            .withLocation(VALID_LOCATION_AMY).withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"            .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"            .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"            .withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private MatchedClients() {} // prevents instantiation"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical clients sorted by name."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static AddressBook getMatchedStudentAddressBook() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        for (Client client : getMatchedStudent()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                ab.addClient(client);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical clients sorted by name."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static AddressBook getMatchedTutorAddressBook() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        for (Client client : getMatchedTutor()) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                ab.addClient(client);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static List\u003cClient\u003e getMatchedStudent() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static List\u003cClient\u003e getMatchedTutor() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(EDISON));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"shookshire":44,"-":92}},{"path":"src/test/java/seedu/address/testutil/UnmatchedClients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_AMY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_BOB;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"content":"//@@author Zhu-Jiahui"},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Clients} objects to be used in tests."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class UnmatchedClients {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    //Students"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").withLocation(\"north\").withGrade(\"k1\").withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").withLocation(\"north\").withGrade(\"s2\").withSubject(\"physics\")"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"            .withCategory(\"s\").build();"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withLocation(\"south\").withGrade(\"j1\")"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withLocation(\"east\").withGrade(\"primary6\")"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"english\").withCategory(\"s\").build();"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withLocation(\"west\").withGrade(\"p3\")"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withLocation(\"north\").withGrade(\"secondary1\")"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"physics\").withCategory(\"s\").build();"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    //Tutors"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Client ANDREW \u003d new ClientBuilder().withName(\"ANDREW LIM\").withPhone(\"5212533\")"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withEmail(\"andrew@example.com\").withAddress(\"Andrew street\").withLocation(\"east\").withGrade(\"primary2\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withSubject(\"english\").withCategory(\"t\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final Client EDISON \u003d new ClientBuilder().withName(\"EDISON\").withPhone(\"2313224\")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withEmail(\"EDISON@example.com\").withAddress(\"EDISON ave\").withLocation(\"west\").withGrade(\"j2\")"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            .withSubject(\"math\").withCategory(\"t\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final Client FLOWER \u003d new ClientBuilder().withName(\"Flower\").withPhone(\"2182427\")"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withEmail(\"flowerislife@example.com\").withAddress(\"little flower\").withLocation(\"central\").withGrade(\"k1\")"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withSubject(\"physics\").withCategory(\"t\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final Client GERRARD \u003d new ClientBuilder().withName(\"GERRARD\").withPhone(\"8321242\")"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withEmail(\"liverpool@example.com\").withAddress(\"Anfield\").withLocation(\"west\").withGrade(\"u4\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withSubject(\"chemistry\").withCategory(\"t\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withLocation(\"north\").withGrade(\"s1\")"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"chemistry\").withCategory(\"s\").build();"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withLocation(\"north\").withGrade(\"k2\")"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"            .withSubject(\"math\").withCategory(\"s\").build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"            .withLocation(VALID_LOCATION_AMY).withGrade(VALID_GRADE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"            .withCategory(VALID_CATEGORY_AMY).build();"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"            .withLocation(VALID_LOCATION_BOB).withGrade(VALID_GRADE_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"            .withCategory(VALID_CATEGORY_BOB).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private UnmatchedClients() {} // prevents instantiation"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical clients."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static AddressBook getUnmatchedAddressBook() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        for (Client client : getUnmachedClients()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                ab.addClient(client);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static List\u003cClient\u003e getUnmachedClients() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                ANDREW, EDISON, FLOWER, GERRARD));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"}"},{"lineNumber":117,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"null":1,"shookshire":44,"-":72}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d students and %2$d tutors listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":1,"-":12}},{"path":"src/main/java/seedu/address/ui/TutorListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ClientListSwitchEvent;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.events.ui.ClientPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Panel containing the list of tutors."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TutorListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"TutorListPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TutorListPanel.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    private ListView\u003cClientCard\u003e tutorListView;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cClient\u003e tutorList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cClient\u003e closedTutorList;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public TutorListPanel(ObservableList\u003cClient\u003e tutorList, ObservableList\u003cClient\u003e closedTutorList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tutorList \u003d tutorList;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.closedTutorList \u003d closedTutorList;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        setConnectionsForTutors();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setConnectionsForTutors() {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        ObservableList\u003cClientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"                tutorList, (client) -\u003e new ClientCard(client, tutorList.indexOf(client) + 1));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tutorListView.setItems(mappedList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tutorListView.setCellFactory(listView -\u003e new StudentListViewCell());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void setConnectionsForClosedTutors() {"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        ObservableList\u003cClientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":54,"author":{"gitID":"-"},"content":"                closedTutorList, (client) -\u003e new ClientCard(client, closedTutorList.indexOf(client) + 1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        tutorListView.setItems(mappedList);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        tutorListView.setCellFactory(listView -\u003e new StudentListViewCell());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"    //@@author olimhc"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"     * Switch the displayed tutor\u0027s list"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"    private void switchListDisplay() {"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        ListPanelController listPanelController \u003d ListPanelController.getInstance();"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        switch (listPanelController.getCurrentListDisplayed()) {"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"        case activeList:"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"            setConnectionsForClosedTutors();"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"            break;"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"        case closedList:"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"            setConnectionsForTutors();"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"            break;"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"        default:"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"This should not be possible.\");"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        tutorListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"                        logger.fine(\"Selection in tutor list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"                        raise(new ClientPanelSelectionChangedEvent(newValue));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"     * Scrolls to the {@code ClientCard} at the {@code index} and selects it."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            tutorListView.scrollTo(index);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            tutorListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"olimhc"},"content":"    //@@author olimhc"},{"lineNumber":108,"author":{"gitID":"olimhc"},"content":"    @Subscribe"},{"lineNumber":109,"author":{"gitID":"olimhc"},"content":"    private void handleClientListSwitchEvent(ClientListSwitchEvent event) {"},{"lineNumber":110,"author":{"gitID":"olimhc"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":111,"author":{"gitID":"olimhc"},"content":"        switchListDisplay();"},{"lineNumber":112,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"olimhc"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ClientCard}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"    class StudentListViewCell extends ListCell\u003cClientCard\u003e {"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        protected void updateItem(ClientCard client, boolean empty) {"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"            super.updateItem(client, empty);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"            if (empty || client \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"                setGraphic(client.getRoot());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"olimhc":27,"shookshire":15,"-":91}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    /** Returns an unmodifiable view of the filtered list of students */"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getFilteredStudentList();"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"    /** Returns an unmodifiable view of the filtered list of tutors */"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getFilteredTutorList();"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of closed students */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ObservableList\u003cClient\u003e getFilteredClosedStudentList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of closed tutors */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ObservableList\u003cClient\u003e getFilteredClosedTutorList();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":7,"-":29}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"        return \"number of students \" + data.getStudentList().size()"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"                + \", number of tutors \" + data.getTutorList().size()"},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \", number of tags \" + data.getTagList().size()"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                + \", number of closed student \" + data.getClosedStudentList().size()"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                + \", number of closed tutor \" + data.getClosedTutorList().size();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":2,"-":21}},{"path":"src/main/java/seedu/address/commons/events/ui/ClientListSwitchEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":5,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"olimhc"},"content":" * Represents an event when the user wants to switch the list"},{"lineNumber":7,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"public class ClientListSwitchEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":11,"-":3}},{"path":"src/main/java/seedu/address/commons/events/ui/ClientPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import seedu.address.ui.ClientCard;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":" * Represents a selection change in the Client List Panel"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"public class ClientPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"    private final ClientCard newSelection;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    public ClientPanelSelectionChangedEvent(ClientCard newSelection) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public ClientCard getNewSelection() {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        return newSelection;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":18,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_CATEGORY)"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"                || argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        Category category;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"            category \u003d ParserUtil.parseCategory(argumentMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"            return new DeleteCommand(index, category);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":43,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":25,"-":29}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CloseCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RestoreCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SwitchCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"e0032017"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"e0032017"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"e0032017"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"e0032017"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"e0032017"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"e0032017"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"e0032017"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"e0032017"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":93,"author":{"gitID":"e0032017"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case MatchCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case MatchCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new MatchCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        case AddClientCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        case AddClientCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"            return new AddClientCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case SwitchCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case SwitchCommand.COMMAND_ALIAS:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new SwitchCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case CloseCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case CloseCommand.COMMAND_ALIAS:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new CloseCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case RestoreCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case RestoreCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new RestoreCommandParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"        case RemoveCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        case RemoveCommand.COMMAND_ALIAS:"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"            return new RemoveCommandParser().parse(arguments);"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":9,"shookshire":11,"-":109}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":6,"author":{"gitID":"-"},"content":" */"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":5,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_SORT_TYPE \u003d \"Sort type should not be empty.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code String location} into an {@code Location}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if the given {@code location} is invalid."},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"    public static Location parseLocation(String location) throws IllegalValueException {"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        requireNonNull(location);"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        String trimmedLocation \u003d location.trim();"},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"        if (!Location.isValidLocation(trimmedLocation)) {"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":"        return new Location(trimmedLocation);"},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code Optional\u003cString\u003e location} into an {@code Optional\u003cLocation\u003e} if {@code location} is present."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"    public static Optional\u003cLocation\u003e parseLocation(Optional\u003cString\u003e location) throws IllegalValueException {"},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":"        requireNonNull(location);"},{"lineNumber":196,"author":{"gitID":"shookshire"},"content":"        return location.isPresent() ? Optional.of(parseLocation(location.get())) : Optional.empty();"},{"lineNumber":197,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code String grade} into an {@code Grade}."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if the given {@code grade} is invalid."},{"lineNumber":204,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"shookshire"},"content":"    public static Grade parseGrade(String grade) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"shookshire"},"content":"        requireNonNull(grade);"},{"lineNumber":207,"author":{"gitID":"shookshire"},"content":"        String trimmedGrade \u003d grade.trim();"},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":"        if (!Grade.isValidGrade(trimmedGrade)) {"},{"lineNumber":209,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Grade.MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":210,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"shookshire"},"content":"        return new Grade(trimmedGrade);"},{"lineNumber":212,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":214,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code Optional\u003cString\u003e grade} into an {@code Optional\u003cGrade\u003e} if {@code grade} is present."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"shookshire"},"content":"    public static Optional\u003cGrade\u003e parseGrade(Optional\u003cString\u003e grade) throws IllegalValueException {"},{"lineNumber":219,"author":{"gitID":"shookshire"},"content":"        requireNonNull(grade);"},{"lineNumber":220,"author":{"gitID":"shookshire"},"content":"        return grade.isPresent() ? Optional.of(parseGrade(grade.get())) : Optional.empty();"},{"lineNumber":221,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":223,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code String subject} into an {@code Subject}."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":227,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if the given {@code subject} is invalid."},{"lineNumber":228,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"shookshire"},"content":"    public static Subject parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":230,"author":{"gitID":"shookshire"},"content":"        requireNonNull(subject);"},{"lineNumber":231,"author":{"gitID":"shookshire"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":232,"author":{"gitID":"shookshire"},"content":"        if (!Subject.isValidSubject(trimmedSubject)) {"},{"lineNumber":233,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":234,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"shookshire"},"content":"        return new Subject(trimmedSubject);"},{"lineNumber":236,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":238,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code Optional\u003cString\u003e subject} into an {@code Optional\u003cSubject\u003e} if {@code subject} is present."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"shookshire"},"content":"    public static Optional\u003cSubject\u003e parseSubject(Optional\u003cString\u003e subject) throws IllegalValueException {"},{"lineNumber":243,"author":{"gitID":"shookshire"},"content":"        requireNonNull(subject);"},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"        return subject.isPresent() ? Optional.of(parseSubject(subject.get())) : Optional.empty();"},{"lineNumber":245,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":247,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code String category} into an {@code Category}."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":251,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if the given {@code type} is invalid."},{"lineNumber":252,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"shookshire"},"content":"    public static Category parseCategory(String category) throws IllegalValueException {"},{"lineNumber":254,"author":{"gitID":"shookshire"},"content":"        requireNonNull(category);"},{"lineNumber":255,"author":{"gitID":"shookshire"},"content":"        String trimmedCategory \u003d category.trim();"},{"lineNumber":256,"author":{"gitID":"shookshire"},"content":"        if (!Category.isValidCategory(trimmedCategory)) {"},{"lineNumber":257,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"},{"lineNumber":258,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"shookshire"},"content":"        return new Category(trimmedCategory);"},{"lineNumber":260,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":262,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code Optional\u003cString\u003e category} into an {@code Optional\u003cCategory\u003e} if {@code category} is present."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"shookshire"},"content":"    public static Optional\u003cCategory\u003e parseCategory(Optional\u003cString\u003e category) throws IllegalValueException {"},{"lineNumber":267,"author":{"gitID":"shookshire"},"content":"        requireNonNull(category);"},{"lineNumber":268,"author":{"gitID":"shookshire"},"content":"        return category.isPresent() ? Optional.of(parseCategory(category.get())) : Optional.empty();"},{"lineNumber":269,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"},{"lineNumber":271,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"shookshire":89,"-":182}},{"path":"src/main/java/seedu/address/logic/parser/CloseCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CloseCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":" * Parses an input and create a new CloseCommand object"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"public class CloseCommandParser implements Parser\u003cCloseCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"     * Parses the given {@code String} of arguments in the context of the CloseCommand"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"     * and returns a Close Command object for execution."},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"    public CloseCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_CATEGORY)"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"                || argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        Index index;"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"        Category category;"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"            category \u003d ParserUtil.parseCategory(argumentMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"            return new CloseCommand(index, category);"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"            throw new ParseException("},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CloseCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":41,"shookshire":3,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/RemoveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.RemoveCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":" * Parses input arguments and creates a new RemoveCommand object"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveCommand"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"     * and returns an RemoveCommand object for execution."},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    public RemoveCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT, PREFIX_CATEGORY);"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CATEGORY, PREFIX_SUBJECT)"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"                || argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        Index index;"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        Category category;"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        Subject subject;"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"            category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"            subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).get();"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"        return new RemoveCommand(index, subject, category);"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":55,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddClientCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":" * Parses input arguments and creates a new AddClientCommand object"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"public class AddClientCommandParser implements Parser\u003cAddClientCommand\u003e {"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"     * Parses the given {@code String} of arguments in the context of the AddClientCommand"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"     * and returns an AddClientCommand object for execution."},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    public AddClientCommand parse(String args) throws ParseException {"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"                        PREFIX_TAG, PREFIX_LOCATION, PREFIX_GRADE, PREFIX_SUBJECT, PREFIX_CATEGORY);"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"                PREFIX_LOCATION, PREFIX_GRADE, PREFIX_SUBJECT, PREFIX_CATEGORY)"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"            Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION)).get();"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"            Grade grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE)).get();"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"            Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).get();"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"            Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"            Client client \u003d new Client(name, phone, email, address, tagList, location, grade, subject, category);"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"            return new AddClientCommand(client);"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":71,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortByGradeCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortByLocationCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortByNameCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortBySubjectCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":" * Parses input arguments and creates a new subclass object of SortCommand"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"     * Parse the given {@code String} of arguments in the context of SortCommand"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"     * @return either SortByGradeCommand, SortByNameCommand, SortByGradeCommand, SortBySubjectCommand"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"     * object for execution."},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_CATEGORY)"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"                || argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        String sortType;"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"        Category category;"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"            sortType \u003d argumentMultimap.getPreamble();"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"            category \u003d ParserUtil.parseCategory(argumentMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"            return getSortCommandType(category, sortType);"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"     * @return the respective sort command based on the category parsed"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"     * @throws ParseException"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"    private SortCommand getSortCommandType(Category category, String sortType) throws ParseException {"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"        switch (sortType) {"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"        case SortCommand.COMMAND_WORD_NAME:"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"            return new SortByNameCommand(category);"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"        case SortCommand.COMMAND_WORD_SUBJECT:"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"            return new SortBySubjectCommand(category);"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"        case SortCommand.COMMAND_WORD_LOCATION:"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"            return new SortByLocationCommand(category);"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"        case SortCommand.COMMAND_WORD_GRADE:"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"            return new SortByGradeCommand(category);"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"        default:"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"            throw new ParseException("},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":66,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":23,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"            + \": Deletes the student/tutor identified by the index number used in the last student/tutor listing.\\n\""},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"            + PREFIX_CATEGORY + \"CATEGORY\\n\""},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_CATEGORY + \"s\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    private final Category category;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    private Client clientToDelete;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    public DeleteCommand(Index targetIndex, Category category) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        this.category \u003d category;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        requireNonNull(clientToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"                model.deleteClient(clientToDelete, category);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            assert(!ListPanelController.isCurrentDisplayActiveList());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                model.deleteClosedClient(clientToDelete, category);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e lastShownList;"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"            if (category.isStudent()) {"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"                lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"            } else {"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"                lastShownList \u003d model.getFilteredTutorList();"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            assert(!ListPanelController.isCurrentDisplayActiveList());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            if (category.isStudent()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                lastShownList \u003d model.getFilteredClosedStudentList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                lastShownList \u003d model.getFilteredClosedTutorList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"        clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(this.clientToDelete, ((DeleteCommand) other).clientToDelete));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"shookshire":24,"-":72}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLOSED_STUDENTS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLOSED_TUTORS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":16,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        if (ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            model.updateFilteredTutorList(PREDICATE_SHOW_ALL_TUTORS);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            assert(!ListPanelController.isCurrentDisplayActiveList());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            model.updateFilteredClosedTutorList(PREDICATE_SHOW_ALL_CLOSED_TUTORS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            model.updateFilteredClosedStudentList(PREDICATE_SHOW_ALL_CLOSED_STUDENTS);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":31}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import java.util.stream.Stream;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"                        PREFIX_TAG, PREFIX_LOCATION, PREFIX_GRADE, PREFIX_SUBJECT, PREFIX_CATEGORY);"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CATEGORY)"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"                || argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        Category category;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"            category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION))"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                    .ifPresent(editPersonDescriptor::setLocation);"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"            ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).ifPresent(editPersonDescriptor::setSubject);"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"            ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE)).ifPresent(editPersonDescriptor::setGrade);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY))"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                    .ifPresent(editPersonDescriptor::setCategory);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"        return new EditCommand(index, editPersonDescriptor, category);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":28,"-":79}},{"path":"src/main/java/seedu/address/logic/commands/SortBySubjectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":" *Sort the selected list according to their subject in alphabetical order"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"public class SortBySubjectCommand extends SortCommand {"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_SORT_DESC \u003d \" their subject in alphabetical order.\";"},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"    private Category category;"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"    public SortBySubjectCommand(Category category) {"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"        this.category \u003d category;"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"        if (category.isTutor()) {"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"            model.sortBySubjectFilteredClientTutorList();"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS_TUTOR + MESSAGE_SORT_DESC);"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"            model.sortBySubjectFilteredClientStudentList();"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS_STUDENT + MESSAGE_SORT_DESC);"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"                || (other instanceof SortBySubjectCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"                \u0026 this.category.equals(((SortBySubjectCommand) other).category)); // state check // state check"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":37,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/MatchCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"content":"//@@author Zhu-Jiahui"},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new MatchCommand object"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class MatchCommandParser implements Parser\u003cMatchCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the MatchCommand"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * and returns an MatchCommand object for execution."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public MatchCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_CATEGORY)"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"                || argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        Index index;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        Category category;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"            category \u003d ParserUtil.parseCategory(argumentMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"            return new MatchCommand(index, category);"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":44,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"shookshire":26,"-":28}},{"path":"src/main/java/seedu/address/logic/commands/util/SortByGradeComparator.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":" * Comparator to sort by int base on valueWeight"},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":"public class SortByGradeComparator"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"        implements Comparator\u003cClient\u003e {"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":"    public int compare(Client o1, Client o2) {"},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"        return o1.getGrade().valueWeightage - o2.getGrade().valueWeightage;"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":12,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":36}},{"path":"src/main/java/seedu/address/logic/parser/RestoreCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RestoreCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":" * Parse an input and create a new RestoreCommand object"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"public class RestoreCommandParser implements Parser\u003cRestoreCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"     * Parses the given {@code String} of arguments in the context of the RestoreCommand"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"     * and returns a Restore Command object for execution."},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"    public RestoreCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY);"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_CATEGORY)"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"                || argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        Index index;"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"        Category category;"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"            category \u003d ParserUtil.parseCategory(argumentMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"            return new RestoreCommand(index, category);"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"            throw new ParseException("},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RestoreCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":41,"shookshire":3,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/util/GradeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Grade.getAllGradeWeightage;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Grade.getGradeIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Grade.isValidGrade;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":" * Helper function for handling different format of grade"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":"public class GradeUtil {"},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"     * Returns true if the {@code value} matches the {@code word} given that word is a valid grade"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":"     *       A p3 grade should match primary3."},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"     *       A client with P3 P4 grades should match a p4 grade"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":"     * @param value cannot be null, can be a string of multiple grades or just a grade"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    public static boolean containsGradeIgnoreCase(String value, String word) {"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"        requireNonNull(value);"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"        requireNonNull(word);"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"        if (!isValidGrade(word)) {"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"            return false;"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"        int preppedWordValueWeightage \u003d getGradeIndex(preppedWord);"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"        int[] getAllGradeWeightage \u003d getAllGradeWeightage(value);"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        for (int i : getAllGradeWeightage) {"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"            if (i \u003d\u003d preppedWordValueWeightage) {"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"                return true;"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"        return false;"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":39,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/SortByLocationCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":" *Sort the selected list according to their location in alphabetical order"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"public class SortByLocationCommand extends SortCommand {"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_SORT_DESC \u003d \" their location in alphabetical order.\";"},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"    private Category category;"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":"    public SortByLocationCommand(Category category) {"},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"        this.category \u003d category;"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"        if (category.isTutor()) {"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"            model.sortByLocationFilteredClientTutorList();"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS_TUTOR + MESSAGE_SORT_DESC);"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            model.sortByLocationFilteredClientStudentList();"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS_STUDENT + MESSAGE_SORT_DESC);"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"                || (other instanceof SortByLocationCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"                \u0026 this.category.equals(((SortByLocationCommand) other).category)); // state check // state check"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":36,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected ListPanelController listPanelController;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Initialise listPanelController"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    protected Command() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        listPanelController \u003d ListPanelController.getInstance();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of tutors."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"     * @param displayStudentSize and displayTutorSize used to generate summary"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static String getMessageForClientListShownSummary(int displayStudentSize, int displayTutorSize) {"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displayStudentSize, displayTutorSize);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"},{"lineNumber":53,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"shookshire":2,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/SortByNameCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":" *Sort the selected list according to their name in alphabetical order"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"public class SortByNameCommand extends SortCommand {"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_SORT_DESC \u003d \" their name in alphabetical order.\";"},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"    private Category category;"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":"    public SortByNameCommand(Category category) {"},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"        this.category \u003d category;"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"        if (category.isTutor()) {"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"            model.sortByNameFilteredClientTutorList();"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS_TUTOR + MESSAGE_SORT_DESC);"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            model.sortByNameFilteredClientStudentList();"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS_STUDENT + MESSAGE_SORT_DESC);"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"                || (other instanceof SortByNameCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"                \u0026 this.category.equals(((SortByNameCommand) other).category)); // state check // state check"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":36,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/CommandNotAvailableInActiveViewException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":4,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"olimhc"},"content":" * Signals that the command is not available in active list view."},{"lineNumber":6,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":7,"author":{"gitID":"olimhc"},"content":"public class CommandNotAvailableInActiveViewException extends CommandException {"},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"    public CommandNotAvailableInActiveViewException() {"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":"        super(\"Command is not available in active list view.\""},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":"                + \" Please switch back to closed list view with the command word: switch\\n\");"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":10,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":" * Represents a sort command"},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":"public abstract class SortCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_ALIAS \u003d \"so\";"},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD_NAME \u003d \"n\";"},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD_LOCATION \u003d \"l\";"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD_SUBJECT \u003d \"s\";"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD_GRADE \u003d \"g\";"},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD_TUTOR \u003d \"t\";"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD_STUDENT \u003d \"s\";"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_SUCCESS_TUTOR \u003d \"Sorted tutor\u0027s list according to\";"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_SUCCESS_STUDENT \u003d \"Sorted student\u0027s list according to\";"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    private static final String USAGE_MESSAGE_LIST \u003d \" \""},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD  + \" \" + COMMAND_WORD_NAME + \" \" + PREFIX_CATEGORY + COMMAND_WORD_TUTOR + \", \""},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD  + \" \" + COMMAND_WORD_LOCATION + \" \" + PREFIX_CATEGORY + COMMAND_WORD_TUTOR + \", \""},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD  + \" \" + COMMAND_WORD_SUBJECT + \" \" + PREFIX_CATEGORY + COMMAND_WORD_TUTOR + \", \""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD  + \" \" + COMMAND_WORD_GRADE + \" \" + PREFIX_CATEGORY + COMMAND_WORD_TUTOR + \", \""},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"            + \"to sort Tutor\u0027s list base on name, location, subject and level respectively.\\n\""},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD  + \" \" + COMMAND_WORD_NAME + \" \" + PREFIX_CATEGORY + COMMAND_WORD_STUDENT + \", \""},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD  + \" \" + COMMAND_WORD_LOCATION + \" \" + PREFIX_CATEGORY + COMMAND_WORD_STUDENT + \", \""},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD  + \" \" + COMMAND_WORD_SUBJECT + \" \" + PREFIX_CATEGORY + COMMAND_WORD_STUDENT + \", \""},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD  + \" \" + COMMAND_WORD_GRADE + \" \" + PREFIX_CATEGORY + COMMAND_WORD_STUDENT + \", \""},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"            + \"to sort Student\u0027s list base on name, location, subject and level respectively.\\n\""},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"            + \"Example: \""},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"            + COMMAND_WORD + \" \" + COMMAND_WORD_LOCATION + \" \" + PREFIX_CATEGORY + COMMAND_WORD_STUDENT + \"\\n\";"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"            + \": Sort selected list according to user choice.\\n\""},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"            + \"Parameters:\" + USAGE_MESSAGE_LIST;"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":41,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/CommandNotAvailableInClosedViewException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":4,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"olimhc"},"content":" * Signals that the command is not available in closed list view."},{"lineNumber":6,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":7,"author":{"gitID":"olimhc"},"content":"public class CommandNotAvailableInClosedViewException extends CommandException {"},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"    public CommandNotAvailableInClosedViewException() {"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":"        super(\"Command is not available in closed list view.\""},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":"                + \" Please switch back to active list view with the command word: switch\\n\");"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":10,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/SortByGradeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":9,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"olimhc"},"content":" *Sort the selected list according to their grade in ascending order"},{"lineNumber":11,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"public class SortByGradeCommand extends SortCommand {"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_SORT_DESC \u003d \" their grade in ascending order.\";"},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":"    private Category category;"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":"    public SortByGradeCommand(Category category) {"},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"        this.category \u003d category;"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"        if (category.isTutor()) {"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"            model.sortByGradeFilteredClientTutorList();"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS_TUTOR + MESSAGE_SORT_DESC);"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            model.sortByGradeFilteredClientStudentList();"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS_STUDENT + MESSAGE_SORT_DESC);"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"                || (other instanceof SortByGradeCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"                \u0026 this.category.equals(((SortByGradeCommand) other).category)); // state check // state check"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":36,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/MatchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.MatchContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.MatchContainsPersonsPredicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"content":"//@@author Zhu-Jiahui"},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Match the entered client and lists all clients in address book that has similar attributes to the matched client."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class MatchCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"match\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"m\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Finds all clients that match all the fields listed by the person entered.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\" + \" c/t\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    private final Category category;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    private Client clientToMatch;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    public MatchCommand(Index index, Category category) {"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        this.category \u003d category;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e lastShownList;"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        if (category.isStudent()) {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"            lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"            lastShownList \u003d model.getFilteredTutorList();"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"        clientToMatch \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        MatchContainsKeywordsPredicate predicate \u003d new MatchContainsKeywordsPredicate(clientToMatch);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (category.isStudent()) {"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"            model.updateFilteredTutorList(predicate);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            model.updateFilteredStudentList(new MatchContainsPersonsPredicate(clientToMatch));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            model.updateRankedTutorList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"            model.updateFilteredStudentList(predicate);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            model.updateFilteredTutorList(new MatchContainsPersonsPredicate(clientToMatch));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            model.updateRankedStudentList();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForClientListShownSummary("},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"                model.getFilteredStudentList().size(), model.getFilteredTutorList().size()));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                || (other instanceof MatchCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.targetIndex.equals(((MatchCommand) other).targetIndex))"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.category.equals(((MatchCommand) other).category); // state check"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"},{"lineNumber":81,"content":"//@@author"}],"authorContributionMap":{"null":2,"shookshire":34,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/RestoreCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInActiveViewException;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":" * Delete a person from the closed list and add it back to the active list"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"public class RestoreCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD \u003d \"restore\";"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_ALIAS \u003d \"res\";"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Restore a closed tutor or student to the active \""},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"            + \"tutor or student list. \\n\""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"            + \"Parameters: \" + COMMAND_WORD + \" \" + \"INDEX\" + \" \" + PREFIX_CATEGORY + \"CATEGORY \""},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"            + \"(CATEGORY can only be either \u0027s\u0027 or \u0027t\u0027, where \u0027s\u0027 represents students and \u0027t\u0027 represents tutor).\\n\""},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + \"1\" + \" \" + PREFIX_CATEGORY + \"t\\n\";"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_RESTORE_STUDENT_SUCCESS \u003d \"Student restored: %1$s\";"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_RESTORE_TUTOR_SUCCESS \u003d \"Tutor restored: %1$s\";"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"    private final Index targetIndex;"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"    private final Category category;"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"    private Client clientToRestore;"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"    public RestoreCommand(Index targetIndex, Category category) {"},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"        this.category \u003d category;"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"        requireNonNull(clientToRestore);"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"            model.deleteClosedClient(clientToRestore, category);"},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"The target client cannot be missing\");"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"            if (category.isStudent()) {"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"                model.addStudent(clientToRestore);"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"            } else {"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"                model.addTutor(clientToRestore);"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"The client should not be duplicated\");"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":"        if (category.isStudent()) {"},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(String.format(MESSAGE_RESTORE_STUDENT_SUCCESS, clientToRestore));"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(String.format(MESSAGE_RESTORE_TUTOR_SUCCESS, clientToRestore));"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"        if (ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"            throw new CommandNotAvailableInActiveViewException();"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":"        List\u003cClient\u003e lastShownList;"},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":"        if (category.isStudent()) {"},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"            lastShownList \u003d model.getFilteredClosedStudentList();"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"            lastShownList \u003d model.getFilteredClosedTutorList();"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"olimhc"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":90,"author":{"gitID":"olimhc"},"content":"        clientToRestore \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":93,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"olimhc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"olimhc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":96,"author":{"gitID":"olimhc"},"content":"                || (other instanceof RestoreCommand // instanceof handles nulls"},{"lineNumber":97,"author":{"gitID":"olimhc"},"content":"                \u0026\u0026 this.targetIndex.equals(((RestoreCommand) other).targetIndex) // state check"},{"lineNumber":98,"author":{"gitID":"olimhc"},"content":"                \u0026\u0026 Objects.equals(this.clientToRestore, ((RestoreCommand) other).clientToRestore));"},{"lineNumber":99,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":82,"shookshire":5,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/SwitchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLOSED_STUDENTS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLOSED_TUTORS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ClientListSwitchEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":13,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"olimhc"},"content":" * Represents a switch command to enable user to switch between closed and active client list"},{"lineNumber":15,"author":{"gitID":"olimhc"},"content":" * All active students and tutors or closed students and tutors will be shown after switching"},{"lineNumber":16,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":17,"author":{"gitID":"olimhc"},"content":"public class SwitchCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD \u003d \"switch\";"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_ALIAS \u003d \"sw\";"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Switched to \";"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_CLOSED_DISPLAY_LIST \u003d \"closed client list.\\n\";"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_ACTIVE_DISPLAY_LIST \u003d \"active client list.\\n\";"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"        EventsCenter.getInstance().post(new ClientListSwitchEvent());"},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"        listPanelController.switchDisplay();"},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            model.updateFilteredClosedTutorList(PREDICATE_SHOW_ALL_CLOSED_TUTORS);"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":"            model.updateFilteredClosedStudentList(PREDICATE_SHOW_ALL_CLOSED_STUDENTS);"},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS + MESSAGE_CLOSED_DISPLAY_LIST);"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":"            model.updateFilteredTutorList(PREDICATE_SHOW_ALL_TUTORS);"},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"            model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(MESSAGE_SUCCESS + MESSAGE_ACTIVE_DISPLAY_LIST);"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":30,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":44,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"    private final Category category;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"    private Client personToEdit;"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"    private Client editedPerson;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor, Category category) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        requireNonNull(category);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"        this.category \u003d category;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"            model.updateClient(personToEdit, editedPerson, category);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredTutorList(PREDICATE_SHOW_ALL_TUTORS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e lastShownList;"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"        if (category.isStudent()) {"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"            lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"            lastShownList \u003d model.getFilteredTutorList();"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"     * Creates and returns a {@code Client} with the details of {@code personToEdit}"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"    private static Client createEditedPerson(Client personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"        Location updatedLocation \u003d editPersonDescriptor.getLocation().orElse(personToEdit.getLocation());"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        Grade updatedGrade \u003d editPersonDescriptor.getGrade().orElse(personToEdit.getGrade());"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"        Subject updatedSubject \u003d editPersonDescriptor.getSubject().orElse(personToEdit.getSubject());"},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"        Category updatedCategory \u003d editPersonDescriptor.getCategory().orElse(personToEdit.getCategory());"},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"        return new Client(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedLocation,"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"                updatedGrade, updatedSubject, updatedCategory);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"     * Stores the details to edit the client with. Each non-empty field value will replace the"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"     * corresponding field value of the client."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static class     EditPersonDescriptor {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":"        private Location location;"},{"lineNumber":172,"author":{"gitID":"shookshire"},"content":"        private Grade grade;"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"        private Subject subject;"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"        private Category category;"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":180,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":181,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":"            setLocation(toCopy.location);"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"            setGrade(toCopy.grade);"},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":"            setSubject(toCopy.subject);"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"            setCategory(toCopy.category);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":196,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"                    this.location, this.grade, this.subject);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"shookshire"},"content":"        public void setLocation(Location location) {"},{"lineNumber":235,"author":{"gitID":"shookshire"},"content":"            this.location \u003d location;"},{"lineNumber":236,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":238,"author":{"gitID":"shookshire"},"content":"        public Optional\u003cLocation\u003e getLocation() {"},{"lineNumber":239,"author":{"gitID":"shookshire"},"content":"            return Optional.ofNullable(location);"},{"lineNumber":240,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":242,"author":{"gitID":"shookshire"},"content":"        public void setGrade(Grade grade) {"},{"lineNumber":243,"author":{"gitID":"shookshire"},"content":"            this.grade \u003d grade;"},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":246,"author":{"gitID":"shookshire"},"content":"        public Optional\u003cGrade\u003e getGrade() {"},{"lineNumber":247,"author":{"gitID":"shookshire"},"content":"            return Optional.ofNullable(grade);"},{"lineNumber":248,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":250,"author":{"gitID":"shookshire"},"content":"        public void setSubject(Subject subject) {"},{"lineNumber":251,"author":{"gitID":"shookshire"},"content":"            this.subject \u003d subject;"},{"lineNumber":252,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":254,"author":{"gitID":"shookshire"},"content":"        public Optional\u003cSubject\u003e getSubject() {"},{"lineNumber":255,"author":{"gitID":"shookshire"},"content":"            return Optional.ofNullable(subject);"},{"lineNumber":256,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":258,"author":{"gitID":"shookshire"},"content":"        public void setCategory(Category category) {"},{"lineNumber":259,"author":{"gitID":"shookshire"},"content":"            this.category \u003d category;"},{"lineNumber":260,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":262,"author":{"gitID":"shookshire"},"content":"        public Optional\u003cCategory\u003e getCategory() {"},{"lineNumber":263,"author":{"gitID":"shookshire"},"content":"            return Optional.ofNullable(category);"},{"lineNumber":264,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":268,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":269,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":275,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":276,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":277,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":278,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":299,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":300,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":301,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":302,"author":{"gitID":"shookshire"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":303,"author":{"gitID":"shookshire"},"content":"                    \u0026\u0026 getLocation().equals(e.getLocation())"},{"lineNumber":304,"author":{"gitID":"shookshire"},"content":"                    \u0026\u0026 getGrade().equals(e.getGrade())"},{"lineNumber":305,"author":{"gitID":"shookshire"},"content":"                    \u0026\u0026 getSubject().equals(e.getSubject())"},{"lineNumber":306,"author":{"gitID":"shookshire"},"content":"                    \u0026\u0026 getCategory().equals(e.getCategory());"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"shookshire":81,"-":227}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLOSED_STUDENTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLOSED_TUTORS;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredTutorList(PREDICATE_SHOW_ALL_TUTORS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        model.updateFilteredClosedStudentList(PREDICATE_SHOW_ALL_CLOSED_STUDENTS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        model.updateFilteredClosedTutorList(PREDICATE_SHOW_ALL_CLOSED_TUTORS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredTutorList(PREDICATE_SHOW_ALL_TUTORS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        model.updateFilteredClosedStudentList(PREDICATE_SHOW_ALL_CLOSED_STUDENTS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        model.updateFilteredClosedTutorList(PREDICATE_SHOW_ALL_CLOSED_TUTORS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":6,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.SearchContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book that contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":13,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons that contain any of \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final SearchContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public FindCommand(SearchContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"content":"    //@@author Zhu-Jiahui"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            model.updateFilteredStudentList(predicate);"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"            model.updateFilteredTutorList(predicate);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            return new CommandResult(getMessageForClientListShownSummary("},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"                    model.getFilteredStudentList().size(), model.getFilteredTutorList().size()));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            model.updateFilteredClosedStudentList(predicate);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            model.updateFilteredClosedTutorList(predicate);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            return new CommandResult(getMessageForClientListShownSummary("},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    model.getFilteredClosedStudentList().size(), model.getFilteredClosedTutorList().size()));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"content":"    //@@author"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"e0032017":1,"shookshire":2,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"x\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":21}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        model.resetHighLight();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getFilteredStudentList() {"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        return model.getFilteredStudentList();"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getFilteredTutorList() {"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        return model.getFilteredTutorList();"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ObservableList\u003cClient\u003e getFilteredClosedStudentList() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return model.getFilteredClosedStudentList();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public ObservableList\u003cClient\u003e getFilteredClosedTutorList() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return model.getFilteredClosedTutorList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":11,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/RemoveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTORS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":" * Remove the specified details of an existing client in the address book."},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"public class RemoveCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    public static final String COMMAND_WORD \u003d \"remove\";"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    public static final String COMMAND_ALIAS \u003d \"re\";"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes the subject from the client identified \""},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"            + \"by the index number used in the last client listing. \""},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"            + \"If the specified subject exists it would be removed from the client. \""},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"            + \"Input subject should be a single word without space.\\n\""},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"            + \"[\" + PREFIX_SUBJECT + \"SUBJECT]\\n\""},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"            + PREFIX_CATEGORY + \"s \""},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"            + PREFIX_SUBJECT + \"math\";"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_REMOVE_CLIENT_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_VALUE_DONT_EXIST \u003d \"The inputted subject does not exist\";"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_LAST_VALUE \u003d \"The last subject cannot be removed.\\n\""},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"            + \"Recommended to delete or close client instead\";"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    public static final String REMOVE_VALIDATION_REGEX \u003d \"[a-zA-Z]+\";"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    private final Index index;"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    private final Category category;"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    private final Subject toRemove;"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"    private Client personToEdit;"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"    private Client editedPerson;"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"     * @param toRemove the subject to be removed"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"    public RemoveCommand(Index index, Subject toRemove, Category category) {"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        requireNonNull(index);"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        requireNonNull(toRemove);"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        requireNonNull(category);"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"        this.category \u003d category;"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"        this.index \u003d index;"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        this.toRemove \u003d toRemove;"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"            model.updateClient(personToEdit, editedPerson, category);"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"        model.updateFilteredTutorList(PREDICATE_SHOW_ALL_TUTORS);"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_CLIENT_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e lastShownList;"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        if (category.isStudent()) {"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"            lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"            lastShownList \u003d model.getFilteredTutorList();"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"        if (!isValidRemovableSubject(toRemove)) {"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"            throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        if (!containsSubject(personToEdit, toRemove)) {"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"            throw new CommandException(MESSAGE_VALUE_DONT_EXIST);"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"        if (!isMoreThanOne(personToEdit.getSubject())) {"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"            throw new CommandException(MESSAGE_LAST_VALUE);"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, toRemove);"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"     * @param personToEdit the client that we wish to remove a subject from"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"     * @param toRemove the subject to be removed"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"     * Returns true if the subject exists"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"    private static boolean containsSubject(Client personToEdit, Subject toRemove) {"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        String originalSubject \u003d personToEdit.getSubject().toString();"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"        ArrayList\u003cString\u003e originalSubjectArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(originalSubject.split(\" \")));"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        return originalSubjectArrayList.contains(toRemove.value);"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"    private static boolean isValidRemovableSubject(Subject test) {"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"        return test.value.matches(REMOVE_VALIDATION_REGEX);"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":"    private static boolean isMoreThanOne(Subject test) {"},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"        String[] testArray \u003d test.value.split(\" \");"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"        return testArray.length \u003e 1;"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"     * Creates and returns a {@code Client} with the details of {@code personToEdit}"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":"    private static Client createEditedPerson(Client personToEdit, Subject toRemove) {"},{"lineNumber":150,"author":{"gitID":"shookshire"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":151,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":152,"author":{"gitID":"shookshire"},"content":"        String editSubjects \u003d personToEdit.getSubject().value;"},{"lineNumber":153,"author":{"gitID":"shookshire"},"content":"        ArrayList\u003cString\u003e editSubjectArray \u003d new ArrayList\u003c\u003e(Arrays.asList(editSubjects.split(\" \")));"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":"        editSubjectArray.remove(toRemove.value);"},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"        for (int i \u003d 0; i \u003c editSubjectArray.size(); i++) {"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"            sb.append(editSubjectArray.get(i));"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"            sb.append(\" \");"},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"        return new Client(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"                personToEdit.getAddress(), personToEdit.getTags(), personToEdit.getLocation(),"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"                personToEdit.getGrade(), new Subject(sb.toString()), personToEdit.getCategory());"},{"lineNumber":166,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":168,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"    public boolean equals(Object other) {"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":"        // short circuit if same object"},{"lineNumber":172,"author":{"gitID":"shookshire"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"            return true;"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":176,"author":{"gitID":"shookshire"},"content":"        // instanceof handles nulls"},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"        if (!(other instanceof RemoveCommand)) {"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"            return false;"},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        // state check"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        RemoveCommand r \u003d (RemoveCommand) other;"},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"        return index.equals(r.index)"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(editedPerson, r.editedPerson)"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(personToEdit, r.personToEdit);"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":"}"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":""}],"authorContributionMap":{"shookshire":172,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":36}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    private List\u003cXmlAdaptedClient\u003e students;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    private List\u003cXmlAdaptedClient\u003e tutors;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedClient\u003e closedStudents;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedClient\u003e closedTutors;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        tutors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        students \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        closedStudents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        closedTutors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        students.addAll(src.getStudentList().stream().map(XmlAdaptedClient::new)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        tutors.addAll(src.getTutorList().stream().map(XmlAdaptedClient::new)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        closedStudents.addAll(src.getClosedStudentList().stream().map(XmlAdaptedClient::new)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        closedTutors.addAll(src.getClosedTutorList().stream().map(XmlAdaptedClient::new)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"        for (XmlAdaptedClient s : students) {"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"            addressBook.addStudent(s.toModelType());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        for (XmlAdaptedClient t : tutors) {"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"            addressBook.addTutor(t.toModelType());"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        for (XmlAdaptedClient cs : closedStudents) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            addressBook.addClosedStudent(cs.toModelType());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (XmlAdaptedClient ct : closedTutors) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            addressBook.addClosedTutor(ct.toModelType());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        return students.equals(otherAb.students) \u0026\u0026 tutors.equals(otherAb.tutors) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":12,"-":87}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static Client[] getSampleStudents() {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        return new Client[] {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                getTagSet(\"FemaleTutorsOnly\"), new Location(\"North\"), new Grade(\"p2\"), new Subject(\"math\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                    new Category(\"s\")),"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                getTagSet(\"Urgent\", \"WillingToPay\"), new Location(\"Central\"), new Grade(\"s1\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    new Subject(\"Physics\"), new Category(\"s\")),"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                getTagSet(\"Urgent\"), new Location(\"North\"), new Grade(\"p2\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                    new Subject(\"Physics Chinese\"), new Category(\"s\")),"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getTagSet(\"ExtraCareRequired\"), new Location(\"Central\"), new Grade(\"s1\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    new Subject(\"Chemistry Science\"), new Category(\"s\")),"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                getTagSet(\"Smart\"), new Location(\"North\"), new Grade(\"p2\"), new Subject(\"Math\"),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                    new Category(\"s\")),"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                getTagSet(\"Urgent\"), new Location(\"Central\"), new Grade(\"s1\"), new Subject(\"Physics\"),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                    new Category(\"s\")),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Client[] getSampleTutors() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return new Client[]{"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            new Client(new Name(\"Johnny\"), new Phone(\"87438873\"), new Email(\"Johnnyenglish@example.com\"),"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 London Street, #06-40\"),"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                    getTagSet(\"FemaleTutorsOnly\"), new Location(\"North\"), new Grade(\"p2\"), new Subject(\"math\"),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    new Category(\"s\")),"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            new Client(new Name(\"James\"), new Phone(\"3213283\"), new Email(\"james@example.com\"),"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 111 James Avenue\"),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                    getTagSet(\"Friendly\"), new Location(\"North South\"), new Grade(\"s1 s2 s3 s4\"),"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                    new Subject(\"Math Science English SocialStudies Geography\"), new Category(\"t\")),"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            new Client(new Name(\"George\"), new Phone(\"66316282\"), new Email(\"george@example.com\"),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 436 George Town Street 26, #16-43\"),"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                    getTagSet(\"GoodReputation\"), new Location(\"Central\"), new Grade(\"k1 k2\"),"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                    new Subject(\"Chinese\"), new Category(\"t\")),"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            new Client(new Name(\"Jennifer\"), new Phone(\"66632521\"), new Email(\"jeniferrrrrrrr@example.com\"),"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 47 Janifer Street 20, #13-35\"),"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                    getTagSet(\"Scholar\"), new Location(\"South\"), new Grade(\"p1 p2 p3\"),"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                    new Subject(\"Math\"), new Category(\"t\")),"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            new Client(new Name(\"Nancy\"), new Phone(\"666454417\"), new Email(\"nancy@example.com\"),"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 999 Queenstown 85, #01-31\"),"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                    getTagSet(\"Scholar\"), new Location(\"Central\"), new Grade(\"u1 u2\"),"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                    new Subject(\"Physics\"), new Category(\"t\"))"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static Client[] getSampleClosedTutors() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return new Client[]{"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            new Client(new Name(\"Cindy\"), new Phone(\"81234123\"), new Email(\"Cindyee@example.com\"),"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                  new Address(\"Blk 111 Cindy Avenue\"),"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                  getTagSet(\"Inactive\"), new Location(\"North South\"), new Grade(\"s1 s2 s3 s4\"),"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                  new Subject(\"Math Science English\"), new Category(\"t\")),"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            new Client(new Name(\"Galvin\"), new Phone(\"94443283\"), new Email(\"Galvin@example.com\"),"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 1 Galvin Avenue\"),"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                    getTagSet(\"Assigned\"), new Location(\"South\"), new Grade(\"u1\"),"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                    new Subject(\"Geography\"), new Category(\"t\"))"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static Client[] getSampleClosedStudents() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new Client[]{"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            new Client(new Name(\"Tom\"), new Phone(\"8134123\"), new Email(\"Tom@example.com\"),"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 121 Jerry Avenue\"),"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                    getTagSet(\"Assigned\"), new Location(\"South\"), new Grade(\"s1\"),"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                    new Subject(\"English\"), new Category(\"s\")),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            new Client(new Name(\"Jerry\"), new Phone(\"94449983\"), new Email(\"Jerry@example.com\"),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 1 Tom Avenue\"),"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                    getTagSet(\"Assigned\"), new Location(\"East\"), new Grade(\"k1\"),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                    new Subject(\"English\"), new Category(\"s\"))"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            for (Client sampleStudent : getSampleStudents()) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                sampleAb.addClient(sampleStudent);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            for (Client sampleTutor : getSampleTutors()) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                sampleAb.addClient(sampleTutor);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            for (Client sampleClosedStudent : getSampleClosedStudents()) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                sampleAb.addClosedClient(sampleClosedStudent);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            for (Client sampleClosedTutor : getSampleClosedTutors()) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                sampleAb.addClosedTutor(sampleClosedTutor);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":12,"-":125}},{"path":"src/main/java/seedu/address/model/person/Client.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":" * Represents a Client in tuitionCor."},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"public class Client extends Person {"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    private final Location location;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    private final Grade grade;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    private final Subject subject;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"    private final Category category;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    private int rank \u003d 0;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    private boolean matchedGrade \u003d false;"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    private boolean matchedSubject \u003d false;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    private boolean matchedLocation \u003d false;"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Location location,"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"                  Grade grade, Subject subject, Category category) {"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        requireAllNonNull(location, grade, subject);"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        this.location \u003d location;"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        this.grade \u003d grade;"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        this.subject \u003d subject;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        this.category \u003d category;"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    public Location getLocation() {"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        return location;"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    public Grade getGrade() {"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        return grade;"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    public Subject getSubject() {"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"        return subject;"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    public Category getCategory() {"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        return category;"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public int getRank() {"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        return rank;"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"    public void setRank(int value) {"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        this.rank \u003d value;"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"    public boolean getMatchedGrade() {"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"        return matchedGrade;"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"    public void setMatchedGrade(boolean isMatch) {"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        this.matchedGrade \u003d isMatch;"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    public boolean getMatchedSubject() {"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        return matchedSubject;"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"    public void setMatchedSubject(boolean isMatch) {"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        this.matchedSubject \u003d isMatch;"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"    public boolean getMatchedLocation() {"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"        return matchedLocation;"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"    public void setMatchedLocation(boolean isMatch) {"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"        this.matchedLocation \u003d isMatch;"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        return Objects.hash(this.getName(), this.getPhone(), this.getEmail(), this.getAddress(),"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"                this.getTags(), location, grade, subject, category);"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"    public String toString() {"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        builder.append(getName())"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"                .append(\" Phone: \")"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"                .append(getPhone())"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"                .append(\" Email: \")"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"                .append(getEmail())"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"                .append(\" Address: \")"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"                .append(getAddress())"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"                .append(\" Tags: \");"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"        builder.append(\" Location: \")"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"                .append(getLocation())"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"                .append(\" Grade: \")"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"                .append(getGrade())"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"                .append(\" Subject: \")"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"                .append(getSubject());"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"        return builder.toString();"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":113,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/AddClientCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":" * Adds a tutor to TuitionCor."},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"public class AddClientCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    public static final String COMMAND_WORD \u003d \"addclient\";"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    public static final String COMMAND_ALIAS \u003d \"ac\";"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to TuitionCor. \\n\""},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"            + \"Parameters: \""},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"            + PREFIX_CATEGORY + \"CATEGORY \""},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \""},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"            + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"            + PREFIX_GRADE + \"GRADE \""},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"            + PREFIX_SUBJECT + \"SUBJECT\\n\""},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"            + PREFIX_CATEGORY + \"t \""},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"            + PREFIX_TAG + \"owesMoney \""},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"            + PREFIX_LOCATION + \"east \""},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"            + PREFIX_GRADE + \"p6 \""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"            + PREFIX_SUBJECT + \"physics\";"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_SUCCESS_STUDENT \u003d \"New student added: %1$s\";"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_SUCCESS_TUTOR \u003d \"New tutor added: %1$s\";"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student/tutor already exists in the address book\";"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"    private final Client toAdd;"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"     * Creates an AddClientCommand to add the specified {@code Client}"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    public AddClientCommand(Client client) {"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"        requireNonNull(client);"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        toAdd \u003d client;"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        requireNonNull(model);"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"            if (toAdd.getCategory().isStudent()) {"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"                model.addStudent(toAdd);"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS_STUDENT, toAdd));"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"            } else {"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"                model.addTutor(toAdd);"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS_TUTOR, toAdd));"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"                || (other instanceof AddClientCommand // instanceof handles nulls"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 toAdd.equals(((AddClientCommand) other).toAdd));"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":89,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/CloseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandNotAvailableInClosedViewException;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.util.ListPanelController;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"olimhc"},"content":"//@@author olimhc"},{"lineNumber":20,"author":{"gitID":"olimhc"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"olimhc"},"content":" * Deletes a person from the active list and add it to the closed list"},{"lineNumber":22,"author":{"gitID":"olimhc"},"content":" */"},{"lineNumber":23,"author":{"gitID":"olimhc"},"content":"public class CloseCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_WORD \u003d \"close\";"},{"lineNumber":25,"author":{"gitID":"olimhc"},"content":"    public static final String COMMAND_ALIAS \u003d \"cs\";"},{"lineNumber":26,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":27,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Close an active tutor or student and store them in \""},{"lineNumber":28,"author":{"gitID":"olimhc"},"content":"            + \"a closed student or tutor list. \\n\""},{"lineNumber":29,"author":{"gitID":"olimhc"},"content":"            + \"Parameters: \" + COMMAND_WORD + \" \" + \"INDEX\" + \" \" + PREFIX_CATEGORY + \"CATEGORY \\n\""},{"lineNumber":30,"author":{"gitID":"olimhc"},"content":"            + \"INDEX should be non-zero and non-negative and \""},{"lineNumber":31,"author":{"gitID":"olimhc"},"content":"            + \"CATEGORY can only be either \u0027s\u0027 or \u0027t\u0027, where \u0027s\u0027 represents students and \u0027t\u0027 represents tutor).\\n\""},{"lineNumber":32,"author":{"gitID":"olimhc"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + \"1\" + \" \" + PREFIX_CATEGORY + \"t\\n\";"},{"lineNumber":33,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":34,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_CLOSE_STUDENT_SUCCESS \u003d \"Student closed: %1$s\";"},{"lineNumber":35,"author":{"gitID":"olimhc"},"content":"    public static final String MESSAGE_CLOSE_TUTOR_SUCCESS \u003d \"Tutor closed: %1$s\";"},{"lineNumber":36,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":37,"author":{"gitID":"olimhc"},"content":"    private final Index targetIndex;"},{"lineNumber":38,"author":{"gitID":"olimhc"},"content":"    private final Category category;"},{"lineNumber":39,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":40,"author":{"gitID":"olimhc"},"content":"    private Client clientToClose;"},{"lineNumber":41,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":42,"author":{"gitID":"olimhc"},"content":"    public CloseCommand(Index targetIndex, Category category) {"},{"lineNumber":43,"author":{"gitID":"olimhc"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":44,"author":{"gitID":"olimhc"},"content":"        this.category \u003d category;"},{"lineNumber":45,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":47,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"olimhc"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":49,"author":{"gitID":"olimhc"},"content":"        requireNonNull(clientToClose);"},{"lineNumber":50,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"olimhc"},"content":"            model.deleteClient(clientToClose, category);"},{"lineNumber":52,"author":{"gitID":"olimhc"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":53,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"The target client cannot be missing\");"},{"lineNumber":54,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":56,"author":{"gitID":"olimhc"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"olimhc"},"content":"            if (category.isStudent()) {"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":"                model.addClosedStudent(clientToClose);"},{"lineNumber":59,"author":{"gitID":"olimhc"},"content":"            } else {"},{"lineNumber":60,"author":{"gitID":"olimhc"},"content":"                model.addClosedTutor(clientToClose);"},{"lineNumber":61,"author":{"gitID":"olimhc"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"olimhc"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"olimhc"},"content":"            throw new AssertionError(\"The client should not be duplicated\");"},{"lineNumber":64,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":66,"author":{"gitID":"olimhc"},"content":"        if (category.isStudent()) {"},{"lineNumber":67,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(String.format(MESSAGE_CLOSE_STUDENT_SUCCESS, clientToClose));"},{"lineNumber":68,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":69,"author":{"gitID":"olimhc"},"content":"            return new CommandResult(String.format(MESSAGE_CLOSE_TUTOR_SUCCESS, clientToClose));"},{"lineNumber":70,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":73,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"olimhc"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"olimhc"},"content":"        if (!ListPanelController.isCurrentDisplayActiveList()) {"},{"lineNumber":76,"author":{"gitID":"olimhc"},"content":"            throw new CommandNotAvailableInClosedViewException();"},{"lineNumber":77,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":79,"author":{"gitID":"olimhc"},"content":"        List\u003cClient\u003e lastShownList;"},{"lineNumber":80,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":81,"author":{"gitID":"olimhc"},"content":"        if (category.isStudent()) {"},{"lineNumber":82,"author":{"gitID":"olimhc"},"content":"            lastShownList \u003d model.getFilteredStudentList();"},{"lineNumber":83,"author":{"gitID":"olimhc"},"content":"        } else {"},{"lineNumber":84,"author":{"gitID":"olimhc"},"content":"            lastShownList \u003d model.getFilteredTutorList();"},{"lineNumber":85,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":87,"author":{"gitID":"olimhc"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":88,"author":{"gitID":"olimhc"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"olimhc"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":91,"author":{"gitID":"olimhc"},"content":"        clientToClose \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":94,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"olimhc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":96,"author":{"gitID":"olimhc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":97,"author":{"gitID":"olimhc"},"content":"                || (other instanceof CloseCommand // instanceof handles nulls"},{"lineNumber":98,"author":{"gitID":"olimhc"},"content":"                \u0026\u0026 this.targetIndex.equals(((CloseCommand) other).targetIndex) // state check"},{"lineNumber":99,"author":{"gitID":"olimhc"},"content":"                \u0026\u0026 Objects.equals(this.clientToClose, ((CloseCommand) other).clientToClose));"},{"lineNumber":100,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"olimhc"},"content":"}"}],"authorContributionMap":{"olimhc":83,"shookshire":5,"-":13}},{"path":"src/main/java/seedu/address/model/person/Subject.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":" * Represents a Person\u0027s related Subject in the TuitionCor."},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"public class Subject {"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"            \"Subjects can take any value and should not be blank\";"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"     * The first character of the Subject must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"     * Constructs an {@code Subject}."},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"     * @param subject A valid subject."},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    public Subject(String subject) {"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        requireNonNull(subject);"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        this.value \u003d subject.trim().replaceAll(\" +\", \" \");"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"     * Returns true if a given string is a valid person Subject."},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    public static boolean isValidSubject(String test) {"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"                || (other instanceof Subject // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.value.equals(((Subject) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":53,"-":5}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DuplicatePersonException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public DuplicatePersonException() {"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"        super(\"Operation would result in duplicate clients\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":1,"-":11}},{"path":"src/main/java/seedu/address/model/person/SearchContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.util.GradeUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Tests that a {@code Client}\u0027s attributes matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"public class SearchContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public SearchContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"content":"    //@@author Zhu-Jiahui"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    public boolean test(Client client) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword))"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                || keywords.stream()"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getEmail().value, keyword))"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                || keywords.stream()"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getAddress().value, keyword))"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                || keywords.stream()"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getPhone().value, keyword))"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"                || keywords.stream()"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getLocation().value, keyword))"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"                || keywords.stream()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                .anyMatch(keyword -\u003e GradeUtil.containsGradeIgnoreCase(client.getGrade().value, keyword))"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"                || keywords.stream()"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getSubject().value, keyword))"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"                || keywords.stream()"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getCategory().value, keyword));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"content":"    //@@author"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof SearchContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((SearchContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"shookshire":13,"-":33}},{"path":"src/main/java/seedu/address/model/person/Location.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":" * Represents a Person\u0027s available Location in the TuitionCor."},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"public class Location {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"            \"Location should only be north, south, east, west and central in decreasing order of preference without \""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"                    + \"any repetitions\";"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"    private static final String LOCATION_VALIDATION_REGEX_NORTH \u003d \"(?i)North\";"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    private static final String LOCATION_VALIDATION_REGEX_SOUTH \u003d \"(?i)South\";"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    private static final String LOCATION_VALIDATION_REGEX_EAST \u003d \"(?i)East\";"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    private static final String LOCATION_VALIDATION_REGEX_WEST \u003d \"(?i)West\";"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    private static final String LOCATION_VALIDATION_REGEX_CENTRAL \u003d \"(?i)Central\";"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    public final String value;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"     * Constructs a {@code Location}."},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"     * @param location A valid location."},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    public Location(String location) {"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        requireNonNull(location);"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        this.value \u003d location.trim().replaceAll(\" +\", \" \");"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"     * Returns true if a given string is a valid client Location."},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    public static boolean isValidLocationRegex(String test) {"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        return test.matches(LOCATION_VALIDATION_REGEX_NORTH) || test.matches(LOCATION_VALIDATION_REGEX_EAST)"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"                || test.matches(LOCATION_VALIDATION_REGEX_SOUTH)"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"                || test.matches(LOCATION_VALIDATION_REGEX_WEST)"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"                || test.matches(LOCATION_VALIDATION_REGEX_CENTRAL);"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"     * Returns true if all of the given string is a valid client Location."},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        if (test.matches(\"\\\\s+\")) {"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        String[] splitLocation \u003d test.split(\"\\\\s+\");"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        Set\u003cString\u003e isUnique \u003d new HashSet\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"        boolean isValid \u003d true;"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"        for (String ss : splitLocation) {"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"            if (isValid) {"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"                isValid \u003d isValidLocationRegex(ss);"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"                isUnique.add(ss);"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        if (isUnique.size() !\u003d splitLocation.length) {"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"            isValid \u003d false;"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        return isValid;"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        return value;"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"                || (other instanceof Location // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.value.equals(((Location) other).value)); // state check"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"    public int hashCode() {"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"        return value.hashCode();"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":83,"-":5}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedClient.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":" * JAXB-friendly version of the Client for tutors."},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"public class XmlAdaptedClient {"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    private String name;"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    private String phone;"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    private String email;"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    private String address;"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    private String location;"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    private String grade;"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    private String subject;"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    private String category;"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    @XmlElement"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"     * Constructs an XmlAdaptedClient."},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"    public XmlAdaptedClient() {}"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"     * Constructs an {@code XmlAdaptedClient} with the given person details."},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    public XmlAdaptedClient(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"                            String location, String grade, String subject, String category) {"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        this.name \u003d name;"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"        this.phone \u003d phone;"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        this.email \u003d email;"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        this.address \u003d address;"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"        this.location \u003d location;"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"        this.grade \u003d grade;"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        this.subject \u003d subject;"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        this.category \u003d category;"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"     * Converts a given Client into this class for JAXB use."},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedClient"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"    public XmlAdaptedClient(Client source) {"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        location \u003d source.getLocation().value;"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        grade \u003d source.getGrade().value;"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"        subject \u003d source.getSubject().value;"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"        category \u003d source.getCategory().value;"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"     * Converts this jaxb-friendly adapted client object into the model\u0027s Client object."},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"    public Client toModelType() throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"        if (this.location \u003d\u003d null) {"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"                    Location.class.getSimpleName()));"},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":"        if (!Location.isValidLocation(this.location)) {"},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"        final Location location \u003d new Location(this.location);"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":150,"author":{"gitID":"shookshire"},"content":"        if (this.grade \u003d\u003d null) {"},{"lineNumber":151,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName()));"},{"lineNumber":152,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"shookshire"},"content":"        if (!Grade.isValidGrade(this.grade)) {"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Grade.MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":"        final Grade grade \u003d new Grade(this.grade);"},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"        if (this.subject \u003d\u003d null) {"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"        if (!Subject.isValidSubject(this.subject)) {"},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"        final Subject subject \u003d new Subject(this.subject);"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":166,"author":{"gitID":"shookshire"},"content":"        if (this.category \u003d\u003d null) {"},{"lineNumber":167,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":168,"author":{"gitID":"shookshire"},"content":"                    Category.class.getSimpleName()));"},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"        if (!Category.isValidCategory(this.category)) {"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"        final Category category \u003d new Category(this.category);"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":176,"author":{"gitID":"shookshire"},"content":"        return new Client(name, phone, email, address, tags, location, grade, subject, category);"},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"    public boolean equals(Object other) {"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"            return true;"},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"        if (!(other instanceof XmlAdaptedClient)) {"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":"            return false;"},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"        XmlAdaptedClient otherClient \u003d (XmlAdaptedClient) other;"},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":"        return Objects.equals(name, otherClient.name)"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(phone, otherClient.phone)"},{"lineNumber":192,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(email, otherClient.email)"},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(address, otherClient.address)"},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 tagged.equals(otherClient.tagged)"},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(location, otherClient.location)"},{"lineNumber":196,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(subject, otherClient.subject)"},{"lineNumber":197,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(grade, otherClient.grade)"},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 Objects.equals(category, otherClient.category);"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":200,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":190,"-":11}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"     * Returns an unmodifiable view of the student list."},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"     * This list will not contain any duplicate clients."},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getStudentList();"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"     * Returns an unmodifiable view of the tutors list."},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"     * This list will not contain any duplicate clients."},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getTutorList();"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the closed student list."},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"     * This list will not contain any duplicate clients."},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ObservableList\u003cClient\u003e getClosedStudentList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the closed tutors list."},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"     * This list will not contain any duplicate clients."},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ObservableList\u003cClient\u003e getClosedTutorList();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":17,"-":25}},{"path":"src/main/java/seedu/address/model/person/MatchContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.util.GradeUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"content":"//@@author Zhu-Jiahui"},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Tests that a {@code Client}\u0027s {@code Location, Grade and Subject} matches the entered {@code Client}\u0027s"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * {@code Location, Grade and Subject}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"public class MatchContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    private final Client client;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    public MatchContainsKeywordsPredicate(Client client) {"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"        this.client \u003d client;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    public boolean test(Client other) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        boolean isMatch \u003d false;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        int rank \u003d 0;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (StringUtil.containsWordIgnoreCase(other.getLocation().toString(), client.getLocation().toString())) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            isMatch \u003d true;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            other.setMatchedLocation(isMatch);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            rank++;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (GradeUtil.containsGradeIgnoreCase(other.getGrade().value, client.getGrade().toString()"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                .split(\"\\\\s+\")[0])) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            isMatch \u003d true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            other.setMatchedGrade(isMatch);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            rank++;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (StringUtil.containsWordIgnoreCase(other.getSubject().value, client.getSubject().toString()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                .split(\"\\\\s+\")[0])) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            isMatch \u003d true;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            other.setMatchedSubject(isMatch);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            rank++;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        other.setRank(rank);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return isMatch;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof MatchContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.client.equals(((MatchContainsKeywordsPredicate) other).client)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"},{"lineNumber":55,"content":"//@@author"}],"authorContributionMap":{"null":2,"shookshire":6,"-":47}},{"path":"src/main/java/seedu/address/model/person/UniqueClientList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":" * A list of client that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":" *"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":" *"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":" * @see Client#equals(Object)"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"public class UniqueClientList implements Iterable\u003cClient\u003e {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"     * Returns true if the list contains an equivalent client as the given argument."},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    public boolean contains(Client toCheck) {"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"     * Adds a client to the active list."},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if the client to add is a duplicate of an existing client in the list."},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    public void add(Client toAdd, UniqueClientList closedList) throws DuplicatePersonException {"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        if (contains(toAdd) || closedList.contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"     * Adds a client to TuitionCor."},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"     * @throws AssertionError as it\u0027s impossible to have a duplicate given that we have checked for duplication"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"     * before adding it into active list."},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public void add(Client toAdd) throws AssertionError {"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        requireNonNull(toAdd);"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        if (contains(toAdd)) {"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"            throw new AssertionError(\"It\u0027s impossible to have a duplicate person here\");"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        internalList.add(toAdd);"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"     * Replaces the client {@code target} in the list with {@code editedClient}."},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing client in the list."},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"     * Returns true if success."},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    public Boolean setClient(Client target, Client editedClient, UniqueClientList closedList)"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        requireNonNull(editedClient);"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"        if (!target.equals(editedClient) \u0026\u0026 (internalList.contains(editedClient)"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"                || closedList.contains(editedClient))) {"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"        internalList.set(index, editedClient);"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"        return true;"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"    public boolean remove(Client toRemove) throws PersonNotFoundException {"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"        requireNonNull(toRemove);"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"        final boolean clientFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        if (!clientFoundAndDeleted) {"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"        return clientFoundAndDeleted;"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"    public void setClients(UniqueClientList replacement) {"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"    public void setClients(List\u003cClient\u003e clients) throws DuplicatePersonException {"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"        requireAllNonNull(clients);"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"        final UniqueClientList replacement \u003d new UniqueClientList();"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"        for (final Client client : clients) {"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"            replacement.add(client);"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        setClients(replacement);"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e asObservableList() {"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"    public Iterator\u003cClient\u003e iterator() {"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"        return internalList.iterator();"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"                || (other instanceof UniqueClientList // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueClientList) other).internalList));"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"    public int hashCode() {"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"        return internalList.hashCode();"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":125,"-":14}},{"path":"src/main/java/seedu/address/model/person/Category.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":" * Represents if a Client is a student or tutor in TuitionCor."},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"public class Category {"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_CATEGORY_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"            \"Client Category can only be s or t, representing student or tutor respectively\";"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"     * Must be either s or t"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[st]\";"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"     * Constructs an {@code Category}."},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"     * @param category A valid category."},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    public Category(String category) {"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        requireNonNull(category);"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        checkArgument(isValidCategory(category), MESSAGE_CATEGORY_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        this.value \u003d category;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"     * Returns true if a given string is a valid client category."},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    public static boolean isValidCategory(String test) {"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    public boolean isStudent() {"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        return value.equals(\"s\");"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    public boolean isTutor() {"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        return value.equals(\"t\");"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        return value;"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"                || (other instanceof Category // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.value.equals(((Category) other).value)); // state check"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        return value.hashCode();"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":61,"-":5}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric without space\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":1,"-":53}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_TUTORS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLOSED_STUDENTS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLOSED_TUTORS \u003d unused -\u003e true;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Deletes the given client in the active list. */"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"    void deleteClient(Client target, Category category) throws PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Deletes the given client in the closed list. */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void deleteClosedClient(Client target, Category category) throws PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"     * Replaces the given person {@code target} with {@code editedClient}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if updating the client\u0027s details causes the client to be equivalent to"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"     *      another existing client in the list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    void updateClient(Client target, Client editedPerson, Category category)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"    /** Adds the given tutor */"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    void addTutor(Client tutor) throws DuplicatePersonException;"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    /** Adds the given student */"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    void addStudent(Client student) throws DuplicatePersonException;"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /** Adds the given tutor to closed tutor\u0027s list */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    void addClosedTutor(Client closedTutor) throws DuplicatePersonException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /** Adds the given student to closed student\u0027s list */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    void addClosedStudent(Client closedStudent) throws DuplicatePersonException;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**Sorts tutor list by name in alphabetical order*/"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    void sortByNameFilteredClientTutorList();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**Sorts tutor list by location in alphabetical order*/"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    void sortByLocationFilteredClientTutorList();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**Sorts tutor list by grade in ascending order*/"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    void sortByGradeFilteredClientTutorList();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**Sorts tutor list by subject in alphabetical order*/"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    void sortBySubjectFilteredClientTutorList();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**Sorts student list by name in alphabetical order*/"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    void sortByNameFilteredClientStudentList();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**Sorts student list by location in alphabetical order*/"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    void sortByLocationFilteredClientStudentList();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**Sorts student list by grade in ascending order*/"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    void sortByGradeFilteredClientStudentList();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**Sorts student list by subject in alphabetical order*/"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    void sortBySubjectFilteredClientStudentList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"    /** Returns an unmodifiable view of the filtered students list */"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getFilteredStudentList();"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"     * Updates the filter of the filtered student list to filter by the given {@code predicate}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"    void updateFilteredStudentList(Predicate\u003cClient\u003e predicate);"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    /** Returns an unmodifiable view of the filtered tutors list */"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getFilteredTutorList();"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"     * Updates the filter of the filtered tutor list to filter by the given {@code predicate}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"    void updateFilteredTutorList(Predicate\u003cClient\u003e predicate);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the closed filtered tutors list */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    ObservableList\u003cClient\u003e getFilteredClosedTutorList();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered closed tutor list to filter by the given {@code predicate}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    void updateFilteredClosedTutorList(Predicate\u003cClient\u003e predicate);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the closed filtered students list */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    ObservableList\u003cClient\u003e getFilteredClosedStudentList();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered closed tutor list to filter by the given {@code predicate}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    void updateFilteredClosedStudentList(Predicate\u003cClient\u003e predicate);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Rank TutorList from the most number of matched attributes to the least number of matched attributes"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    void updateRankedTutorList();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Rank StudentList from the most number of matched attributes to the least number of matched attributes"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    void updateRankedStudentList();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Reset {@code rank}, {@code MatchedGrade}, {@code MatchedLocation} and {@code MatchedSubject} in"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * all Clientlist to default value"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    void resetHighLight();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"},{"lineNumber":132,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"shookshire":31,"-":101}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniqueClientList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":" * Wraps all data at the address-book level"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    private final UniqueClientList students;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    private final UniqueClientList tutors;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    private final UniqueClientList closedStudents;"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    private final UniqueClientList closedTutors;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    private final UniqueTagList tags;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    /*"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"     *   among constructors."},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    {"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        students \u003d new UniqueClientList();"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        tutors \u003d new UniqueClientList();"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        closedTutors \u003d new UniqueClientList();"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        closedStudents \u003d new UniqueClientList();"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"    //@@author shookshire"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    public void setStudents(List\u003cClient\u003e students) throws DuplicatePersonException {"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"        this.students.setClients(students);"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"    public void setTutors(List\u003cClient\u003e tutors) throws DuplicatePersonException {"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        this.tutors.setClients(tutors);"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"    public void setClosedStudents(List\u003cClient\u003e closedStudents) throws DuplicatePersonException {"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"        this.closedStudents.setClients(closedStudents);"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"    public void setClosedTutors(List\u003cClient\u003e closedTutors) throws DuplicatePersonException {"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        this.closedTutors.setClients(closedTutors);"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"    //@@author"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e syncedStudentList \u003d newData.getStudentList().stream()"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        List\u003cClient\u003e syncedTutorList \u003d newData.getTutorList().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        List\u003cClient\u003e syncedClosedStudentList \u003d newData.getClosedStudentList().stream()"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        List\u003cClient\u003e syncedClosedTutorList \u003d newData.getClosedTutorList().stream()"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"            setStudents(syncedStudentList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate students\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"            setTutors(syncedTutorList);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate tutors\");"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            setClosedStudents(syncedClosedStudentList);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate students\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            setClosedTutors(syncedClosedTutorList);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate tutors\");"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"    //@@author shookshire"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"     * Adds a tutor to TuitionCor."},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"     * Also checks the new tutor\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"     * and updates the Tag objects in the tutor to point to those in {@link #tags}."},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"    public void addTutor(Client t) throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        Client tutor \u003d syncWithMasterTagList(t);"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"        // in the person list."},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"        tutors.add(tutor, closedTutors);"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"     * Adds a student to TuitionCor."},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"     * Also checks the new student\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"     * and updates the Tag objects in the student to point to those in {@link #tags}."},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":"    public void addStudent(Client t) throws DuplicatePersonException {"},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"        Client student \u003d syncWithMasterTagList(t);"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":150,"author":{"gitID":"shookshire"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":151,"author":{"gitID":"shookshire"},"content":"        // in the person list."},{"lineNumber":152,"author":{"gitID":"shookshire"},"content":"        students.add(student, closedStudents);"},{"lineNumber":153,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":"     * Adds a student to closed student\u0027s list."},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":"     * Also checks the closed student\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"     * and updates the Tag objects in the closed student to point to those in {@link #tags}."},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"     * @throws AssertionError if an equivalent person already exists."},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"    public void addClosedStudent(Client t) throws AssertionError {"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"        Client closedStudent \u003d syncWithMasterTagList(t);"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":166,"author":{"gitID":"shookshire"},"content":"        // in the person list."},{"lineNumber":167,"author":{"gitID":"shookshire"},"content":"        closedStudents.add(closedStudent);"},{"lineNumber":168,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":"     * Adds a tutor to closed tutor\u0027s list."},{"lineNumber":172,"author":{"gitID":"shookshire"},"content":"     * Also checks the closed tutor\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"     * and updates the Tag objects in the closed tutor to point to those in {@link #tags}."},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"     * @throws AssertionError if an equivalent person already exists."},{"lineNumber":176,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"    public void addClosedTutor(Client t) throws AssertionError {"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"        Client closedTutor \u003d syncWithMasterTagList(t);"},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        // in the person list."},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        closedTutors.add(closedTutor);"},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":"     * For test cases use and when adding sample data"},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":"     * Adds a closed client to TuitionCor."},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":"     * Also checks the new student\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"     * and updates the Tag objects in the tutor to point to those in {@link #tags}."},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"shookshire"},"content":"    public void addClosedClient(Client t) {"},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"        if (t.getCategory().isStudent()) {"},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"            Client closedStudent \u003d syncWithMasterTagList(t);"},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":"            closedStudents.add(closedStudent);"},{"lineNumber":196,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":197,"author":{"gitID":"shookshire"},"content":"            Client closedTutor \u003d syncWithMasterTagList(t);"},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"            closedTutors.add(closedTutor);"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":202,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"shookshire"},"content":"     * For test cases use and when adding sample data"},{"lineNumber":204,"author":{"gitID":"shookshire"},"content":"     * Adds a client to TuitionCor"},{"lineNumber":205,"author":{"gitID":"shookshire"},"content":"     * Also checks the new student\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":206,"author":{"gitID":"shookshire"},"content":"     * and updates the Tag objects in the tutor to point to those in {@link #tags}."},{"lineNumber":207,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":209,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"shookshire"},"content":"    public void addClient(Client t) throws DuplicatePersonException {"},{"lineNumber":211,"author":{"gitID":"shookshire"},"content":"        if (t.getCategory().isStudent()) {"},{"lineNumber":212,"author":{"gitID":"shookshire"},"content":"            Client student \u003d syncWithMasterTagList(t);"},{"lineNumber":213,"author":{"gitID":"shookshire"},"content":"            students.add(student);"},{"lineNumber":214,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":215,"author":{"gitID":"shookshire"},"content":"            Client tutor \u003d syncWithMasterTagList(t);"},{"lineNumber":216,"author":{"gitID":"shookshire"},"content":"            tutors.add(tutor);"},{"lineNumber":217,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":220,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"shookshire"},"content":"     * Replaces the given client {@code target} in the list with {@code editedClient}."},{"lineNumber":222,"author":{"gitID":"shookshire"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedClient}."},{"lineNumber":223,"author":{"gitID":"shookshire"},"content":"     * Either closedStudents or closedTutors will be pass in for duplication check when editing the client in active"},{"lineNumber":224,"author":{"gitID":"shookshire"},"content":"     * list."},{"lineNumber":225,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if updating the client\u0027s details causes the client to be equivalent to"},{"lineNumber":226,"author":{"gitID":"shookshire"},"content":"     *      another existing client in the list."},{"lineNumber":227,"author":{"gitID":"shookshire"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":228,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":229,"author":{"gitID":"shookshire"},"content":"     * @see #syncWithMasterTagList(Client)"},{"lineNumber":230,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"shookshire"},"content":"    public void updatePerson(Client target, Client editedClient, Category category)"},{"lineNumber":232,"author":{"gitID":"shookshire"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":233,"author":{"gitID":"shookshire"},"content":"        requireNonNull(editedClient);"},{"lineNumber":234,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":235,"author":{"gitID":"shookshire"},"content":"        Client syncedEditedPerson \u003d syncWithMasterTagList(editedClient);"},{"lineNumber":236,"author":{"gitID":"shookshire"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":237,"author":{"gitID":"shookshire"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":238,"author":{"gitID":"shookshire"},"content":"        // in the person list."},{"lineNumber":239,"author":{"gitID":"shookshire"},"content":"        if (category.isStudent()) {"},{"lineNumber":240,"author":{"gitID":"shookshire"},"content":"            students.setClient(target, syncedEditedPerson, closedStudents);"},{"lineNumber":241,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":242,"author":{"gitID":"shookshire"},"content":"            tutors.setClient(target, syncedEditedPerson, closedTutors);"},{"lineNumber":243,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":246,"author":{"gitID":"shookshire"},"content":"    //@@author"},{"lineNumber":247,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"shookshire"},"content":"     *  Updates the master tag list to include tags in {@code client} that are not in the list."},{"lineNumber":249,"author":{"gitID":"shookshire"},"content":"     *  @return a copy of this {@code client} such that every tag in this person points to a Tag object in the master"},{"lineNumber":250,"author":{"gitID":"shookshire"},"content":"     *  list."},{"lineNumber":251,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"shookshire"},"content":"    private Client syncWithMasterTagList(Client client) {"},{"lineNumber":253,"author":{"gitID":"shookshire"},"content":"        final UniqueTagList clientTags \u003d new UniqueTagList(client.getTags());"},{"lineNumber":254,"author":{"gitID":"shookshire"},"content":"        tags.mergeFrom(clientTags);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":262,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":263,"author":{"gitID":"shookshire"},"content":"        clientTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":264,"author":{"gitID":"shookshire"},"content":"        return new Client("},{"lineNumber":265,"author":{"gitID":"shookshire"},"content":"                client.getName(), client.getPhone(), client.getEmail(), client.getAddress(), correctTagReferences,"},{"lineNumber":266,"author":{"gitID":"shookshire"},"content":"                client.getLocation(), client.getGrade(), client.getSubject(), client.getCategory());"},{"lineNumber":267,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":269,"author":{"gitID":"shookshire"},"content":"    //@@author shookshire"},{"lineNumber":270,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"shookshire"},"content":"     * Removes {@code key} from the active client list in this {@code AddressBook}."},{"lineNumber":272,"author":{"gitID":"shookshire"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":273,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"shookshire"},"content":"    public boolean removeClient(Client key, Category category) throws PersonNotFoundException {"},{"lineNumber":275,"author":{"gitID":"shookshire"},"content":"        Boolean isSuccess;"},{"lineNumber":276,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":277,"author":{"gitID":"shookshire"},"content":"        if (category.isStudent()) {"},{"lineNumber":278,"author":{"gitID":"shookshire"},"content":"            isSuccess \u003d students.remove(key);"},{"lineNumber":279,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":280,"author":{"gitID":"shookshire"},"content":"            isSuccess \u003d tutors.remove(key);"},{"lineNumber":281,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":283,"author":{"gitID":"shookshire"},"content":"        if (isSuccess) {"},{"lineNumber":284,"author":{"gitID":"shookshire"},"content":"            return true;"},{"lineNumber":285,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":286,"author":{"gitID":"shookshire"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":287,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":290,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"shookshire"},"content":"     * Removes {@code key} from the closed client list in this {@code AddressBook}."},{"lineNumber":292,"author":{"gitID":"shookshire"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":293,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":294,"author":{"gitID":"shookshire"},"content":"    public boolean removeClosedClient(Client key, Category category) throws PersonNotFoundException {"},{"lineNumber":295,"author":{"gitID":"shookshire"},"content":"        Boolean isSuccess;"},{"lineNumber":296,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":297,"author":{"gitID":"shookshire"},"content":"        if (category.isStudent()) {"},{"lineNumber":298,"author":{"gitID":"shookshire"},"content":"            isSuccess \u003d closedStudents.remove(key);"},{"lineNumber":299,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":300,"author":{"gitID":"shookshire"},"content":"            isSuccess \u003d closedTutors.remove(key);"},{"lineNumber":301,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":303,"author":{"gitID":"shookshire"},"content":"        if (isSuccess) {"},{"lineNumber":304,"author":{"gitID":"shookshire"},"content":"            return true;"},{"lineNumber":305,"author":{"gitID":"shookshire"},"content":"        } else {"},{"lineNumber":306,"author":{"gitID":"shookshire"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":307,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":310,"author":{"gitID":"shookshire"},"content":"    //@@author"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":321,"author":{"gitID":"shookshire"},"content":"        return students.asObservableList().size() + \" students, \""},{"lineNumber":322,"author":{"gitID":"shookshire"},"content":"                + tutors.asObservableList().size() + \" tutors, \""},{"lineNumber":323,"author":{"gitID":"shookshire"},"content":"                + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"shookshire"},"content":"    //@@author shookshire"},{"lineNumber":328,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":329,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getStudentList() {"},{"lineNumber":330,"author":{"gitID":"shookshire"},"content":"        return students.asObservableList();"},{"lineNumber":331,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":333,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":334,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getTutorList() {"},{"lineNumber":335,"author":{"gitID":"shookshire"},"content":"        return tutors.asObservableList();"},{"lineNumber":336,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":338,"author":{"gitID":"shookshire"},"content":"    //@@author"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    public ObservableList\u003cClient\u003e getClosedStudentList() {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        return closedStudents.asObservableList();"},{"lineNumber":342,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    public ObservableList\u003cClient\u003e getClosedTutorList() {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        return closedTutors.asObservableList();"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":352,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":357,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":358,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.students.equals(((AddressBook) other).students)"},{"lineNumber":359,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.tutors.equals(((AddressBook) other).tutors)"},{"lineNumber":360,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":361,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":364,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":366,"author":{"gitID":"shookshire"},"content":"        return Objects.hash(students, tutors, tags);"},{"lineNumber":367,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":368,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":257,"-":111}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.util.SortByGradeComparator;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    private final FilteredList\u003cClient\u003e filteredStudents;"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    private final FilteredList\u003cClient\u003e filteredTutors;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cClient\u003e filteredClosedStudents;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cClient\u003e filteredClosedTutors;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private SortedList\u003cClient\u003e sortedFilteredTutors;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private SortedList\u003cClient\u003e sortedFilteredStudents;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        filteredStudents \u003d new FilteredList\u003c\u003e(this.addressBook.getStudentList());"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        filteredTutors \u003d new FilteredList\u003c\u003e(this.addressBook.getTutorList());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        filteredClosedStudents \u003d new FilteredList\u003c\u003e(this.addressBook.getClosedStudentList());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        filteredClosedTutors \u003d new FilteredList\u003c\u003e(this.addressBook.getClosedTutorList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        sortedFilteredTutors \u003d new SortedList\u003c\u003e(filteredTutors);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        sortedFilteredStudents \u003d new SortedList\u003c\u003e(filteredStudents);"},{"lineNumber":58,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"    public synchronized void deleteClient(Client target, Category category) throws PersonNotFoundException {"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"        addressBook.removeClient(target, category);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"    //@@author shookshire"},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    public synchronized void deleteClosedClient(Client target, Category category) throws PersonNotFoundException {"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        addressBook.removeClosedClient(target, category);"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        indicateAddressBookChanged();"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"    public void updateClient(Client target, Client editedPerson, Category category)"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"        requireAllNonNull(target, editedPerson, category);"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        addressBook.updatePerson(target, editedPerson, category);"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"        indicateAddressBookChanged();"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"    public synchronized void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"        addressBook.addTutor(tutor);"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        updateFilteredTutorList(PREDICATE_SHOW_ALL_TUTORS);"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        indicateAddressBookChanged();"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"    public synchronized void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"        addressBook.addStudent(student);"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"        indicateAddressBookChanged();"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"    public synchronized void addClosedTutor(Client closedTutor) throws DuplicatePersonException {"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"        addressBook.addClosedTutor(closedTutor);"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"        updateFilteredClosedTutorList(PREDICATE_SHOW_ALL_CLOSED_TUTORS);"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"        indicateAddressBookChanged();"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"    public synchronized void addClosedStudent(Client closedStudent) throws DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"        addressBook.addClosedStudent(closedStudent);"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"        updateFilteredClosedStudentList(PREDICATE_SHOW_ALL_CLOSED_STUDENTS);"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"        indicateAddressBookChanged();"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"    //@@author"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"olimhc"},"content":"    //@@author olimhc"},{"lineNumber":133,"author":{"gitID":"olimhc"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"olimhc"},"content":"     * Returns an unmodifiable view of the list of {@code Tutor} backed by the internal list of"},{"lineNumber":135,"author":{"gitID":"olimhc"},"content":"     * {@code addressBook}"},{"lineNumber":136,"author":{"gitID":"olimhc"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":138,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"olimhc"},"content":"    public void sortByNameFilteredClientTutorList() {"},{"lineNumber":140,"author":{"gitID":"olimhc"},"content":"        Comparator\u003cClient\u003e sortByName \u003d (tutor1, tutor2)-\u003e (tutor1.getName().fullName)"},{"lineNumber":141,"author":{"gitID":"olimhc"},"content":"                .compareToIgnoreCase(tutor2.getName().fullName);"},{"lineNumber":142,"author":{"gitID":"olimhc"},"content":"        sortedFilteredTutors.setComparator(sortByName);"},{"lineNumber":143,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":145,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"olimhc"},"content":"    public void sortByNameFilteredClientStudentList() {"},{"lineNumber":147,"author":{"gitID":"olimhc"},"content":"        Comparator\u003cClient\u003e sortByName \u003d (student1, student2)-\u003e (student1.getName().fullName)"},{"lineNumber":148,"author":{"gitID":"olimhc"},"content":"                .compareToIgnoreCase(student2.getName().fullName);"},{"lineNumber":149,"author":{"gitID":"olimhc"},"content":"        sortedFilteredStudents.setComparator(sortByName);"},{"lineNumber":150,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":152,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"olimhc"},"content":"    public void sortByLocationFilteredClientTutorList() {"},{"lineNumber":154,"author":{"gitID":"olimhc"},"content":"        Comparator\u003cClient\u003e sortByLocation \u003d (tutor1, tutor2)-\u003e (tutor1.getLocation().value)"},{"lineNumber":155,"author":{"gitID":"olimhc"},"content":"                .compareToIgnoreCase(tutor2.getLocation().value);"},{"lineNumber":156,"author":{"gitID":"olimhc"},"content":"        sortedFilteredTutors.setComparator(sortByLocation);"},{"lineNumber":157,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":159,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"olimhc"},"content":"    public void sortByLocationFilteredClientStudentList() {"},{"lineNumber":161,"author":{"gitID":"olimhc"},"content":"        Comparator\u003cClient\u003e sortByLocation \u003d (student1, student2)-\u003e (student1.getLocation().value)"},{"lineNumber":162,"author":{"gitID":"olimhc"},"content":"                .compareToIgnoreCase(student2.getLocation().value);"},{"lineNumber":163,"author":{"gitID":"olimhc"},"content":"        sortedFilteredStudents.setComparator(sortByLocation);"},{"lineNumber":164,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":166,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":167,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"olimhc"},"content":"    public void sortByGradeFilteredClientTutorList() {"},{"lineNumber":169,"author":{"gitID":"olimhc"},"content":"        Comparator\u003cClient\u003e sortByGrade \u003d new SortByGradeComparator();"},{"lineNumber":170,"author":{"gitID":"olimhc"},"content":"        sortedFilteredTutors.setComparator(sortByGrade);"},{"lineNumber":171,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":173,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"olimhc"},"content":"    public void sortByGradeFilteredClientStudentList() {"},{"lineNumber":175,"author":{"gitID":"olimhc"},"content":"        Comparator\u003cClient\u003e sortByGrade \u003d new SortByGradeComparator();"},{"lineNumber":176,"author":{"gitID":"olimhc"},"content":"        sortedFilteredStudents.setComparator(sortByGrade);"},{"lineNumber":177,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":179,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"olimhc"},"content":"    public void sortBySubjectFilteredClientTutorList() {"},{"lineNumber":181,"author":{"gitID":"olimhc"},"content":"        Comparator\u003cClient\u003e sortBySubject \u003d (tutor1, tutor2)-\u003e (tutor1.getSubject().value)"},{"lineNumber":182,"author":{"gitID":"olimhc"},"content":"                .compareToIgnoreCase(tutor2.getSubject().value);"},{"lineNumber":183,"author":{"gitID":"olimhc"},"content":"        sortedFilteredTutors.setComparator(sortBySubject);"},{"lineNumber":184,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"olimhc"},"content":""},{"lineNumber":186,"author":{"gitID":"olimhc"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"olimhc"},"content":"    public void sortBySubjectFilteredClientStudentList() {"},{"lineNumber":188,"author":{"gitID":"olimhc"},"content":"        Comparator\u003cClient\u003e sortBySubject \u003d (student1, student2)-\u003e (student1.getSubject().value)"},{"lineNumber":189,"author":{"gitID":"olimhc"},"content":"                .compareToIgnoreCase(student2.getSubject().value);"},{"lineNumber":190,"author":{"gitID":"olimhc"},"content":"        sortedFilteredStudents.setComparator(sortBySubject);"},{"lineNumber":191,"author":{"gitID":"olimhc"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"olimhc"},"content":"    //@@author"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"    //@@author shookshire"},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"shookshire"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"},{"lineNumber":197,"author":{"gitID":"shookshire"},"content":"     * {@code addressBook}"},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":200,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getFilteredStudentList() {"},{"lineNumber":201,"author":{"gitID":"shookshire"},"content":"        return FXCollections.unmodifiableObservableList(sortedFilteredStudents);"},{"lineNumber":202,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":204,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":205,"author":{"gitID":"shookshire"},"content":"    public void updateFilteredStudentList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":206,"author":{"gitID":"shookshire"},"content":"        requireNonNull(predicate);"},{"lineNumber":207,"author":{"gitID":"shookshire"},"content":"        filteredStudents.setPredicate(predicate);"},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":"        indicateAddressBookChanged();"},{"lineNumber":209,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":211,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"shookshire"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"},{"lineNumber":213,"author":{"gitID":"shookshire"},"content":"     * {@code addressBook}"},{"lineNumber":214,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getFilteredTutorList() {"},{"lineNumber":217,"author":{"gitID":"shookshire"},"content":"        return FXCollections.unmodifiableObservableList(sortedFilteredTutors);"},{"lineNumber":218,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":220,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":221,"author":{"gitID":"shookshire"},"content":"    public void updateFilteredTutorList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":222,"author":{"gitID":"shookshire"},"content":"        requireNonNull(predicate);"},{"lineNumber":223,"author":{"gitID":"shookshire"},"content":"        filteredTutors.setPredicate(predicate);"},{"lineNumber":224,"author":{"gitID":"shookshire"},"content":"        indicateAddressBookChanged();"},{"lineNumber":225,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"shookshire"},"content":"    //@@author"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Ranked Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"content":"    //@@author Zhu-Jiahui"},{"lineNumber":230,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"shookshire"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"},{"lineNumber":232,"author":{"gitID":"shookshire"},"content":"     * {@code addressBook}"},{"lineNumber":233,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public void updateRankedStudentList() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        Comparator\u003cClient\u003e rankStudent \u003d new RankComparator();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        sortedFilteredStudents.setComparator(rankStudent);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"shookshire"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"},{"lineNumber":243,"author":{"gitID":"shookshire"},"content":"     * {@code addressBook}"},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void updateRankedTutorList() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        Comparator\u003cClient\u003e rankTutor \u003d new RankComparator();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        sortedFilteredTutors.setComparator(rankTutor);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Reset {@code rank}, {@code MatchedGrade}, {@code MatchedLocation} and {@code MatchedSubject} in all"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Clientlist to default value"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public void resetHighLight() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        for (Client client : filteredTutors) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            client.setRank(0);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            client.setMatchedLocation(false);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            client.setMatchedGrade(false);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            client.setMatchedSubject(false);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        for (Client client : filteredStudents) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            client.setRank(0);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            client.setMatchedLocation(false);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            client.setMatchedGrade(false);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            client.setMatchedSubject(false);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        for (Client client : sortedFilteredStudents) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            client.setRank(0);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            client.setMatchedLocation(false);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            client.setMatchedGrade(false);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            client.setMatchedSubject(false);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"        for (Client client : sortedFilteredTutors) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            client.setRank(0);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            client.setMatchedLocation(false);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            client.setMatchedGrade(false);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            client.setMatchedSubject(false);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":287,"content":"    //@@author"},{"lineNumber":288,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    public ObservableList\u003cClient\u003e getFilteredClosedTutorList() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredClosedTutors);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public void updateFilteredClosedTutorList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        filteredClosedTutors.setPredicate(predicate);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    public ObservableList\u003cClient\u003e getFilteredClosedStudentList() {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredClosedStudents);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    public void updateFilteredClosedStudentList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        filteredClosedStudents.setPredicate(predicate);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":326,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"},{"lineNumber":327,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredTutors.equals(other.filteredTutors)"},{"lineNumber":328,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredClosedStudents.equals(other.filteredClosedStudents)"},{"lineNumber":329,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredClosedTutors.equals(other.filteredClosedTutors);"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"olimhc":62,"shookshire":96,"-":172}},{"path":"src/main/java/seedu/address/model/person/Grade.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"//@@author shookshire"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":" * Represents a Client\u0027s related Grade (the year of study eg. Primary 4, Secondary 3) in the TuitionCor."},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String)}"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"public class Grade {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_KINDERGARTEN \u003d \"Kindergarten\";"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_KINDERGARTEN_ALIAS \u003d \"K\";"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_PRIMARY \u003d \"Primary\";"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_PRIMARY_ALIAS \u003d \"P\";"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_SECONDARY \u003d \"Secondary\";"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_SECONDARY_ALIAS \u003d \"S\";"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_TERTIARY \u003d \"Tertiary\";"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_TERTIARY_ALIAS \u003d \"J\";"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_UNIVERSITY \u003d \"University\";"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_WORD_UNIVERSITY_ALIAS \u003d \"U\";"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    private static final String KINDERGARTEN_REGEX \u003d \"kindergarten\";"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    private static final String KINDERGARTEN_ALIAS_REGEX \u003d \"k\";"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    private static final String PRIMARY_REGEX \u003d \"primary\";"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    private static final String PRIMARY_ALIAS_REGEX \u003d \"p\";"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    private static final String SECONDARY_REGEX \u003d \"secondary\";"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    private static final String SECONDARY_ALIAS_REGEX \u003d \"s\";"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    private static final String TERTIARY_REGEX \u003d \"tertiary\";"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    private static final String TERTIARY_ALIAS_REGEX \u003d \"j\";"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    private static final String UNIVERSITY_REGEX \u003d \"university\";"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"    private static final String UNIVERSITY_ALIAS_REGEX \u003d \"u\";"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_KINDERGARTEN_FULL \u003d \"(?i)\""},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_KINDERGARTEN + \"[1-3]\";"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_KINDERGARTEN_ALIAS \u003d \"(?i)\""},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_KINDERGARTEN_ALIAS + \"[1-3]\";"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_PRIMARY_FULL \u003d \"(?i)\""},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_PRIMARY + \"[1-6]\";"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_PRIMARY_ALIAS \u003d \"(?i)\""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_PRIMARY_ALIAS + \"[1-6]\";"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_SECONDARY_FULL \u003d \"(?i)\""},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_SECONDARY  + \"[1-5]\";"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_SECONDARY_ALIAS \u003d \"(?i)\""},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_SECONDARY_ALIAS + \"[1-5]\";"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_TERTIARY_FULL \u003d \"(?i)\""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_TERTIARY  + \"[1-2]\";"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_TERTIARY_ALIAS \u003d \"(?i)\""},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_TERTIARY_ALIAS + \"[1-2]\";"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_UNIVERSITY_FULL \u003d \"(?i)\""},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_UNIVERSITY  + \"[1-4]\";"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    private static final String GRADE_VALIDATION_REGEX_UNIVERSITY_ALIAS \u003d \"(?i)\""},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"            + MESSAGE_WORD_UNIVERSITY_ALIAS + \"[1-4]\";"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_GRADE_CONSTRAINTS \u003d"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"            \"Grades accepted are \" + MESSAGE_WORD_KINDERGARTEN + \" (1-3)\""},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"                    + \", \" + MESSAGE_WORD_PRIMARY + \" (1-6)\""},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"                    + \", \" + MESSAGE_WORD_SECONDARY + \" (1-5)\""},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"                    + \", \" + MESSAGE_WORD_TERTIARY + \" (1-2)\""},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"                    + \", \" + MESSAGE_WORD_UNIVERSITY + \" (1-4).\\n\""},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"                    + \"Alias acceptable are \" + MESSAGE_WORD_KINDERGARTEN_ALIAS + \" for \" + MESSAGE_WORD_KINDERGARTEN"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"                    + \", \" + MESSAGE_WORD_PRIMARY_ALIAS + \" for \" + MESSAGE_WORD_PRIMARY"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"                    + \", \" + MESSAGE_WORD_SECONDARY_ALIAS + \" for \" + MESSAGE_WORD_SECONDARY"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"                    + \", \" + MESSAGE_WORD_TERTIARY_ALIAS + \" for \" + MESSAGE_WORD_TERTIARY"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"                    + \", \" + MESSAGE_WORD_UNIVERSITY_ALIAS + \" for \" + MESSAGE_WORD_UNIVERSITY + \".\\n\""},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"                    + \"Examples of valid input for grade: \" + MESSAGE_WORD_KINDERGARTEN  + \"1\""},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"                    + \" or \" + MESSAGE_WORD_KINDERGARTEN_ALIAS + \"1\" + \", \""},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"                    + MESSAGE_WORD_TERTIARY  + \"2\""},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"                    + \" or \" + MESSAGE_WORD_TERTIARY_ALIAS + \"2.\\n\""},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"                    + \"multiple grades should be typed with a single space between them \""},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"                    + \"in decreasing order of preferences with no repetitions\";"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    private static final int levelIndex \u003d 0;"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"    private static final int yearIndex \u003d 1;"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"    public final String value;"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"    public final int valueWeightage; //Stores the int value weightage of only the first grade in the list"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"     * Constructs an {@code Grade}."},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"     * @param grade A valid grade."},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    public Grade(String grade) {"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        requireNonNull(grade);"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        checkArgument(isValidGrade(grade), MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        this.value \u003d grade.trim().replaceAll(\" +\", \" \");"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"        this.valueWeightage \u003d getGradeIndex(this.value);"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"     * @return an int value base on the grade or the first grade in a string of multiple grades"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"    public static int getGradeIndex(String value) {"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"        final String levelField \u003d getGradeFields(value)[levelIndex].toLowerCase();"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"        int tempIndex \u003d 0;"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"        switch (levelField) {"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        case KINDERGARTEN_REGEX:"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 1;"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":"        case KINDERGARTEN_ALIAS_REGEX:"},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 1;"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"        case PRIMARY_REGEX:"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 4;"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"        case PRIMARY_ALIAS_REGEX:"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 4;"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"        case SECONDARY_REGEX:"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 10;"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":"        case SECONDARY_ALIAS_REGEX:"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 10;"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"        case TERTIARY_REGEX:"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 15;"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"        case TERTIARY_ALIAS_REGEX:"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 15;"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"        case UNIVERSITY_REGEX:"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 17;"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":"        case UNIVERSITY_ALIAS_REGEX:"},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"            tempIndex +\u003d 17;"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"            break;"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":"        default:"},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":"            throw new AssertionError(\"It should not be possible to reach here\");"},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"        tempIndex +\u003d (Integer.parseInt(getGradeFields(value)[yearIndex]) - 1);"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":150,"author":{"gitID":"shookshire"},"content":"        return tempIndex;"},{"lineNumber":151,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":153,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"shookshire"},"content":"     * Returns true if a given string is a valid client Grade."},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"shookshire"},"content":"    public static boolean isValidGradeRegex(String test) {"},{"lineNumber":157,"author":{"gitID":"shookshire"},"content":"        return test.matches(GRADE_VALIDATION_REGEX_KINDERGARTEN_ALIAS)"},{"lineNumber":158,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_KINDERGARTEN_FULL)"},{"lineNumber":159,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_PRIMARY_ALIAS)"},{"lineNumber":160,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_PRIMARY_FULL)"},{"lineNumber":161,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_SECONDARY_ALIAS)"},{"lineNumber":162,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_SECONDARY_FULL)"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_TERTIARY_ALIAS)"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_TERTIARY_FULL)"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_UNIVERSITY_ALIAS)"},{"lineNumber":166,"author":{"gitID":"shookshire"},"content":"                || test.matches(GRADE_VALIDATION_REGEX_UNIVERSITY_FULL);"},{"lineNumber":167,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":168,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"shookshire"},"content":"     * Returns true if all of the given string is a valid client Grade."},{"lineNumber":172,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"    public static boolean isValidGrade(String test) {"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"        if (test.matches(\"\\\\s+\")) {"},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"            return false;"},{"lineNumber":176,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"        String[] splitGrade \u003d test.split(\"\\\\s+\");"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"        Set\u003cString\u003e isUnique \u003d new HashSet\u003c\u003e();"},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"        Set\u003cInteger\u003e isUniqueWeightage \u003d new HashSet\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        boolean isValid \u003d true;"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        for (String ss : splitGrade) {"},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"            if (isValid) {"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"                isValid \u003d isValidGradeRegex(ss);"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"                isUnique.add(ss);"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":"            }"},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":"            if (isValid) {"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"                isUniqueWeightage.add(getGradeIndex(ss));"},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":"            }"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"shookshire"},"content":"        if (isUnique.size() !\u003d splitGrade.length || isUniqueWeightage.size() !\u003d splitGrade.length) {"},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"            isValid \u003d false;"},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":"        return isValid;"},{"lineNumber":196,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"     * @return gradeFields of only the first Grade in the string in terms of an array containing"},{"lineNumber":200,"author":{"gitID":"shookshire"},"content":"     * Level(Primary,Secondary..) and Year(1,2..."},{"lineNumber":201,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"shookshire"},"content":"    private static String[] getGradeFields(String value) {"},{"lineNumber":203,"author":{"gitID":"shookshire"},"content":"        String[] allGrades \u003d value.split(\"\\\\s+\");"},{"lineNumber":204,"author":{"gitID":"shookshire"},"content":"        String[] gradeFields \u003d  allGrades[0].split(\"(?\u003d[\\\\d])\");"},{"lineNumber":205,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":206,"author":{"gitID":"shookshire"},"content":"        checkArgument(gradeFields.length \u003d\u003d 2, \"Error in grade fields format.\");"},{"lineNumber":207,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":"        String temp \u003d gradeFields[levelIndex];"},{"lineNumber":209,"author":{"gitID":"shookshire"},"content":"        gradeFields[levelIndex] \u003d temp.trim();"},{"lineNumber":210,"author":{"gitID":"shookshire"},"content":"        gradeFields[yearIndex].trim();"},{"lineNumber":211,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":212,"author":{"gitID":"shookshire"},"content":"        return gradeFields;"},{"lineNumber":213,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":215,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"shookshire"},"content":"     * @return an array containing all the grade weightage of the individual grades"},{"lineNumber":217,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"shookshire"},"content":"    public static int[] getAllGradeWeightage(String value) {"},{"lineNumber":219,"author":{"gitID":"shookshire"},"content":"        String[] allGrades \u003d value.split(\"\\\\s+\");"},{"lineNumber":220,"author":{"gitID":"shookshire"},"content":"        int[] allGradeWeightage \u003d new int[allGrades.length];"},{"lineNumber":221,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":222,"author":{"gitID":"shookshire"},"content":"        for (int i \u003d 0; i \u003c allGrades.length; i++) {"},{"lineNumber":223,"author":{"gitID":"shookshire"},"content":"            allGradeWeightage[i] \u003d getGradeIndex(allGrades[i]);"},{"lineNumber":224,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"shookshire"},"content":"        return allGradeWeightage;"},{"lineNumber":226,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":228,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"shookshire"},"content":"    public String toString() {"},{"lineNumber":230,"author":{"gitID":"shookshire"},"content":"        return value;"},{"lineNumber":231,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":233,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"shookshire"},"content":"    public boolean equals(Object other) {"},{"lineNumber":235,"author":{"gitID":"shookshire"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":236,"author":{"gitID":"shookshire"},"content":"                || (other instanceof Grade // instanceof handles nulls"},{"lineNumber":237,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.value.equals(((Grade) other).value)); // state check"},{"lineNumber":238,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":240,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":241,"author":{"gitID":"shookshire"},"content":"    public int hashCode() {"},{"lineNumber":242,"author":{"gitID":"shookshire"},"content":"        return value.hashCode();"},{"lineNumber":243,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":239,"-":5}}]
