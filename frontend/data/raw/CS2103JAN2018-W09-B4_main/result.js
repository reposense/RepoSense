var resultJson = [{"path":"src/test/java/systemtests/AddCardCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.BACK_DESC_CS2103T_CARD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.BACK_DESC_MCQ_CARD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_CS2101_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_CS2103T_CARD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_BACK_CARD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_FRONT_CARD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.CS2101_CARD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.CS2103T_CARD;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.ENGLISH_CARD;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.KEYWORD_MATCHING_MIDTERMS;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.AddCardCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.DuplicateCardException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.CardUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":"public class AddCardCommandSystemTest extends CardBankSystemTest {"},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":"    public void add() throws Exception {"},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":"        Model model \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":"        /* Case: add a tag to a non-empty flashy book, command with leading spaces and trailing spaces"},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":"         * -\u003e added"},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":"        Card toAdd \u003d CS2103T_CARD;"},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":"        String command \u003d \"   \" + AddCardCommand.COMMAND_WORD + \"  \" + FRONT_DESC_CS2103T_CARD + BACK_DESC_CS2103T_CARD;"},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":"        /* Case: undo adding CS2103T card to the list -\u003e CS2103T card deleted */"},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":"        /* Case: redo adding CS2103T card to the list -\u003e CS2103T card added again */"},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"        model.addCard(toAdd);"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":53,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":54,"author":{"gitID":"jethrokuan"},"content":"        /* Case: add a Card with all fields same as another card in the card bank -\u003e rejected */"},{"lineNumber":55,"author":{"gitID":"jethrokuan"},"content":"        command \u003d AddCardCommand.COMMAND_WORD + FRONT_DESC_CS2103T_CARD + BACK_DESC_CS2103T_CARD;"},{"lineNumber":56,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(command, AddCardCommand.MESSAGE_DUPLICATE_CARD);"},{"lineNumber":57,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":58,"author":{"gitID":"jethrokuan"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":59,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":60,"author":{"gitID":"jethrokuan"},"content":"        /* Case: filters the card list before adding -\u003e added */"},{"lineNumber":61,"author":{"gitID":"jethrokuan"},"content":"        showTagsWithName(KEYWORD_MATCHING_MIDTERMS);"},{"lineNumber":62,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(ENGLISH_CARD);"},{"lineNumber":63,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":64,"author":{"gitID":"jethrokuan"},"content":"        /* ------------------------ Perform add operation while a tag card is selected --------------------------- */"},{"lineNumber":65,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":66,"author":{"gitID":"jethrokuan"},"content":"        /* Case: selects first card in the card list, add a card-\u003e added, card selection remains unchanged */"},{"lineNumber":67,"author":{"gitID":"jethrokuan"},"content":"        selectTag(Index.fromOneBased(1));"},{"lineNumber":68,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(CS2101_CARD);"},{"lineNumber":69,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":70,"author":{"gitID":"jethrokuan"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":71,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":72,"author":{"gitID":"jethrokuan"},"content":"        /* Case: add a duplicate card -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"jethrokuan"},"content":"        command \u003d CardUtil.getAddCardCommand(ENGLISH_CARD);"},{"lineNumber":74,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(command, AddCardCommand.MESSAGE_DUPLICATE_CARD);"},{"lineNumber":75,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":76,"author":{"gitID":"jethrokuan"},"content":"        /* Case: missing front -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"jethrokuan"},"content":"        command \u003d AddCardCommand.COMMAND_WORD + BACK_DESC_MCQ_CARD;"},{"lineNumber":78,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"},{"lineNumber":79,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":80,"author":{"gitID":"jethrokuan"},"content":"        /* Case: missing back -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"jethrokuan"},"content":"        command \u003d AddCardCommand.COMMAND_WORD + FRONT_DESC_CS2101_CARD;"},{"lineNumber":82,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"},{"lineNumber":83,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":84,"author":{"gitID":"jethrokuan"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"jethrokuan"},"content":"        command \u003d \"adds \" + CardUtil.getCardDetails(toAdd);"},{"lineNumber":86,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":87,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":88,"author":{"gitID":"jethrokuan"},"content":"        /* Case: invalid front -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"jethrokuan"},"content":"        command \u003d AddCardCommand.COMMAND_WORD + INVALID_FRONT_CARD + BACK_DESC_CS2103T_CARD;"},{"lineNumber":90,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(command, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":92,"author":{"gitID":"jethrokuan"},"content":"        /* Case: invalid back -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"jethrokuan"},"content":"        command \u003d AddCardCommand.COMMAND_WORD + FRONT_DESC_CS2103T_CARD + INVALID_BACK_CARD;"},{"lineNumber":94,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(command, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":97,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"jethrokuan"},"content":"     * Executes the {@code AddCardCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"jethrokuan"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"jethrokuan"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"jethrokuan"},"content":"     * 3. Result display box displays the success message of executing {@code AddCardCommand} with the details of"},{"lineNumber":102,"author":{"gitID":"jethrokuan"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"jethrokuan"},"content":"     * 4. {@code Model}, {@code Storage} and {@code TagListPanel} equal to the corresponding components in"},{"lineNumber":104,"author":{"gitID":"jethrokuan"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"jethrokuan"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"jethrokuan"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"jethrokuan"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":108,"author":{"gitID":"jethrokuan"},"content":"     * {@code CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"jethrokuan"},"content":"     * @see CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":110,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"jethrokuan"},"content":"    private void assertCommandSuccess(Card toAdd) throws DuplicateCardException {"},{"lineNumber":112,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(CardUtil.getAddCardCommand(toAdd), toAdd);"},{"lineNumber":113,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":115,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"jethrokuan"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Card)}. Executes {@code command}"},{"lineNumber":117,"author":{"gitID":"jethrokuan"},"content":"     * instead."},{"lineNumber":118,"author":{"gitID":"jethrokuan"},"content":"     * @see AddCardCommandSystemTest#assertCommandSuccess(Card)"},{"lineNumber":119,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"jethrokuan"},"content":"    private void assertCommandSuccess(String command, Card toAdd) throws DuplicateCardException {"},{"lineNumber":121,"author":{"gitID":"jethrokuan"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":122,"author":{"gitID":"jethrokuan"},"content":"        expectedModel.addCard(toAdd);"},{"lineNumber":123,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":124,"author":{"gitID":"jethrokuan"},"content":"        String expectedResultMessage \u003d String.format(AddCardCommand.MESSAGE_SUCCESS, toAdd.getType(), toAdd);"},{"lineNumber":125,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":126,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":127,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":129,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"jethrokuan"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Tag)} except asserts that"},{"lineNumber":131,"author":{"gitID":"jethrokuan"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"jethrokuan"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"jethrokuan"},"content":"     * 2. {@code Model}, {@code Storage} and {@code cardListPanel} equal to the corresponding components in"},{"lineNumber":134,"author":{"gitID":"jethrokuan"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"jethrokuan"},"content":"     * @see AddCardCommandSystemTest#assertCommandSuccess(String, Card)"},{"lineNumber":136,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"jethrokuan"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":138,"author":{"gitID":"jethrokuan"},"content":"        executeCommand(command);"},{"lineNumber":139,"author":{"gitID":"jethrokuan"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":140,"author":{"gitID":"jethrokuan"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":141,"author":{"gitID":"jethrokuan"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":142,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":144,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"jethrokuan"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"jethrokuan"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"jethrokuan"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"jethrokuan"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"jethrokuan"},"content":"     * 4. {@code Model}, {@code Storage} and {@code TagListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"jethrokuan"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"jethrokuan"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":152,"author":{"gitID":"jethrokuan"},"content":"     * {@code CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"jethrokuan"},"content":"     * @see CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"jethrokuan"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"jethrokuan"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":157,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":158,"author":{"gitID":"jethrokuan"},"content":"        executeCommand(command);"},{"lineNumber":159,"author":{"gitID":"jethrokuan"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":160,"author":{"gitID":"jethrokuan"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":161,"author":{"gitID":"jethrokuan"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":162,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":164,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":138,"-":26}},{"path":"src/test/java/systemtests/EditCardCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.BACK_DESC_CHEMISTRY_CARD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_CHEMISTRY_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_CS2101_CARD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_MATHEMATICS_CARD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_FRONT_CARD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_FRONT_CS2101_CARD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.CHEMISTRY_CARD;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.MATHEMATICS_CARD;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_CARD;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCardCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.CardNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.DuplicateCardException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.CardBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"public class EditCardCommandSystemTest extends CardBankSystemTest {"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"    public void edit() throws Exception {"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"        Model model \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"         * -\u003e edited"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"        Index index \u003d INDEX_FIRST_CARD;"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"        String command \u003d \" \" + EditCardCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"                + FRONT_DESC_CS2101_CARD;"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"        Card editedCard \u003d new CardBuilder().withFront(VALID_FRONT_CS2101_CARD).withBack(MATHEMATICS_CARD.getBack())"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"                .build();"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, index, editedCard);"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"        /* Case: undo editing the last card in the list -\u003e last card restored */"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"        /* Case: redo editing the last card in the list -\u003e last card edited again */"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"        model.updateCard("},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"                getModel().getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased()), editedCard);"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"        /* Case: edit a card with new values same as existing values -\u003e edited */"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased() + FRONT_DESC_MATHEMATICS_CARD;"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, index, MATHEMATICS_CARD);"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"        Card cardToEdit \u003d getModel().getFilteredCardList().get(index.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"        editedCard \u003d new CardBuilder(cardToEdit).build();"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" 0\" + FRONT_DESC_CS2101_CARD,"},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" -1\" + FRONT_DESC_CS2101_CARD,"},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"},{"lineNumber":75,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":76,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"Shawnclq"},"content":"        int invalidIndex \u003d getModel().getFilteredCardList().size() + 1;"},{"lineNumber":78,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" \" + invalidIndex + FRONT_DESC_CS2101_CARD,"},{"lineNumber":79,"author":{"gitID":"Shawnclq"},"content":"                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":81,"author":{"gitID":"Shawnclq"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(EditCardCommand.COMMAND_WORD + FRONT_DESC_CS2101_CARD,"},{"lineNumber":83,"author":{"gitID":"Shawnclq"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":85,"author":{"gitID":"Shawnclq"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased(),"},{"lineNumber":87,"author":{"gitID":"Shawnclq"},"content":"                EditCardCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":88,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":89,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":90,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(EditCardCommand.COMMAND_WORD + \" \""},{"lineNumber":91,"author":{"gitID":"Shawnclq"},"content":"                        + INDEX_FIRST_CARD.getOneBased() + INVALID_FRONT_CARD, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":93,"author":{"gitID":"Shawnclq"},"content":"        /* Case: edit a card with new values same as another card\u0027s values -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"Shawnclq"},"content":"        assertTrue(getModel().getCardBank().getCardList().contains(CHEMISTRY_CARD));"},{"lineNumber":95,"author":{"gitID":"Shawnclq"},"content":"        index \u003d INDEX_FIRST_CARD;"},{"lineNumber":96,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(getModel().getFilteredCardList().get(index.getZeroBased()).equals(CHEMISTRY_CARD));"},{"lineNumber":97,"author":{"gitID":"Shawnclq"},"content":"        command \u003d EditCardCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":98,"author":{"gitID":"Shawnclq"},"content":"                + FRONT_DESC_CHEMISTRY_CARD + BACK_DESC_CHEMISTRY_CARD;"},{"lineNumber":99,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(command, EditCardCommand.MESSAGE_DUPLICATE_CARD);"},{"lineNumber":100,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":102,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"Shawnclq"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Card, Index)} except that"},{"lineNumber":104,"author":{"gitID":"Shawnclq"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":105,"author":{"gitID":"Shawnclq"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":106,"author":{"gitID":"Shawnclq"},"content":"     * @see EditCardCommandSystemTest#assertCommandSuccess(String, Index, Card, Index)"},{"lineNumber":107,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Card editedCard) {"},{"lineNumber":109,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, toEdit, editedCard, null);"},{"lineNumber":110,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":112,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"Shawnclq"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"Shawnclq"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCardCommand}.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"Shawnclq"},"content":"     * 2. Asserts that the model related components are updated to reflect the card at index {@code toEdit} being"},{"lineNumber":116,"author":{"gitID":"Shawnclq"},"content":"     * updated to values specified {@code editedCard}.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"Shawnclq"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":118,"author":{"gitID":"Shawnclq"},"content":"     * @see EditCardCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":119,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":121,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Card editedCard,"},{"lineNumber":122,"author":{"gitID":"Shawnclq"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":123,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":124,"author":{"gitID":"Shawnclq"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"Shawnclq"},"content":"            expectedModel.updateCard("},{"lineNumber":126,"author":{"gitID":"Shawnclq"},"content":"                    expectedModel.getFilteredCardList().get(toEdit.getZeroBased()), editedCard);"},{"lineNumber":127,"author":{"gitID":"Shawnclq"},"content":"            //expectedModel.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"},{"lineNumber":128,"author":{"gitID":"Shawnclq"},"content":"        } catch (DuplicateCardException | CardNotFoundException e) {"},{"lineNumber":129,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalArgumentException("},{"lineNumber":130,"author":{"gitID":"Shawnclq"},"content":"                    \"editedCard is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":131,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":133,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":134,"author":{"gitID":"Shawnclq"},"content":"                String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard), expectedSelectedCardIndex);"},{"lineNumber":135,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":137,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"Shawnclq"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":139,"author":{"gitID":"Shawnclq"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":140,"author":{"gitID":"Shawnclq"},"content":"     * @see EditCardCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":141,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":143,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":144,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":146,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"Shawnclq"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"Shawnclq"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"Shawnclq"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"Shawnclq"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"Shawnclq"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":152,"author":{"gitID":"Shawnclq"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"Shawnclq"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"Shawnclq"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"Shawnclq"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":156,"author":{"gitID":"Shawnclq"},"content":"     * {@code CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"Shawnclq"},"content":"     * @see CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":158,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":160,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":161,"author":{"gitID":"Shawnclq"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":162,"author":{"gitID":"Shawnclq"},"content":"        executeCommand(command);"},{"lineNumber":163,"author":{"gitID":"Shawnclq"},"content":"        //expectedModel.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"},{"lineNumber":164,"author":{"gitID":"Shawnclq"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":165,"author":{"gitID":"Shawnclq"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":166,"author":{"gitID":"Shawnclq"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":167,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":169,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"Shawnclq"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":171,"author":{"gitID":"Shawnclq"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"Shawnclq"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"Shawnclq"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"Shawnclq"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"Shawnclq"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"Shawnclq"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":177,"author":{"gitID":"Shawnclq"},"content":"     * {@code CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"Shawnclq"},"content":"     * @see CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":179,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":181,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":182,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":183,"author":{"gitID":"Shawnclq"},"content":"        executeCommand(command);"},{"lineNumber":184,"author":{"gitID":"Shawnclq"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":185,"author":{"gitID":"Shawnclq"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":186,"author":{"gitID":"Shawnclq"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":187,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":189,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":162,"-":27}},{"path":"src/test/java/systemtests/DeleteCardCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.DeleteCardCommand.MESSAGE_DELETE_CARD_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TestUtil.getCard;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TestUtil.getCardLastIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TestUtil.getCardMidIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_CARD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.DeleteCardCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.CardNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"public class DeleteCardCommandSystemTest extends CardBankSystemTest {"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"        /* Case: delete the first card in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"        String command \u003d \"     \" + DeleteCardCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_CARD.getOneBased()"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"                + \"       \";"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"        Card deletedCard \u003d removeCard(expectedModel, INDEX_FIRST_CARD);"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"        /* Case: delete the last card in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"        Index lastCardIndex \u003d getCardLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(lastCardIndex);"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"        /* Case: undo deleting the last card in the list -\u003e last card restored */"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"        /* Case: redo deleting the last card in the list -\u003e last card deleted again */"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"        removeCard(modelBeforeDeletingLast, lastCardIndex);"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"        /* Case: delete the middle card in the list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"        Index middleCardIndex \u003d getCardMidIndex(getModel());"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(middleCardIndex);"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"        /* Case: filtered card list, delete index within bounds of flashy book and card list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"        //showCardsWithName(KEYWORD_MATCHING_MIDTERMS);"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"        Index index \u003d INDEX_FIRST_CARD;"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCardList().size());"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"        command \u003d DeleteCardCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"Shawnclq"},"content":"        command \u003d DeleteCardCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":76,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":77,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":78,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"Shawnclq"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":80,"author":{"gitID":"Shawnclq"},"content":"                getModel().getCardBank().getCardList().size() + 1);"},{"lineNumber":81,"author":{"gitID":"Shawnclq"},"content":"        command \u003d DeleteCardCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":82,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":84,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(DeleteCardCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":86,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":87,"author":{"gitID":"Shawnclq"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(DeleteCardCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":89,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":90,"author":{"gitID":"Shawnclq"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":92,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":94,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Shawnclq"},"content":"     * Removes the {@code Card} at the specified {@code index} in {@code model}\u0027s flashy book."},{"lineNumber":96,"author":{"gitID":"Shawnclq"},"content":"     * @return the removed card"},{"lineNumber":97,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Shawnclq"},"content":"    private Card removeCard(Model model, Index index) {"},{"lineNumber":99,"author":{"gitID":"Shawnclq"},"content":"        Card targetCard \u003d getCard(model, index);"},{"lineNumber":100,"author":{"gitID":"Shawnclq"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"Shawnclq"},"content":"            model.deleteCard(targetCard);"},{"lineNumber":102,"author":{"gitID":"Shawnclq"},"content":"        } catch (CardNotFoundException pnfe) {"},{"lineNumber":103,"author":{"gitID":"Shawnclq"},"content":"            throw new AssertionError(\"targetCard is retrieved from model.\");"},{"lineNumber":104,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"Shawnclq"},"content":"        return targetCard;"},{"lineNumber":106,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":108,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"Shawnclq"},"content":"     * Deletes the card at {@code toDelete} by creating a default {@code DeleteCardCommand} using {@code toDelete} and"},{"lineNumber":110,"author":{"gitID":"Shawnclq"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":111,"author":{"gitID":"Shawnclq"},"content":"     * @see DeleteCardCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":112,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":114,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"Shawnclq"},"content":"        Card deletedCard \u003d removeCard(expectedModel, toDelete);"},{"lineNumber":116,"author":{"gitID":"Shawnclq"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"},{"lineNumber":117,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":118,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess("},{"lineNumber":119,"author":{"gitID":"Shawnclq"},"content":"                DeleteCardCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":120,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":122,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"Shawnclq"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"Shawnclq"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"Shawnclq"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"Shawnclq"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"Shawnclq"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"Shawnclq"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"Shawnclq"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"Shawnclq"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":131,"author":{"gitID":"Shawnclq"},"content":"     * {@code CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":132,"author":{"gitID":"Shawnclq"},"content":"     * @see CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":133,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":135,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":136,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":138,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"Shawnclq"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":140,"author":{"gitID":"Shawnclq"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":141,"author":{"gitID":"Shawnclq"},"content":"     * @see DeleteCardCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":142,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":144,"author":{"gitID":"Shawnclq"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":145,"author":{"gitID":"Shawnclq"},"content":"        executeCommand(command);"},{"lineNumber":146,"author":{"gitID":"Shawnclq"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":147,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":148,"author":{"gitID":"Shawnclq"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":149,"author":{"gitID":"Shawnclq"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":150,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":152,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"Shawnclq"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"Shawnclq"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"Shawnclq"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"Shawnclq"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"Shawnclq"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"Shawnclq"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"Shawnclq"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":160,"author":{"gitID":"Shawnclq"},"content":"     * {@code CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"Shawnclq"},"content":"     * @see CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":162,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"Shawnclq"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":164,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":165,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":166,"author":{"gitID":"Shawnclq"},"content":"        executeCommand(command);"},{"lineNumber":167,"author":{"gitID":"Shawnclq"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":168,"author":{"gitID":"Shawnclq"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":169,"author":{"gitID":"Shawnclq"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":170,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":172,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":150,"-":22}},{"path":"src/test/java/systemtests/SelectCardCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.SelectCardCommand.MESSAGE_SELECT_CARD_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.getTypicalCards;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_CARD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.SelectCardCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"public class SelectCardCommandSystemTest extends CardBankSystemTest {"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    public void select() {"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"        /* Case: select the first card in the card list, command with leading spaces and trailing spaces"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":"         * -\u003e selected"},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"         */"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"        String command \u003d \"   \" + SelectCardCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased() + \"   \";"},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":"        assertCommandSuccess(command, INDEX_FIRST_CARD);"},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"        /* Case: select the last card in the card list -\u003e selected */"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":"        Index cardCount \u003d Index.fromOneBased(getTypicalCards().size());"},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":"        command \u003d SelectCardCommand.COMMAND_WORD + \" \" + cardCount.getOneBased();"},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":"        assertCommandSuccess(command, cardCount);"},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":"        /* Case: select the middle card in the card list -\u003e selected */"},{"lineNumber":48,"author":{"gitID":"yong-jie"},"content":"        Index middleIndex \u003d Index.fromOneBased(cardCount.getOneBased() / 2);"},{"lineNumber":49,"author":{"gitID":"yong-jie"},"content":"        command \u003d SelectCardCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":50,"author":{"gitID":"yong-jie"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":51,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":52,"author":{"gitID":"yong-jie"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":53,"author":{"gitID":"yong-jie"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":54,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":55,"author":{"gitID":"yong-jie"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":56,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":57,"author":{"gitID":"yong-jie"},"content":"        /* Case: filtered card list, select index within bounds of flashy book and card list -\u003e selected */"},{"lineNumber":58,"author":{"gitID":"yong-jie"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":59,"author":{"gitID":"yong-jie"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredCardList().size());"},{"lineNumber":60,"author":{"gitID":"yong-jie"},"content":"        command \u003d SelectCardCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":61,"author":{"gitID":"yong-jie"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":62,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":63,"author":{"gitID":"yong-jie"},"content":"        /* Case: filtered card list, select index within bounds of flashy book but out of bounds of card list"},{"lineNumber":64,"author":{"gitID":"yong-jie"},"content":"         * -\u003e rejected"},{"lineNumber":65,"author":{"gitID":"yong-jie"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":67,"author":{"gitID":"yong-jie"},"content":"        selectTag(Index.fromZeroBased(0));"},{"lineNumber":68,"author":{"gitID":"yong-jie"},"content":"        int invalidIndex \u003d getModel().getCardBank().getCardList().size();"},{"lineNumber":69,"author":{"gitID":"yong-jie"},"content":"        System.out.println(getModel().getFilteredCardList());"},{"lineNumber":70,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(SelectCardCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":72,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":73,"author":{"gitID":"yong-jie"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":74,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":75,"author":{"gitID":"yong-jie"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(SelectCardCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":77,"author":{"gitID":"yong-jie"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCardCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":79,"author":{"gitID":"yong-jie"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(SelectCardCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":81,"author":{"gitID":"yong-jie"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCardCommand.MESSAGE_USAGE));"},{"lineNumber":82,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":83,"author":{"gitID":"yong-jie"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"yong-jie"},"content":"        invalidIndex \u003d getModel().getFilteredCardList().size() + 1;"},{"lineNumber":85,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(SelectCardCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":87,"author":{"gitID":"yong-jie"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(SelectCardCommand.COMMAND_WORD + \" abc\","},{"lineNumber":89,"author":{"gitID":"yong-jie"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCardCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":91,"author":{"gitID":"yong-jie"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(SelectCardCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":93,"author":{"gitID":"yong-jie"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCardCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":95,"author":{"gitID":"yong-jie"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"yong-jie"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":97,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":99,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"yong-jie"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"yong-jie"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"yong-jie"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"yong-jie"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":104,"author":{"gitID":"yong-jie"},"content":"     * {@code expectedSelectedCardIndex} of the selected card.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"yong-jie"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CardListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"yong-jie"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"yong-jie"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"yong-jie"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":109,"author":{"gitID":"yong-jie"},"content":"     * {@code CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"yong-jie"},"content":"     * @see CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":111,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"yong-jie"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":113,"author":{"gitID":"yong-jie"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":114,"author":{"gitID":"yong-jie"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":115,"author":{"gitID":"yong-jie"},"content":"                MESSAGE_SELECT_CARD_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":116,"author":{"gitID":"yong-jie"},"content":"        int preExecutionSelectedCardIndex \u003d getCardListPanel()"},{"lineNumber":117,"author":{"gitID":"yong-jie"},"content":"                .getSelectedCardIndex();"},{"lineNumber":118,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":119,"author":{"gitID":"yong-jie"},"content":"        executeCommand(command);"},{"lineNumber":120,"author":{"gitID":"yong-jie"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":121,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":122,"author":{"gitID":"yong-jie"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":123,"author":{"gitID":"yong-jie"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":124,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":126,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"yong-jie"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"yong-jie"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"yong-jie"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"yong-jie"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"yong-jie"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CardListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"yong-jie"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"yong-jie"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":134,"author":{"gitID":"yong-jie"},"content":"     * {@code CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"yong-jie"},"content":"     * @see CardBankSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":136,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"yong-jie"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":138,"author":{"gitID":"yong-jie"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":139,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":140,"author":{"gitID":"yong-jie"},"content":"        executeCommand(command);"},{"lineNumber":141,"author":{"gitID":"yong-jie"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":142,"author":{"gitID":"yong-jie"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":143,"author":{"gitID":"yong-jie"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":144,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":126,"-":19}},{"path":"src/test/java/seedu/flashy/logic/parser/SelectCardCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.SelectCardCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":" * Tests the parsing functionality of {@code SelectCardCommandParser}"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"public class SelectCardCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"    private SelectCardCommandParser parser \u003d new SelectCardCommandParser();"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"    public void parse_validArgs_returnsSelectCardCommand() {"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"        assertParseSuccess(parser, \"1\", new SelectCardCommand(INDEX_FIRST_CARD));"},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCardCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":18,"-":11}},{"path":"src/test/java/seedu/flashy/logic/parser/ChangeThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.ChangeThemeCommand.COMMAND_WORD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.ChangeThemeCommand.MESSAGE_USAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.CORRESPONDING_THEME_INDEX_1;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.CORRESPONDING_THEME_INDEX_2;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_THEME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_THEME_1;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_THEME_2;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_THEME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.ParserUtil.MESSAGE_INVALID_THEME;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ChangeThemeCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"public class ChangeThemeCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    private static final String SPACE \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"    private ChangeThemeCommandParser parser \u003d new ChangeThemeCommandParser();"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"        assertParseSuccess(parser,"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"                COMMAND_WORD + SPACE + PREFIX_THEME + VALID_THEME_1,"},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":"                new ChangeThemeCommand(CORRESPONDING_THEME_INDEX_1));"},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"        assertParseSuccess(parser,"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":"                COMMAND_WORD + SPACE + PREFIX_THEME + VALID_THEME_2,"},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":"                new ChangeThemeCommand(CORRESPONDING_THEME_INDEX_2));"},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"        final String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE);"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"        assertParseFailure(parser, \"\", expectedMessage);"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"    public void parse_invalidField_failure() {"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":"        final String expectedMessage \u003d MESSAGE_INVALID_THEME;"},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":48,"author":{"gitID":"yong-jie"},"content":"        assertParseFailure(parser,"},{"lineNumber":49,"author":{"gitID":"yong-jie"},"content":"                COMMAND_WORD + SPACE + PREFIX_THEME + INVALID_THEME,"},{"lineNumber":50,"author":{"gitID":"yong-jie"},"content":"                expectedMessage);"},{"lineNumber":51,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":53,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":33,"-":20}},{"path":"src/test/java/seedu/flashy/logic/parser/ShowDueCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_0DAY_OF_MONTH;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_29FEBRUARY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_30FEBRUARY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_31APRIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_32DAY_OF_MONTH;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_32MARCH;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.LIST_DAY_MONTH_YEAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.LIST_PREFIX_RUBBISH;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.LIST_VALID_DAY_MONTH_YEAR;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.ParserUtil.MESSAGE_INVALID_NUMBER;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.flashy.model.card.Schedule.MESSAGE_DAY_CONSTRAINTS;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.DateStringPermutationBuilder.preparePowerSetDateTime;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.DateStringPermutationBuilder.preparePowerSetString;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.time.DateTimeException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ShowDueCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"public class ShowDueCommandParserTest {"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":"    private LocalDateTime todaysDate;"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"    private ShowDueCommandParser parser \u003d new ShowDueCommandParser();"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"        todaysDate \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"    //@@author pukipuki"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"    public void parse_allFieldsNotPresentCard_success() {"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE, new ShowDueCommand(todaysDate));"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"    public void parse_allFieldsEmptyPermutation_success() {"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"        String[] powerSetString \u003d preparePowerSetString(LIST_DAY_MONTH_YEAR, true);"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"        for (String each : powerSetString) {"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"            assertParseSuccess(parser, each, new ShowDueCommand(todaysDate));"},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"    public void parse_allFieldsValidPermutation_success() {"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"        String[] powerSetString \u003d preparePowerSetString(LIST_DAY_MONTH_YEAR, true);"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":"        LocalDateTime[] powerSetDateTime \u003d preparePowerSetDateTime(LIST_VALID_DAY_MONTH_YEAR);"},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":"        for (int i \u003d 0; i \u003c powerSetString.length; i++) {"},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"            assertParseSuccess(parser, powerSetString[i], new ShowDueCommand(powerSetDateTime[i]));"},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":"    public void parse_invalidFields_failure() {"},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"        String[] powerSetString \u003d preparePowerSetString(LIST_PREFIX_RUBBISH, true);"},{"lineNumber":67,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d MESSAGE_INVALID_NUMBER;"},{"lineNumber":68,"author":{"gitID":"pukipuki"},"content":"        for (String each : powerSetString) {"},{"lineNumber":69,"author":{"gitID":"pukipuki"},"content":"            if (each.equals(\"\")) {"},{"lineNumber":70,"author":{"gitID":"pukipuki"},"content":"                continue;"},{"lineNumber":71,"author":{"gitID":"pukipuki"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"pukipuki"},"content":"            assertParseFailure(parser, each, expectedMessage);"},{"lineNumber":73,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":76,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"pukipuki"},"content":"    public void parse_february29_failure() {"},{"lineNumber":78,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"pukipuki"},"content":"            int year \u003d LocalDate.now().getYear();"},{"lineNumber":80,"author":{"gitID":"pukipuki"},"content":"            LocalDate date \u003d LocalDate.of(year, 2, 29);"},{"lineNumber":81,"author":{"gitID":"pukipuki"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":82,"author":{"gitID":"pukipuki"},"content":"            String expectedMessage \u003d dte.getMessage();"},{"lineNumber":83,"author":{"gitID":"pukipuki"},"content":"            assertParseFailure(parser, INVALID_29FEBRUARY, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":87,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"pukipuki"},"content":"    public void parse_february30_failure() {"},{"lineNumber":89,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"pukipuki"},"content":"            int year \u003d LocalDate.now().getYear();"},{"lineNumber":91,"author":{"gitID":"pukipuki"},"content":"            LocalDate date \u003d LocalDate.of(year, 2, 30);"},{"lineNumber":92,"author":{"gitID":"pukipuki"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":93,"author":{"gitID":"pukipuki"},"content":"            String expectedMessage \u003d dte.getMessage();"},{"lineNumber":94,"author":{"gitID":"pukipuki"},"content":"            assertParseFailure(parser, INVALID_30FEBRUARY, expectedMessage);"},{"lineNumber":95,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":98,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"pukipuki"},"content":"    public void parse_march32_failure() {"},{"lineNumber":100,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d MESSAGE_DAY_CONSTRAINTS;"},{"lineNumber":101,"author":{"gitID":"pukipuki"},"content":"        assertParseFailure(parser, INVALID_32MARCH, expectedMessage);"},{"lineNumber":102,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":104,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"pukipuki"},"content":"    public void parse_april31_failure() {"},{"lineNumber":106,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"pukipuki"},"content":"            int year \u003d LocalDate.now().getYear();"},{"lineNumber":108,"author":{"gitID":"pukipuki"},"content":"            LocalDate date \u003d LocalDate.of(year, 4, 31);"},{"lineNumber":109,"author":{"gitID":"pukipuki"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":110,"author":{"gitID":"pukipuki"},"content":"            String expectedMessage \u003d dte.getMessage();"},{"lineNumber":111,"author":{"gitID":"pukipuki"},"content":"            assertParseFailure(parser, INVALID_31APRIL, expectedMessage);"},{"lineNumber":112,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":115,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"pukipuki"},"content":"    public void parse_dayOfMonth32_failure() {"},{"lineNumber":117,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d MESSAGE_DAY_CONSTRAINTS;"},{"lineNumber":118,"author":{"gitID":"pukipuki"},"content":"        assertParseFailure(parser, INVALID_32DAY_OF_MONTH, expectedMessage);"},{"lineNumber":119,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":121,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"pukipuki"},"content":"    public void parse_dayOfMonth0_failure() {"},{"lineNumber":123,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d MESSAGE_DAY_CONSTRAINTS;"},{"lineNumber":124,"author":{"gitID":"pukipuki"},"content":"        assertParseFailure(parser, INVALID_0DAY_OF_MONTH, expectedMessage);"},{"lineNumber":125,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":127,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":99,"-":28}},{"path":"src/test/java/seedu/flashy/logic/parser/ListCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ListCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":11,"author":{"gitID":"jethrokuan"},"content":"public class ListCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"jethrokuan"},"content":"    private ListCommandParser parser \u003d new ListCommandParser();"},{"lineNumber":13,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":14,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"jethrokuan"},"content":"    public void parse_validValues_success() {"},{"lineNumber":16,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, \"\", new ListCommand(false));"},{"lineNumber":17,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, \"  \", new ListCommand(false));"},{"lineNumber":18,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, ListCommandParser.PREFIX_NO_TAGS_ONLY,"},{"lineNumber":19,"author":{"gitID":"jethrokuan"},"content":"                new ListCommand(true));"},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, \"  \" + ListCommandParser.PREFIX_NO_TAGS_ONLY + \"  \","},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":"                new ListCommand(true));"},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":"    public void parse_invalidValues_failure() {"},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"        String expectedMessage \u003d ListCommandParser.MESSAGE_PARSE_FAILURE;"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"-c\", expectedMessage);"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"hello\", expectedMessage);"},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":"}"}],"authorContributionMap":{"jethrokuan":21,"-":9}},{"path":"src/test/java/seedu/flashy/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.FillBlanksCard;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_MCQ_BACK_INT \u003d \"4\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_MCQ_BACK_VALUE \u003d \"Hello World\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"M@th\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_THEME \u003d \"solarized\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_BACK \u003d \"Flashy\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_FRONT \u003d \"What is the best flashcard app?\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_MCQ_BACK \u003d \"2\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_MCQ_FRONT \u003d \"Which continent is Singapore in?\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Math\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e VALID_MCQ_OPTIONS \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            Arrays.asList(\"Australia\", \"Asia\", \"Africa\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_FILLBLANKS_FRONT \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            \"A _ is a four sided polygon with equal sides meeting at right angles.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_FILLBLANKS_ARGUMENT \u003d \" \";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_FILLBLANKS_BACK \u003d \"square\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_FILLBLANKS_BACK_ARGUMENTS \u003d \"square, too, many, arguments\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_OPTION \u003d \"Asia\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_THEME \u003d \"light\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_TAG, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_TAG, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parseCard_null_throwsNullPointerException() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCard((String) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parseCard_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseCard(WHITESPACE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCard_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(VALID_FRONT, ParserUtil.parseCard(VALID_FRONT));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCard_validValueWithWhitespace_returnsTrimmedCard() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_FRONT + WHITESPACE;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(VALID_FRONT, ParserUtil.parseCard(nameWithWhitespace));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parseMcqOption_null_throwsNullPointerException() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMcqOption((String) null));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseMcqOption_invalidValue_throwsIllegalValueException() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMcqOption(WHITESPACE));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseMcqOption_validValueWithoutWhitespace_returnsString() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(VALID_OPTION, ParserUtil.parseMcqOption(VALID_OPTION));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseMcqOption_validValueWithWhitespace_returnsString() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_OPTION + WHITESPACE;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(VALID_OPTION, ParserUtil.parseMcqOption(nameWithWhitespace));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseMcqCard_null_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMcqCard((String) null,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                VALID_MCQ_BACK, VALID_MCQ_OPTIONS));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMcqCard(VALID_MCQ_FRONT,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                (String) null, VALID_MCQ_OPTIONS));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMcqCard(VALID_MCQ_FRONT,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                VALID_MCQ_BACK, (List\u003cString\u003e) null));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parseMcqCard_invalidValue_throwsIllegalValueException() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMcqCard(VALID_MCQ_FRONT,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                INVALID_MCQ_BACK_INT, VALID_MCQ_OPTIONS));"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMcqCard(VALID_MCQ_FRONT,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                INVALID_MCQ_BACK_VALUE, VALID_MCQ_OPTIONS));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseMcqCard_validValue_returnsMcqCard() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        McqCard expectedMcqCard \u003d new McqCard(VALID_MCQ_FRONT, VALID_MCQ_BACK, VALID_MCQ_OPTIONS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedMcqCard, ParserUtil.parseMcqCard(VALID_MCQ_FRONT, VALID_MCQ_BACK, VALID_MCQ_OPTIONS));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseFillBlanksCard_null_throwsNullPointerException() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFillBlanksCard(null,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                VALID_FILLBLANKS_BACK));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFillBlanksCard(VALID_FILLBLANKS_FRONT,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                null));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseFillBlanksCard_invalidValue_throwsIllegalValueException() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseFillBlanksCard(VALID_FILLBLANKS_FRONT,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                INVALID_FILLBLANKS_BACK_ARGUMENTS));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void parseFillBlanksCard_validValue_returnsMcqCard() throws Exception {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        FillBlanksCard expectedFillBlanksCard \u003d new FillBlanksCard(VALID_FILLBLANKS_FRONT, VALID_FILLBLANKS_BACK);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedFillBlanksCard, ParserUtil.parseFillBlanksCard(VALID_FILLBLANKS_FRONT,"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                VALID_FILLBLANKS_BACK));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parseFront_null_throwsNullPointerException() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFront((Optional\u003cString\u003e) null));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void parseFront_invalidValue_throwsIllegalValueException () {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseFront(Optional.of(WHITESPACE)));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void parseFront_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseFront(Optional.empty()).isPresent());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void parseFront_validValueWithoutWhitespace_returnsFront() throws Exception {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(VALID_FRONT), ParserUtil.parseFront(Optional.of(VALID_FRONT)));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void parseBack_null_throwsNullPointerException() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBack((Optional\u003cString\u003e) null));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseBack_invalidValue_throwsIllegalValueException() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseBack(Optional.of(WHITESPACE)));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseBack_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseBack(Optional.empty()).isPresent());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void parseBack_validValueWithoutWhitespace_returnsFront() throws Exception {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(VALID_BACK), ParserUtil.parseBack(Optional.of(VALID_BACK)));"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void parseOptions_null_throwsNullPointerException() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOptions((List\u003cString\u003e) null));"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public void parseOptions_invalidValue_throwsIllegalValueException() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseOptions(Arrays.asList(WHITESPACE,"},{"lineNumber":238,"author":{"gitID":"-"},"content":"                WHITESPACE, WHITESPACE)));"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public void parseOptions_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseOptions(Arrays.asList()).isPresent());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parseOptions_validValueWithoutWhitespace_returnsFront() throws Exception {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(VALID_MCQ_OPTIONS), ParserUtil.parseOptions(VALID_MCQ_OPTIONS));"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"yong-jie"},"content":"    //@@author yong-jie"},{"lineNumber":252,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"yong-jie"},"content":"    public void parseTheme_incorrectString_throwsIllegalValueException() throws Exception {"},{"lineNumber":254,"author":{"gitID":"yong-jie"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":255,"author":{"gitID":"yong-jie"},"content":"        ParserUtil.parseTheme(Optional.of(INVALID_THEME));"},{"lineNumber":256,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":258,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":259,"author":{"gitID":"yong-jie"},"content":"    public void parseTheme_correctString_returnsIndex() throws Exception {"},{"lineNumber":260,"author":{"gitID":"yong-jie"},"content":"        Integer result \u003d ParserUtil.parseTheme(Optional.of(VALID_THEME));"},{"lineNumber":261,"author":{"gitID":"yong-jie"},"content":"        assertEquals((Integer) 0, result);"},{"lineNumber":262,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":13,"-":250}},{"path":"src/test/java/seedu/flashy/logic/parser/ScheduleCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_0DAY_OF_MONTH;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_29FEBRUARY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_30FEBRUARY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_31APRIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_32DAY_OF_MONTH;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_32MARCH;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.LIST_DAY_MONTH_YEAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.LIST_PREFIX_RUBBISH;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.LIST_VALID_DAY_MONTH_YEAR;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.ParserUtil.MESSAGE_INVALID_NUMBER;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.flashy.model.card.Schedule.MESSAGE_DAY_CONSTRAINTS;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.DateStringPermutationBuilder.preparePowerSetDateTime;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.DateStringPermutationBuilder.preparePowerSetString;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.time.DateTimeException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ScheduleCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"public class ScheduleCommandParserTest {"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":"    private LocalDateTime todaysDate;"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"        todaysDate \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"    public void parse_allFieldsNotPresentCard_success() {"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE, new ScheduleCommand(todaysDate));"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"    public void parse_allFieldsEmptyPermutation_success() {"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"        String[] powerSetString \u003d preparePowerSetString(LIST_DAY_MONTH_YEAR, true);"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"        for (String each : powerSetString) {"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"            assertParseSuccess(parser, each, new ScheduleCommand(todaysDate));"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"    public void parse_allFieldsValidPermutation_success() {"},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"        String[] powerSetString \u003d preparePowerSetString(LIST_DAY_MONTH_YEAR, true);"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"        LocalDateTime[] powerSetDateTime \u003d preparePowerSetDateTime(LIST_VALID_DAY_MONTH_YEAR);"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":"        for (int i \u003d 0; i \u003c powerSetString.length; i++) {"},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":"            assertParseSuccess(parser, powerSetString[i], new ScheduleCommand(powerSetDateTime[i]));"},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":"    public void parse_invalidFields_failure() {"},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":"        String[] powerSetString \u003d preparePowerSetString(LIST_PREFIX_RUBBISH, true);"},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d MESSAGE_INVALID_NUMBER;"},{"lineNumber":67,"author":{"gitID":"pukipuki"},"content":"        for (String each : powerSetString) {"},{"lineNumber":68,"author":{"gitID":"pukipuki"},"content":"            if (each.equals(\"\")) {"},{"lineNumber":69,"author":{"gitID":"pukipuki"},"content":"                continue;"},{"lineNumber":70,"author":{"gitID":"pukipuki"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"pukipuki"},"content":"            assertParseFailure(parser, each, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":75,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"pukipuki"},"content":"    public void parse_february29_failure() {"},{"lineNumber":77,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"pukipuki"},"content":"            int year \u003d LocalDate.now().getYear();"},{"lineNumber":79,"author":{"gitID":"pukipuki"},"content":"            LocalDate date \u003d LocalDate.of(year, 2, 29);"},{"lineNumber":80,"author":{"gitID":"pukipuki"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":81,"author":{"gitID":"pukipuki"},"content":"            String expectedMessage \u003d dte.getMessage();"},{"lineNumber":82,"author":{"gitID":"pukipuki"},"content":"            assertParseFailure(parser, INVALID_29FEBRUARY, expectedMessage);"},{"lineNumber":83,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":86,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"pukipuki"},"content":"    public void parse_february30_failure() {"},{"lineNumber":88,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"pukipuki"},"content":"            int year \u003d LocalDate.now().getYear();"},{"lineNumber":90,"author":{"gitID":"pukipuki"},"content":"            LocalDate date \u003d LocalDate.of(year, 2, 30);"},{"lineNumber":91,"author":{"gitID":"pukipuki"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":92,"author":{"gitID":"pukipuki"},"content":"            String expectedMessage \u003d dte.getMessage();"},{"lineNumber":93,"author":{"gitID":"pukipuki"},"content":"            assertParseFailure(parser, INVALID_30FEBRUARY, expectedMessage);"},{"lineNumber":94,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":97,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"pukipuki"},"content":"    public void parse_march32_failure() {"},{"lineNumber":99,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d MESSAGE_DAY_CONSTRAINTS;"},{"lineNumber":100,"author":{"gitID":"pukipuki"},"content":"        assertParseFailure(parser, INVALID_32MARCH, expectedMessage);"},{"lineNumber":101,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":103,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"pukipuki"},"content":"    public void parse_april31_failure() {"},{"lineNumber":105,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"pukipuki"},"content":"            int year \u003d LocalDate.now().getYear();"},{"lineNumber":107,"author":{"gitID":"pukipuki"},"content":"            LocalDate date \u003d LocalDate.of(year, 4, 31);"},{"lineNumber":108,"author":{"gitID":"pukipuki"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":109,"author":{"gitID":"pukipuki"},"content":"            String expectedMessage \u003d dte.getMessage();"},{"lineNumber":110,"author":{"gitID":"pukipuki"},"content":"            assertParseFailure(parser, INVALID_31APRIL, expectedMessage);"},{"lineNumber":111,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":114,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"pukipuki"},"content":"    public void parse_dayOfMonth32_failure() {"},{"lineNumber":116,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d MESSAGE_DAY_CONSTRAINTS;"},{"lineNumber":117,"author":{"gitID":"pukipuki"},"content":"        assertParseFailure(parser, INVALID_32DAY_OF_MONTH, expectedMessage);"},{"lineNumber":118,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":120,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"pukipuki"},"content":"    public void parse_dayOfMonth0_failure() {"},{"lineNumber":122,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d MESSAGE_DAY_CONSTRAINTS;"},{"lineNumber":123,"author":{"gitID":"pukipuki"},"content":"        assertParseFailure(parser, INVALID_0DAY_OF_MONTH, expectedMessage);"},{"lineNumber":124,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":97,"-":28}},{"path":"src/test/java/seedu/flashy/logic/parser/AnswerCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_CONFIDENCE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.model.card.Schedule.VALID_CONFIDENCE_LEVEL_0;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.model.card.Schedule.VALID_CONFIDENCE_LEVEL_1;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.model.card.Schedule.VALID_CONFIDENCE_LEVEL_2;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.AnswerCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":"public class AnswerCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":"    private AnswerCommandParser parser \u003d new AnswerCommandParser();"},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"    public void parse_nonsenseArguments_throwIllegalArgumentException() throws Exception {"},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_CONFIDENCE"},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"            + PREFIX_CONFIDENCE, new AnswerCommand(0));"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":"    public void parse_outOfRangeMessage_failure() {"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"        assertParseFailure(parser, \" \" + PREFIX_CONFIDENCE"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"            + \"99\", \"Confidence Levels should only be 0, 1 or 2\");"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"    public void parse_confidenceLevel_success() {"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_CONFIDENCE"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"            + VALID_CONFIDENCE_LEVEL_0, new AnswerCommand(0));"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_CONFIDENCE"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"            + VALID_CONFIDENCE_LEVEL_1, new AnswerCommand(1));"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_CONFIDENCE"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"            + VALID_CONFIDENCE_LEVEL_2, new AnswerCommand(2));"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":30,"-":15}},{"path":"src/test/java/seedu/flashy/logic/parser/AddCardCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.BACK_DESC_CS2103T_CARD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.BACK_DESC_MCQ_CARD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_CS2103T_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_MCQ_CARD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_BACK_CARD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_FRONT_CARD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_MCQ_CARD_BACK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_MCQ_CARD_OPTION;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.OPTION_1_DESC_MCQ_CARD;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.OPTION_2_DESC_MCQ_CARD;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.OPTION_3_DESC_MCQ_CARD;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_BACK_CS2103T_CARD;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_FRONT_CS2103T_CARD;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_MCQ_BACK;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_MCQ_FRONT;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_MCQ_OPTION_1;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_MCQ_OPTION_2;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_MCQ_OPTION_3;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_NAME_COMSCI;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_NAME_ENGLISH;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.AddCardCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.CommandTestUtil;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.CardBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.McqCardBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class AddCardCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private AddCardCommandParser parser \u003d new AddCardCommandParser();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"    //@@author shawnclq"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"    public void parse_allFieldsPresentCard_success() {"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"        Card expectedCard \u003d new CardBuilder().withFront(VALID_FRONT_CS2103T_CARD)"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"                .withBack(VALID_BACK_CS2103T_CARD).build();"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"        McqCard expectedMcqCard \u003d (McqCard) new McqCardBuilder().resetOptions()"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"                .addOption(VALID_MCQ_OPTION_1).addOption(VALID_MCQ_OPTION_2).addOption(VALID_MCQ_OPTION_3)"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"                .withFront(VALID_MCQ_FRONT)"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"                .withBack(VALID_MCQ_BACK).build();"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"        // whitespace only preamble"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FRONT_DESC_CS2103T_CARD"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"                        + CommandTestUtil.BACK_DESC_CS2103T_CARD,"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"                new AddCardCommand(expectedCard));"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FRONT_DESC_MCQ_CARD + BACK_DESC_MCQ_CARD"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"                + OPTION_1_DESC_MCQ_CARD + OPTION_2_DESC_MCQ_CARD + OPTION_3_DESC_MCQ_CARD,"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"                new AddCardCommand(expectedMcqCard));"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":71,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"jethrokuan"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":73,"author":{"gitID":"jethrokuan"},"content":"        Card expectedCard \u003d new CardBuilder()"},{"lineNumber":74,"author":{"gitID":"jethrokuan"},"content":"                .withFront(VALID_FRONT_CS2103T_CARD)"},{"lineNumber":75,"author":{"gitID":"jethrokuan"},"content":"                .withBack(VALID_BACK_CS2103T_CARD)"},{"lineNumber":76,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":77,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":78,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cTag\u003e expectedTags \u003d new HashSet\u003c\u003e(Arrays.asList("},{"lineNumber":79,"author":{"gitID":"jethrokuan"},"content":"                new Tag(new Name(VALID_NAME_ENGLISH)),"},{"lineNumber":80,"author":{"gitID":"jethrokuan"},"content":"                new Tag(new Name(VALID_NAME_COMSCI)"},{"lineNumber":81,"author":{"gitID":"jethrokuan"},"content":"        )));"},{"lineNumber":82,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":83,"author":{"gitID":"jethrokuan"},"content":"        // whitespace only preamble"},{"lineNumber":84,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FRONT_DESC_CS2103T_CARD + BACK_DESC_CS2103T_CARD,"},{"lineNumber":85,"author":{"gitID":"jethrokuan"},"content":"                new AddCardCommand(expectedCard));"},{"lineNumber":86,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":87,"author":{"gitID":"jethrokuan"},"content":"        // with tags"},{"lineNumber":88,"author":{"gitID":"jethrokuan"},"content":"        String tagString \u003d \" \" + PREFIX_TAG + VALID_NAME_ENGLISH + \" \" + PREFIX_TAG + VALID_NAME_COMSCI;"},{"lineNumber":89,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FRONT_DESC_CS2103T_CARD + BACK_DESC_CS2103T_CARD"},{"lineNumber":90,"author":{"gitID":"jethrokuan"},"content":"                        + tagString,"},{"lineNumber":91,"author":{"gitID":"jethrokuan"},"content":"                new AddCardCommand(expectedCard, Optional.of(expectedTags)));"},{"lineNumber":92,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":96,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"jethrokuan"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":98,"author":{"gitID":"jethrokuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE);"},{"lineNumber":99,"author":{"gitID":"jethrokuan"},"content":"        // missing name prefix"},{"lineNumber":100,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, VALID_FRONT_CS2103T_CARD,"},{"lineNumber":101,"author":{"gitID":"jethrokuan"},"content":"                expectedMessage);"},{"lineNumber":102,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":103,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":104,"author":{"gitID":"jethrokuan"},"content":"        // all prefixes missing"},{"lineNumber":105,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, VALID_MCQ_BACK,"},{"lineNumber":106,"author":{"gitID":"jethrokuan"},"content":"                expectedMessage);"},{"lineNumber":107,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":108,"author":{"gitID":"jethrokuan"},"content":"        // missing front prefix"},{"lineNumber":109,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, FRONT_DESC_CS2103T_CARD,"},{"lineNumber":110,"author":{"gitID":"jethrokuan"},"content":"                expectedMessage);"},{"lineNumber":111,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":112,"author":{"gitID":"jethrokuan"},"content":"        // missing back prefix"},{"lineNumber":113,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, BACK_DESC_CS2103T_CARD,"},{"lineNumber":114,"author":{"gitID":"jethrokuan"},"content":"                expectedMessage);"},{"lineNumber":115,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"Shawnclq"},"content":"    //@@author shawnclq"},{"lineNumber":119,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"Shawnclq"},"content":"    public void parse_invalidValueCard_failure() {"},{"lineNumber":121,"author":{"gitID":"Shawnclq"},"content":"        // invalid front"},{"lineNumber":122,"author":{"gitID":"Shawnclq"},"content":"        assertParseFailure(parser, INVALID_FRONT_CARD + CommandTestUtil.BACK_DESC_CS2103T_CARD,"},{"lineNumber":123,"author":{"gitID":"Shawnclq"},"content":"                Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":125,"author":{"gitID":"Shawnclq"},"content":"        // invalid back"},{"lineNumber":126,"author":{"gitID":"Shawnclq"},"content":"        assertParseFailure(parser, FRONT_DESC_CS2103T_CARD + INVALID_BACK_CARD,"},{"lineNumber":127,"author":{"gitID":"Shawnclq"},"content":"                Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":129,"author":{"gitID":"Shawnclq"},"content":"        // non-empty preamble"},{"lineNumber":130,"author":{"gitID":"Shawnclq"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_FRONT_CS2103T_CARD"},{"lineNumber":131,"author":{"gitID":"Shawnclq"},"content":"                        + CommandTestUtil.BACK_DESC_CS2103T_CARD,"},{"lineNumber":132,"author":{"gitID":"Shawnclq"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"},{"lineNumber":133,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":134,"author":{"gitID":"Shawnclq"},"content":"        // non-empty preamble"},{"lineNumber":135,"author":{"gitID":"Shawnclq"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + FRONT_DESC_CS2103T_CARD + VALID_BACK_CS2103T_CARD,"},{"lineNumber":136,"author":{"gitID":"Shawnclq"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":138,"author":{"gitID":"Shawnclq"},"content":"        // invalid front for mcq cards"},{"lineNumber":139,"author":{"gitID":"Shawnclq"},"content":"        assertParseFailure(parser, INVALID_FRONT_CARD + OPTION_1_DESC_MCQ_CARD + OPTION_2_DESC_MCQ_CARD"},{"lineNumber":140,"author":{"gitID":"Shawnclq"},"content":"                + OPTION_3_DESC_MCQ_CARD + CommandTestUtil.BACK_DESC_CS2103T_CARD, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":142,"author":{"gitID":"Shawnclq"},"content":"        // invalid back for mcq cards"},{"lineNumber":143,"author":{"gitID":"Shawnclq"},"content":"        assertParseFailure(parser, FRONT_DESC_CS2103T_CARD + OPTION_1_DESC_MCQ_CARD + OPTION_2_DESC_MCQ_CARD"},{"lineNumber":144,"author":{"gitID":"Shawnclq"},"content":"                + OPTION_3_DESC_MCQ_CARD + INVALID_BACK_CARD, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":146,"author":{"gitID":"Shawnclq"},"content":"        // invalid options for mcq cards"},{"lineNumber":147,"author":{"gitID":"Shawnclq"},"content":"        assertParseFailure(parser, FRONT_DESC_MCQ_CARD + INVALID_MCQ_CARD_OPTION + OPTION_2_DESC_MCQ_CARD"},{"lineNumber":148,"author":{"gitID":"Shawnclq"},"content":"                + OPTION_3_DESC_MCQ_CARD + BACK_DESC_MCQ_CARD, McqCard.MESSAGE_MCQ_CARD_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":150,"author":{"gitID":"Shawnclq"},"content":"        // invalid back for mcq cards"},{"lineNumber":151,"author":{"gitID":"Shawnclq"},"content":"        assertParseFailure(parser, FRONT_DESC_MCQ_CARD + OPTION_1_DESC_MCQ_CARD + OPTION_2_DESC_MCQ_CARD"},{"lineNumber":152,"author":{"gitID":"Shawnclq"},"content":"                + OPTION_3_DESC_MCQ_CARD + INVALID_MCQ_CARD_BACK, McqCard.MESSAGE_MCQ_CARD_ANSWER_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"Shawnclq"},"content":"    //@@author"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":157,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"jethrokuan"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":159,"author":{"gitID":"jethrokuan"},"content":"        // invalid front"},{"lineNumber":160,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, INVALID_FRONT_CARD + BACK_DESC_CS2103T_CARD, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":162,"author":{"gitID":"jethrokuan"},"content":"        // invalid back"},{"lineNumber":163,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, FRONT_DESC_CS2103T_CARD + INVALID_BACK_CARD, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":165,"author":{"gitID":"jethrokuan"},"content":"        // non-empty preamble"},{"lineNumber":166,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + FRONT_DESC_CS2103T_CARD + BACK_DESC_CS2103T_CARD,"},{"lineNumber":167,"author":{"gitID":"jethrokuan"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Shawnclq":57,"jethrokuan":60,"-":53}},{"path":"src/test/java/seedu/flashy/logic/commands/ScheduleCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCardBank.getTypicalCardBank;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":"public class ScheduleCommandTest {"},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"    private Model model;"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":"    private LocalDateTime todaysDate;"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"        model \u003d new ModelManager(getTypicalCardBank(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"        todaysDate \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"    public void execute_noCardSelectedException_throwsCommandException() throws Exception {"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"        ScheduleCommand scheduleCommand \u003d prepareCommand(todaysDate);"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"        scheduleCommand.executeUndoableCommand();"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"    public void execute_scheduleUpdate_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"        model.showDueCards(LocalDate.now().atStartOfDay());"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"        ObservableList\u003cCard\u003e observableList \u003d model.getFilteredCardList();"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"        Card selectedCard \u003d observableList.get(0);"},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"        model.setSelectedCard(selectedCard);"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"        LocalDateTime expectedDate \u003d todaysDate.plusYears(1L);"},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"        ScheduleCommand scheduleCommand \u003d prepareCommand(expectedDate);"},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"        scheduleCommand.executeUndoableCommand();"},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"        LocalDateTime actualDate \u003d selectedCard.getSchedule().getNextReview();"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"        assertTrue(actualDate.equals(todaysDate.plusYears(1L)));"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"    public void equals() {"},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":"        ScheduleCommand scheduleCommandOne \u003d new ScheduleCommand(todaysDate);"},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":"        ScheduleCommand scheduleCommandTwo \u003d new ScheduleCommand(todaysDate);"},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":"        // same object -\u003e returns true"},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"        assertTrue(scheduleCommandOne.equals(scheduleCommandOne));"},{"lineNumber":67,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":68,"author":{"gitID":"pukipuki"},"content":"        // different object, same value -\u003e returns true"},{"lineNumber":69,"author":{"gitID":"pukipuki"},"content":"        assertTrue(scheduleCommandOne.equals(scheduleCommandTwo));"},{"lineNumber":70,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":71,"author":{"gitID":"pukipuki"},"content":"        // different object, same value -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"pukipuki"},"content":"        assertTrue(scheduleCommandTwo.equals(scheduleCommandOne));"},{"lineNumber":73,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":74,"author":{"gitID":"pukipuki"},"content":"        // different object, same values -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"pukipuki"},"content":"        ScheduleCommand scheduleCommandOneCopy \u003d new ScheduleCommand(todaysDate);"},{"lineNumber":76,"author":{"gitID":"pukipuki"},"content":"        assertTrue(scheduleCommandOne.equals(scheduleCommandOneCopy));"},{"lineNumber":77,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":78,"author":{"gitID":"pukipuki"},"content":"        // different types -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"pukipuki"},"content":"        assertFalse(scheduleCommandOne.equals(1));"},{"lineNumber":80,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":81,"author":{"gitID":"pukipuki"},"content":"        // null -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"pukipuki"},"content":"        assertFalse(scheduleCommandOne.equals(null));"},{"lineNumber":83,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":84,"author":{"gitID":"pukipuki"},"content":"        ScheduleCommand scheduleCommandDifferent \u003d new ScheduleCommand(todaysDate.plusYears(1L));"},{"lineNumber":85,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":86,"author":{"gitID":"pukipuki"},"content":"        // different card -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"pukipuki"},"content":"        assertFalse(scheduleCommandOne.equals(scheduleCommandDifferent));"},{"lineNumber":88,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":90,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"pukipuki"},"content":"     * Returns a {@code ScheduleCommand} with parameters {@code date}."},{"lineNumber":92,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"pukipuki"},"content":"    private ScheduleCommand prepareCommand(LocalDateTime date) {"},{"lineNumber":94,"author":{"gitID":"pukipuki"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(date);"},{"lineNumber":95,"author":{"gitID":"pukipuki"},"content":"        scheduleCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"pukipuki"},"content":"        return scheduleCommand;"},{"lineNumber":97,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":99,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":75,"-":24}},{"path":"src/test/java/seedu/flashy/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.showTagAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCardBank.getTypicalCardBank;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.JumpToTagRequestEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":"    private ListCommand listCommand;"},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"        model \u003d new ModelManager(getTypicalCardBank(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"        expectedModel \u003d new ModelManager(model.getCardBank(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":"        listCommand \u003d new ListCommand(false);"},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"        showTagAtIndex(model, INDEX_FIRST_TAG); // filter tags"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":"        EventsCenter.getInstance().post(new JumpToTagRequestEvent(INDEX_FIRST_TAG)); //filter cards"},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":29,"-":18}},{"path":"src/test/java/seedu/flashy/logic/parser/EditCardCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.BACK_DESC_CS2103T_CARD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_CS2101_CARD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.FRONT_DESC_CS2103T_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_ADD_TAG_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_FRONT_CARD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.INVALID_REMOVE_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_BACK_CS2103T_CARD;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_FRONT_CS2101_CARD;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_FRONT_CS2103T_CARD;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_ADD_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_CARD;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.BIOLOGY_TAG;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.COMSCI_TAG;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.ENGLISH_TAG;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.MATHEMATICS_TAG;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCardCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.EditCardDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class EditCardCommandParserTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private EditCardCommandParser parser \u003d new EditCardCommandParser();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":"    public void parser_allFieldsPresent_success() {"},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor expected \u003d new EditCardDescriptorBuilder()"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":"                .withFront(VALID_FRONT_CS2103T_CARD)"},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"                .withBack(VALID_BACK_CS2103T_CARD)"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor expectedWithAddedTags \u003d new EditCardDescriptorBuilder(expected)"},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToAdd(new HashSet\u003c\u003e(Arrays.asList(ENGLISH_TAG, COMSCI_TAG)))"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":53,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor expectedWithRemovedTags \u003d new EditCardDescriptorBuilder(expected)"},{"lineNumber":54,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToRemove(new HashSet\u003c\u003e(Arrays.asList(BIOLOGY_TAG, MATHEMATICS_TAG)))"},{"lineNumber":55,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":56,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":57,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor expectedWithTags \u003d new EditCardDescriptorBuilder(expected)"},{"lineNumber":58,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToAdd(new HashSet\u003c\u003e(Arrays.asList(ENGLISH_TAG, COMSCI_TAG)))"},{"lineNumber":59,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToRemove(new HashSet\u003c\u003e(Arrays.asList(BIOLOGY_TAG, MATHEMATICS_TAG)))"},{"lineNumber":60,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":61,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":62,"author":{"gitID":"jethrokuan"},"content":"        // without tags"},{"lineNumber":63,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \"1\" + FRONT_DESC_CS2103T_CARD"},{"lineNumber":64,"author":{"gitID":"jethrokuan"},"content":"                        + BACK_DESC_CS2103T_CARD,"},{"lineNumber":65,"author":{"gitID":"jethrokuan"},"content":"                new EditCardCommand(INDEX_FIRST_CARD, expected));"},{"lineNumber":66,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":67,"author":{"gitID":"jethrokuan"},"content":"        // with add tags"},{"lineNumber":68,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \"1\" + FRONT_DESC_CS2103T_CARD"},{"lineNumber":69,"author":{"gitID":"jethrokuan"},"content":"                        + BACK_DESC_CS2103T_CARD"},{"lineNumber":70,"author":{"gitID":"jethrokuan"},"content":"                        + \" \" + PREFIX_ADD_TAG + ENGLISH_TAG.getName()"},{"lineNumber":71,"author":{"gitID":"jethrokuan"},"content":"                        + \" \" +  PREFIX_ADD_TAG + COMSCI_TAG.getName(),"},{"lineNumber":72,"author":{"gitID":"jethrokuan"},"content":"                new EditCardCommand(INDEX_FIRST_CARD, expectedWithAddedTags));"},{"lineNumber":73,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":74,"author":{"gitID":"jethrokuan"},"content":"        // with remove tags"},{"lineNumber":75,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \"1\" + FRONT_DESC_CS2103T_CARD"},{"lineNumber":76,"author":{"gitID":"jethrokuan"},"content":"                        + BACK_DESC_CS2103T_CARD"},{"lineNumber":77,"author":{"gitID":"jethrokuan"},"content":"                        + \" \" + PREFIX_REMOVE_TAG + BIOLOGY_TAG.getName()"},{"lineNumber":78,"author":{"gitID":"jethrokuan"},"content":"                        + \" \" +  PREFIX_REMOVE_TAG + MATHEMATICS_TAG.getName(),"},{"lineNumber":79,"author":{"gitID":"jethrokuan"},"content":"                new EditCardCommand(INDEX_FIRST_CARD, expectedWithRemovedTags));"},{"lineNumber":80,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":81,"author":{"gitID":"jethrokuan"},"content":"        // with both add and remove tags"},{"lineNumber":82,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \"1\" + FRONT_DESC_CS2103T_CARD"},{"lineNumber":83,"author":{"gitID":"jethrokuan"},"content":"                        + BACK_DESC_CS2103T_CARD"},{"lineNumber":84,"author":{"gitID":"jethrokuan"},"content":"                        + \" \" + PREFIX_ADD_TAG + ENGLISH_TAG.getName()"},{"lineNumber":85,"author":{"gitID":"jethrokuan"},"content":"                        + \" \" +  PREFIX_ADD_TAG + COMSCI_TAG.getName()"},{"lineNumber":86,"author":{"gitID":"jethrokuan"},"content":"                        + \" \" + PREFIX_REMOVE_TAG + BIOLOGY_TAG.getName()"},{"lineNumber":87,"author":{"gitID":"jethrokuan"},"content":"                        + \" \" +  PREFIX_REMOVE_TAG + MATHEMATICS_TAG.getName(),"},{"lineNumber":88,"author":{"gitID":"jethrokuan"},"content":"                new EditCardCommand(INDEX_FIRST_CARD, expectedWithTags));"},{"lineNumber":89,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":90,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":92,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"jethrokuan"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":94,"author":{"gitID":"jethrokuan"},"content":"        // invalid front"},{"lineNumber":95,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"1\" + INVALID_FRONT_CARD, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":97,"author":{"gitID":"jethrokuan"},"content":"        // invalid back"},{"lineNumber":98,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"1\" + INVALID_FRONT_CARD, Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":100,"author":{"gitID":"jethrokuan"},"content":"        // invalid addTag"},{"lineNumber":101,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADD_TAG_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":103,"author":{"gitID":"jethrokuan"},"content":"        // invalid removeTag"},{"lineNumber":104,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"1\" + INVALID_REMOVE_TAG_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":107,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"jethrokuan"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":109,"author":{"gitID":"jethrokuan"},"content":"        // negative index"},{"lineNumber":110,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"-5\" + FRONT_DESC_CS2103T_CARD, MESSAGE_INVALID_FORMAT);"},{"lineNumber":111,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":112,"author":{"gitID":"jethrokuan"},"content":"        // zero index"},{"lineNumber":113,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"0\" + FRONT_DESC_CS2103T_CARD, MESSAGE_INVALID_FORMAT);"},{"lineNumber":114,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":115,"author":{"gitID":"jethrokuan"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":116,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":117,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":118,"author":{"gitID":"jethrokuan"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":119,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":120,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":122,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"jethrokuan"},"content":"    public void parse_noFieldSpecified_failure() {"},{"lineNumber":124,"author":{"gitID":"jethrokuan"},"content":"        assertParseFailure(parser, \"1\", EditCardCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":125,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":127,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"jethrokuan"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":129,"author":{"gitID":"jethrokuan"},"content":"        Index targetIndex \u003d INDEX_FIRST_CARD;"},{"lineNumber":130,"author":{"gitID":"jethrokuan"},"content":"        String userInput \u003d targetIndex.getOneBased() + FRONT_DESC_CS2103T_CARD;"},{"lineNumber":131,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":132,"author":{"gitID":"jethrokuan"},"content":"                .withFront(VALID_FRONT_CS2103T_CARD).build();"},{"lineNumber":133,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"},{"lineNumber":134,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":135,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":137,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"jethrokuan"},"content":"    public void parser_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":139,"author":{"gitID":"jethrokuan"},"content":"        Index targetIndex \u003d INDEX_FIRST_CARD;"},{"lineNumber":140,"author":{"gitID":"jethrokuan"},"content":"        String userInput \u003d targetIndex.getOneBased() + FRONT_DESC_CS2103T_CARD + FRONT_DESC_CS2101_CARD;"},{"lineNumber":141,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":142,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":143,"author":{"gitID":"jethrokuan"},"content":"                .withFront(VALID_FRONT_CS2101_CARD)"},{"lineNumber":144,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":145,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":146,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand expectedCommand \u003d new EditCardCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":148,"author":{"gitID":"jethrokuan"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jethrokuan":110,"-":41}},{"path":"src/test/java/seedu/flashy/logic/commands/ShowDueCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCardBank.getTypicalCardBank;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":"public class ShowDueCommandTest {"},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"    private LocalDateTime todaysDate;"},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"        model \u003d new ModelManager(getTypicalCardBank(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"        todaysDate \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"    public void execute_correctMessage_success() {"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"        ShowDueCommand showDueCommand \u003d prepareCommand(todaysDate);"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d String.format(ShowDueCommand.MESSAGE_SUCCESS,"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"            todaysDate.toLocalDate().toString(), \"\");"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"        assertCommandSuccess(showDueCommand, model, expectedMessage, model);"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"    public void execute_listsCorrectly_success() {"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"        ShowDueCommand showDueCommand \u003d prepareCommand(todaysDate);"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"        ObservableList\u003cCard\u003e list \u003d model.getFilteredCardList();"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"        showDueCommand.execute();"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"        assert(!list.isEmpty());"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"        model.showAllCards();"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"        showDueCommand \u003d prepareCommand(todaysDate.minusYears(1L));"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"        showDueCommand.execute();"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"        assert(list.isEmpty());"},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"        model.showAllCards();"},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"        showDueCommand \u003d prepareCommand(todaysDate.plusYears(1L));"},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"        showDueCommand.execute();"},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"        assert(!list.isEmpty());"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":"     * Returns a {@code ShowDueCommand} with parameters {@code date}."},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":"    private ShowDueCommand prepareCommand(LocalDateTime date) {"},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":"        ShowDueCommand showDueCommand \u003d new ShowDueCommand(date);"},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":"        showDueCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":"        return showDueCommand;"},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":46,"-":20}},{"path":"src/test/java/seedu/flashy/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.ui.testutil.EventsCollectorRule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"    public void execute_changeTheme_success() {"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"        CommandResult result \u003d new ChangeThemeCommand(0).execute();"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"        assertEquals(ChangeThemeCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeThemeRequestEvent);"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":13,"-":11}},{"path":"src/test/java/seedu/flashy/logic/commands/AnswerCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCardBank.getTypicalCardBank;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Schedule;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":" * Contains integration tests (interaction with the Model) for {@code AnswerCommand}."},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":" */"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"public class AnswerCommandTest {"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"    private LocalDateTime todaysDate;"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"    private AnswerCommand answerCommand;"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"        model \u003d new ModelManager(getTypicalCardBank(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"        todaysDate \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"        answerCommand \u003d new AnswerCommand(0);"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"        answerCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"    // error states"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"    public void execute_noCardSelected_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"        answerCommand.executeUndoableCommand();"},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"    public void execute_answerCommand_noCardSelected() {"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":"        assertCommandFailure(answerCommand, model, AnswerCommand.MESSAGE_CARD_NOT_SELECTED);"},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":"    public void execute_underRange_failure() throws Exception {"},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":"        commandRunner(-1);"},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"pukipuki"},"content":"    public void execute_overRange_failure() throws Exception {"},{"lineNumber":68,"author":{"gitID":"pukipuki"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":69,"author":{"gitID":"pukipuki"},"content":"        commandRunner(3);"},{"lineNumber":70,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":72,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"pukipuki"},"content":"    public void execute_answerCommand_success() {"},{"lineNumber":74,"author":{"gitID":"pukipuki"},"content":"        for (int confidenceLevel \u003d Schedule.VALID_MIN_CONFIDENCE_LEVEL;"},{"lineNumber":75,"author":{"gitID":"pukipuki"},"content":"             confidenceLevel \u003c\u003d Schedule.VALID_MAX_CONFIDENCE_LEVEL;"},{"lineNumber":76,"author":{"gitID":"pukipuki"},"content":"             confidenceLevel++) {"},{"lineNumber":77,"author":{"gitID":"pukipuki"},"content":"            commandRunner(confidenceLevel);"},{"lineNumber":78,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":81,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":82,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"pukipuki"},"content":"    public void execute_answer0_checkFilterList() {"},{"lineNumber":84,"author":{"gitID":"pukipuki"},"content":"        answerRunner(0);"},{"lineNumber":85,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":87,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"pukipuki"},"content":"    public void execute_answer1_checkFilterList() {"},{"lineNumber":89,"author":{"gitID":"pukipuki"},"content":"        answerRunner(1);"},{"lineNumber":90,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":92,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"pukipuki"},"content":"    public void execute_answer2_checkFilterList() {"},{"lineNumber":94,"author":{"gitID":"pukipuki"},"content":"        answerRunner(2);"},{"lineNumber":95,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":97,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"pukipuki"},"content":"     * runs the test given a {@code confidenceLevel}"},{"lineNumber":99,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"pukipuki"},"content":"    private void answerRunner(int confidenceLevel) {"},{"lineNumber":101,"author":{"gitID":"pukipuki"},"content":"        model.showDueCards(todaysDate);"},{"lineNumber":102,"author":{"gitID":"pukipuki"},"content":"        ObservableList\u003cCard\u003e list \u003d model.getFilteredCardList();"},{"lineNumber":103,"author":{"gitID":"pukipuki"},"content":"        Card selectedCard \u003d list.get(0);"},{"lineNumber":104,"author":{"gitID":"pukipuki"},"content":"        int initialSize \u003d list.size();"},{"lineNumber":105,"author":{"gitID":"pukipuki"},"content":"        commandRunner(confidenceLevel);"},{"lineNumber":106,"author":{"gitID":"pukipuki"},"content":"        int finalSize \u003d list.size();"},{"lineNumber":107,"author":{"gitID":"pukipuki"},"content":"        if (confidenceLevel \u003c\u003d 1) {"},{"lineNumber":108,"author":{"gitID":"pukipuki"},"content":"            // should be same size"},{"lineNumber":109,"author":{"gitID":"pukipuki"},"content":"            assertEquals(initialSize, finalSize);"},{"lineNumber":110,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":111,"author":{"gitID":"pukipuki"},"content":"            // card should still be in list"},{"lineNumber":112,"author":{"gitID":"pukipuki"},"content":"            assert (list.contains(selectedCard));"},{"lineNumber":113,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":114,"author":{"gitID":"pukipuki"},"content":"            // card should be at last index"},{"lineNumber":115,"author":{"gitID":"pukipuki"},"content":"            assertEquals(list.size() - 1, list.indexOf(selectedCard));"},{"lineNumber":116,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":117,"author":{"gitID":"pukipuki"},"content":"            // should be smaller by 1"},{"lineNumber":118,"author":{"gitID":"pukipuki"},"content":"            assertEquals(initialSize - 1, finalSize);"},{"lineNumber":119,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":120,"author":{"gitID":"pukipuki"},"content":"            // card should not be in the list"},{"lineNumber":121,"author":{"gitID":"pukipuki"},"content":"            assertFalse(list.contains(selectedCard));"},{"lineNumber":122,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":125,"author":{"gitID":"pukipuki"},"content":"    private void assertFalse(boolean contains) {"},{"lineNumber":126,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":128,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"pukipuki"},"content":"     * Returns a {@code AnswerCommand} with parameters {@code date}."},{"lineNumber":130,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"pukipuki"},"content":"    private AnswerCommand prepareCommand(int confidenceLevel) {"},{"lineNumber":132,"author":{"gitID":"pukipuki"},"content":"        AnswerCommand answerCommand \u003d new AnswerCommand(confidenceLevel);"},{"lineNumber":133,"author":{"gitID":"pukipuki"},"content":"        answerCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":134,"author":{"gitID":"pukipuki"},"content":"        return answerCommand;"},{"lineNumber":135,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":137,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"pukipuki"},"content":"     * Runs the answer command, used very often."},{"lineNumber":139,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"pukipuki"},"content":"    private void commandRunner(int confidenceLevel) {"},{"lineNumber":141,"author":{"gitID":"pukipuki"},"content":"        model.showDueCards(LocalDate.now().atStartOfDay());"},{"lineNumber":142,"author":{"gitID":"pukipuki"},"content":"        AnswerCommand answerCommand \u003d prepareCommand(confidenceLevel);"},{"lineNumber":143,"author":{"gitID":"pukipuki"},"content":"        Card selectedCard \u003d model.getFilteredCardList().get(0);"},{"lineNumber":144,"author":{"gitID":"pukipuki"},"content":"        model.setSelectedCard(selectedCard);"},{"lineNumber":145,"author":{"gitID":"pukipuki"},"content":"        String expectedMessage \u003d AnswerCommand.MESSAGE_SUCCESS;"},{"lineNumber":146,"author":{"gitID":"pukipuki"},"content":"        assertCommandSuccess(answerCommand, model, expectedMessage, model);"},{"lineNumber":147,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":122,"-":26}},{"path":"src/test/java/seedu/flashy/storage/XmlAdaptedCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.MATHEMATICS_CARD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalFillBlanksCards.MATHEMATICS_FILLBLANKS_CARD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalMcqCards.MATHEMATICS_MCQ_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.UUID;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.FillBlanksCard;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.Assert;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":"public class XmlAdaptedCardTest {"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"    private static final String INVALID_FRONT \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"    private static final String INVALID_BACK \u003d \"\";"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"    private static final String INVALID_ID \u003d \"\";"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"    private static final String INVALID_BACK_FILLBLANKS \u003d \"equal\";"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"    private static final String VALID_FRONT \u003d \"what is 1+1?\";"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"    private static final String VALID_BACK \u003d \"2\";"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"    private static final String VALID_ID \u003d UUID.randomUUID().toString();"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_validCardDetails_returnsCard() throws Exception {"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(MATHEMATICS_CARD);"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"        assertEquals(card.toModelType(), MATHEMATICS_CARD);"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_validMcqCardDetails_returnsCard() throws Exception {"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(MATHEMATICS_MCQ_CARD);"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"        assertEquals(card.toModelType(), MATHEMATICS_MCQ_CARD);"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_validFillBlanksCardDetails_returnsCard() throws Exception {"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(MATHEMATICS_FILLBLANKS_CARD);"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"        assertEquals(card.toModelType(), MATHEMATICS_FILLBLANKS_CARD);"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_invalidId_throwsIllegalArgumentException() {"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(INVALID_ID, VALID_FRONT, VALID_BACK, null, Card.TYPE);"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalArgumentException.class, card::toModelType);"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_nullId_throwsIllegalValueException() {"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(null, VALID_FRONT, VALID_BACK, null, Card.TYPE);"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalValueException.class, card::toModelType);"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_invalidFront_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_ID, INVALID_FRONT, VALID_BACK, null, Card.TYPE);"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalValueException.class, card::toModelType);"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_nullFront_throwsIllegalValueException() {"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_ID, null, VALID_BACK, null, Card.TYPE);"},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalValueException.class, card::toModelType);"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_invalidBack_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_ID, VALID_FRONT, INVALID_BACK, null, Card.TYPE);"},{"lineNumber":76,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalValueException.class, card::toModelType);"},{"lineNumber":77,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":79,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_nullBack_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_ID, VALID_FRONT, null, null, Card.TYPE);"},{"lineNumber":82,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalValueException.class, card::toModelType);"},{"lineNumber":83,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":85,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_invalidMcqCard_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_ID, VALID_FRONT, VALID_BACK,"},{"lineNumber":88,"author":{"gitID":"Shawnclq"},"content":"                Arrays.asList(\"1\"), McqCard.TYPE);"},{"lineNumber":89,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalValueException.class, card::toModelType);"},{"lineNumber":90,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":92,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"Shawnclq"},"content":"    public void toModelType_invalidFillBlanksCard_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_ID, MATHEMATICS_FILLBLANKS_CARD.getFront(),"},{"lineNumber":95,"author":{"gitID":"Shawnclq"},"content":"                INVALID_BACK_FILLBLANKS, null, FillBlanksCard.TYPE);"},{"lineNumber":96,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalValueException.class, card::toModelType);"},{"lineNumber":97,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":99,"author":{"gitID":"Shawnclq"},"content":""}],"authorContributionMap":{"Shawnclq":81,"-":18}},{"path":"src/test/java/seedu/flashy/logic/commands/SelectCardCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCardBank.getTypicalCardBank;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_CARD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_SECOND_CARD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_THIRD_CARD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.JumpToCardRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.flashy.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.flashy.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":"public class SelectCardCommandTest {"},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":"    private Model model;"},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"        model \u003d new ModelManager(getTypicalCardBank(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"        Index lastCardIndex \u003d Index.fromOneBased(model.getFilteredCardList().size());"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"        assertExecutionSuccess(INDEX_FIRST_CARD);"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":"        assertExecutionSuccess(INDEX_THIRD_CARD);"},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":"        assertExecutionSuccess(lastCardIndex);"},{"lineNumber":48,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":50,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yong-jie"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":52,"author":{"gitID":"yong-jie"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":54,"author":{"gitID":"yong-jie"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":57,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"yong-jie"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":59,"author":{"gitID":"yong-jie"},"content":"        assertExecutionSuccess(INDEX_FIRST_CARD);"},{"lineNumber":60,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":62,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"yong-jie"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":64,"author":{"gitID":"yong-jie"},"content":"        model.filterCardsByTag(new Tag(new Name(\"Hi\")));"},{"lineNumber":65,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":66,"author":{"gitID":"yong-jie"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_CARD;"},{"lineNumber":67,"author":{"gitID":"yong-jie"},"content":"        // ensures that outOfBoundIndex is still in bounds of the list of cards"},{"lineNumber":68,"author":{"gitID":"yong-jie"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getCardBank().getCardList().size());"},{"lineNumber":69,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":70,"author":{"gitID":"yong-jie"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":73,"author":{"gitID":"yong-jie"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"yong-jie"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"yong-jie"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_CARD);"},{"lineNumber":76,"author":{"gitID":"yong-jie"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_CARD);"},{"lineNumber":77,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":78,"author":{"gitID":"yong-jie"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"yong-jie"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":80,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":81,"author":{"gitID":"yong-jie"},"content":"        // same values -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"yong-jie"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_CARD);"},{"lineNumber":83,"author":{"gitID":"yong-jie"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":84,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":85,"author":{"gitID":"yong-jie"},"content":"        // different types -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"yong-jie"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":87,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":88,"author":{"gitID":"yong-jie"},"content":"        // null -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"yong-jie"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":90,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":91,"author":{"gitID":"yong-jie"},"content":"        // different card -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"yong-jie"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":93,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":95,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"yong-jie"},"content":"     * Executes a {@code SelectCardCommand} with the given {@code index}, and checks that {@code JumpToCardRequestEvent}"},{"lineNumber":97,"author":{"gitID":"yong-jie"},"content":"     * is raised with the correct index."},{"lineNumber":98,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"yong-jie"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":100,"author":{"gitID":"yong-jie"},"content":"        SelectCardCommand selectCardCommand \u003d prepareCommand(index);"},{"lineNumber":101,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":102,"author":{"gitID":"yong-jie"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"yong-jie"},"content":"            CommandResult commandResult \u003d selectCardCommand.execute();"},{"lineNumber":104,"author":{"gitID":"yong-jie"},"content":"            assertEquals(String.format(SelectCardCommand.MESSAGE_SELECT_CARD_SUCCESS, index.getOneBased()),"},{"lineNumber":105,"author":{"gitID":"yong-jie"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":106,"author":{"gitID":"yong-jie"},"content":"        } catch (CommandException ce) {"},{"lineNumber":107,"author":{"gitID":"yong-jie"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":108,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":110,"author":{"gitID":"yong-jie"},"content":"        JumpToCardRequestEvent lastEvent \u003d (JumpToCardRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":111,"author":{"gitID":"yong-jie"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":112,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":114,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"yong-jie"},"content":"     * Executes a {@code SelectCardCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":116,"author":{"gitID":"yong-jie"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":117,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"yong-jie"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":119,"author":{"gitID":"yong-jie"},"content":"        SelectCardCommand selectCardCommand \u003d prepareCommand(index);"},{"lineNumber":120,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":121,"author":{"gitID":"yong-jie"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"yong-jie"},"content":"            selectCardCommand.execute();"},{"lineNumber":123,"author":{"gitID":"yong-jie"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":124,"author":{"gitID":"yong-jie"},"content":"        } catch (CommandException ce) {"},{"lineNumber":125,"author":{"gitID":"yong-jie"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":126,"author":{"gitID":"yong-jie"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":127,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":130,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"yong-jie"},"content":"     * Returns a {@code SelectCardCommand} with parameters {@code index}."},{"lineNumber":132,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"yong-jie"},"content":"    private SelectCardCommand prepareCommand(Index index) {"},{"lineNumber":134,"author":{"gitID":"yong-jie"},"content":"        SelectCardCommand selectCardCommand \u003d new SelectCardCommand(index);"},{"lineNumber":135,"author":{"gitID":"yong-jie"},"content":"        selectCardCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":136,"author":{"gitID":"yong-jie"},"content":"        return selectCardCommand;"},{"lineNumber":137,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":110,"-":28}},{"path":"src/test/java/seedu/flashy/storage/XmlAdaptedCardTagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.model.cardtag.CardTag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.TypicalCardTag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":18,"author":{"gitID":"jethrokuan"},"content":"public class XmlAdaptedCardTagTest {"},{"lineNumber":19,"author":{"gitID":"jethrokuan"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlAdaptedCardTagTest/\");"},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":"    private static final File TYPICAL_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalCardTag.xml\");"},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":"    private static final File INVALID_CARD_ID_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidCardTag_missingCardId.xml\");"},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":"    private static final File INVALID_CARDS_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidCardTag_missingCards.xml\");"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":"    private static final File INVALID_TAG_ID_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidCardTag_missingTagId.xml\");"},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":"    private static final File INVALID_TAGS_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidCardTag_missingTags.xml\");"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":"    public void toModelType_typicalFile_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":"        XmlAdaptedCardTag dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_FILE,"},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":"                XmlAdaptedCardTag.class);"},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":"        CardTag cardTagFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":"        CardTag typicalCardTag \u003d TypicalCardTag.getTypicalCardTag();"},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTagFromFile, typicalCardTag);"},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":"    public void toModelType_missingCardId_throwsIllegalValueException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":"        XmlAdaptedCardTag dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_CARD_ID_FILE,"},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":"                XmlAdaptedCardTag.class);"},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":"        dataFromFile.toModelType();"},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":"    public void toModelType_missingCards_throwsIllegalValueException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":"        XmlAdaptedCardTag dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_CARDS_FILE,"},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":"                XmlAdaptedCardTag.class);"},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":"        dataFromFile.toModelType();"},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":54,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"jethrokuan"},"content":"    public void toModelType_missingTagId_throwsIllegalValueException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"jethrokuan"},"content":"        XmlAdaptedCardTag dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_ID_FILE,"},{"lineNumber":57,"author":{"gitID":"jethrokuan"},"content":"                XmlAdaptedCardTag.class);"},{"lineNumber":58,"author":{"gitID":"jethrokuan"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":59,"author":{"gitID":"jethrokuan"},"content":"        dataFromFile.toModelType();"},{"lineNumber":60,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":62,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jethrokuan"},"content":"    public void toModelType_missingTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"jethrokuan"},"content":"        XmlAdaptedCardTag dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAGS_FILE,"},{"lineNumber":65,"author":{"gitID":"jethrokuan"},"content":"                XmlAdaptedCardTag.class);"},{"lineNumber":66,"author":{"gitID":"jethrokuan"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":67,"author":{"gitID":"jethrokuan"},"content":"        dataFromFile.toModelType();"},{"lineNumber":68,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":70,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":54,"-":16}},{"path":"src/test/java/seedu/flashy/logic/commands/EditCardCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.CS2101_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.CS2103T_CARD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_NAME_COMSCI;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.assertEqualCardId;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.flashy.model.cardtag.CardTag.MESSAGE_CARD_NO_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.flashy.model.tag.Tag.MESSAGE_TAG_NOT_FOUND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCardBank.getTypicalCardBank;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCardBank.getTypicalCardBankFillBlanksCards;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCardBank.getTypicalCardBankMcqCards;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_FIRST_CARD;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalIndexes.INDEX_SECOND_CARD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.COMSCI_TAG;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.ENGLISH_TAG;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.MATHEMATICS_TAG;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.Messages;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.CommandHistory;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.UndoRedoStack;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCardCommand.EditCardDescriptor;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.flashy.model.CardBank;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.flashy.model.Model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.flashy.model.ModelManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.flashy.model.UserPrefs;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.FillBlanksCard;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.CardBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.EditCardDescriptorBuilder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.FillBlanksCardBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.McqCardBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"/**ed"},{"lineNumber":50,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and"},{"lineNumber":51,"author":{"gitID":"-"},"content":" * unit tests for EditCardCommand."},{"lineNumber":52,"author":{"gitID":"-"},"content":" */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"public class EditCardCommandTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalCardBank(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private Model modelWithMcqCards \u003d new ModelManager(getTypicalCardBankMcqCards(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private Model modelWithFillBlanksCards \u003d new ModelManager(getTypicalCardBankFillBlanksCards(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"    //@@author shawnclq"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"    public void execute_frontBackSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"        Card editedCard \u003d new CardBuilder().build();"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"        Card targetCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD, descriptor);"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"        expectedModel.updateCard(model.getFilteredCardList().get(0), editedCard);"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"        editedCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"        // To check whether card ID has changed"},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"        assertEqualCardId(targetCard, editedCard);"},{"lineNumber":75,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":78,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"Shawnclq"},"content":"    public void execute_mismatchedCardsToFillBlanksCard_failure() throws Exception {"},{"lineNumber":80,"author":{"gitID":"Shawnclq"},"content":"        FillBlanksCard editedCard \u003d new FillBlanksCardBuilder().build();"},{"lineNumber":81,"author":{"gitID":"Shawnclq"},"content":"        Card targetCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"Shawnclq"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"},{"lineNumber":83,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD, descriptor);"},{"lineNumber":84,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":85,"author":{"gitID":"Shawnclq"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_MISMATCHED_CARDS,"},{"lineNumber":86,"author":{"gitID":"Shawnclq"},"content":"                targetCard.getType(), editedCard.getType());"},{"lineNumber":87,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":88,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, model, expectedMessage);"},{"lineNumber":89,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":91,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"Shawnclq"},"content":"    public void execute_mismatchedCardsToMcqCard_failure() throws Exception {"},{"lineNumber":93,"author":{"gitID":"Shawnclq"},"content":"        McqCard editedCard \u003d new McqCardBuilder().build();"},{"lineNumber":94,"author":{"gitID":"Shawnclq"},"content":"        Card targetCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"Shawnclq"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard)"},{"lineNumber":96,"author":{"gitID":"Shawnclq"},"content":"                .withOptions(editedCard.getOptions()).build();"},{"lineNumber":97,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD, descriptor);"},{"lineNumber":98,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":99,"author":{"gitID":"Shawnclq"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_MISMATCHED_CARDS,"},{"lineNumber":100,"author":{"gitID":"Shawnclq"},"content":"                targetCard.getType(), editedCard.getType());"},{"lineNumber":101,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":102,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, model, expectedMessage);"},{"lineNumber":103,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":105,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"Shawnclq"},"content":"    public void execute_mismatchedFillBlanksCardsToMcqCard_failure() throws Exception {"},{"lineNumber":107,"author":{"gitID":"Shawnclq"},"content":"        McqCard editedCard \u003d new McqCardBuilder().build();"},{"lineNumber":108,"author":{"gitID":"Shawnclq"},"content":"        FillBlanksCard targetCard \u003d (FillBlanksCard) modelWithFillBlanksCards.getFilteredCardList()"},{"lineNumber":109,"author":{"gitID":"Shawnclq"},"content":"                .get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"Shawnclq"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard)"},{"lineNumber":111,"author":{"gitID":"Shawnclq"},"content":"                .withOptions(editedCard.getOptions()).build();"},{"lineNumber":112,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD, descriptor);"},{"lineNumber":113,"author":{"gitID":"Shawnclq"},"content":"        editCommand.setData(modelWithFillBlanksCards, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":114,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":115,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":116,"author":{"gitID":"Shawnclq"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_MISMATCHED_CARDS,"},{"lineNumber":117,"author":{"gitID":"Shawnclq"},"content":"                targetCard.getType(), editedCard.getType());"},{"lineNumber":118,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":119,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, modelWithFillBlanksCards, expectedMessage);"},{"lineNumber":120,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":122,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"Shawnclq"},"content":"    public void execute_mismatchedFillBlanksCardsToCard_failure() throws Exception {"},{"lineNumber":124,"author":{"gitID":"Shawnclq"},"content":"        Card editedCard \u003d new CardBuilder().build();"},{"lineNumber":125,"author":{"gitID":"Shawnclq"},"content":"        FillBlanksCard targetCard \u003d (FillBlanksCard) modelWithFillBlanksCards.getFilteredCardList()"},{"lineNumber":126,"author":{"gitID":"Shawnclq"},"content":"                .get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"Shawnclq"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"},{"lineNumber":128,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD, descriptor);"},{"lineNumber":129,"author":{"gitID":"Shawnclq"},"content":"        editCommand.setData(modelWithFillBlanksCards, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":130,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":131,"author":{"gitID":"Shawnclq"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_MISMATCHED_CARDS,"},{"lineNumber":132,"author":{"gitID":"Shawnclq"},"content":"                targetCard.getType(), editedCard.getType());"},{"lineNumber":133,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":134,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, modelWithFillBlanksCards, expectedMessage);"},{"lineNumber":135,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":137,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"Shawnclq"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":139,"author":{"gitID":"Shawnclq"},"content":"        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"},{"lineNumber":140,"author":{"gitID":"Shawnclq"},"content":"        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());"},{"lineNumber":141,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":142,"author":{"gitID":"Shawnclq"},"content":"        CardBuilder cardInList \u003d new CardBuilder(lastCard);"},{"lineNumber":143,"author":{"gitID":"Shawnclq"},"content":"        Card editedCard \u003d cardInList.withFront(VALID_NAME_COMSCI).withId(lastCard.getId().toString())"},{"lineNumber":144,"author":{"gitID":"Shawnclq"},"content":"                .build();"},{"lineNumber":145,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":146,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withFront(VALID_NAME_COMSCI)"},{"lineNumber":147,"author":{"gitID":"Shawnclq"},"content":"                .build();"},{"lineNumber":148,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(indexLastCard, descriptor);"},{"lineNumber":149,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":150,"author":{"gitID":"Shawnclq"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"},{"lineNumber":151,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":152,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":153,"author":{"gitID":"Shawnclq"},"content":"        expectedModel.updateCard(lastCard, editedCard);"},{"lineNumber":154,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":155,"author":{"gitID":"Shawnclq"},"content":"        // To check whether card ID has changed"},{"lineNumber":156,"author":{"gitID":"Shawnclq"},"content":"        assertEqualCardId(lastCard, editedCard);"},{"lineNumber":157,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":158,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Shawnclq"},"content":"    //@@author"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":162,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"jethrokuan"},"content":"    public void execute_someTagsAdded_success() throws Exception {"},{"lineNumber":164,"author":{"gitID":"jethrokuan"},"content":"        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"},{"lineNumber":165,"author":{"gitID":"jethrokuan"},"content":"        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());"},{"lineNumber":166,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":167,"author":{"gitID":"jethrokuan"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":168,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":169,"author":{"gitID":"jethrokuan"},"content":"        expectedModel.addTags(lastCard, new HashSet\u003c\u003e(Arrays.asList(MATHEMATICS_TAG, COMSCI_TAG)));"},{"lineNumber":170,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":171,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":172,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToAdd(new HashSet\u003c\u003e(Arrays.asList(MATHEMATICS_TAG, COMSCI_TAG)))"},{"lineNumber":173,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":174,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":175,"author":{"gitID":"jethrokuan"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, lastCard);"},{"lineNumber":176,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand editCommand \u003d prepareCommand(indexLastCard, descriptor);"},{"lineNumber":177,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":178,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":179,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":181,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"jethrokuan"},"content":"    public void execute_someTagsRemoved_success() throws Exception {"},{"lineNumber":183,"author":{"gitID":"jethrokuan"},"content":"        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"},{"lineNumber":184,"author":{"gitID":"jethrokuan"},"content":"        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());"},{"lineNumber":185,"author":{"gitID":"jethrokuan"},"content":"        Tag tag \u003d model.getTags(lastCard).get(0);"},{"lineNumber":186,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":187,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":188,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToRemove(new HashSet\u003c\u003e(Arrays.asList(tag)))"},{"lineNumber":189,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":190,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":191,"author":{"gitID":"jethrokuan"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, lastCard);"},{"lineNumber":192,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand editCommand \u003d prepareCommand(indexLastCard, descriptor);"},{"lineNumber":193,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":194,"author":{"gitID":"jethrokuan"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":195,"author":{"gitID":"jethrokuan"},"content":"        expectedModel.removeTags(lastCard, new HashSet\u003c\u003e(Arrays.asList(tag)));"},{"lineNumber":196,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":197,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":198,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":200,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"jethrokuan"},"content":"    public void execute_editCardNewTagCreated_success() throws Exception {"},{"lineNumber":202,"author":{"gitID":"jethrokuan"},"content":"        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"},{"lineNumber":203,"author":{"gitID":"jethrokuan"},"content":"        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());"},{"lineNumber":204,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":205,"author":{"gitID":"jethrokuan"},"content":"        Tag newTag \u003d new Tag(new Name(\"Machine Learning\"));"},{"lineNumber":206,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":207,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToAdd(new HashSet\u003c\u003e(Arrays.asList(newTag)))"},{"lineNumber":208,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":209,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":210,"author":{"gitID":"jethrokuan"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, lastCard);"},{"lineNumber":211,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand editCardCommand \u003d prepareCommand(indexLastCard, descriptor);"},{"lineNumber":212,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":213,"author":{"gitID":"jethrokuan"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":214,"author":{"gitID":"jethrokuan"},"content":"        expectedModel.addTags(lastCard, new HashSet\u003c\u003e(Arrays.asList(newTag)));"},{"lineNumber":215,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":216,"author":{"gitID":"jethrokuan"},"content":"        assertCommandSuccess(editCardCommand, model, expectedMessage, expectedModel);"},{"lineNumber":217,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":219,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"jethrokuan"},"content":"    public void execute_removeCardNoTag_failure() throws Exception {"},{"lineNumber":221,"author":{"gitID":"jethrokuan"},"content":"        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"},{"lineNumber":222,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":223,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":224,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToRemove(new HashSet\u003c\u003e(Arrays.asList(ENGLISH_TAG)))"},{"lineNumber":225,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":226,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":227,"author":{"gitID":"jethrokuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TAG_NOT_FOUND, ENGLISH_TAG.getName());"},{"lineNumber":228,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand editCommand \u003d prepareCommand(indexLastCard, descriptor);"},{"lineNumber":229,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":230,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(editCommand, model, expectedMessage);"},{"lineNumber":231,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":233,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"jethrokuan"},"content":"    public void execute_removeCardNoEdge_failure() throws Exception {"},{"lineNumber":235,"author":{"gitID":"jethrokuan"},"content":"        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"},{"lineNumber":236,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":237,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":238,"author":{"gitID":"jethrokuan"},"content":"                .withTagsToRemove(new HashSet\u003c\u003e(Arrays.asList(MATHEMATICS_TAG)))"},{"lineNumber":239,"author":{"gitID":"jethrokuan"},"content":"                .build();"},{"lineNumber":240,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":241,"author":{"gitID":"jethrokuan"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CARD_NO_TAG, MATHEMATICS_TAG.getName());"},{"lineNumber":242,"author":{"gitID":"jethrokuan"},"content":"        EditCardCommand editCommand \u003d prepareCommand(indexLastCard, descriptor);"},{"lineNumber":243,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":244,"author":{"gitID":"jethrokuan"},"content":"        assertCommandFailure(editCommand, model, expectedMessage);"},{"lineNumber":245,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"Shawnclq"},"content":"    //@@author shawnclq"},{"lineNumber":249,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":250,"author":{"gitID":"Shawnclq"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":251,"author":{"gitID":"Shawnclq"},"content":"        Card targetCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":252,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD, new EditCardCommand.EditCardDescriptor());"},{"lineNumber":253,"author":{"gitID":"Shawnclq"},"content":"        Card editedCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":254,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":255,"author":{"gitID":"Shawnclq"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"},{"lineNumber":256,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":257,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":258,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":259,"author":{"gitID":"Shawnclq"},"content":"        // To check whether card ID has changed"},{"lineNumber":260,"author":{"gitID":"Shawnclq"},"content":"        assertEqualCardId(targetCard, editedCard);"},{"lineNumber":261,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":262,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":264,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":265,"author":{"gitID":"Shawnclq"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":266,"author":{"gitID":"Shawnclq"},"content":"        Card cardInFilteredList \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":267,"author":{"gitID":"Shawnclq"},"content":"        Card editedCard \u003d new CardBuilder(cardInFilteredList).withFront(VALID_NAME_COMSCI).build();"},{"lineNumber":268,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD,"},{"lineNumber":269,"author":{"gitID":"Shawnclq"},"content":"                new EditCardDescriptorBuilder().withFront(VALID_NAME_COMSCI).build());"},{"lineNumber":270,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":271,"author":{"gitID":"Shawnclq"},"content":"        String expectedMessage \u003d String.format(EditCardCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"},{"lineNumber":272,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":273,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":274,"author":{"gitID":"Shawnclq"},"content":"        expectedModel.updateCard(model.getFilteredCardList().get(0), editedCard);"},{"lineNumber":275,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":276,"author":{"gitID":"Shawnclq"},"content":"        // To check whether card ID has changed"},{"lineNumber":277,"author":{"gitID":"Shawnclq"},"content":"        assertEqualCardId(cardInFilteredList, editedCard);"},{"lineNumber":278,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":279,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":281,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":282,"author":{"gitID":"Shawnclq"},"content":"    public void execute_duplicateCardUnfilteredList_failure() {"},{"lineNumber":283,"author":{"gitID":"Shawnclq"},"content":"        Card firstCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":284,"author":{"gitID":"Shawnclq"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstCard).build();"},{"lineNumber":285,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_SECOND_CARD, descriptor);"},{"lineNumber":286,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":287,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, model, EditCardCommand.MESSAGE_DUPLICATE_CARD);"},{"lineNumber":288,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":290,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":291,"author":{"gitID":"Shawnclq"},"content":"    public void execute_duplicateCardFilteredList_failure() {"},{"lineNumber":292,"author":{"gitID":"Shawnclq"},"content":"        // edit card in filtered list into a duplicate in flashy book"},{"lineNumber":293,"author":{"gitID":"Shawnclq"},"content":"        Card cardInList \u003d model.getCardBank().getCardList().get(INDEX_SECOND_CARD.getZeroBased());"},{"lineNumber":294,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD,"},{"lineNumber":295,"author":{"gitID":"Shawnclq"},"content":"                new EditCardDescriptorBuilder(cardInList).build());"},{"lineNumber":296,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":297,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, model, EditCardCommand.MESSAGE_DUPLICATE_CARD);"},{"lineNumber":298,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":300,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":301,"author":{"gitID":"Shawnclq"},"content":"    public void execute_invalidCardIndexUnfilteredList_failure() {"},{"lineNumber":302,"author":{"gitID":"Shawnclq"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"},{"lineNumber":303,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"},{"lineNumber":304,"author":{"gitID":"Shawnclq"},"content":"                .withFront(VALID_NAME_COMSCI).build();"},{"lineNumber":305,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":306,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":307,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":308,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":310,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":311,"author":{"gitID":"Shawnclq"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":312,"author":{"gitID":"Shawnclq"},"content":"     * but smaller than size of flashy book"},{"lineNumber":313,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":315,"author":{"gitID":"Shawnclq"},"content":"    public void execute_invalidCardIndexFilteredList_failure() {"},{"lineNumber":316,"author":{"gitID":"Shawnclq"},"content":"        model.filterCardsByTag(new Tag(new Name(\"Name\")));"},{"lineNumber":317,"author":{"gitID":"Shawnclq"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CARD;"},{"lineNumber":318,"author":{"gitID":"Shawnclq"},"content":"        // ensures that outOfBoundIndex is still in bounds of flashy book list"},{"lineNumber":319,"author":{"gitID":"Shawnclq"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCardBank().getCardList().size());"},{"lineNumber":320,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":321,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":322,"author":{"gitID":"Shawnclq"},"content":"                new EditCardDescriptorBuilder().withFront(VALID_NAME_COMSCI).build());"},{"lineNumber":323,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":324,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":325,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":327,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":328,"author":{"gitID":"Shawnclq"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":329,"author":{"gitID":"Shawnclq"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":330,"author":{"gitID":"Shawnclq"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":331,"author":{"gitID":"Shawnclq"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":332,"author":{"gitID":"Shawnclq"},"content":"        Card editedCard \u003d new CardBuilder().build();"},{"lineNumber":333,"author":{"gitID":"Shawnclq"},"content":"        Card cardToEdit \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":334,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard)"},{"lineNumber":335,"author":{"gitID":"Shawnclq"},"content":"                .withUuid(cardToEdit.getId()).build();"},{"lineNumber":336,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD, descriptor);"},{"lineNumber":337,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":338,"author":{"gitID":"Shawnclq"},"content":"        Card newCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":339,"author":{"gitID":"Shawnclq"},"content":"        // To check whether card ID has changed"},{"lineNumber":340,"author":{"gitID":"Shawnclq"},"content":"        assertEqualCardId(cardToEdit, newCard);"},{"lineNumber":341,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":342,"author":{"gitID":"Shawnclq"},"content":"        // edit -\u003e first card edited"},{"lineNumber":343,"author":{"gitID":"Shawnclq"},"content":"        editCommand.execute();"},{"lineNumber":344,"author":{"gitID":"Shawnclq"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":345,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":346,"author":{"gitID":"Shawnclq"},"content":"        // undo -\u003e reverts cardbank back to previous state and filtered card list to show all cards"},{"lineNumber":347,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":348,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":349,"author":{"gitID":"Shawnclq"},"content":"        // redo -\u003e same first card edited again"},{"lineNumber":350,"author":{"gitID":"Shawnclq"},"content":"        expectedModel.updateCard(cardToEdit, editedCard);"},{"lineNumber":351,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":352,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":354,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":355,"author":{"gitID":"Shawnclq"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":356,"author":{"gitID":"Shawnclq"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":357,"author":{"gitID":"Shawnclq"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":358,"author":{"gitID":"Shawnclq"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":359,"author":{"gitID":"Shawnclq"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"},{"lineNumber":360,"author":{"gitID":"Shawnclq"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withFront(VALID_NAME_COMSCI).build();"},{"lineNumber":361,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":362,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":363,"author":{"gitID":"Shawnclq"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":364,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":365,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":366,"author":{"gitID":"Shawnclq"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":367,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":368,"author":{"gitID":"Shawnclq"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":369,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":370,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":371,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":372,"author":{"gitID":"Shawnclq"},"content":"     * 1. Edits a {@code Card} from a filtered list."},{"lineNumber":373,"author":{"gitID":"Shawnclq"},"content":"     * 2. Undo the edit."},{"lineNumber":374,"author":{"gitID":"Shawnclq"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited card in the"},{"lineNumber":375,"author":{"gitID":"Shawnclq"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":376,"author":{"gitID":"Shawnclq"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the card object regardless of indexing."},{"lineNumber":377,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":378,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":379,"author":{"gitID":"Shawnclq"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameCardEdited() throws Exception {"},{"lineNumber":380,"author":{"gitID":"Shawnclq"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":381,"author":{"gitID":"Shawnclq"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":382,"author":{"gitID":"Shawnclq"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":383,"author":{"gitID":"Shawnclq"},"content":"        Card editedCard \u003d new CardBuilder().withFront(\"Jethro Kuan\").build();"},{"lineNumber":384,"author":{"gitID":"Shawnclq"},"content":"        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"},{"lineNumber":385,"author":{"gitID":"Shawnclq"},"content":"        Card targetCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":386,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d prepareCommand(INDEX_FIRST_CARD, descriptor);"},{"lineNumber":387,"author":{"gitID":"Shawnclq"},"content":"        Card newCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":388,"author":{"gitID":"Shawnclq"},"content":"        Model expectedModel \u003d new ModelManager(new CardBank(model.getCardBank()), new UserPrefs());"},{"lineNumber":389,"author":{"gitID":"Shawnclq"},"content":"        // To check whether card ID has changed"},{"lineNumber":390,"author":{"gitID":"Shawnclq"},"content":"        assertEqualCardId(targetCard, newCard);"},{"lineNumber":391,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":392,"author":{"gitID":"Shawnclq"},"content":"        Tag tag \u003d model.getFilteredTagList().get(0);"},{"lineNumber":393,"author":{"gitID":"Shawnclq"},"content":"        model.filterCardsByTag(tag);"},{"lineNumber":394,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":395,"author":{"gitID":"Shawnclq"},"content":"        Card cardToEdit \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"},{"lineNumber":396,"author":{"gitID":"Shawnclq"},"content":"        // edit -\u003e edits second card in unfiltered card list / first card in filtered card list"},{"lineNumber":397,"author":{"gitID":"Shawnclq"},"content":"        editCommand.execute();"},{"lineNumber":398,"author":{"gitID":"Shawnclq"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":399,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":400,"author":{"gitID":"Shawnclq"},"content":"        // undo -\u003e reverts cardbank back to previous state and filtered card list to show all cards"},{"lineNumber":401,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":402,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":403,"author":{"gitID":"Shawnclq"},"content":"        expectedModel.updateCard(cardToEdit, editedCard);"},{"lineNumber":404,"author":{"gitID":"Shawnclq"},"content":"        assertNotEquals(model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased()), cardToEdit);"},{"lineNumber":405,"author":{"gitID":"Shawnclq"},"content":"        // redo -\u003e edits same second card in unfiltered card list"},{"lineNumber":406,"author":{"gitID":"Shawnclq"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":407,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":408,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":409,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":410,"author":{"gitID":"Shawnclq"},"content":"    public void equals() throws Exception {"},{"lineNumber":411,"author":{"gitID":"Shawnclq"},"content":"        final EditCardCommand standardCommand \u003d prepareCommand(INDEX_FIRST_CARD, CS2101_CARD);"},{"lineNumber":412,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":413,"author":{"gitID":"Shawnclq"},"content":"        // same values -\u003e returns true"},{"lineNumber":414,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand.EditCardDescriptor copyDescriptor \u003d new EditCardCommand.EditCardDescriptor(CS2101_CARD);"},{"lineNumber":415,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_CARD, copyDescriptor);"},{"lineNumber":416,"author":{"gitID":"Shawnclq"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":417,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":418,"author":{"gitID":"Shawnclq"},"content":"        // same object -\u003e returns true"},{"lineNumber":419,"author":{"gitID":"Shawnclq"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":420,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":421,"author":{"gitID":"Shawnclq"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":422,"author":{"gitID":"Shawnclq"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":423,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":424,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":425,"author":{"gitID":"Shawnclq"},"content":"        // null -\u003e returns false"},{"lineNumber":426,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":427,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":428,"author":{"gitID":"Shawnclq"},"content":"        // different types -\u003e returns false"},{"lineNumber":429,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":430,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":431,"author":{"gitID":"Shawnclq"},"content":"        // different index -\u003e returns false"},{"lineNumber":432,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(standardCommand.equals(new EditCardCommand(INDEX_SECOND_CARD, CS2101_CARD)));"},{"lineNumber":433,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":434,"author":{"gitID":"Shawnclq"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":435,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(standardCommand.equals(new EditCardCommand(INDEX_FIRST_CARD, CS2103T_CARD)));"},{"lineNumber":436,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":437,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":438,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":439,"author":{"gitID":"Shawnclq"},"content":"     * Returns an {@code EditCardCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":440,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":441,"author":{"gitID":"Shawnclq"},"content":"    private EditCardCommand prepareCommand(Index index, EditCardDescriptor descriptor) {"},{"lineNumber":442,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand editCommand \u003d new EditCardCommand(index, descriptor);"},{"lineNumber":443,"author":{"gitID":"Shawnclq"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":444,"author":{"gitID":"Shawnclq"},"content":"        return editCommand;"},{"lineNumber":445,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":446,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":447,"author":{"gitID":"Shawnclq"},"content":"}"}],"authorContributionMap":{"Shawnclq":301,"jethrokuan":86,"-":60}},{"path":"src/test/java/seedu/flashy/model/cardtag/CardTagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model.cardtag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.CHEMISTRY_CARD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.COMSCI_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.GEOGRAPHY_CARD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalCards.MATHEMATICS_CARD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.BIOLOGY_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.MATHEMATICS_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.flashy.testutil.TypicalTags.PHYSICS_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.model.CardBank;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.TypicalCardBank;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":"public class CardTagTest {"},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"    private CardBank cardBank \u003d TypicalCardBank.getTypicalCardBank();"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":"    private CardTag cardTag;"},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":"    public void setUp() throws Exception {"},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":"        cardTag \u003d new CardTag();"},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":"        cardTag.addEdge(MATHEMATICS_CARD, PHYSICS_TAG);"},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"        cardTag.addEdge(COMSCI_CARD, PHYSICS_TAG);"},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":"        cardTag.addEdge(CHEMISTRY_CARD, BIOLOGY_TAG);"},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":"        cardTag.addEdge(COMSCI_CARD, BIOLOGY_TAG);"},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":"    public void addEdge_worksForNewEdges() {"},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"        assertTrue(cardTag.isConnected(MATHEMATICS_CARD, PHYSICS_TAG));"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":"        assertTrue(cardTag.isConnected(CHEMISTRY_CARD, BIOLOGY_TAG));"},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":"    public void addEdge_whereEdgeExistsThrowsDuplicateEdgeException() throws DuplicateEdgeException {"},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":"        thrown.expect(DuplicateEdgeException.class);"},{"lineNumber":53,"author":{"gitID":"jethrokuan"},"content":"        cardTag.addEdge(COMSCI_CARD, PHYSICS_TAG);"},{"lineNumber":54,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":56,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"jethrokuan"},"content":"    public void getCards_withEdges() {"},{"lineNumber":58,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getCards(PHYSICS_TAG, cardBank.getCardList()), Stream.of(MATHEMATICS_CARD, COMSCI_CARD)"},{"lineNumber":59,"author":{"gitID":"jethrokuan"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getCards(BIOLOGY_TAG, cardBank.getCardList()), Stream.of(CHEMISTRY_CARD, COMSCI_CARD)"},{"lineNumber":61,"author":{"gitID":"jethrokuan"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":62,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":64,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"jethrokuan"},"content":"    public void getCards_withoutEdges() {"},{"lineNumber":66,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getCards(MATHEMATICS_TAG, cardBank.getCardList()),"},{"lineNumber":67,"author":{"gitID":"jethrokuan"},"content":"                Stream.of().collect(Collectors.toList()));"},{"lineNumber":68,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":70,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"jethrokuan"},"content":"    public void getTags_withEdges() {"},{"lineNumber":72,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getTags(MATHEMATICS_CARD, cardBank.getTagList()),"},{"lineNumber":73,"author":{"gitID":"jethrokuan"},"content":"                Stream.of(PHYSICS_TAG).collect(Collectors.toList()));"},{"lineNumber":74,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getTags(COMSCI_CARD, cardBank.getTagList()), Stream.of(PHYSICS_TAG, BIOLOGY_TAG)"},{"lineNumber":75,"author":{"gitID":"jethrokuan"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":76,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":78,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"jethrokuan"},"content":"    public void getTags_withoutEdges() {"},{"lineNumber":80,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getTags(GEOGRAPHY_CARD, cardBank.getTagList()),"},{"lineNumber":81,"author":{"gitID":"jethrokuan"},"content":"                Stream.of().collect(Collectors.toList()));"},{"lineNumber":82,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":84,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"jethrokuan"},"content":"    public void isConnected_works() {"},{"lineNumber":86,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.isConnected(MATHEMATICS_CARD, BIOLOGY_TAG), false);"},{"lineNumber":87,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.isConnected(COMSCI_CARD, BIOLOGY_TAG), true);"},{"lineNumber":88,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":90,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"jethrokuan"},"content":"    public void removeEdge_works() throws EdgeNotFoundException {"},{"lineNumber":92,"author":{"gitID":"jethrokuan"},"content":"        cardTag.removeEdge(COMSCI_CARD, BIOLOGY_TAG);"},{"lineNumber":93,"author":{"gitID":"jethrokuan"},"content":"        assertTrue(!cardTag.getTags(COMSCI_CARD, cardBank.getTagList()).contains(BIOLOGY_TAG));"},{"lineNumber":94,"author":{"gitID":"jethrokuan"},"content":"        assertTrue(!cardTag.getCards(BIOLOGY_TAG, cardBank.getCardList()).contains(COMSCI_CARD));"},{"lineNumber":95,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":97,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"jethrokuan"},"content":"    public void removeEdge_noTagsLeft_removedFromCardMap() throws EdgeNotFoundException {"},{"lineNumber":99,"author":{"gitID":"jethrokuan"},"content":"        cardTag.removeEdge(MATHEMATICS_CARD, PHYSICS_TAG);"},{"lineNumber":100,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getCardMap().size(), 2);"},{"lineNumber":101,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":103,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"jethrokuan"},"content":"    public void removeEdge_noCardsLeft_removedFromTagMap() throws EdgeNotFoundException {"},{"lineNumber":105,"author":{"gitID":"jethrokuan"},"content":"        // Case: Biology Tag still has 1 card associated -\u003e still in Tag Map"},{"lineNumber":106,"author":{"gitID":"jethrokuan"},"content":"        cardTag.removeEdge(CHEMISTRY_CARD, BIOLOGY_TAG);"},{"lineNumber":107,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getTagMap().size(), 2);"},{"lineNumber":108,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":109,"author":{"gitID":"jethrokuan"},"content":"        // Case: Biology Tag has no more cards associated -\u003e removed from Tag Map"},{"lineNumber":110,"author":{"gitID":"jethrokuan"},"content":"        cardTag.removeEdge(COMSCI_CARD, BIOLOGY_TAG);"},{"lineNumber":111,"author":{"gitID":"jethrokuan"},"content":"        assertEquals(cardTag.getTagMap().size(), 1);"},{"lineNumber":112,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":114,"author":{"gitID":"jethrokuan"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"jethrokuan"},"content":"    public void removeEdge_onNonExistingEdgeThrowsEdgeNotFoundException() throws EdgeNotFoundException {"},{"lineNumber":116,"author":{"gitID":"jethrokuan"},"content":"        thrown.expect(EdgeNotFoundException.class);"},{"lineNumber":117,"author":{"gitID":"jethrokuan"},"content":"        cardTag.removeEdge(MATHEMATICS_CARD, BIOLOGY_TAG);"},{"lineNumber":118,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":120,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":97,"-":23}},{"path":"src/test/java/seedu/flashy/model/card/ScheduleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model.card;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":12,"author":{"gitID":"pukipuki"},"content":"public class ScheduleTest {"},{"lineNumber":13,"author":{"gitID":"pukipuki"},"content":"    private static final double delta \u003d 0.000001;"},{"lineNumber":14,"author":{"gitID":"pukipuki"},"content":"    private Schedule schedule;"},{"lineNumber":15,"author":{"gitID":"pukipuki"},"content":"    private LocalDateTime todaysDate;"},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":"    @Before"},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":"    public void setUp() {"},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"        todaysDate \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":"        schedule \u003d new Schedule();"},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"    public void getNextReview_success() {"},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"        assertEquals(schedule.getNextReview(), todaysDate);"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"    public void setNextReview_success() {"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"        LocalDateTime expectedDate \u003d todaysDate.plusYears(1L);"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":"        schedule.setNextReview(expectedDate);"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"        assertEquals(schedule.getNextReview(), expectedDate);"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"    public void getLastInterval_success() {"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"        int actual \u003d schedule.getLastInterval();"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"        assertEquals(actual, Schedule.INITIAL_LAST_INTERVAL);"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"    public void getEasingFactor_success() {"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"        double actual \u003d schedule.getEasingFactor();"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"        assertEquals(actual, Schedule.INITIAL_EASING_FACTOR, delta);"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"    public void getHistoricalEasingFactor_success() {"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"        double actual \u003d schedule.getHistoricalEasingFactor();"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"        assertEquals(actual, Schedule.INITIAL_HISTORICAL_EASING_FACTOR, delta);"},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"    public void getLearningPhase_success() {"},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"        int actual \u003d schedule.getLearningPhase();"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"        assertEquals(actual, Schedule.INITIAL_LEARNING_PHASE);"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"    public void feedback_getSuccessRate() {"},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":"        Schedule s \u003d new Schedule();"},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":"        s.feedback(false);"},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":"        assertEquals(2.0 / 4.0, s.getSuccessRate(), delta);"},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":68,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"pukipuki"},"content":"    public void feedback_learningPhaseTest() {"},{"lineNumber":70,"author":{"gitID":"pukipuki"},"content":"        Schedule s \u003d new Schedule();"},{"lineNumber":71,"author":{"gitID":"pukipuki"},"content":"        int learningPhase \u003d s.getLearningPhase();"},{"lineNumber":72,"author":{"gitID":"pukipuki"},"content":"        for (int i \u003d 0; i \u003c learningPhase - 1; i++) {"},{"lineNumber":73,"author":{"gitID":"pukipuki"},"content":"            s.feedback(true);"},{"lineNumber":74,"author":{"gitID":"pukipuki"},"content":"            assertEquals(1, s.getLastInterval());"},{"lineNumber":75,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":78,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"pukipuki"},"content":"    public void feedback_getEasingFactor() {"},{"lineNumber":80,"author":{"gitID":"pukipuki"},"content":"        Schedule s \u003d new Schedule();"},{"lineNumber":81,"author":{"gitID":"pukipuki"},"content":"        int learningPhase \u003d s.getLearningPhase();"},{"lineNumber":82,"author":{"gitID":"pukipuki"},"content":"        for (int i \u003d 0; i \u003c learningPhase - 1; i++) {"},{"lineNumber":83,"author":{"gitID":"pukipuki"},"content":"            s.feedback(true);"},{"lineNumber":84,"author":{"gitID":"pukipuki"},"content":"            assertEquals(1, s.getLastInterval());"},{"lineNumber":85,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":87,"author":{"gitID":"pukipuki"},"content":"        assertEquals(1.1, s.getEasingFactor(), delta);"},{"lineNumber":88,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":89,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":90,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":91,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":92,"author":{"gitID":"pukipuki"},"content":"        assertEquals(1.3569619443199672, s.getEasingFactor(), delta);"},{"lineNumber":93,"author":{"gitID":"pukipuki"},"content":"        s.feedback(false);"},{"lineNumber":94,"author":{"gitID":"pukipuki"},"content":"        s.feedback(false);"},{"lineNumber":95,"author":{"gitID":"pukipuki"},"content":"        s.feedback(false);"},{"lineNumber":96,"author":{"gitID":"pukipuki"},"content":"        s.feedback(false);"},{"lineNumber":97,"author":{"gitID":"pukipuki"},"content":"        assertEquals(0.28007138289996014, s.getEasingFactor(), delta);"},{"lineNumber":98,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":100,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"pukipuki"},"content":"    public void feedback_algoPositive() {"},{"lineNumber":102,"author":{"gitID":"pukipuki"},"content":"        Schedule s \u003d new Schedule();"},{"lineNumber":103,"author":{"gitID":"pukipuki"},"content":"        int learningPhase \u003d s.getLearningPhase();"},{"lineNumber":104,"author":{"gitID":"pukipuki"},"content":"        for (int i \u003d 0; i \u003c learningPhase - 1; i++) {"},{"lineNumber":105,"author":{"gitID":"pukipuki"},"content":"            s.feedback(true);"},{"lineNumber":106,"author":{"gitID":"pukipuki"},"content":"            assertEquals(1, s.getLastInterval());"},{"lineNumber":107,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":109,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":110,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":111,"author":{"gitID":"pukipuki"},"content":"        s.feedback(true);"},{"lineNumber":112,"author":{"gitID":"pukipuki"},"content":"        assertEquals(1.1597147845723643, s.getEasingFactor(), delta);"},{"lineNumber":113,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":115,"author":{"gitID":"pukipuki"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"pukipuki"},"content":"    public void feedback_algoNegative() {"},{"lineNumber":117,"author":{"gitID":"pukipuki"},"content":"        Schedule s \u003d new Schedule();"},{"lineNumber":118,"author":{"gitID":"pukipuki"},"content":"        int learningPhase \u003d s.getLearningPhase();"},{"lineNumber":119,"author":{"gitID":"pukipuki"},"content":"        for (int i \u003d 0; i \u003c learningPhase - 1; i++) {"},{"lineNumber":120,"author":{"gitID":"pukipuki"},"content":"            s.feedback(true);"},{"lineNumber":121,"author":{"gitID":"pukipuki"},"content":"            assertEquals(1, s.getLastInterval());"},{"lineNumber":122,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"pukipuki"},"content":"        s.feedback(false);"},{"lineNumber":124,"author":{"gitID":"pukipuki"},"content":"        assertEquals(0.3048048297281299, s.getEasingFactor(), delta);"},{"lineNumber":125,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":116,"-":10}},{"path":"src/test/java/seedu/flashy/model/card/McqCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model.card;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_MCQ_BACK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_MCQ_FRONT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_MCQ_OPTION_SET;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.UUID;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"public class McqCardTest {"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new McqCard(null,"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_FRONT, VALID_MCQ_BACK, VALID_MCQ_OPTION_SET));"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new McqCard(UUID.randomUUID(),"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"                null, VALID_MCQ_BACK, VALID_MCQ_OPTION_SET));"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new McqCard(UUID.randomUUID(),"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_FRONT, null, VALID_MCQ_OPTION_SET));"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new McqCard(UUID.randomUUID(),"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_FRONT, VALID_MCQ_BACK, null));"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new McqCard(null, VALID_MCQ_BACK,"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_OPTION_SET));"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new McqCard(VALID_MCQ_FRONT, null,"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_OPTION_SET));"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new McqCard(VALID_MCQ_FRONT, null,"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_OPTION_SET));"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new McqCard(VALID_MCQ_FRONT, VALID_MCQ_BACK,"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"                null));"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"    public void constructor_invalidParam_throwsIllegalArgumentException() {"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"        String invalidParam \u003d \" \";"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"        List\u003cString\u003e invalidOptionSet \u003d Arrays.asList(new String[] {\"\", \"Hello\", \"World\"});"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new McqCard(UUID.randomUUID(),"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"                invalidParam, VALID_MCQ_BACK, VALID_MCQ_OPTION_SET));"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new McqCard(UUID.randomUUID(),"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_FRONT, invalidParam, VALID_MCQ_OPTION_SET));"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new McqCard(UUID.randomUUID(),"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_FRONT, VALID_MCQ_BACK, invalidOptionSet));"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new McqCard(invalidParam, VALID_MCQ_BACK,"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_OPTION_SET));"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new McqCard(VALID_MCQ_FRONT, invalidParam,"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"                VALID_MCQ_OPTION_SET));"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new McqCard(VALID_MCQ_FRONT, VALID_MCQ_BACK,"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"                invalidOptionSet));"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"    public void isValidMcqCard() {"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e McqCard.isValidMcqCard(null, VALID_MCQ_OPTION_SET));"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e McqCard.isValidMcqCard(VALID_MCQ_BACK, null));"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(McqCard.isValidMcqCard(\"Hello\", VALID_MCQ_OPTION_SET));"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(McqCard.isValidMcqCard(\"0\", VALID_MCQ_OPTION_SET));"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(McqCard.isValidMcqCard(\"-1\", VALID_MCQ_OPTION_SET));"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"        assertFalse(McqCard.isValidMcqCard(\"4\", VALID_MCQ_OPTION_SET));"},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":"        assertTrue(McqCard.isValidMcqCard(\"1\", VALID_MCQ_OPTION_SET));"},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"        assertTrue(McqCard.isValidMcqCard(\"2\", VALID_MCQ_OPTION_SET));"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"        assertTrue(McqCard.isValidMcqCard(\"3\", VALID_MCQ_OPTION_SET));"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":57,"-":17}},{"path":"src/test/java/seedu/flashy/testutil/TypicalFillBlanksCards.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.FillBlanksCard;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":9,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Shawnclq"},"content":" * A utility class containing a list of {@code Card} objects to be used in tests."},{"lineNumber":11,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Shawnclq"},"content":"public class TypicalFillBlanksCards {"},{"lineNumber":13,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":14,"author":{"gitID":"Shawnclq"},"content":"    public static final FillBlanksCard MATHEMATICS_FILLBLANKS_CARD \u003d new FillBlanksCardBuilder().build();"},{"lineNumber":15,"author":{"gitID":"Shawnclq"},"content":"    public static final FillBlanksCard PHYSICS_FILLBLANKS_CARD \u003d (FillBlanksCard) new FillBlanksCardBuilder()"},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"When an electron goes from _ energy to a _ energy level, it emits a photon\")"},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"higher, lower\").build();"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":"    public static final FillBlanksCard SCIENCE_FILLBLANKS_CARD \u003d (FillBlanksCard) new FillBlanksCardBuilder()"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"Density is defined by _ divided by _\")"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"mass, volume\").build();"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"    public static final FillBlanksCard HISTORY_FILLBLANKS_CARD \u003d (FillBlanksCard) new FillBlanksCardBuilder()"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"World War II occured between year _ and _\")"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"1939, 1945\").build();"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"    public static final FillBlanksCard ECONOMICS_FILLBLANKS_CARD \u003d (FillBlanksCard) new FillBlanksCardBuilder()"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"A demand curve is _ sloping while a supply curve is _ sloping\")"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"downward, upward\").build();"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"    public static final FillBlanksCard GEOGRAPHY_FILLBLANKS_CARD \u003d (FillBlanksCard) new FillBlanksCardBuilder()"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"In terms of continent, Singapore is in _, Canada is in _, \""},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"                    + \"England is in _ and New Zealand is in _\")"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"Asia, North America, Europe, Australia\").build();"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"    private TypicalFillBlanksCards() {} // prevents instantiation"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"    public static List\u003cFillBlanksCard\u003e getTypicalFillBlanksCards() {"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"        return Arrays.asList(MATHEMATICS_FILLBLANKS_CARD, HISTORY_FILLBLANKS_CARD, PHYSICS_FILLBLANKS_CARD,"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"                SCIENCE_FILLBLANKS_CARD, ECONOMICS_FILLBLANKS_CARD, GEOGRAPHY_FILLBLANKS_CARD);"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"}"}],"authorContributionMap":{"Shawnclq":32,"-":7}},{"path":"src/test/java/seedu/flashy/testutil/CardBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Schedule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":9,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Shawnclq"},"content":" * A utility class to help with building Card objects."},{"lineNumber":11,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Shawnclq"},"content":"public class CardBuilder {"},{"lineNumber":13,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":14,"author":{"gitID":"Shawnclq"},"content":"    public static final String DEFAULT_FRONT \u003d \"When is national day in Singapore?\";"},{"lineNumber":15,"author":{"gitID":"Shawnclq"},"content":"    public static final String DEFAULT_BACK \u003d \"9th August\";"},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"    protected UUID id;"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":"    protected String front;"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"    protected String back;"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":"    protected Schedule schedule;"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"    public CardBuilder() {"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"        id \u003d UUID.randomUUID();"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"        front \u003d DEFAULT_FRONT;"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"        back \u003d DEFAULT_BACK;"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"        schedule \u003d new Schedule();"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"     * Initializes the CardBuilder with the data of {@code tagToCopy}."},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"    public CardBuilder(Card cardToCopy) {"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"        id \u003d cardToCopy.getId();"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"        front \u003d cardToCopy.getFront();"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"        back \u003d cardToCopy.getBack();"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"        schedule \u003d cardToCopy.getSchedule();"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code id} of the {@code Card} that we are building."},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"    public CardBuilder withId(String id) {"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"        this.id \u003d UUID.fromString(id);"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code front} of the {@code Card} that we are building."},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"    public CardBuilder withFront(String front) {"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"        this.front \u003d front;"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code back} of the {@code Card} that we are building."},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"    public CardBuilder withBack(String back) {"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"        this.back \u003d back;"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code schedule} of the {@code Card} that we are building."},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"    public CardBuilder withSchedule(Schedule schedule) {"},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"    public Card build() {"},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"        return new Card(id, front, back, schedule);"},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":76,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":77,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":70,"-":7}},{"path":"src/test/java/seedu/flashy/testutil/EditCardDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCardCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCardCommand.EditCardDescriptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class to help with building EditCardDescriptor objects."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class EditCardDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":"    //@@author shawnclq"},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"    private EditCardDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"    public EditCardDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":"        descriptor \u003d new EditCardCommand.EditCardDescriptor();"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"    public EditCardDescriptorBuilder(EditCardDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"        this.descriptor \u003d new EditCardDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"     * Returns an {@code EditCardDescriptor} with fields containing {@code card}\u0027s details"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"    public EditCardDescriptorBuilder(Card card) {"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"        descriptor \u003d new EditCardDescriptor();"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"        descriptor.setFront(card.getFront());"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"        descriptor.setBack(card.getBack());"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code Front} of the {@code EditCardDescriptor} that we are building."},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"    public EditCardDescriptorBuilder withFront(String front) {"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"        descriptor.setFront(front);"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code Back} of the {@code EditCardDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"    public EditCardDescriptorBuilder withBack(String back) {"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"        descriptor.setBack(back);"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code UUID} of the {@code EditCardDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"    public EditCardDescriptorBuilder withUuid(UUID uuid) {"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"        descriptor.setId(uuid);"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code Options} of the {@code EditCardDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"    public EditCardDescriptorBuilder withOptions(List\u003cString\u003e options) {"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"        descriptor.setOptions(options);"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":70,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"jethrokuan"},"content":"     * Sets the {@code tagsToAdd} of the {@code EditCardDescriptor} that we are building."},{"lineNumber":72,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"jethrokuan"},"content":"    public EditCardDescriptorBuilder withTagsToAdd(Set\u003cTag\u003e tags) {"},{"lineNumber":74,"author":{"gitID":"jethrokuan"},"content":"        descriptor.setTagsToAdd(tags);"},{"lineNumber":75,"author":{"gitID":"jethrokuan"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":78,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"jethrokuan"},"content":"     * Sets the {@code tagsToRemove} of the {@code EditCardDescriptor} t hat we are building."},{"lineNumber":80,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"jethrokuan"},"content":"    public EditCardDescriptorBuilder withTagsToRemove(Set\u003cTag\u003e tags) {"},{"lineNumber":82,"author":{"gitID":"jethrokuan"},"content":"        descriptor.setTagsToRemove(tags);"},{"lineNumber":83,"author":{"gitID":"jethrokuan"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public EditCardDescriptor build() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Shawnclq":52,"jethrokuan":17,"-":21}},{"path":"src/test/java/seedu/flashy/testutil/McqCardBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":10,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Shawnclq"},"content":" * A utility class to help with building Card objects."},{"lineNumber":12,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Shawnclq"},"content":"public class McqCardBuilder extends CardBuilder {"},{"lineNumber":14,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":15,"author":{"gitID":"Shawnclq"},"content":"    public static final String[] DEFAULT_OPTIONS_ARRAY \u003d new String[]{\"9th August\", \"10th August\", \"9th September\"};"},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":"    public static final String DEFAULT_BACK \u003d \"1\";"},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"    public static final List\u003cString\u003e DEFAULT_OPTIONS \u003d Arrays.asList(DEFAULT_OPTIONS_ARRAY);"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"    private List\u003cString\u003e options;"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"    public McqCardBuilder() {"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"        super();"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"        super.back \u003d DEFAULT_BACK;"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"        options \u003d DEFAULT_OPTIONS;"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"     * Initializes the CardBuilder with the data of {@code tagToCopy}."},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"    public McqCardBuilder(McqCard cardToCopy) {"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"        super(cardToCopy);"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"        options \u003d cardToCopy.getOptions();"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"     * Sets the {@code options} of the {@code McqCard} that we are building."},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"    public McqCardBuilder addOption(String option) {"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"        this.options.add(option);"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"     * Resets the {@code options} of the {@code McqCard} that we are building."},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"    public McqCardBuilder resetOptions() {"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"        this.options \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"    public McqCard build() {"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"        return new McqCard(id, front, back, options);"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"}"}],"authorContributionMap":{"Shawnclq":48,"-":8}},{"path":"src/test/java/seedu/flashy/testutil/TypicalMcqCards.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_BACK_CS2101_CARD;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_BACK_CS2103T_CARD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_FRONT_CS2101_CARD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.commands.CommandTestUtil.VALID_FRONT_CS2103T_CARD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":15,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":" * A utility class containing a list of {@code McqCard} objects to be used in tests."},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":"public class TypicalMcqCards {"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":"    public static final McqCard MATHEMATICS_MCQ_CARD \u003d (McqCard) new McqCardBuilder()"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"            .resetOptions()"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"            .addOption(\"1\").addOption(\"2\").addOption(\"3\")"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"            .withId(\"3647849-d900-4f0e-8573-e3c9ab40864054\")"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"What is 1 + 1?\")"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"2\").build();"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"    public static final McqCard CHEMISTRY_MCQ_CARD \u003d (McqCard) new McqCardBuilder()"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"            .resetOptions()"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"            .addOption(\"Covalent bonding\").addOption(\"Ionic bonding\")"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"            .withId(\"f581860a-d5db-4925-aeab-1f1e442457f3\")"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"What is the bonding between non-metals\")"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"1\").build();"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"    public static final McqCard HISTORY_MCQ_CARD \u003d (McqCard) new McqCardBuilder()"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"            .resetOptions()"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"            .addOption(\"1944\").addOption(\"1946\").addOption(\"1945\")"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"            .withId(\"3f92bd2c-affc-499c-a9a0-28b46fd61791\")"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"When did World War II end?\")"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"3\").build();"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"    public static final McqCard GEOGRAPHY_MCQ_CARD \u003d (McqCard) new McqCardBuilder()"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"            .resetOptions()"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"            .addOption(\"Asia\").addOption(\"Africa\").addOption(\"South America\").addOption(\"North America\")"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"            .addOption(\"Europe\").addOption(\"Australia\").addOption(\"Antartica\")"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"            .withId(\"8c19a1f2-cfa2-4060-b9e3-67bd1ef101e0\")"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"Which continent is Singapore in?\")"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"1\").build();"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"    // Manually added"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"    public static final McqCard PHYSICS_MCQ_CARD \u003d (McqCard) new McqCardBuilder()"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"            .resetOptions()"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"            .addOption(\"Air\").addOption(\"Gravity\").addOption(\"Electricity\")"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"            .withId(\"7d59e0a2-4e64-4540-abdf-ce0fa552edb7\")"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"Why do things fall?\")"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"2\").build();"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"    public static final McqCard ENGLISH_MCQ_CARD \u003d (McqCard) new McqCardBuilder()"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"            .resetOptions()"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"            .addOption(\"Noun\").addOption(\"Verb\").addOption(\"Adverb\").addOption(\"Adjectives\")"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"            .withId(\"8f4716c7-f82e-462f-bad1-e59f98b8624e\")"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"            .withFront(\"What are action words?\")"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"            .withBack(\"2\").build();"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"    // Manually added - McqCard\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"    public static final McqCard CS2103T_MCQ_CARD \u003d (McqCard) new McqCardBuilder()"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"            .withFront(VALID_FRONT_CS2103T_CARD)"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"            .withBack(VALID_BACK_CS2103T_CARD).build();"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"    public static final McqCard CS2101_MCQ_CARD \u003d (McqCard) new McqCardBuilder()"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"            .withFront(VALID_FRONT_CS2101_CARD)"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"            .withBack(VALID_BACK_CS2101_CARD).build();"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"    private TypicalMcqCards() {} // prevents instantiation"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"    public static List\u003cMcqCard\u003e getTypicalMcqCards() {"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MATHEMATICS_MCQ_CARD, CHEMISTRY_MCQ_CARD, GEOGRAPHY_MCQ_CARD,"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"                HISTORY_MCQ_CARD, PHYSICS_MCQ_CARD, ENGLISH_MCQ_CARD));"},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"}"}],"authorContributionMap":{"Shawnclq":61,"-":13}},{"path":"src/test/java/seedu/flashy/testutil/FillBlanksCardBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.FillBlanksCard;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":6,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Shawnclq"},"content":" * A utility class to help with building Card objects."},{"lineNumber":8,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Shawnclq"},"content":"public class FillBlanksCardBuilder extends CardBuilder {"},{"lineNumber":10,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":11,"author":{"gitID":"Shawnclq"},"content":"    public static final String DEFAULT_FRONT \u003d \"A square is a polygon with _ side meeting at _ angles\";"},{"lineNumber":12,"author":{"gitID":"Shawnclq"},"content":"    public static final String DEFAULT_BACK \u003d \"equal, right\";"},{"lineNumber":13,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":14,"author":{"gitID":"Shawnclq"},"content":"    public FillBlanksCardBuilder() {"},{"lineNumber":15,"author":{"gitID":"Shawnclq"},"content":"        super();"},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":"        super.front \u003d DEFAULT_FRONT;"},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"        super.back \u003d DEFAULT_BACK;"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"     * Initializes the CardBuilder with the data of {@code tagToCopy}."},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"    public FillBlanksCardBuilder(FillBlanksCard cardToCopy) {"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"        super(cardToCopy);"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"    public FillBlanksCard build() {"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"        return new FillBlanksCard(id, front, back);"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"}"}],"authorContributionMap":{"Shawnclq":28,"-":4}},{"path":"src/main/java/seedu/flashy/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.Autocompleter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.ListElementPointer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.Logic;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.CommandResult;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case TAB:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            autocomplete();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"yong-jie"},"content":"    //@@author yong-jie"},{"lineNumber":95,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"yong-jie"},"content":"     * Checks {@code CommandBox}\u0027s text field to see if it is populated with a valid"},{"lineNumber":97,"author":{"gitID":"yong-jie"},"content":"     * command word. Then replaces text with autocompleter\u0027s text to guide the user"},{"lineNumber":98,"author":{"gitID":"yong-jie"},"content":"     * on the relevant parameters."},{"lineNumber":99,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"yong-jie"},"content":"    private void autocomplete() {"},{"lineNumber":101,"author":{"gitID":"yong-jie"},"content":"        if (!Autocompleter.isValidAutocomplete(commandTextField.getText())) {"},{"lineNumber":102,"author":{"gitID":"yong-jie"},"content":"            return;"},{"lineNumber":103,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"yong-jie"},"content":"        replaceText(Autocompleter.getAutocompleteText(commandTextField.getText()));"},{"lineNumber":105,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"yong-jie"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandfailure();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":147,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandfailure() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yong-jie":13,"-":157}},{"path":"src/main/java/seedu/flashy/ui/CardCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":" * A UI component that displays information about a {@code Card}."},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"public class CardCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"    private static final String FXML \u003d \"CardListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"    public final Card card;"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"    private HBox cardPane;"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":"    private Label name;"},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":"    private Label id;"},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":"    private Label front;"},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":"    private FlowPane tags;"},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"    private FlowPane options;"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"    public CardCard(Card card, int displayedIndex, List\u003cTag\u003e tagList) {"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"        this.card \u003d card;"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":"        id.setText(Integer.toString(displayedIndex));"},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"        front.setText(card.getFront());"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":"        tagList.forEach(tag -\u003e tags.getChildren().add(new Label(tag.getName().toString())));"},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":"        if (card.getType().equals(McqCard.TYPE)) {"},{"lineNumber":48,"author":{"gitID":"yong-jie"},"content":"            for (int i \u003d 0; i \u003c card.getOptions().size(); i++) {"},{"lineNumber":49,"author":{"gitID":"yong-jie"},"content":"                String option \u003d card.getOptions().get(i);"},{"lineNumber":50,"author":{"gitID":"yong-jie"},"content":"                options.getChildren().add(new Label((i + 1) + \") \" + option));"},{"lineNumber":51,"author":{"gitID":"yong-jie"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":55,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"yong-jie"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"yong-jie"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":58,"author":{"gitID":"yong-jie"},"content":"            return true;"},{"lineNumber":59,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":61,"author":{"gitID":"yong-jie"},"content":"        if (!(other instanceof CardCard)) {"},{"lineNumber":62,"author":{"gitID":"yong-jie"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":65,"author":{"gitID":"yong-jie"},"content":"        CardCard card \u003d (CardCard) other;"},{"lineNumber":66,"author":{"gitID":"yong-jie"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":67,"author":{"gitID":"yong-jie"},"content":"                \u0026\u0026 card.equals(card.card);"},{"lineNumber":68,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":56,"-":13}},{"path":"src/main/java/seedu/flashy/ui/CardBack.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.CardListPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.EmptyCardBackEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":" * A UI component that displays information about a {@code Card}."},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"public class CardBack extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"    private static final String FXML \u003d \"CardBack.fxml\";"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"    private Label cardBack;"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"    public CardBack() {"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":"    @Subscribe"},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":"    private void handleCardListPanelSelectionChangedEvent(CardListPanelSelectionChangedEvent event) {"},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":"        Card card \u003d event.getNewSelection().card;"},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":"        if (card.getType().equals(McqCard.TYPE)) {"},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"            cardBack.setText(card.getOptions()"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"                    .get(Integer.valueOf(card.getBack()) - 1));"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":"        } else {"},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"            cardBack.setText(card.getBack());"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"    @Subscribe"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":"    private void handleEmptyCardBackEvent(EmptyCardBackEvent event) {"},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":48,"author":{"gitID":"yong-jie"},"content":"        cardBack.setText(\"\");"},{"lineNumber":49,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":35,"-":15}},{"path":"src/main/java/seedu/flashy/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private CardBack cardBack;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private TagListPanel tagListPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private CardListPanel cardListPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private VBox cardBackPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane tagListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane cardListPanelPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(UiManager.getCurrentTheme());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":104,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":114,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        cardBack \u003d new CardBack();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        cardBackPlaceholder.getChildren().add(cardBack.getRoot());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        tagListPanel \u003d new TagListPanel(logic.getFilteredTagList());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        tagListPanelPlaceholder.getChildren().add(tagListPanel.getRoot());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        cardListPanel \u003d new CardListPanel(logic.getFilteredCardList(), logic.getCardTag(), logic.getTagList());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        cardListPanelPlaceholder.getChildren().add(cardListPanel.getRoot());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getCardBankFilePath());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public TagListPanel getTagListPanel() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return this.tagListPanel;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"yong-jie"},"content":"    //@@author yong-jie"},{"lineNumber":209,"author":{"gitID":"yong-jie"},"content":"    @Subscribe"},{"lineNumber":210,"author":{"gitID":"yong-jie"},"content":"    private void handleChangeThemeEvent(ChangeThemeRequestEvent event) {"},{"lineNumber":211,"author":{"gitID":"yong-jie"},"content":"        String currentTheme \u003d UiManager.getCurrentTheme();"},{"lineNumber":212,"author":{"gitID":"yong-jie"},"content":"        primaryStage.getScene().getStylesheets().removeAll(currentTheme);"},{"lineNumber":213,"author":{"gitID":"yong-jie"},"content":"        primaryStage.getScene().getStylesheets().add(event.theme);"},{"lineNumber":214,"author":{"gitID":"yong-jie"},"content":"        UiManager.setCurrentTheme(event.theme);"},{"lineNumber":215,"author":{"gitID":"yong-jie"},"content":"        this.prefs.setTheme(event.theme);"},{"lineNumber":216,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":10,"-":207}},{"path":"src/main/java/seedu/flashy/ui/CardListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.CardListPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.JumpToCardRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.model.cardtag.CardTag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":" * Panel containing a list of cards"},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":"public class CardListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"    private static final String FXML \u003d \"CardListPanel.fxml\";"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":"    private final CardTag cardTag;"},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"    private final ObservableList\u003cTag\u003e tagList;"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":"    private ListView\u003cCardCard\u003e cardListView;"},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":"    public CardListPanel(ObservableList\u003cCard\u003e filteredCardList, CardTag cardTag, ObservableList\u003cTag\u003e tagList) {"},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"        this.cardTag \u003d cardTag;"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":"        this.tagList \u003d tagList;"},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"        setConnections(filteredCardList);"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":"     * Creates a new CardCard given the index."},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"yong-jie"},"content":"     * Computes the card\u0027s tags, and adds in this information."},{"lineNumber":49,"author":{"gitID":"yong-jie"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"yong-jie"},"content":"     * @param card Given Card"},{"lineNumber":51,"author":{"gitID":"yong-jie"},"content":"     * @param displayedIndex  given Index"},{"lineNumber":52,"author":{"gitID":"yong-jie"},"content":"     * @return new CardCard instance"},{"lineNumber":53,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"yong-jie"},"content":"    public CardCard createCardCard(Card card, int displayedIndex) {"},{"lineNumber":55,"author":{"gitID":"yong-jie"},"content":"        List\u003cTag\u003e tags \u003d cardTag.getTags(card, tagList);"},{"lineNumber":56,"author":{"gitID":"yong-jie"},"content":"        return new CardCard(card, displayedIndex, tags);"},{"lineNumber":57,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":59,"author":{"gitID":"yong-jie"},"content":"    public void setConnections(ObservableList\u003cCard\u003e cardList) {"},{"lineNumber":60,"author":{"gitID":"yong-jie"},"content":"        ObservableList\u003cCardCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":61,"author":{"gitID":"yong-jie"},"content":"                cardList, (card) -\u003e createCardCard(card, cardList.indexOf(card) + 1));"},{"lineNumber":62,"author":{"gitID":"yong-jie"},"content":"        cardListView.setItems(mappedList);"},{"lineNumber":63,"author":{"gitID":"yong-jie"},"content":"        cardListView.setCellFactory(listView -\u003e new CardListViewCell());"},{"lineNumber":64,"author":{"gitID":"yong-jie"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":65,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":67,"author":{"gitID":"yong-jie"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":68,"author":{"gitID":"yong-jie"},"content":"        cardListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":69,"author":{"gitID":"yong-jie"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":70,"author":{"gitID":"yong-jie"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"yong-jie"},"content":"                        logger.fine(\"Selection in card list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":72,"author":{"gitID":"yong-jie"},"content":"                        raise(new CardListPanelSelectionChangedEvent(newValue));"},{"lineNumber":73,"author":{"gitID":"yong-jie"},"content":"                    }"},{"lineNumber":74,"author":{"gitID":"yong-jie"},"content":"                });"},{"lineNumber":75,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":77,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"yong-jie"},"content":"     * Scrolls to the {@code TagCard} at the {@code index} and selects it."},{"lineNumber":79,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"yong-jie"},"content":"    private void scrollTo(int index) {"},{"lineNumber":81,"author":{"gitID":"yong-jie"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":82,"author":{"gitID":"yong-jie"},"content":"            cardListView.scrollTo(index);"},{"lineNumber":83,"author":{"gitID":"yong-jie"},"content":"            cardListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":84,"author":{"gitID":"yong-jie"},"content":"        });"},{"lineNumber":85,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":87,"author":{"gitID":"yong-jie"},"content":"    @Subscribe"},{"lineNumber":88,"author":{"gitID":"yong-jie"},"content":"    private void handleJumpToCardRequestEvent(JumpToCardRequestEvent event) {"},{"lineNumber":89,"author":{"gitID":"yong-jie"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":90,"author":{"gitID":"yong-jie"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":91,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":93,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"yong-jie"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code CardCard}."},{"lineNumber":95,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"yong-jie"},"content":"    class CardListViewCell extends ListCell\u003cCardCard\u003e {"},{"lineNumber":97,"author":{"gitID":"yong-jie"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"yong-jie"},"content":"        protected void updateItem(CardCard card, boolean empty) {"},{"lineNumber":99,"author":{"gitID":"yong-jie"},"content":"            super.updateItem(card, empty);"},{"lineNumber":100,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":101,"author":{"gitID":"yong-jie"},"content":"            if (empty || card \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"yong-jie"},"content":"                setGraphic(null);"},{"lineNumber":103,"author":{"gitID":"yong-jie"},"content":"                setText(null);"},{"lineNumber":104,"author":{"gitID":"yong-jie"},"content":"            } else {"},{"lineNumber":105,"author":{"gitID":"yong-jie"},"content":"                setGraphic(card.getRoot());"},{"lineNumber":106,"author":{"gitID":"yong-jie"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":87,"-":22}},{"path":"src/main/java/seedu/flashy/commons/events/ui/JumpToCardRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":7,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yong-jie"},"content":" * Indicates a request to jump to the list of tags"},{"lineNumber":9,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yong-jie"},"content":"public class JumpToCardRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"    public final int targetIndex;"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"    public JumpToCardRequestEvent(Index targetIndex) {"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":17,"-":5}},{"path":"src/main/java/seedu/flashy/commons/events/ui/ChangeThemeRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":6,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yong-jie"},"content":" * Indicates a request to change theme"},{"lineNumber":8,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yong-jie"},"content":"public class ChangeThemeRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"yong-jie"},"content":"    public final String theme;"},{"lineNumber":11,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"    public ChangeThemeRequestEvent(String theme) {"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":"        this.theme \u003d theme;"},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":16,"-":4}},{"path":"src/main/java/seedu/flashy/commons/events/ui/TagListPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.flashy.ui.TagCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":7,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yong-jie"},"content":" * Represents a selection change in the Tag List Panel"},{"lineNumber":9,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yong-jie"},"content":"public class TagListPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"    private final TagCard newSelection;"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"    public TagListPanelSelectionChangedEvent(TagCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    public TagCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":21,"-":5}},{"path":"src/main/java/seedu/flashy/commons/events/ui/CardListPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.flashy.ui.CardCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":7,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yong-jie"},"content":" * Represents a selection change in the Card List Panel"},{"lineNumber":9,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yong-jie"},"content":"public class CardListPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"    private final CardCard newSelection;"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"    public CardListPanelSelectionChangedEvent(CardCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    public CardCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":22,"-":5}},{"path":"src/main/java/seedu/flashy/commons/events/ui/EmptyCardBackEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":6,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yong-jie"},"content":" * Represents a selection change in the Tag List Panel"},{"lineNumber":8,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yong-jie"},"content":"public class EmptyCardBackEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":11,"author":{"gitID":"yong-jie"},"content":"    public EmptyCardBackEvent() {"},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":14,"-":4}},{"path":"src/main/java/seedu/flashy/logic/parser/SelectCardCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.SelectCardCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":11,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":" * Parses input arguments and creates a new SelectCardCommand object"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"public class SelectCardCommandParser implements Parser\u003cSelectCardCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCardCommand"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":"     * and returns an SelectCardCommand object for execution."},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"    public SelectCardCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"            return new SelectCardCommand(index);"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCardCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":20,"-":9}},{"path":"src/main/java/seedu/flashy/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.Command;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ListCommand;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":8,"author":{"gitID":"jethrokuan"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jethrokuan"},"content":" * Parses input arguments for the list command."},{"lineNumber":10,"author":{"gitID":"jethrokuan"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jethrokuan"},"content":"public class ListCommandParser implements Parser\u003cCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":13,"author":{"gitID":"jethrokuan"},"content":"    public static final String PREFIX_NO_TAGS_ONLY \u003d \"-t\";"},{"lineNumber":14,"author":{"gitID":"jethrokuan"},"content":"    public static final String MESSAGE_PARSE_FAILURE \u003d \"Invalid arguments passed.\\n\\n\" + ListCommand.MESSAGE_USAGE;"},{"lineNumber":15,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"jethrokuan"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand."},{"lineNumber":17,"author":{"gitID":"jethrokuan"},"content":"     * @throws ParseException if the args is invalid"},{"lineNumber":18,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":"    public Command parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":"        if (trimmedArgs.equals(\"\")) {"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":"            return new ListCommand(false);"},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":"        } else if (trimmedArgs.equals(PREFIX_NO_TAGS_ONLY)) {"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":"            return new ListCommand(true);"},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"        } else {"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"            throw new ParseException(MESSAGE_PARSE_FAILURE);"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":"}"}],"authorContributionMap":{"jethrokuan":24,"-":6}},{"path":"src/main/java/seedu/flashy/logic/parser/EditCardCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_ADD_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_BACK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_FRONT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_OPTION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_REMOVE_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCardCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCardCommand.EditCardDescriptor;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":" * Parses input arguments and creates a new EditCardCommand object"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"public class EditCardCommandParser implements Parser\u003cEditCardCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCardCommand"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"     * and returns an EditCardCommand object for execution."},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"    public EditCardCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_FRONT, PREFIX_BACK, PREFIX_OPTION,"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"                        PREFIX_ADD_TAG, PREFIX_REMOVE_TAG);"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"        EditCardCommand.EditCardDescriptor editCardDescriptor \u003d new EditCardDescriptor();"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"            ParserUtil.parseFront(argMultimap.getValue(PREFIX_FRONT))"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"                    .ifPresent(editCardDescriptor::setFront);"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"            ParserUtil.parseBack(argMultimap.getValue(PREFIX_BACK))"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"                    .ifPresent(editCardDescriptor::setBack);"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"            ParserUtil.parseOptions(argMultimap.getAllValues(PREFIX_OPTION))"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"                    .ifPresent(editCardDescriptor::setOptions);"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"            ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_ADD_TAG))"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"                    .ifPresent(editCardDescriptor::setTagsToAdd);"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"            ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_REMOVE_TAG))"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"                    .ifPresent(editCardDescriptor::setTagsToRemove);"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"        if (!editCardDescriptor.isAnyFieldEdited()) {"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"            throw new ParseException(EditCardCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"        return new EditCardCommand(index, editCardDescriptor);"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"//@@author"},{"lineNumber":66,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"Shawnclq":49,"-":17}},{"path":"src/main/java/seedu/flashy/logic/parser/AnswerCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_CONFIDENCE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.AnswerCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":13,"author":{"gitID":"pukipuki"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"pukipuki"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":15,"author":{"gitID":"pukipuki"},"content":" */"},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":"public class AnswerCommandParser implements Parser\u003cAnswerCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"    public AnswerCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_CONFIDENCE);"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CONFIDENCE)"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"            int confidenceLevel \u003d ParserUtil.parseConfidenceLevel(argMultimap.getValue(PREFIX_CONFIDENCE).get());"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"            return new AnswerCommand(confidenceLevel);"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":37,"-":11}},{"path":"src/main/java/seedu/flashy/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.ui.UiManager.VALID_THEMES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.DateTimeException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.util.StringUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.FillBlanksCard;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Schedule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_THEME \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        \"Theme must be one of \" + String.join(\", \", VALID_THEMES);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_NUMBER \u003d \"Not a number, please put a valid number.\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Shawnclq"},"content":"    //@@author shawnclq"},{"lineNumber":83,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"Shawnclq"},"content":"     * Parses a {@code String card} into an {@code String}."},{"lineNumber":85,"author":{"gitID":"Shawnclq"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitID":"Shawnclq"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"Shawnclq"},"content":"     * @throws IllegalValueException if the given {@code card} is invalid."},{"lineNumber":88,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Shawnclq"},"content":"    public static String parseCard(String card) throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"Shawnclq"},"content":"        requireNonNull(card);"},{"lineNumber":91,"author":{"gitID":"Shawnclq"},"content":"        String trimmedCard \u003d card.trim();"},{"lineNumber":92,"author":{"gitID":"Shawnclq"},"content":"        if (!Card.isValidCard(trimmedCard)) {"},{"lineNumber":93,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"Shawnclq"},"content":"        return trimmedCard;"},{"lineNumber":96,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":98,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"Shawnclq"},"content":"     * Parses a {@code String card} into an {@code String}."},{"lineNumber":100,"author":{"gitID":"Shawnclq"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitID":"Shawnclq"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"Shawnclq"},"content":"     * @throws IllegalValueException if the given {@code String} is invalid."},{"lineNumber":103,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"Shawnclq"},"content":"    public static String parseMcqOption(String option) throws IllegalValueException {"},{"lineNumber":105,"author":{"gitID":"Shawnclq"},"content":"        requireNonNull(option);"},{"lineNumber":106,"author":{"gitID":"Shawnclq"},"content":"        String trimmedOption \u003d option.trim();"},{"lineNumber":107,"author":{"gitID":"Shawnclq"},"content":"        if (!Card.isValidCard(trimmedOption)) {"},{"lineNumber":108,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(McqCard.MESSAGE_MCQ_CARD_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Shawnclq"},"content":"        return trimmedOption;"},{"lineNumber":111,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":113,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"Shawnclq"},"content":"     * Parses a {@code String front, back, Set\u003cString\u003e options} into an {@code McqCard}."},{"lineNumber":115,"author":{"gitID":"Shawnclq"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":116,"author":{"gitID":"Shawnclq"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"Shawnclq"},"content":"     * @throws IllegalValueException if the given parameters are invalid."},{"lineNumber":118,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Shawnclq"},"content":"    public static McqCard parseMcqCard(String front, String back, List\u003cString\u003e options) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"Shawnclq"},"content":"        requireNonNull(front);"},{"lineNumber":121,"author":{"gitID":"Shawnclq"},"content":"        requireNonNull(back);"},{"lineNumber":122,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(options);"},{"lineNumber":123,"author":{"gitID":"Shawnclq"},"content":"        if (!McqCard.isValidMcqCard(back, options)) {"},{"lineNumber":124,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(McqCard.MESSAGE_MCQ_CARD_ANSWER_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Shawnclq"},"content":"        return new McqCard(front, back, options);"},{"lineNumber":127,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":129,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"Shawnclq"},"content":"     * Parses a {@code String card} into an {@code String}."},{"lineNumber":131,"author":{"gitID":"Shawnclq"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":132,"author":{"gitID":"Shawnclq"},"content":"     *"},{"lineNumber":133,"author":{"gitID":"Shawnclq"},"content":"     * @throws IllegalValueException if the given {@code String} is invalid."},{"lineNumber":134,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"Shawnclq"},"content":"    public static FillBlanksCard parseFillBlanksCard(String front, String back) throws IllegalValueException {"},{"lineNumber":136,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(front, back);"},{"lineNumber":137,"author":{"gitID":"Shawnclq"},"content":"        if (!FillBlanksCard.isValidFillBlanksCard(front, back)) {"},{"lineNumber":138,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(FillBlanksCard.MESSAGE_FILLBLANKS_CARD_ANSWER_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"Shawnclq"},"content":"        return new FillBlanksCard(front, back);"},{"lineNumber":141,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":143,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"Shawnclq"},"content":"     * Parses a {@code Optional\u003cString\u003e front} into an {@code Optional\u003cCard\u003e} if {@code front} is present."},{"lineNumber":145,"author":{"gitID":"Shawnclq"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":146,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"Shawnclq"},"content":"    public static Optional\u003cString\u003e parseFront(Optional\u003cString\u003e front) throws IllegalValueException {"},{"lineNumber":148,"author":{"gitID":"Shawnclq"},"content":"        requireNonNull(front);"},{"lineNumber":149,"author":{"gitID":"Shawnclq"},"content":"        if (front.isPresent()) {"},{"lineNumber":150,"author":{"gitID":"Shawnclq"},"content":"            if (!Card.isValidCard(front.get())) {"},{"lineNumber":151,"author":{"gitID":"Shawnclq"},"content":"                throw new IllegalValueException(Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":152,"author":{"gitID":"Shawnclq"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"Shawnclq"},"content":"        return front.isPresent() ? Optional.of(parseCard(front.get())) : Optional.empty();"},{"lineNumber":155,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":157,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"Shawnclq"},"content":"     * Parses a {@code Optional\u003cString\u003e front} into an {@code Optional\u003cCard\u003e} if {@code front} is present."},{"lineNumber":159,"author":{"gitID":"Shawnclq"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":160,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"Shawnclq"},"content":"    public static Optional\u003cString\u003e parseBack(Optional\u003cString\u003e back) throws IllegalValueException {"},{"lineNumber":162,"author":{"gitID":"Shawnclq"},"content":"        requireNonNull(back);"},{"lineNumber":163,"author":{"gitID":"Shawnclq"},"content":"        if (back.isPresent()) {"},{"lineNumber":164,"author":{"gitID":"Shawnclq"},"content":"            if (!Card.isValidCard(back.get())) {"},{"lineNumber":165,"author":{"gitID":"Shawnclq"},"content":"                throw new IllegalValueException(Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"Shawnclq"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"Shawnclq"},"content":"        return back.isPresent() ? Optional.of(parseCard(back.get())) : Optional.empty();"},{"lineNumber":169,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":171,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"Shawnclq"},"content":"     * Parses a {@code List\u003cString\u003e} into a {@code Optional\u003cList\u003cString\u003e\u003e}"},{"lineNumber":173,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"Shawnclq"},"content":"    public static Optional\u003cList\u003cString\u003e\u003e parseOptions(List\u003cString\u003e optionValues) throws IllegalValueException {"},{"lineNumber":175,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(optionValues);"},{"lineNumber":176,"author":{"gitID":"Shawnclq"},"content":"        if (optionValues.isEmpty()) {"},{"lineNumber":177,"author":{"gitID":"Shawnclq"},"content":"            return Optional.empty();"},{"lineNumber":178,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":180,"author":{"gitID":"Shawnclq"},"content":"        List\u003cString\u003e options \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":181,"author":{"gitID":"Shawnclq"},"content":"        for (String option : optionValues) {"},{"lineNumber":182,"author":{"gitID":"Shawnclq"},"content":"            if (!Card.isValidCard(option)) {"},{"lineNumber":183,"author":{"gitID":"Shawnclq"},"content":"                throw new IllegalValueException(McqCard.MESSAGE_MCQ_CARD_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"Shawnclq"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"Shawnclq"},"content":"            options.add(option.trim());"},{"lineNumber":186,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":188,"author":{"gitID":"Shawnclq"},"content":"        return Optional.of(options);"},{"lineNumber":189,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"Shawnclq"},"content":"    //@@author"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"yong-jie"},"content":"    //@@author yong-jie"},{"lineNumber":193,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"yong-jie"},"content":"     * Parses a {@code String theme} into an {@code Integer}."},{"lineNumber":195,"author":{"gitID":"yong-jie"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":196,"author":{"gitID":"yong-jie"},"content":"     *"},{"lineNumber":197,"author":{"gitID":"yong-jie"},"content":"     * @throws IllegalValueException if the given {@code theme} is invalid."},{"lineNumber":198,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"yong-jie"},"content":"    public static Integer parseTheme(Optional\u003cString\u003e theme) throws IllegalValueException {"},{"lineNumber":200,"author":{"gitID":"yong-jie"},"content":"        final ArrayList\u003cString\u003e validThemes \u003d new ArrayList\u003cString\u003e(Arrays.asList(VALID_THEMES));"},{"lineNumber":201,"author":{"gitID":"yong-jie"},"content":"        requireNonNull(theme);"},{"lineNumber":202,"author":{"gitID":"yong-jie"},"content":"        if (!validThemes.contains(theme.get())) {"},{"lineNumber":203,"author":{"gitID":"yong-jie"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_THEME);"},{"lineNumber":204,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"yong-jie"},"content":"        return validThemes.indexOf(theme.get());"},{"lineNumber":206,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"yong-jie"},"content":"    //@@author"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"pukipuki"},"content":"    //@@author pukipuki"},{"lineNumber":210,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":211,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"pukipuki"},"content":"     * Parses a {@code String confidenceLevel} into an {@code Integer}."},{"lineNumber":213,"author":{"gitID":"pukipuki"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":214,"author":{"gitID":"pukipuki"},"content":"     *"},{"lineNumber":215,"author":{"gitID":"pukipuki"},"content":"     * @throws IllegalValueException if the given {@code confidenceLevel} is invalid."},{"lineNumber":216,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"pukipuki"},"content":"    public static int parseConfidenceLevel(String confidenceLevelString) throws IllegalValueException {"},{"lineNumber":218,"author":{"gitID":"pukipuki"},"content":"        requireNonNull(confidenceLevelString);"},{"lineNumber":219,"author":{"gitID":"pukipuki"},"content":"        String trimmedConfidenceLevelString \u003d confidenceLevelString.trim();"},{"lineNumber":220,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":221,"author":{"gitID":"pukipuki"},"content":"            if (!Schedule"},{"lineNumber":222,"author":{"gitID":"pukipuki"},"content":"                .isValidConfidenceLevel(trimmedConfidenceLevelString)) {"},{"lineNumber":223,"author":{"gitID":"pukipuki"},"content":"                throw new IllegalValueException(Schedule.MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"pukipuki"},"content":"            }"},{"lineNumber":225,"author":{"gitID":"pukipuki"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":226,"author":{"gitID":"pukipuki"},"content":"            throw new IllegalValueException(Schedule.MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":227,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"pukipuki"},"content":"        return Integer.parseInt(confidenceLevelString);"},{"lineNumber":229,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":231,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"pukipuki"},"content":"     * Parses {@code String dayString, String monthString, String yearString} into a {@code LocalDateTime}."},{"lineNumber":233,"author":{"gitID":"pukipuki"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":234,"author":{"gitID":"pukipuki"},"content":"     *"},{"lineNumber":235,"author":{"gitID":"pukipuki"},"content":"     * @throws IllegalValueException if the given date is invalid."},{"lineNumber":236,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"pukipuki"},"content":"    public static LocalDateTime parseDate(String dayString, String monthString, String yearString)"},{"lineNumber":238,"author":{"gitID":"pukipuki"},"content":"        throws IllegalValueException, DateTimeException {"},{"lineNumber":239,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":240,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":241,"author":{"gitID":"pukipuki"},"content":"            int year \u003d getYear(yearString);"},{"lineNumber":242,"author":{"gitID":"pukipuki"},"content":"            int month \u003d getMonth(monthString);"},{"lineNumber":243,"author":{"gitID":"pukipuki"},"content":"            int day \u003d getDay(dayString);"},{"lineNumber":244,"author":{"gitID":"pukipuki"},"content":"            if (!Schedule.isValidDay(day)) {"},{"lineNumber":245,"author":{"gitID":"pukipuki"},"content":"                throw new IllegalValueException(Schedule.MESSAGE_DAY_CONSTRAINTS);"},{"lineNumber":246,"author":{"gitID":"pukipuki"},"content":"            } else if (!Schedule.isValidMonth(month)) {"},{"lineNumber":247,"author":{"gitID":"pukipuki"},"content":"                throw new IllegalValueException(Schedule.MESSAGE_MONTH_CONSTRAINTS);"},{"lineNumber":248,"author":{"gitID":"pukipuki"},"content":"            }"},{"lineNumber":249,"author":{"gitID":"pukipuki"},"content":"            LocalDateTime date \u003d LocalDate.of(year, month, day).atStartOfDay();"},{"lineNumber":250,"author":{"gitID":"pukipuki"},"content":"            return date;"},{"lineNumber":251,"author":{"gitID":"pukipuki"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":252,"author":{"gitID":"pukipuki"},"content":"            throw new IllegalValueException(dte.getMessage());"},{"lineNumber":253,"author":{"gitID":"pukipuki"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":254,"author":{"gitID":"pukipuki"},"content":"            throw new IllegalValueException(e.getMessage());"},{"lineNumber":255,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":258,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"pukipuki"},"content":"     * Helper functions for parseDate"},{"lineNumber":260,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"pukipuki"},"content":"    public static String trimDateArgs(Optional\u003cString\u003e args) {"},{"lineNumber":262,"author":{"gitID":"pukipuki"},"content":"        if (args.isPresent()) {"},{"lineNumber":263,"author":{"gitID":"pukipuki"},"content":"            return args.get();"},{"lineNumber":264,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":265,"author":{"gitID":"pukipuki"},"content":"            return \"\";"},{"lineNumber":266,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":269,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"pukipuki"},"content":"     * Helper functions for parseDate"},{"lineNumber":271,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"pukipuki"},"content":"    public static int getYear(String yearString) {"},{"lineNumber":273,"author":{"gitID":"pukipuki"},"content":"        if (yearString.equals(\"\")) {"},{"lineNumber":274,"author":{"gitID":"pukipuki"},"content":"            return LocalDate.now().getYear();"},{"lineNumber":275,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":276,"author":{"gitID":"pukipuki"},"content":"            try {"},{"lineNumber":277,"author":{"gitID":"pukipuki"},"content":"                return Integer.parseInt(yearString);"},{"lineNumber":278,"author":{"gitID":"pukipuki"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":279,"author":{"gitID":"pukipuki"},"content":"                throw new NumberFormatException(MESSAGE_INVALID_NUMBER);"},{"lineNumber":280,"author":{"gitID":"pukipuki"},"content":"            }"},{"lineNumber":281,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":284,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"pukipuki"},"content":"     * Helper functions for parseDate"},{"lineNumber":286,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"pukipuki"},"content":"    public static int getMonth(String monthString) {"},{"lineNumber":288,"author":{"gitID":"pukipuki"},"content":"        if (monthString.equals(\"\")) {"},{"lineNumber":289,"author":{"gitID":"pukipuki"},"content":"            return LocalDate.now().getMonthValue();"},{"lineNumber":290,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":291,"author":{"gitID":"pukipuki"},"content":"            try {"},{"lineNumber":292,"author":{"gitID":"pukipuki"},"content":"                return Integer.parseInt(monthString);"},{"lineNumber":293,"author":{"gitID":"pukipuki"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":294,"author":{"gitID":"pukipuki"},"content":"                throw new NumberFormatException(MESSAGE_INVALID_NUMBER);"},{"lineNumber":295,"author":{"gitID":"pukipuki"},"content":"            }"},{"lineNumber":296,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":299,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"pukipuki"},"content":"     * Helper functions for parseDate"},{"lineNumber":301,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"pukipuki"},"content":"    public static int getDay(String dayString) {"},{"lineNumber":303,"author":{"gitID":"pukipuki"},"content":"        if (dayString.equals(\"\")) {"},{"lineNumber":304,"author":{"gitID":"pukipuki"},"content":"            return LocalDate.now().getDayOfMonth();"},{"lineNumber":305,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":306,"author":{"gitID":"pukipuki"},"content":"            try {"},{"lineNumber":307,"author":{"gitID":"pukipuki"},"content":"                return Integer.parseInt(dayString);"},{"lineNumber":308,"author":{"gitID":"pukipuki"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":309,"author":{"gitID":"pukipuki"},"content":"                throw new NumberFormatException(MESSAGE_INVALID_NUMBER);"},{"lineNumber":310,"author":{"gitID":"pukipuki"},"content":"            }"},{"lineNumber":311,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"pukipuki"},"content":"    //@@author"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":316,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":317,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":318,"author":{"gitID":"jethrokuan"},"content":"     * Parses a {@code String tag} into a {@code Tag}"},{"lineNumber":319,"author":{"gitID":"jethrokuan"},"content":"     * Leading and trailing whitespaces will be trimmed"},{"lineNumber":320,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":321,"author":{"gitID":"jethrokuan"},"content":"    public static Optional\u003cSet\u003cTag\u003e\u003e parseTags(List\u003cString\u003e tagNames) throws IllegalValueException {"},{"lineNumber":322,"author":{"gitID":"jethrokuan"},"content":"        if (tagNames.isEmpty()) {"},{"lineNumber":323,"author":{"gitID":"jethrokuan"},"content":"            return Optional.empty();"},{"lineNumber":324,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":326,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":327,"author":{"gitID":"jethrokuan"},"content":"        for (String tagName : tagNames) {"},{"lineNumber":328,"author":{"gitID":"jethrokuan"},"content":"            if (!Name.isValidName(tagName)) {"},{"lineNumber":329,"author":{"gitID":"jethrokuan"},"content":"                throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":330,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":331,"author":{"gitID":"jethrokuan"},"content":"            tags.add(new Tag(new Name(tagName.trim())));"},{"lineNumber":332,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":334,"author":{"gitID":"jethrokuan"},"content":"        return Optional.of(tags);"},{"lineNumber":335,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":337,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Shawnclq":109,"yong-jie":16,"jethrokuan":22,"pukipuki":105,"-":85}},{"path":"src/main/java/seedu/flashy/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_THEME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ChangeThemeCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":" * Parses input arguments and returns a new ChangeThemeCommand object"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"     * and returns an ChangeThemeCommand object for execution."},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"    public ChangeThemeCommand parse(String userInput) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_THEME);"},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_THEME)) {"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":"            Integer theme \u003d ParserUtil.parseTheme(argMultimap.getValue(PREFIX_THEME));"},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"            return new ChangeThemeCommand(theme);"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":34,"-":11}},{"path":"src/main/java/seedu/flashy/logic/parser/AddCardCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_BACK;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_FRONT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_OPTION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.AddCardCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.FillBlanksCard;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":" * Parses input arguments and creates a new AddCardCommand object"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"public class AddCardCommandParser implements Parser\u003cAddCardCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCardCommand"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"     * and returns an AddCardCommand object for execution."},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"    public AddCardCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_FRONT, PREFIX_BACK, PREFIX_OPTION, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_FRONT, PREFIX_BACK)"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"            String front \u003d ParserUtil.parseCard(argMultimap.getValue(PREFIX_FRONT).get());"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"            String back \u003d ParserUtil.parseCard(argMultimap.getValue(PREFIX_BACK).get());"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"            List\u003cString\u003e options \u003d argMultimap.getAllValues(PREFIX_OPTION);"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"            Optional\u003cSet\u003cTag\u003e\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"            Card card;"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"            if (options.isEmpty()) {"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"                if (FillBlanksCard.containsBlanks(front)) {"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"                    card \u003d ParserUtil.parseFillBlanksCard(front, back);"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"                } else {"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"                    card \u003d new Card(front, back);"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"                }"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"            } else {"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"                for (String option: options) {"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"                    ParserUtil.parseMcqOption(option);"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"                }"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"                card \u003d ParserUtil.parseMcqCard(front, back, options);"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"                card.setType(McqCard.TYPE);"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"            return new AddCardCommand(card, tags);"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":75,"author":{"gitID":"Shawnclq"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":76,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":78,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":79,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":58,"-":21}},{"path":"src/main/java/seedu/flashy/logic/parser/ShowDueCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_MONTH;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ShowDueCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":" * Parses input arguments and creates a new ShowDueCommand object"},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":" */"},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"public class ShowDueCommandParser implements Parser\u003cShowDueCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_NOT_MORE_THAN_ONE \u003d \"Only one of each d/ m/ y/ argument allowed.\\n\";"},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"     * Parses the given {@code String} of arguments in the context of the ShowDueCommand"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"     * and returns an ShowDueCommand object for execution."},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"    public ShowDueCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR);"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"        if (!argMultimap.getPreamble().isEmpty()"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 !anyPrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR)) {"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowDueCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"        } else if (moreThanOnePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR)) {"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"            throw new ParseException(MESSAGE_NOT_MORE_THAN_ONE"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"                + String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowDueCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"        String dayString \u003d ParserUtil.trimDateArgs(argMultimap.getValue(PREFIX_DAY));"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"        String monthString \u003d ParserUtil.trimDateArgs(argMultimap.getValue(PREFIX_MONTH));"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"        String yearString \u003d ParserUtil.trimDateArgs(argMultimap.getValue(PREFIX_YEAR));"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"            LocalDateTime date \u003d ParserUtil.parseDate(dayString, monthString, yearString);"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"            return new ShowDueCommand(date);"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"     * Returns true if any of the prefix is present."},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"     * Returns true if more than one of the same prefix is present."},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":"    private static boolean moreThanOnePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003e 1);"},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":52,"-":14}},{"path":"src/main/java/seedu/flashy/logic/parser/DeleteCardCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.DeleteCardCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":10,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Shawnclq"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":12,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Shawnclq"},"content":"public class DeleteCardCommandParser implements Parser\u003cDeleteCardCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":15,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"     * and returns an DeleteCardCommand object for execution."},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":"    public DeleteCardCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"            return new DeleteCardCommand(index);"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":23,"-":8}},{"path":"src/main/java/seedu/flashy/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.model.Model.PREDICATE_SHOW_ALL_TAGS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.EmptyCardBackEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.ListCommandParser;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":10,"author":{"gitID":"jethrokuan"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jethrokuan"},"content":" * Lists all cards in the card bank."},{"lineNumber":12,"author":{"gitID":"jethrokuan"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jethrokuan"},"content":"public class ListCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"jethrokuan"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":15,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":16,"author":{"gitID":"jethrokuan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Cleared all filters.\";"},{"lineNumber":17,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":18,"author":{"gitID":"jethrokuan"},"content":"    public static final String MESSAGE_SUCCESS_NO_TAGS_ONLY \u003d \"Showing cards with no tags.\";"},{"lineNumber":19,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":"    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": lists all cards and tags.\\n\""},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":"            + COMMAND_WORD + \" \" + ListCommandParser.PREFIX_NO_TAGS_ONLY + \": lists only cards without tags.\";"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":"    private final boolean untaggedOnly;"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"    public ListCommand(boolean untaggedOnly) {"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"        this.untaggedOnly \u003d untaggedOnly;"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":"        String message;"},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":"        model.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":"        if (untaggedOnly) {"},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":"            message \u003d MESSAGE_SUCCESS_NO_TAGS_ONLY;"},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":"            model.showUntaggedCards();"},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":"        } else {"},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":"            message \u003d MESSAGE_SUCCESS;"},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"            model.showAllCards();"},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":"        EventsCenter.getInstance().post(new EmptyCardBackEvent());"},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"        return new CommandResult(message);"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":"        return other \u003d\u003d this"},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":"                || (other instanceof ListCommand)"},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":"                \u0026\u0026 untaggedOnly \u003d\u003d ((ListCommand) other).untaggedOnly;"},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":44,"-":8}},{"path":"src/main/java/seedu/flashy/logic/commands/ShowDueCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_MONTH;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":11,"author":{"gitID":"pukipuki"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"pukipuki"},"content":" * Lists all cards in the card book."},{"lineNumber":13,"author":{"gitID":"pukipuki"},"content":" */"},{"lineNumber":14,"author":{"gitID":"pukipuki"},"content":"public class ShowDueCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"pukipuki"},"content":"    public static final String COMMAND_WORD \u003d \"showdue\";"},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all cards due on a date.\\n\""},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":"        + \"Optional Parameters: if parameter is not given, will default to today\u0027s day, month or year.\""},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":"        + PREFIX_DAY + \"30 \""},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"        + PREFIX_MONTH + \"2 \""},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":"        + PREFIX_YEAR + \"2018\";"},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all cards due before, %s.\\n%s\";"},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_COMPLETED \u003d \"But you have no cards due. Hurray!\";"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD;"},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"    private final LocalDateTime date;"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"    public ShowDueCommand(LocalDateTime date) {"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"        requireNonNull(date);"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"        this.date \u003d date;"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"    public CommandResult execute() {"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"        requireNonNull(this.date);"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"        model.showDueCards(this.date);"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, date.toLocalDate().toString(), correctButEmpty()));"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"     * The commands work properly, but need to notify user that there are no cards to study for that date."},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"     * @return"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"    public String correctButEmpty() {"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"        if (model.getFilteredCardList().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"            return MESSAGE_COMPLETED;"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"            return \"\";"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"            || (other instanceof ShowDueCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 date.equals(((ShowDueCommand) other).date));"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":48,"-":9}},{"path":"src/main/java/seedu/flashy/logic/parser/ScheduleCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_MONTH;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ScheduleCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":" * Parses input arguments and creates a new ScheduleCommand object"},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":" */"},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_NOT_MORE_THAN_ONE \u003d \"Only one of each d/ m/ y/ argument allowed.\\n\";"},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"     * and returns an ScheduleCommand object for execution."},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"    public ScheduleCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR);"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"        if (!argMultimap.getPreamble().isEmpty()"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 !anyPrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR)) {"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"        } else if (moreThanOnePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_MONTH, PREFIX_YEAR)) {"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"            throw new ParseException(MESSAGE_NOT_MORE_THAN_ONE"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"                + String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"        String dayString \u003d ParserUtil.trimDateArgs(argMultimap.getValue(PREFIX_DAY));"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"        String monthString \u003d ParserUtil.trimDateArgs(argMultimap.getValue(PREFIX_MONTH));"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"        String yearString \u003d ParserUtil.trimDateArgs(argMultimap.getValue(PREFIX_YEAR));"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"            LocalDateTime date \u003d ParserUtil.parseDate(dayString, monthString, yearString);"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"            return new ScheduleCommand(date);"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"     * Returns true if any of the prefix is present."},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":"     * Returns true if more than one of the same prefix is present."},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":"    private static boolean moreThanOnePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003e 1);"},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":53,"-":14}},{"path":"src/main/java/seedu/flashy/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_THEME;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":9,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yong-jie"},"content":" * Changes the theme of the UI."},{"lineNumber":11,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"    public static final String PARAMS \u003d PREFIX_THEME + \"THEME\";"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Theme changed successfully\";"},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the colour scheme of the application.\""},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"            + PARAMS"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"            +  \" \""},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"            + PREFIX_THEME + \"light \";"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + PARAMS;"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"    private final String[] themeStrings \u003d {\"view/LightTheme.css\", \"view/DarkTheme.css\"};"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":"    private final String newTheme;"},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":"    public ChangeThemeCommand(Integer themeIndex) {"},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"        newTheme \u003d themeStrings[themeIndex];"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":"    public CommandResult execute() {"},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":"        EventsCenter.getInstance().post(new ChangeThemeRequestEvent(newTheme));"},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"                \u0026\u0026 newTheme.equals(((ChangeThemeCommand) other).newTheme));"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":40,"-":7}},{"path":"src/main/java/seedu/flashy/logic/commands/AnswerCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_CONFIDENCE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.NoCardSelectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":10,"author":{"gitID":"pukipuki"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"pukipuki"},"content":" * Answers a selected flashcard"},{"lineNumber":12,"author":{"gitID":"pukipuki"},"content":" */"},{"lineNumber":13,"author":{"gitID":"pukipuki"},"content":"public class AnswerCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":15,"author":{"gitID":"pukipuki"},"content":"    public static final String COMMAND_WORD \u003d \"answer\";"},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Answer a selected flashcard. \""},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"            + PREFIX_CONFIDENCE + \"CONFIDENCE LEVEL\";"},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Your card has been scheduled.\";"},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_CARD_NOT_SELECTED \u003d \"Cannot answer to no card, please select a card first.\";"},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"    private final int confidenceLevel;"},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"     * Creates an AnswerCommand to answer the selected {@code Card}"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"    public AnswerCommand(int confidenceLevel) {"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"        this.confidenceLevel \u003d confidenceLevel;"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"            model.answerSelectedCard(confidenceLevel);"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"        } catch (NoCardSelectedException e) {"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"            throw new CommandException(MESSAGE_CARD_NOT_SELECTED);"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"                || (other instanceof AnswerCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"                \u0026\u0026 confidenceLevel \u003d\u003d (((AnswerCommand) other).confidenceLevel));"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":42,"-":8}},{"path":"src/main/java/seedu/flashy/logic/commands/SelectCardCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.JumpToCardRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":13,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yong-jie"},"content":" * Selects a card identified using it\u0027s last displayed index from the card bank."},{"lineNumber":15,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yong-jie"},"content":"public class SelectCardCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"yong-jie"},"content":"    public static final String COMMAND_WORD \u003d \"selectc\";"},{"lineNumber":18,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":19,"author":{"gitID":"yong-jie"},"content":"    public static final String PARAMS \u003d \"INDEX\";"},{"lineNumber":20,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":21,"author":{"gitID":"yong-jie"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"yong-jie"},"content":"            + \": Selects the card identified by the index number used in the last card listing.\\n\""},{"lineNumber":23,"author":{"gitID":"yong-jie"},"content":"            + \"Parameters: \" + PARAMS"},{"lineNumber":24,"author":{"gitID":"yong-jie"},"content":"            + \" Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"    public static final String AUTOCOMPLETE_TEXT \u003d COMMAND_WORD + \" \" + PARAMS;"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":"    public static final String MESSAGE_SELECT_CARD_SUCCESS \u003d \"Selected Card: %1$s\";"},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"    public SelectCardCommand(Index targetIndex) {"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":"        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"        EventsCenter.getInstance().post(new JumpToCardRequestEvent(targetIndex));"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_CARD_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":48,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":50,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"yong-jie"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"yong-jie"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"yong-jie"},"content":"                || (other instanceof SelectCardCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"yong-jie"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCardCommand) other).targetIndex)); // state check"},{"lineNumber":55,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":45,"-":11}},{"path":"src/main/java/seedu/flashy/logic/commands/ScheduleCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_DAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_MONTH;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.flashy.logic.parser.CliSyntax.PREFIX_YEAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.NoCardSelectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":14,"author":{"gitID":"pukipuki"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"pukipuki"},"content":" * Schedule the selected flashcard"},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":" */"},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":"public class ScheduleCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":"    public static final String COMMAND_WORD \u003d \"schedule\";"},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedule card to be reviewed on the specified date.\\n\""},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":"            + \"Optional Parameters: if parameter is not given, will default to today\u0027s day, month or year.\""},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":"            + PREFIX_DAY + \"30 \""},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":"            + PREFIX_MONTH + \"2 \""},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"            + PREFIX_YEAR + \"2018\";"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Card scheduled for review on %s\";"},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_CARD_NOT_SELECTED \u003d \"Cannot answer to no card, please select a card first.\";"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"    private final LocalDateTime date;"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"     * Creates an ScheduleCommand to schedule the selected {@code Card}"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"    public ScheduleCommand(LocalDateTime date) {"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"        this.date \u003d date;"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"        requireNonNull(model);"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"            model.setNextReview(this.date);"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, this.date.toLocalDate().toString()));"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":"        } catch (NoCardSelectedException e) {"},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"            throw new CommandException(MESSAGE_CARD_NOT_SELECTED);"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":"                || (other instanceof ScheduleCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"                \u0026\u0026 date.equals(((ScheduleCommand) other).date));"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":41,"-":12}},{"path":"src/main/java/seedu/flashy/logic/Autocompleter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.AddCardCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ChangeThemeCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.DeleteCardCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCardCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.SelectCardCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.ShowDueCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"yong-jie"},"content":"//@@author yong-jie"},{"lineNumber":26,"author":{"gitID":"yong-jie"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"yong-jie"},"content":" * Abstracts the logic of collating the commands, COMMAND_WORDs and AUTOCOMPLETE_TEXTs, and"},{"lineNumber":28,"author":{"gitID":"yong-jie"},"content":" * determining the eligibility of command box text replacement."},{"lineNumber":29,"author":{"gitID":"yong-jie"},"content":" */"},{"lineNumber":30,"author":{"gitID":"yong-jie"},"content":"public class Autocompleter {"},{"lineNumber":31,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":32,"author":{"gitID":"yong-jie"},"content":"    public static String getAutocompleteText(String input) {"},{"lineNumber":33,"author":{"gitID":"yong-jie"},"content":"        return getAutocompleteTexts()"},{"lineNumber":34,"author":{"gitID":"yong-jie"},"content":"                .stream()"},{"lineNumber":35,"author":{"gitID":"yong-jie"},"content":"                .filter(text -\u003e text.startsWith(input))"},{"lineNumber":36,"author":{"gitID":"yong-jie"},"content":"                .collect(Collectors.toList())"},{"lineNumber":37,"author":{"gitID":"yong-jie"},"content":"                .get(0);"},{"lineNumber":38,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":40,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"yong-jie"},"content":"     * Checks if the input text given is a valid candidate"},{"lineNumber":42,"author":{"gitID":"yong-jie"},"content":"     * for autocompletion."},{"lineNumber":43,"author":{"gitID":"yong-jie"},"content":"     * @param input The input text"},{"lineNumber":44,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"yong-jie"},"content":"    public static Boolean isValidAutocomplete(String input) {"},{"lineNumber":46,"author":{"gitID":"yong-jie"},"content":"        return getCommandWords()"},{"lineNumber":47,"author":{"gitID":"yong-jie"},"content":"                .stream()"},{"lineNumber":48,"author":{"gitID":"yong-jie"},"content":"                .filter(word -\u003e input.startsWith(word))"},{"lineNumber":49,"author":{"gitID":"yong-jie"},"content":"                .collect(Collectors.toList())"},{"lineNumber":50,"author":{"gitID":"yong-jie"},"content":"                .size() \u003e 0;"},{"lineNumber":51,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":53,"author":{"gitID":"yong-jie"},"content":"    private static List\u003cString\u003e getAutocompleteTexts() {"},{"lineNumber":54,"author":{"gitID":"yong-jie"},"content":"        return getCommandFields(\"AUTOCOMPLETE_TEXT\");"},{"lineNumber":55,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":57,"author":{"gitID":"yong-jie"},"content":"    private static List\u003cString\u003e getCommandWords() {"},{"lineNumber":58,"author":{"gitID":"yong-jie"},"content":"        return getCommandFields(\"COMMAND_WORD\");"},{"lineNumber":59,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":61,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"yong-jie"},"content":"     * Fetches the field of a class programatically using strings,"},{"lineNumber":63,"author":{"gitID":"yong-jie"},"content":"     * removing the need for hardcode."},{"lineNumber":64,"author":{"gitID":"yong-jie"},"content":"     * @param field A string indicating the field to access"},{"lineNumber":65,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yong-jie"},"content":"    private static List\u003cString\u003e getCommandFields(String field) {"},{"lineNumber":67,"author":{"gitID":"yong-jie"},"content":"        return getCommandClasses().stream().map(command -\u003e {"},{"lineNumber":68,"author":{"gitID":"yong-jie"},"content":"            try {"},{"lineNumber":69,"author":{"gitID":"yong-jie"},"content":"                return (String) command.getField(field).get(null);"},{"lineNumber":70,"author":{"gitID":"yong-jie"},"content":"            } catch (NoSuchFieldException e) {"},{"lineNumber":71,"author":{"gitID":"yong-jie"},"content":"                return \"\";"},{"lineNumber":72,"author":{"gitID":"yong-jie"},"content":"            } catch (IllegalAccessException e) {"},{"lineNumber":73,"author":{"gitID":"yong-jie"},"content":"                return \"\";"},{"lineNumber":74,"author":{"gitID":"yong-jie"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"yong-jie"},"content":"        }).collect(Collectors.toList());"},{"lineNumber":76,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":78,"author":{"gitID":"yong-jie"},"content":"    private static List\u003cClass\u003c? extends Command\u003e\u003e getCommandClasses() {"},{"lineNumber":79,"author":{"gitID":"yong-jie"},"content":"        List\u003cClass\u003c? extends Command\u003e\u003e commands \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":81,"author":{"gitID":"yong-jie"},"content":"        // Must be added in increasing specificity so that add is not"},{"lineNumber":82,"author":{"gitID":"yong-jie"},"content":"        // overridden by addc, for example."},{"lineNumber":83,"author":{"gitID":"yong-jie"},"content":"        commands.add(AddCardCommand.class);"},{"lineNumber":84,"author":{"gitID":"yong-jie"},"content":"        commands.add(ChangeThemeCommand.class);"},{"lineNumber":85,"author":{"gitID":"yong-jie"},"content":"        commands.add(ClearCommand.class);"},{"lineNumber":86,"author":{"gitID":"yong-jie"},"content":"        commands.add(DeleteCommand.class);"},{"lineNumber":87,"author":{"gitID":"yong-jie"},"content":"        commands.add(DeleteCardCommand.class);"},{"lineNumber":88,"author":{"gitID":"yong-jie"},"content":"        commands.add(EditCommand.class);"},{"lineNumber":89,"author":{"gitID":"yong-jie"},"content":"        commands.add(EditCardCommand.class);"},{"lineNumber":90,"author":{"gitID":"yong-jie"},"content":"        commands.add(ExitCommand.class);"},{"lineNumber":91,"author":{"gitID":"yong-jie"},"content":"        commands.add(FindCommand.class);"},{"lineNumber":92,"author":{"gitID":"yong-jie"},"content":"        commands.add(HelpCommand.class);"},{"lineNumber":93,"author":{"gitID":"yong-jie"},"content":"        commands.add(ListCommand.class);"},{"lineNumber":94,"author":{"gitID":"yong-jie"},"content":"        commands.add(RedoCommand.class);"},{"lineNumber":95,"author":{"gitID":"yong-jie"},"content":"        commands.add(SelectCommand.class);"},{"lineNumber":96,"author":{"gitID":"yong-jie"},"content":"        commands.add(SelectCardCommand.class);"},{"lineNumber":97,"author":{"gitID":"yong-jie"},"content":"        commands.add(ShowDueCommand.class);"},{"lineNumber":98,"author":{"gitID":"yong-jie"},"content":"        commands.add(UndoCommand.class);"},{"lineNumber":99,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":100,"author":{"gitID":"yong-jie"},"content":"        return commands;"},{"lineNumber":101,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yong-jie"},"content":"}"}],"authorContributionMap":{"yong-jie":78,"-":24}},{"path":"src/main/java/seedu/flashy/storage/XmlAdaptedCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.FillBlanksCard;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.McqCard;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":" * JAXB-friendly version of the Card."},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"public class XmlAdaptedCard {"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"    protected String front;"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"    protected String back;"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"    protected String id;"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"    private List\u003cString\u003e option \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"    private String type;"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"     * Constructs an XmlAdaptedCard."},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"    public XmlAdaptedCard() {}"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"     * Constructs an {@code XmlAdaptedCard} with the given card details."},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"    public XmlAdaptedCard(String id, String front, String back, List\u003cString\u003e options, String type) {"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"        this.id \u003d id;"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"        this.front \u003d front;"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"        this.back \u003d back;"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"        this.type \u003d type;"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"        if (options \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"            option \u003d null;"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"            option.addAll(options);"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"     * Converts a given Card into this class for JAXB use."},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedCard"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"    public XmlAdaptedCard(Card source) {"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"        this(source.getId().toString(), source.getFront(), source.getBack(), null, source.getType());"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"     * Converts a given McqCard into this class for JAXB use."},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedCard"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"    public XmlAdaptedCard(McqCard source) {"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"        this(source.getId().toString(), source.getFront(), source.getBack(), source.getOptions(), source.getType());"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Shawnclq"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Card object."},{"lineNumber":76,"author":{"gitID":"Shawnclq"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"Shawnclq"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted card"},{"lineNumber":78,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Shawnclq"},"content":"    public Card toModelType() throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"Shawnclq"},"content":"        if (this.id \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Card.class.getSimpleName()));"},{"lineNumber":82,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Shawnclq"},"content":"        if (this.front \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Card.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Shawnclq"},"content":"        if (!Card.isValidCard(this.front)) {"},{"lineNumber":87,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":90,"author":{"gitID":"Shawnclq"},"content":"        if (this.back \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Card.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"Shawnclq"},"content":"        if (!Card.isValidCard(this.back)) {"},{"lineNumber":94,"author":{"gitID":"Shawnclq"},"content":"            throw new IllegalValueException(Card.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"Shawnclq"},"content":"        if (this.type.equals(FillBlanksCard.TYPE)) {"},{"lineNumber":97,"author":{"gitID":"Shawnclq"},"content":"            if (!FillBlanksCard.isValidFillBlanksCard(this.front, this.back)) {"},{"lineNumber":98,"author":{"gitID":"Shawnclq"},"content":"                throw new IllegalValueException(FillBlanksCard.MESSAGE_FILLBLANKS_CARD_ANSWER_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"Shawnclq"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"Shawnclq"},"content":"            return new FillBlanksCard(UUID.fromString(id), this.front, this.back);"},{"lineNumber":101,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"Shawnclq"},"content":"        if (this.type.equals(McqCard.TYPE)) {"},{"lineNumber":103,"author":{"gitID":"Shawnclq"},"content":"            if (!McqCard.isValidMcqCard(this.back, this.option)) {"},{"lineNumber":104,"author":{"gitID":"Shawnclq"},"content":"                throw new IllegalValueException(McqCard.MESSAGE_MCQ_CARD_ANSWER_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"Shawnclq"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"Shawnclq"},"content":"            return new McqCard(UUID.fromString(this.id), this.front, this.back, this.option);"},{"lineNumber":107,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"Shawnclq"},"content":"        return new Card(UUID.fromString(id), front, back);"},{"lineNumber":109,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":111,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"Shawnclq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"Shawnclq"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitID":"Shawnclq"},"content":"            return true;"},{"lineNumber":115,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":117,"author":{"gitID":"Shawnclq"},"content":"        if (!(other instanceof XmlAdaptedCard)) {"},{"lineNumber":118,"author":{"gitID":"Shawnclq"},"content":"            return false;"},{"lineNumber":119,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":121,"author":{"gitID":"Shawnclq"},"content":"        XmlAdaptedCard otherCard \u003d (XmlAdaptedCard) other;"},{"lineNumber":122,"author":{"gitID":"Shawnclq"},"content":"        return Objects.equals(id, otherCard.id)"},{"lineNumber":123,"author":{"gitID":"Shawnclq"},"content":"                \u0026\u0026 Objects.equals(front, otherCard.front)"},{"lineNumber":124,"author":{"gitID":"Shawnclq"},"content":"                \u0026\u0026 Objects.equals(back, otherCard.back);"},{"lineNumber":125,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":127,"author":{"gitID":"Shawnclq"},"content":"    public String getType() {"},{"lineNumber":128,"author":{"gitID":"Shawnclq"},"content":"        return type;"},{"lineNumber":129,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":131,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":117,"-":14}},{"path":"src/main/java/seedu/flashy/storage/XmlAdaptedCardMapEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * XML Adapted Entry in the CardTag cardMap HashMap."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":15,"author":{"gitID":"jethrokuan"},"content":"public class XmlAdaptedCardMapEntry {"},{"lineNumber":16,"author":{"gitID":"jethrokuan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":17,"author":{"gitID":"jethrokuan"},"content":"    private String cardId;"},{"lineNumber":18,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":19,"author":{"gitID":"jethrokuan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":"    private List\u003cString\u003e tags;"},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":"    public XmlAdaptedCardMapEntry() {"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"     * Constructs an instance of XMmlAdaptedCardMapEntry from a Map Entry."},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":"     * @param entry Map Entry for cardMap"},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":"    public XmlAdaptedCardMapEntry(Map.Entry\u003cString, Set\u003cString\u003e\u003e entry) {"},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":"        this();"},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":"        cardId \u003d entry.getKey();"},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":"        for (String tagId: entry.getValue()) {"},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":"            tags.add(tagId);"},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"    public String getCardId() {"},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":"        return cardId;"},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":"        return tags;"},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":"        if (!(other instanceof XmlAdaptedCardTag)) {"},{"lineNumber":53,"author":{"gitID":"jethrokuan"},"content":"            return false;"},{"lineNumber":54,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":56,"author":{"gitID":"jethrokuan"},"content":"        XmlAdaptedCardMapEntry otherCardMap \u003d (XmlAdaptedCardMapEntry) other;"},{"lineNumber":57,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":58,"author":{"gitID":"jethrokuan"},"content":"        return Objects.equals(otherCardMap.cardId, cardId)"},{"lineNumber":59,"author":{"gitID":"jethrokuan"},"content":"                \u0026\u0026 Objects.equals(otherCardMap.tags, tags);"},{"lineNumber":60,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":62,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":49,"-":13}},{"path":"src/main/java/seedu/flashy/storage/XmlAdaptedTagMapEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Xml Adapted class for a Map Entry in CardTag\u0027s tagMap."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":15,"author":{"gitID":"jethrokuan"},"content":"public class XmlAdaptedTagMapEntry {"},{"lineNumber":16,"author":{"gitID":"jethrokuan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":17,"author":{"gitID":"jethrokuan"},"content":"    private String tagId;"},{"lineNumber":18,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":19,"author":{"gitID":"jethrokuan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":"    private List\u003cString\u003e cards;"},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":"    public XmlAdaptedTagMapEntry() {"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":"        cards \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"     * Constructs an instance of XmlAdaptedTagMapEntry from a Map Entry in CardTag\u0027s tagMap"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":"     * @param entry Map Entry of tagMap."},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":"    public XmlAdaptedTagMapEntry(Map.Entry\u003cString, Set\u003cString\u003e\u003e entry) {"},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":"        this();"},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":"        tagId \u003d entry.getKey();"},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":"        for (String cardId : entry.getValue()) {"},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":"            cards.add(cardId);"},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"    public String getTagId() {"},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":"        return tagId;"},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cString\u003e getCards() {"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":"        return cards;"},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":"        if (!(other instanceof XmlAdaptedCardTag)) {"},{"lineNumber":53,"author":{"gitID":"jethrokuan"},"content":"            return false;"},{"lineNumber":54,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":56,"author":{"gitID":"jethrokuan"},"content":"        XmlAdaptedTagMapEntry otherCardMap \u003d (XmlAdaptedTagMapEntry) other;"},{"lineNumber":57,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":58,"author":{"gitID":"jethrokuan"},"content":"        return Objects.equals(otherCardMap.tagId, tagId)"},{"lineNumber":59,"author":{"gitID":"jethrokuan"},"content":"                \u0026\u0026 Objects.equals(otherCardMap.cards, cards);"},{"lineNumber":60,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":62,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":49,"-":13}},{"path":"src/main/java/seedu/flashy/storage/XmlAdaptedCardTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.common.collect.Sets;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.model.cardtag.CardTag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":19,"author":{"gitID":"jethrokuan"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":" * JAXB-friendly version of an edge in CardTag"},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":"@XmlRootElement(name \u003d \"cardtag\")"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":"public class XmlAdaptedCardTag {"},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s field is missing!\";"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"    private List\u003cXmlAdaptedCardMapEntry\u003e cardEntry;"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":"    private List\u003cXmlAdaptedTagMapEntry\u003e tagEntry;"},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":"    public XmlAdaptedCardTag() {"},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":"        cardEntry \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":"        tagEntry \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"     * Constructs a new XmlAdaptedCardTag from given edge details."},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":"     * @param cardEntry List of Card -\u003e [Tag] entries"},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":"     * @param tagEntry  List of Tag -\u003e [Card] entries"},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":"    public XmlAdaptedCardTag(List\u003cXmlAdaptedCardMapEntry\u003e cardEntry, List\u003cXmlAdaptedTagMapEntry\u003e tagEntry) {"},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"        this.cardEntry \u003d cardEntry;"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":"        this.tagEntry \u003d tagEntry;"},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":"    public XmlAdaptedCardTag(CardTag cardTag) {"},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"        cardEntry.addAll(cardTag.getCardMap().entrySet().stream()"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":"                .map(XmlAdaptedCardMapEntry::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":"        tagEntry.addAll(cardTag.getTagMap().entrySet().stream()"},{"lineNumber":53,"author":{"gitID":"jethrokuan"},"content":"                .map(XmlAdaptedTagMapEntry::new).collect(Collectors.toList()));"},{"lineNumber":54,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":56,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cXmlAdaptedCardMapEntry\u003e getCardEntry() {"},{"lineNumber":57,"author":{"gitID":"jethrokuan"},"content":"        return cardEntry;"},{"lineNumber":58,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":60,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cXmlAdaptedTagMapEntry\u003e getTagEntry() {"},{"lineNumber":61,"author":{"gitID":"jethrokuan"},"content":"        return tagEntry;"},{"lineNumber":62,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":64,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"jethrokuan"},"content":"     * Converts this cardbank into the model\u0027s {@code CardTag} object."},{"lineNumber":66,"author":{"gitID":"jethrokuan"},"content":"     * @return corresponding CardTag object"},{"lineNumber":67,"author":{"gitID":"jethrokuan"},"content":"     * @throws IllegalValueException if there are invalid values within the cardTag entries."},{"lineNumber":68,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"jethrokuan"},"content":"    public CardTag toModelType() throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"jethrokuan"},"content":"        CardTag cardTag \u003d new CardTag();"},{"lineNumber":71,"author":{"gitID":"jethrokuan"},"content":"        HashMap\u003cString, Set\u003cString\u003e\u003e cardMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"jethrokuan"},"content":"        for (XmlAdaptedCardMapEntry entry : cardEntry) {"},{"lineNumber":73,"author":{"gitID":"jethrokuan"},"content":"            String cardId \u003d entry.getCardId();"},{"lineNumber":74,"author":{"gitID":"jethrokuan"},"content":"            List\u003cString\u003e tags \u003d entry.getTags();"},{"lineNumber":75,"author":{"gitID":"jethrokuan"},"content":"            if (cardId \u003d\u003d null) {"},{"lineNumber":76,"author":{"gitID":"jethrokuan"},"content":"                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"card ID\"));"},{"lineNumber":77,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"jethrokuan"},"content":"            if (tags \u003d\u003d null || tags.size() \u003d\u003d 0) {"},{"lineNumber":79,"author":{"gitID":"jethrokuan"},"content":"                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"tags\"));"},{"lineNumber":80,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":82,"author":{"gitID":"jethrokuan"},"content":"            cardMap.put(cardId, Sets.newHashSet(tags));"},{"lineNumber":83,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":85,"author":{"gitID":"jethrokuan"},"content":"        HashMap\u003cString, Set\u003cString\u003e\u003e tagMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"jethrokuan"},"content":"        for (XmlAdaptedTagMapEntry entry : tagEntry) {"},{"lineNumber":87,"author":{"gitID":"jethrokuan"},"content":"            String tagId \u003d entry.getTagId();"},{"lineNumber":88,"author":{"gitID":"jethrokuan"},"content":"            List\u003cString\u003e cards \u003d entry.getCards();"},{"lineNumber":89,"author":{"gitID":"jethrokuan"},"content":"            if (tagId \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"jethrokuan"},"content":"                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"tag ID\"));"},{"lineNumber":91,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"jethrokuan"},"content":"            if (cards \u003d\u003d null || cards.size() \u003d\u003d 0) {"},{"lineNumber":93,"author":{"gitID":"jethrokuan"},"content":"                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"cards\"));"},{"lineNumber":94,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":96,"author":{"gitID":"jethrokuan"},"content":"            tagMap.put(tagId, Sets.newHashSet(cards));"},{"lineNumber":97,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":99,"author":{"gitID":"jethrokuan"},"content":"        cardTag.setCardMap(cardMap);"},{"lineNumber":100,"author":{"gitID":"jethrokuan"},"content":"        cardTag.setTagMap(tagMap);"},{"lineNumber":101,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":102,"author":{"gitID":"jethrokuan"},"content":"        return cardTag;"},{"lineNumber":103,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":105,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"jethrokuan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"jethrokuan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":108,"author":{"gitID":"jethrokuan"},"content":"            return true;"},{"lineNumber":109,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":111,"author":{"gitID":"jethrokuan"},"content":"        if (!(other instanceof XmlAdaptedCardTag)) {"},{"lineNumber":112,"author":{"gitID":"jethrokuan"},"content":"            return false;"},{"lineNumber":113,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":115,"author":{"gitID":"jethrokuan"},"content":"        XmlAdaptedCardTag otherEdge \u003d (XmlAdaptedCardTag) other;"},{"lineNumber":116,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":117,"author":{"gitID":"jethrokuan"},"content":"        return Objects.equals(cardEntry, otherEdge.cardEntry)"},{"lineNumber":118,"author":{"gitID":"jethrokuan"},"content":"                \u0026\u0026 Objects.equals(tagEntry, otherEdge.tagEntry);"},{"lineNumber":119,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":121,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":104,"-":17}},{"path":"src/main/java/seedu/flashy/model/cardtag/CardTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model.cardtag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"jethrokuan"},"content":"//@@author jethrokuan"},{"lineNumber":21,"author":{"gitID":"jethrokuan"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"jethrokuan"},"content":" *"},{"lineNumber":23,"author":{"gitID":"jethrokuan"},"content":" * This class captures the relations between cards and tags."},{"lineNumber":24,"author":{"gitID":"jethrokuan"},"content":" */"},{"lineNumber":25,"author":{"gitID":"jethrokuan"},"content":"public class CardTag {"},{"lineNumber":26,"author":{"gitID":"jethrokuan"},"content":"    public static final String MESSAGE_CARD_HAS_TAG \u003d \"Card already has tag \u0027%s\u0027\";"},{"lineNumber":27,"author":{"gitID":"jethrokuan"},"content":"    public static final String MESSAGE_CARD_NO_TAG \u003d \"Card has no tag \u0027%s\u0027\";"},{"lineNumber":28,"author":{"gitID":"jethrokuan"},"content":"    public static final String LOG_EDGE_ADDED \u003d \"Edge added between Card %s and Tag %s\";"},{"lineNumber":29,"author":{"gitID":"jethrokuan"},"content":"    private static final String LOG_EDGE_REMOVED \u003d \"Edge removed between Card %s and Tag %s\";"},{"lineNumber":30,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":31,"author":{"gitID":"jethrokuan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CardTag.class);"},{"lineNumber":32,"author":{"gitID":"jethrokuan"},"content":"    private HashMap\u003cString, Set\u003cString\u003e\u003e cardMap; // cardMap[\"cardId\"] \u003d Set\u003ctagId\u003e"},{"lineNumber":33,"author":{"gitID":"jethrokuan"},"content":"    private HashMap\u003cString, Set\u003cString\u003e\u003e tagMap; // tagMap[\"tagId\"] \u003d Set\u003ccardId\u003e"},{"lineNumber":34,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":35,"author":{"gitID":"jethrokuan"},"content":"    public CardTag() {"},{"lineNumber":36,"author":{"gitID":"jethrokuan"},"content":"        this.cardMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"jethrokuan"},"content":"        this.tagMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":40,"author":{"gitID":"jethrokuan"},"content":"    public CardTag(CardTag cardTag) {"},{"lineNumber":41,"author":{"gitID":"jethrokuan"},"content":"        this.cardMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"jethrokuan"},"content":"        this.tagMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":44,"author":{"gitID":"jethrokuan"},"content":"        for (Map.Entry\u003cString, Set\u003cString\u003e\u003e entry: cardTag.cardMap.entrySet()) {"},{"lineNumber":45,"author":{"gitID":"jethrokuan"},"content":"            String key \u003d entry.getKey();"},{"lineNumber":46,"author":{"gitID":"jethrokuan"},"content":"            Set\u003cString\u003e values \u003d entry.getValue();"},{"lineNumber":47,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":48,"author":{"gitID":"jethrokuan"},"content":"            this.cardMap.put(key, new HashSet\u003c\u003e());"},{"lineNumber":49,"author":{"gitID":"jethrokuan"},"content":"            for (String id: values) {"},{"lineNumber":50,"author":{"gitID":"jethrokuan"},"content":"                this.cardMap.get(key).add(id);"},{"lineNumber":51,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":54,"author":{"gitID":"jethrokuan"},"content":"        for (Map.Entry\u003cString, Set\u003cString\u003e\u003e entry: cardTag.tagMap.entrySet()) {"},{"lineNumber":55,"author":{"gitID":"jethrokuan"},"content":"            String key \u003d entry.getKey();"},{"lineNumber":56,"author":{"gitID":"jethrokuan"},"content":"            Set\u003cString\u003e values \u003d entry.getValue();"},{"lineNumber":57,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":58,"author":{"gitID":"jethrokuan"},"content":"            this.tagMap.put(key, new HashSet\u003c\u003e());"},{"lineNumber":59,"author":{"gitID":"jethrokuan"},"content":"            for (String id: values) {"},{"lineNumber":60,"author":{"gitID":"jethrokuan"},"content":"                this.tagMap.get(key).add(id);"},{"lineNumber":61,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":65,"author":{"gitID":"jethrokuan"},"content":"    public HashMap\u003cString, Set\u003cString\u003e\u003e getCardMap() {"},{"lineNumber":66,"author":{"gitID":"jethrokuan"},"content":"        return cardMap;"},{"lineNumber":67,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":69,"author":{"gitID":"jethrokuan"},"content":"    public HashMap\u003cString, Set\u003cString\u003e\u003e getTagMap() {"},{"lineNumber":70,"author":{"gitID":"jethrokuan"},"content":"        return tagMap;"},{"lineNumber":71,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":73,"author":{"gitID":"jethrokuan"},"content":"    public void setCardMap(HashMap\u003cString, Set\u003cString\u003e\u003e cardMap) {"},{"lineNumber":74,"author":{"gitID":"jethrokuan"},"content":"        this.cardMap \u003d cardMap;"},{"lineNumber":75,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":77,"author":{"gitID":"jethrokuan"},"content":"    public void setTagMap(HashMap\u003cString, Set\u003cString\u003e\u003e tagMap) {"},{"lineNumber":78,"author":{"gitID":"jethrokuan"},"content":"        this.tagMap \u003d tagMap;"},{"lineNumber":79,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":81,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"jethrokuan"},"content":"     * Checks if the Card and Tag given are connected by an edge."},{"lineNumber":83,"author":{"gitID":"jethrokuan"},"content":"     * @param cardId UUID of card"},{"lineNumber":84,"author":{"gitID":"jethrokuan"},"content":"     * @param tagId UUID of tag"},{"lineNumber":85,"author":{"gitID":"jethrokuan"},"content":"     * @return true if cord and tag are connected, false otherwise"},{"lineNumber":86,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"jethrokuan"},"content":"    public boolean isConnected(String cardId, String tagId) {"},{"lineNumber":88,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cString\u003e tags \u003d cardMap.get(cardId);"},{"lineNumber":89,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cString\u003e cards \u003d tagMap.get(tagId);"},{"lineNumber":90,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":91,"author":{"gitID":"jethrokuan"},"content":"        return (tags !\u003d null \u0026\u0026 tags.contains(tagId))"},{"lineNumber":92,"author":{"gitID":"jethrokuan"},"content":"                || (cards !\u003d null \u0026\u0026 cards.contains(cardId)); // should always short-circuit here"},{"lineNumber":93,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":95,"author":{"gitID":"jethrokuan"},"content":"    public boolean isConnected(Card card, Tag tag) {"},{"lineNumber":96,"author":{"gitID":"jethrokuan"},"content":"        return isConnected(card.getId().toString(), tag.getId().toString());"},{"lineNumber":97,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":99,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":100,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cCard\u003e getCards(String tagId, ObservableList\u003cCard\u003e cardList) {"},{"lineNumber":101,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cString\u003e cards \u003d tagMap.get(tagId);"},{"lineNumber":102,"author":{"gitID":"jethrokuan"},"content":"        if (cards !\u003d null) {"},{"lineNumber":103,"author":{"gitID":"jethrokuan"},"content":"            return cardList.filtered(card -\u003e cards.contains(card.getId().toString()));"},{"lineNumber":104,"author":{"gitID":"jethrokuan"},"content":"        } else {"},{"lineNumber":105,"author":{"gitID":"jethrokuan"},"content":"            return FXCollections.observableArrayList();"},{"lineNumber":106,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":109,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cCard\u003e getCards(Tag tag, ObservableList\u003cCard\u003e cardList) {"},{"lineNumber":110,"author":{"gitID":"jethrokuan"},"content":"        return getCards(tag.getId().toString(), cardList);"},{"lineNumber":111,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":113,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cTag\u003e getTags(String cardId, ObservableList\u003cTag\u003e tagList) {"},{"lineNumber":114,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cString\u003e tags \u003d cardMap.get(cardId);"},{"lineNumber":115,"author":{"gitID":"jethrokuan"},"content":"        if (tags !\u003d null) {"},{"lineNumber":116,"author":{"gitID":"jethrokuan"},"content":"            return tagList.filtered(tag -\u003e tags.contains(tag.getId().toString()));"},{"lineNumber":117,"author":{"gitID":"jethrokuan"},"content":"        } else {"},{"lineNumber":118,"author":{"gitID":"jethrokuan"},"content":"            return Collections.emptyList();"},{"lineNumber":119,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":122,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cTag\u003e getTags(Card card, ObservableList\u003cTag\u003e tagList) {"},{"lineNumber":123,"author":{"gitID":"jethrokuan"},"content":"        return getTags(card.getId().toString(), tagList);"},{"lineNumber":124,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":126,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"jethrokuan"},"content":"     * Adds an edge between card and tag."},{"lineNumber":128,"author":{"gitID":"jethrokuan"},"content":"     * @param card Card"},{"lineNumber":129,"author":{"gitID":"jethrokuan"},"content":"     * @param tag Tag"},{"lineNumber":130,"author":{"gitID":"jethrokuan"},"content":"     * @throws DuplicateEdgeException when the edge between card and tag already exists"},{"lineNumber":131,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"jethrokuan"},"content":"    public void addEdge(Card card, Tag tag) throws DuplicateEdgeException {"},{"lineNumber":133,"author":{"gitID":"jethrokuan"},"content":"        String cardId \u003d card.getId().toString();"},{"lineNumber":134,"author":{"gitID":"jethrokuan"},"content":"        String tagId \u003d tag.getId().toString();"},{"lineNumber":135,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":136,"author":{"gitID":"jethrokuan"},"content":"        if (isConnected(cardId, tagId)) {"},{"lineNumber":137,"author":{"gitID":"jethrokuan"},"content":"            throw new DuplicateEdgeException(tag);"},{"lineNumber":138,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":140,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cString\u003e tags \u003d cardMap.get(cardId);"},{"lineNumber":141,"author":{"gitID":"jethrokuan"},"content":"        if (tags \u003d\u003d null) {"},{"lineNumber":142,"author":{"gitID":"jethrokuan"},"content":"            cardMap.put(cardId, Stream.of(tagId).collect(Collectors.toSet()));"},{"lineNumber":143,"author":{"gitID":"jethrokuan"},"content":"        } else {"},{"lineNumber":144,"author":{"gitID":"jethrokuan"},"content":"            tags.add(tagId);"},{"lineNumber":145,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":147,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cString\u003e cards \u003d tagMap.get(tagId);"},{"lineNumber":148,"author":{"gitID":"jethrokuan"},"content":"        if (cards \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitID":"jethrokuan"},"content":"            tagMap.put(tagId, Stream.of(cardId).collect(Collectors.toSet()));"},{"lineNumber":150,"author":{"gitID":"jethrokuan"},"content":"        } else {"},{"lineNumber":151,"author":{"gitID":"jethrokuan"},"content":"            cards.add(cardId);"},{"lineNumber":152,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":154,"author":{"gitID":"jethrokuan"},"content":"        logger.info(String.format(LOG_EDGE_ADDED, card.toString(), tag.toString()));"},{"lineNumber":155,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":157,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"jethrokuan"},"content":"     * Removes the undirected edge between card and tag."},{"lineNumber":159,"author":{"gitID":"jethrokuan"},"content":"     * @param card Card"},{"lineNumber":160,"author":{"gitID":"jethrokuan"},"content":"     * @param tag Tag"},{"lineNumber":161,"author":{"gitID":"jethrokuan"},"content":"     * @throws EdgeNotFoundException if there is no edge to remove."},{"lineNumber":162,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"jethrokuan"},"content":"    public void removeEdge(Card card, Tag tag) throws EdgeNotFoundException {"},{"lineNumber":164,"author":{"gitID":"jethrokuan"},"content":"        String cardId \u003d card.getId().toString();"},{"lineNumber":165,"author":{"gitID":"jethrokuan"},"content":"        String tagId \u003d tag.getId().toString();"},{"lineNumber":166,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":167,"author":{"gitID":"jethrokuan"},"content":"        if (!isConnected(cardId, tagId)) {"},{"lineNumber":168,"author":{"gitID":"jethrokuan"},"content":"            throw new EdgeNotFoundException(tag);"},{"lineNumber":169,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":171,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cString\u003e tags \u003d cardMap.get(cardId);"},{"lineNumber":172,"author":{"gitID":"jethrokuan"},"content":"        Set\u003cString\u003e cards \u003d tagMap.get(tagId);"},{"lineNumber":173,"author":{"gitID":"jethrokuan"},"content":"        if (tags !\u003d null) {"},{"lineNumber":174,"author":{"gitID":"jethrokuan"},"content":"            tags.remove(tagId);"},{"lineNumber":175,"author":{"gitID":"jethrokuan"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":176,"author":{"gitID":"jethrokuan"},"content":"                cardMap.remove(cardId);"},{"lineNumber":177,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":178,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":180,"author":{"gitID":"jethrokuan"},"content":"        if (cards !\u003d null) {"},{"lineNumber":181,"author":{"gitID":"jethrokuan"},"content":"            cards.remove(cardId);"},{"lineNumber":182,"author":{"gitID":"jethrokuan"},"content":"            if (cards.isEmpty()) {"},{"lineNumber":183,"author":{"gitID":"jethrokuan"},"content":"                tagMap.remove(tagId);"},{"lineNumber":184,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":187,"author":{"gitID":"jethrokuan"},"content":"        logger.info(String.format(LOG_EDGE_REMOVED, card.toString(), tag.toString()));"},{"lineNumber":188,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":190,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"jethrokuan"},"content":"    public boolean equals(Object other) {"},{"lineNumber":192,"author":{"gitID":"jethrokuan"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":193,"author":{"gitID":"jethrokuan"},"content":"            return true;"},{"lineNumber":194,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":196,"author":{"gitID":"jethrokuan"},"content":"        if (!(other instanceof CardTag)) {"},{"lineNumber":197,"author":{"gitID":"jethrokuan"},"content":"            return false;"},{"lineNumber":198,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":200,"author":{"gitID":"jethrokuan"},"content":"        CardTag otherCardTag \u003d (CardTag) other;"},{"lineNumber":201,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":202,"author":{"gitID":"jethrokuan"},"content":"        return Objects.equals(otherCardTag.cardMap, cardMap)"},{"lineNumber":203,"author":{"gitID":"jethrokuan"},"content":"                \u0026\u0026 Objects.equals(otherCardTag.tagMap, tagMap);"},{"lineNumber":204,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":206,"author":{"gitID":"jethrokuan"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"jethrokuan"},"content":"     * returns whether a tag has any cards associated to it."},{"lineNumber":208,"author":{"gitID":"jethrokuan"},"content":"     * @param tag"},{"lineNumber":209,"author":{"gitID":"jethrokuan"},"content":"     * @return"},{"lineNumber":210,"author":{"gitID":"jethrokuan"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"jethrokuan"},"content":"    public boolean hasCards(Tag tag) {"},{"lineNumber":212,"author":{"gitID":"jethrokuan"},"content":"        String tagId \u003d tag.getId().toString();"},{"lineNumber":213,"author":{"gitID":"jethrokuan"},"content":"        return tagMap.containsKey(tagId);"},{"lineNumber":214,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"jethrokuan"},"content":"}"},{"lineNumber":216,"author":{"gitID":"jethrokuan"},"content":"//@@author"}],"authorContributionMap":{"jethrokuan":197,"-":19}},{"path":"src/main/java/seedu/flashy/model/card/Card.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model.card;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.UUID;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a Flashcard."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Guarantees: Front and Back must not be null."},{"lineNumber":14,"author":{"gitID":"-"},"content":" *"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * TODO: Allow for different kinds of Front and Back"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Card {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"    //@@author shawnclq"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":"    public static final String MESSAGE_CARD_CONSTRAINTS \u003d"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"            \"Card front and back can take any values, and it should not be blank\";"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"    /*"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"     * The first character of the card must not be a whitespace,"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"    public static final String CARD_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"    public static final String TYPE \u003d \"Normal\";"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"    protected final UUID id;"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"    protected final String front;"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"    protected final String back;"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"    protected final Schedule schedule;"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"    protected String type;"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"    public Card(String front, String back) {"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"        this(UUID.randomUUID(), front, back);"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"    public Card(UUID id, String front, String back) {"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(id, front, back);"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"        checkArgument(isValidCard(front), MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"        checkArgument(isValidCard(back), MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"        this.front \u003d front;"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"        this.back \u003d back;"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"        this.id \u003d id;"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"        this.schedule \u003d new Schedule();"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"        this.type \u003d TYPE;"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"    public Card(UUID id, String front, String back, Schedule schedule) {"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(id, front, back, schedule);"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"        checkArgument(isValidCard(front), MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"        checkArgument(isValidCard(back), MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"        this.front \u003d front;"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"        this.back \u003d back;"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":"        this.id \u003d id;"},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"        this.type \u003d TYPE;"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"    public UUID getId() {"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"        return id;"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"    public String getFront() {"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":"        return front;"},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"    public String getBack() {"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"        return back;"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"    //@@author"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public Schedule getSchedule() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return schedule;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getOptions() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Shawnclq"},"content":"    //@@author shawnclq"},{"lineNumber":84,"author":{"gitID":"Shawnclq"},"content":"    public String getType() {"},{"lineNumber":85,"author":{"gitID":"Shawnclq"},"content":"        return this.type;"},{"lineNumber":86,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":88,"author":{"gitID":"Shawnclq"},"content":"    public void setType(String type) {"},{"lineNumber":89,"author":{"gitID":"Shawnclq"},"content":"        this.type \u003d type;"},{"lineNumber":90,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":92,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Shawnclq"},"content":"     * Returns true if a given front and back string is valid."},{"lineNumber":94,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Shawnclq"},"content":"    public static boolean isValidCard(String test) {"},{"lineNumber":96,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(test);"},{"lineNumber":97,"author":{"gitID":"Shawnclq"},"content":"        return test.matches(CARD_VALIDATION_REGEX);"},{"lineNumber":98,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":100,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"Shawnclq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"Shawnclq"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":103,"author":{"gitID":"Shawnclq"},"content":"            return true;"},{"lineNumber":104,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":106,"author":{"gitID":"Shawnclq"},"content":"        if (!(other instanceof Card)) {"},{"lineNumber":107,"author":{"gitID":"Shawnclq"},"content":"            return false;"},{"lineNumber":108,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":110,"author":{"gitID":"Shawnclq"},"content":"        Card otherCard \u003d (Card) other;"},{"lineNumber":111,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":112,"author":{"gitID":"Shawnclq"},"content":"        // TODO: account for ID equality. Some test cases check for object equality."},{"lineNumber":113,"author":{"gitID":"Shawnclq"},"content":"        //        return otherCard.getId().toString().equals(this.getId().toString())"},{"lineNumber":114,"author":{"gitID":"Shawnclq"},"content":"        //                \u0026\u0026 otherCard.getFront().equals(this.getFront())"},{"lineNumber":115,"author":{"gitID":"Shawnclq"},"content":"        //                \u0026\u0026 otherCard.getBack().equals(this.getBack());"},{"lineNumber":116,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":117,"author":{"gitID":"Shawnclq"},"content":"        return otherCard.getFront().equals(this.getFront())"},{"lineNumber":118,"author":{"gitID":"Shawnclq"},"content":"                \u0026\u0026 otherCard.getBack().equals(this.getBack());"},{"lineNumber":119,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":121,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"Shawnclq"},"content":"    public int hashCode() {"},{"lineNumber":123,"author":{"gitID":"Shawnclq"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":124,"author":{"gitID":"Shawnclq"},"content":"        return Objects.hash(id, front, back);"},{"lineNumber":125,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":127,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"Shawnclq"},"content":"    public String toString() {"},{"lineNumber":129,"author":{"gitID":"Shawnclq"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":130,"author":{"gitID":"Shawnclq"},"content":"        builder.append(\"Front: \")"},{"lineNumber":131,"author":{"gitID":"Shawnclq"},"content":"                .append(getFront())"},{"lineNumber":132,"author":{"gitID":"Shawnclq"},"content":"                .append(\" Back: \")"},{"lineNumber":133,"author":{"gitID":"Shawnclq"},"content":"                .append(getBack());"},{"lineNumber":134,"author":{"gitID":"Shawnclq"},"content":"        return builder.toString();"},{"lineNumber":135,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Shawnclq"},"content":"    //@@author"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Shawnclq":109,"-":28}},{"path":"src/main/java/seedu/flashy/model/card/Schedule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model.card;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.lang.Math.log;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"pukipuki"},"content":"//@@author pukipuki"},{"lineNumber":12,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":13,"author":{"gitID":"pukipuki"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"pukipuki"},"content":" * Holds the Schedule information for a Card"},{"lineNumber":15,"author":{"gitID":"pukipuki"},"content":" */"},{"lineNumber":16,"author":{"gitID":"pukipuki"},"content":"public class Schedule implements Comparable\u003cSchedule\u003e {"},{"lineNumber":17,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":18,"author":{"gitID":"pukipuki"},"content":"    public static final int VALID_CONFIDENCE_LEVEL_0 \u003d 0;"},{"lineNumber":19,"author":{"gitID":"pukipuki"},"content":"    public static final int VALID_CONFIDENCE_LEVEL_1 \u003d 1;"},{"lineNumber":20,"author":{"gitID":"pukipuki"},"content":"    public static final int VALID_CONFIDENCE_LEVEL_2 \u003d 2;"},{"lineNumber":21,"author":{"gitID":"pukipuki"},"content":"    public static final int VALID_MIN_CONFIDENCE_LEVEL \u003d 0;"},{"lineNumber":22,"author":{"gitID":"pukipuki"},"content":"    public static final int VALID_MAX_CONFIDENCE_LEVEL \u003d 2;"},{"lineNumber":23,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_ANSWER_CONSTRAINTS \u003d"},{"lineNumber":24,"author":{"gitID":"pukipuki"},"content":"        \"Confidence Levels should only be 0, 1 or 2\";"},{"lineNumber":25,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_DAY_CONSTRAINTS \u003d"},{"lineNumber":26,"author":{"gitID":"pukipuki"},"content":"        \"There are at most 31 and at least 1 day.\";"},{"lineNumber":27,"author":{"gitID":"pukipuki"},"content":"    public static final String MESSAGE_MONTH_CONSTRAINTS \u003d"},{"lineNumber":28,"author":{"gitID":"pukipuki"},"content":"        \"There are at most 12 and at least 1 month.\";"},{"lineNumber":29,"author":{"gitID":"pukipuki"},"content":"    public static final int INITIAL_LEARNING_PHASE \u003d 3;"},{"lineNumber":30,"author":{"gitID":"pukipuki"},"content":"    public static final int INITIAL_LAST_INTERVAL \u003d 1;"},{"lineNumber":31,"author":{"gitID":"pukipuki"},"content":"    public static final double INITIAL_EASING_FACTOR \u003d 1.3;"},{"lineNumber":32,"author":{"gitID":"pukipuki"},"content":"    public static final double INITIAL_HISTORICAL_EASING_FACTOR \u003d 1.3;"},{"lineNumber":33,"author":{"gitID":"pukipuki"},"content":"    private final double lowerBoundRememberRate \u003d 0.85;"},{"lineNumber":34,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":35,"author":{"gitID":"pukipuki"},"content":"    private LocalDateTime nextReview;"},{"lineNumber":36,"author":{"gitID":"pukipuki"},"content":"    private int learningPhase \u003d INITIAL_LEARNING_PHASE;"},{"lineNumber":37,"author":{"gitID":"pukipuki"},"content":"    private int lastInterval \u003d INITIAL_LAST_INTERVAL;"},{"lineNumber":38,"author":{"gitID":"pukipuki"},"content":"    private double easingFactor \u003d 1.3;"},{"lineNumber":39,"author":{"gitID":"pukipuki"},"content":"    private double historicalEasingFactor \u003d 1.3;"},{"lineNumber":40,"author":{"gitID":"pukipuki"},"content":"    private int success \u003d 0;"},{"lineNumber":41,"author":{"gitID":"pukipuki"},"content":"    private int failure \u003d 0;"},{"lineNumber":42,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":43,"author":{"gitID":"pukipuki"},"content":"    public Schedule() {"},{"lineNumber":44,"author":{"gitID":"pukipuki"},"content":"        this.nextReview \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":45,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":47,"author":{"gitID":"pukipuki"},"content":"    public Schedule(LocalDateTime date) {"},{"lineNumber":48,"author":{"gitID":"pukipuki"},"content":"        this.nextReview \u003d date;"},{"lineNumber":49,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":51,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"pukipuki"},"content":"     * Check if it is a valid confidence level between 0 1 2"},{"lineNumber":53,"author":{"gitID":"pukipuki"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"pukipuki"},"content":"     * @param confidenceLevel"},{"lineNumber":55,"author":{"gitID":"pukipuki"},"content":"     * @return true/false"},{"lineNumber":56,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"pukipuki"},"content":"    public static boolean isValidConfidenceLevel(int confidenceLevel) {"},{"lineNumber":58,"author":{"gitID":"pukipuki"},"content":"        return confidenceLevel \u003e\u003d VALID_MIN_CONFIDENCE_LEVEL"},{"lineNumber":59,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 confidenceLevel \u003c\u003d VALID_MAX_CONFIDENCE_LEVEL;"},{"lineNumber":60,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":62,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"pukipuki"},"content":"     * Check if it is a valid confidence level between 0 1 2 string version"},{"lineNumber":64,"author":{"gitID":"pukipuki"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"pukipuki"},"content":"     * @param confidenceLevelString"},{"lineNumber":66,"author":{"gitID":"pukipuki"},"content":"     * @return true/false"},{"lineNumber":67,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"pukipuki"},"content":"    public static boolean isValidConfidenceLevel(String confidenceLevelString)"},{"lineNumber":69,"author":{"gitID":"pukipuki"},"content":"        throws NumberFormatException {"},{"lineNumber":70,"author":{"gitID":"pukipuki"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"pukipuki"},"content":"            int confidenceLevel \u003d Integer.parseInt(confidenceLevelString);"},{"lineNumber":72,"author":{"gitID":"pukipuki"},"content":"            return isValidConfidenceLevel(confidenceLevel);"},{"lineNumber":73,"author":{"gitID":"pukipuki"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":74,"author":{"gitID":"pukipuki"},"content":"            throw new NumberFormatException(nfe.getMessage());"},{"lineNumber":75,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":78,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"pukipuki"},"content":"     * Check if it is a valid Month between 1 to 12"},{"lineNumber":80,"author":{"gitID":"pukipuki"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"pukipuki"},"content":"     * @param month"},{"lineNumber":82,"author":{"gitID":"pukipuki"},"content":"     * @return true/false"},{"lineNumber":83,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"pukipuki"},"content":"    public static boolean isValidMonth(int month) {"},{"lineNumber":85,"author":{"gitID":"pukipuki"},"content":"        return month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d 12;"},{"lineNumber":86,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":88,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"pukipuki"},"content":"     * Check if it is a valid day between 1 to 31"},{"lineNumber":90,"author":{"gitID":"pukipuki"},"content":"     *"},{"lineNumber":91,"author":{"gitID":"pukipuki"},"content":"     * @param day"},{"lineNumber":92,"author":{"gitID":"pukipuki"},"content":"     * @return true/false"},{"lineNumber":93,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"pukipuki"},"content":"    public static boolean isValidDay(int day) {"},{"lineNumber":95,"author":{"gitID":"pukipuki"},"content":"        return day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 31;"},{"lineNumber":96,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":98,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"pukipuki"},"content":"     * Predicate for filtering cards before a {@code date}"},{"lineNumber":100,"author":{"gitID":"pukipuki"},"content":"     * @param date before this date"},{"lineNumber":101,"author":{"gitID":"pukipuki"},"content":"     * @return"},{"lineNumber":102,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"pukipuki"},"content":"    public static Predicate\u003cCard\u003e before(LocalDateTime date) {"},{"lineNumber":104,"author":{"gitID":"pukipuki"},"content":"        return c -\u003e c.getSchedule().getNextReview()"},{"lineNumber":105,"author":{"gitID":"pukipuki"},"content":"            .isBefore(date.plusDays(1).minusNanos(1));"},{"lineNumber":106,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":108,"author":{"gitID":"pukipuki"},"content":"    public static Comparator\u003cCard\u003e getByDate() {"},{"lineNumber":109,"author":{"gitID":"pukipuki"},"content":"        Comparator\u003cCard\u003e byDate \u003d Comparator.comparing(Card::getSchedule);"},{"lineNumber":110,"author":{"gitID":"pukipuki"},"content":"        return byDate;"},{"lineNumber":111,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":113,"author":{"gitID":"pukipuki"},"content":"    public LocalDateTime getNextReview() {"},{"lineNumber":114,"author":{"gitID":"pukipuki"},"content":"        return nextReview;"},{"lineNumber":115,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":117,"author":{"gitID":"pukipuki"},"content":"    public void setNextReview(LocalDateTime date) {"},{"lineNumber":118,"author":{"gitID":"pukipuki"},"content":"        this.nextReview \u003d date;"},{"lineNumber":119,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":121,"author":{"gitID":"pukipuki"},"content":"    public int getLastInterval() {"},{"lineNumber":122,"author":{"gitID":"pukipuki"},"content":"        return lastInterval;"},{"lineNumber":123,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":125,"author":{"gitID":"pukipuki"},"content":"    public double getEasingFactor() {"},{"lineNumber":126,"author":{"gitID":"pukipuki"},"content":"        return easingFactor;"},{"lineNumber":127,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":129,"author":{"gitID":"pukipuki"},"content":"    public double getSuccessRate() {"},{"lineNumber":130,"author":{"gitID":"pukipuki"},"content":"        double successRate \u003d success / (double) (success + failure + 1);"},{"lineNumber":131,"author":{"gitID":"pukipuki"},"content":"        return successRate;"},{"lineNumber":132,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":134,"author":{"gitID":"pukipuki"},"content":"    public double getHistoricalEasingFactor() {"},{"lineNumber":135,"author":{"gitID":"pukipuki"},"content":"        return historicalEasingFactor;"},{"lineNumber":136,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":138,"author":{"gitID":"pukipuki"},"content":"    public int getLearningPhase() {"},{"lineNumber":139,"author":{"gitID":"pukipuki"},"content":"        return learningPhase;"},{"lineNumber":140,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":142,"author":{"gitID":"pukipuki"},"content":"    public void setRelativeNextReviewToNow() {"},{"lineNumber":143,"author":{"gitID":"pukipuki"},"content":"        this.nextReview \u003d LocalDateTime.now();"},{"lineNumber":144,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":146,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"pukipuki"},"content":"     * Feedback router to switch between what to do given a certain"},{"lineNumber":148,"author":{"gitID":"pukipuki"},"content":"     * confidenceLevel input"},{"lineNumber":149,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"pukipuki"},"content":"    public boolean feedbackHandlerRouter(int confidenceLevel) {"},{"lineNumber":151,"author":{"gitID":"pukipuki"},"content":"        checkArgument(isValidConfidenceLevel(confidenceLevel), MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":152,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":153,"author":{"gitID":"pukipuki"},"content":"        boolean tooEasy \u003d false;"},{"lineNumber":154,"author":{"gitID":"pukipuki"},"content":"        switch (confidenceLevel) {"},{"lineNumber":155,"author":{"gitID":"pukipuki"},"content":"        case (0):"},{"lineNumber":156,"author":{"gitID":"pukipuki"},"content":"            // to push card to back of filtered queue"},{"lineNumber":157,"author":{"gitID":"pukipuki"},"content":"            setRelativeNextReviewToNow();"},{"lineNumber":158,"author":{"gitID":"pukipuki"},"content":"            break;"},{"lineNumber":159,"author":{"gitID":"pukipuki"},"content":"        case (1):"},{"lineNumber":160,"author":{"gitID":"pukipuki"},"content":"            feedback(false);"},{"lineNumber":161,"author":{"gitID":"pukipuki"},"content":"            setRelativeNextReviewToNow();"},{"lineNumber":162,"author":{"gitID":"pukipuki"},"content":"            break;"},{"lineNumber":163,"author":{"gitID":"pukipuki"},"content":"        case (2):"},{"lineNumber":164,"author":{"gitID":"pukipuki"},"content":"            feedback(true);"},{"lineNumber":165,"author":{"gitID":"pukipuki"},"content":"            tooEasy \u003d true;"},{"lineNumber":166,"author":{"gitID":"pukipuki"},"content":"            break;"},{"lineNumber":167,"author":{"gitID":"pukipuki"},"content":"        default:"},{"lineNumber":168,"author":{"gitID":"pukipuki"},"content":"            break;"},{"lineNumber":169,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"pukipuki"},"content":"        return tooEasy;"},{"lineNumber":171,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":173,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"pukipuki"},"content":"     * Feedback algorithm takes in whether the answer is correct."},{"lineNumber":175,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"pukipuki"},"content":"    public void feedback(boolean isSuccess) {"},{"lineNumber":177,"author":{"gitID":"pukipuki"},"content":"        if (isSuccess) {"},{"lineNumber":178,"author":{"gitID":"pukipuki"},"content":"            success++;"},{"lineNumber":179,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":180,"author":{"gitID":"pukipuki"},"content":"            failure++;"},{"lineNumber":181,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":183,"author":{"gitID":"pukipuki"},"content":"        int total \u003d success + failure;"},{"lineNumber":184,"author":{"gitID":"pukipuki"},"content":"        double successRate \u003d (double) success / (double) (total + 1);"},{"lineNumber":185,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":186,"author":{"gitID":"pukipuki"},"content":"        if (total \u003e\u003d learningPhase) {"},{"lineNumber":187,"author":{"gitID":"pukipuki"},"content":"            double newEasingFactor \u003d historicalEasingFactor"},{"lineNumber":188,"author":{"gitID":"pukipuki"},"content":"                * log(lowerBoundRememberRate)"},{"lineNumber":189,"author":{"gitID":"pukipuki"},"content":"                / log(successRate);"},{"lineNumber":190,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":191,"author":{"gitID":"pukipuki"},"content":"            if (isSuccess) {"},{"lineNumber":192,"author":{"gitID":"pukipuki"},"content":"                easingFactor \u003d Math.max(newEasingFactor, 1.1);"},{"lineNumber":193,"author":{"gitID":"pukipuki"},"content":"            } else {"},{"lineNumber":194,"author":{"gitID":"pukipuki"},"content":"                easingFactor \u003d Math.min(newEasingFactor, 1.1);"},{"lineNumber":195,"author":{"gitID":"pukipuki"},"content":"            }"},{"lineNumber":196,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":197,"author":{"gitID":"pukipuki"},"content":"            double count \u003d total - learningPhase + 1;"},{"lineNumber":198,"author":{"gitID":"pukipuki"},"content":"            double pastFactor \u003d (count - 1.0) / count;"},{"lineNumber":199,"author":{"gitID":"pukipuki"},"content":"            double nextFactor \u003d 1.0 / count;"},{"lineNumber":200,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":201,"author":{"gitID":"pukipuki"},"content":"            historicalEasingFactor \u003d"},{"lineNumber":202,"author":{"gitID":"pukipuki"},"content":"                historicalEasingFactor * pastFactor"},{"lineNumber":203,"author":{"gitID":"pukipuki"},"content":"                    + easingFactor * nextFactor;"},{"lineNumber":204,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":205,"author":{"gitID":"pukipuki"},"content":"            lastInterval \u003d (int) Math.ceil(easingFactor * lastInterval);"},{"lineNumber":206,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"pukipuki"},"content":"        nextReview \u003d nextReview.plusDays((long) lastInterval);"},{"lineNumber":208,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":210,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":211,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":212,"author":{"gitID":"pukipuki"},"content":"    public boolean equals(Object other) {"},{"lineNumber":213,"author":{"gitID":"pukipuki"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":214,"author":{"gitID":"pukipuki"},"content":"            || (other instanceof Schedule // instanceof handles nulls"},{"lineNumber":215,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 this.learningPhase \u003d\u003d (((Schedule) other).learningPhase)"},{"lineNumber":216,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 this.lowerBoundRememberRate"},{"lineNumber":217,"author":{"gitID":"pukipuki"},"content":"            \u003d\u003d (((Schedule) other).lowerBoundRememberRate)"},{"lineNumber":218,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 this.lastInterval \u003d\u003d (((Schedule) other).lastInterval)"},{"lineNumber":219,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 this.easingFactor \u003d\u003d (((Schedule) other).easingFactor)"},{"lineNumber":220,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 this.success \u003d\u003d (((Schedule) other).success)"},{"lineNumber":221,"author":{"gitID":"pukipuki"},"content":"            \u0026\u0026 this.failure \u003d\u003d (((Schedule) other).failure));"},{"lineNumber":222,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":224,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"pukipuki"},"content":"    public int compareTo(Schedule otherSchedule) {"},{"lineNumber":226,"author":{"gitID":"pukipuki"},"content":"        return this.nextReview.compareTo(otherSchedule.getNextReview());"},{"lineNumber":227,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"pukipuki"},"content":"}"}],"authorContributionMap":{"pukipuki":218,"-":10}},{"path":"src/main/java/seedu/flashy/model/card/FillBlanksCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model.card;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":9,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Shawnclq"},"content":" * Represents a fill-in-the-blanks Flashcard."},{"lineNumber":11,"author":{"gitID":"Shawnclq"},"content":" * Guarantees: Front, Back must not be null."},{"lineNumber":12,"author":{"gitID":"Shawnclq"},"content":" *"},{"lineNumber":13,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Shawnclq"},"content":"public class FillBlanksCard extends Card {"},{"lineNumber":15,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":"    public static final String MESSAGE_FILLBLANKS_CARD_ANSWER_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"            \"Fill Blanks Card back should have the same number of answers as there are blanks\";"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":"    public static final String TYPE \u003d \"FillBlanks\";"},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":"    public static final String BLANK \u003d \"_\";"},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":"    public FillBlanksCard(String front, String back) {"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"        this(UUID.randomUUID(), front, back);"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"    public FillBlanksCard(UUID id, String front, String back) {"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"        super(id, front, back);"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"        super.setType(TYPE);"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"        checkArgument(isValidFillBlanksCard(front, back), MESSAGE_FILLBLANKS_CARD_ANSWER_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"     * Returns true if a given front and back string is valid."},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"    public static boolean isValidFillBlanksCard(String front, String back) {"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(front, back);"},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"        return (front.split(BLANK, -1).length) \u003d\u003d back.split(\",\").length + 1;"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"     * Returns true if a given string contains blanks."},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"    public static boolean containsBlanks(String test) {"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"        return (test.indexOf(BLANK)) !\u003d -1;"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"        if (!(other instanceof FillBlanksCard)) {"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"            return false;"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"        FillBlanksCard otherCard \u003d (FillBlanksCard) other;"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"        return otherCard.getFront().equals(this.getFront())"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"                \u0026\u0026 otherCard.getBack().equals(this.getBack());"},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":55,"-":7}},{"path":"src/main/java/seedu/flashy/model/CardBank.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Schedule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.UniqueCardList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.CardNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.DuplicateCardException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.model.cardtag.CardTag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.model.cardtag.DuplicateEdgeException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.AddTagResult;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.UniqueTagList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.exceptions.DuplicateTagException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Wraps all data at the flashy-book level"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class CardBank implements ReadOnlyCardBank {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CardBank.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UniqueCardList cards;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private CardTag cardTag;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        cards \u003d new UniqueCardList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        cardTag \u003d new CardTag();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public CardBank() {}"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Creates an CardBank using the Tags and Cards in the {@code toBeCopied}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public CardBank(ReadOnlyCardBank toBeCopied) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setTags(List\u003cTag\u003e tags) throws DuplicateTagException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setCards(List\u003cCard\u003e cards) throws DuplicateCardException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.cards.setCards(cards);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code CardBank} with {@code newData}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyCardBank newData) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e syncedTagList \u003d new ArrayList\u003c\u003e(newData.getTagList());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            setTags(syncedTagList);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (DuplicateTagException e) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"CardBanks should not have duplicate tags\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        List\u003cCard\u003e syncedCardList \u003d new ArrayList\u003c\u003e(newData.getCardList());"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            setCards(syncedCardList);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (DuplicateCardException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"CardBanks should not have duplicate cards\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        CardTag cardTag \u003d new CardTag(newData.getCardTag());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setCardTag(cardTag);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Adds a tag to the card bank. Will not create a new Tag if it already exists. Returns the tag."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if an equivalent tag already exists."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public AddTagResult addTag(Tag p) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return tags.add(p);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Replaces the given tag {@code target} in the list with {@code editedTag}."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if updating the tag\u0027s details causes the tag to be equivalent to"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *      another existing tag in the list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @throws TagNotFoundException if {@code target} could not be found in the list."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void updateTag(Tag target, Tag editedTag)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throws DuplicateTagException, TagNotFoundException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(editedTag);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        tags.setTag(target, editedTag);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code CardBank}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @throws TagNotFoundException if the {@code key} is not in this {@code CardBank}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public boolean removeTag(Tag key) throws TagNotFoundException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (tags.remove(key)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            throw new TagNotFoundException(key);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    //// card-level operations"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Adds a card to the flashy book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void addCard(Card c) throws DuplicateCardException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        cards.add(c);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Removes a card from the flashy book."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * @param c card to remove"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * @throws CardNotFoundException"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void deleteCard(Card c) throws CardNotFoundException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        cards.remove(c);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    //// card-tag-level operations"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void addEdge(Card c, Tag t) throws DuplicateEdgeException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        cardTag.addEdge(c, t);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Replaces the given card {@code target} in the list with {@code editedCard}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @throws DuplicateCardException if updating the card\u0027s details causes the card to be equivalent to"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     *      another existing card in the list."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @throws CardNotFoundException if {@code target} could not be found in the list."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void updateCard(Card target, Card editedCard)"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            throws DuplicateCardException, CardNotFoundException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        requireNonNull(editedCard);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        cards.setCard(target, editedCard);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"pukipuki"},"content":"    //@@author pukipuki"},{"lineNumber":174,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"pukipuki"},"content":"     * get cards due for review before {@code date}"},{"lineNumber":176,"author":{"gitID":"pukipuki"},"content":"     * @param date before this date"},{"lineNumber":177,"author":{"gitID":"pukipuki"},"content":"     * @return"},{"lineNumber":178,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"pukipuki"},"content":"    public ObservableList\u003cCard\u003e getReviewList(LocalDateTime date) {"},{"lineNumber":180,"author":{"gitID":"pukipuki"},"content":"        requireNonNull(date);"},{"lineNumber":181,"author":{"gitID":"pukipuki"},"content":"        return getReviewList(date, cards.asObservableList());"},{"lineNumber":182,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":184,"author":{"gitID":"pukipuki"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"pukipuki"},"content":"     * get cards due for review before {@code date} from a {@code cardsList}"},{"lineNumber":186,"author":{"gitID":"pukipuki"},"content":"     * @param date before this date"},{"lineNumber":187,"author":{"gitID":"pukipuki"},"content":"     * @param cardsList from this list"},{"lineNumber":188,"author":{"gitID":"pukipuki"},"content":"     * @return"},{"lineNumber":189,"author":{"gitID":"pukipuki"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"pukipuki"},"content":"    public ObservableList\u003cCard\u003e getReviewList(LocalDateTime date, ObservableList\u003cCard\u003e cardsList) {"},{"lineNumber":191,"author":{"gitID":"pukipuki"},"content":"        requireAllNonNull(date, cardsList);"},{"lineNumber":192,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":193,"author":{"gitID":"pukipuki"},"content":"        FXCollections.sort(cardsList, Schedule.getByDate());"},{"lineNumber":194,"author":{"gitID":"pukipuki"},"content":"        logger.fine(\"Sorting filteredCards List.\");"},{"lineNumber":195,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":196,"author":{"gitID":"pukipuki"},"content":"        cardsList \u003d new FilteredList\u003cCard\u003e(cardsList, Schedule.before(date));"},{"lineNumber":197,"author":{"gitID":"pukipuki"},"content":"        logger.fine(\"Filtering filteredCards List.\");"},{"lineNumber":198,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":199,"author":{"gitID":"pukipuki"},"content":"        ObservableList\u003cCard\u003e filteredList \u003d  FXCollections.observableArrayList();"},{"lineNumber":200,"author":{"gitID":"pukipuki"},"content":"        for (Card each : cardsList) {"},{"lineNumber":201,"author":{"gitID":"pukipuki"},"content":"            filteredList.add(each);"},{"lineNumber":202,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":204,"author":{"gitID":"pukipuki"},"content":"        return filteredList;"},{"lineNumber":205,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"pukipuki"},"content":"    //@@author"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        stringBuilder.append(tags.asObservableList().size());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        stringBuilder.append(\" Tags:\\n\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        for (Tag tag : tags.asObservableList()) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            stringBuilder.append(tag.toString() + \"\\n\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        stringBuilder.append(cards.asObservableList().size());"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        stringBuilder.append(\" Cards:\\n\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        for (Card card: cards.asObservableList()) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            stringBuilder.append(card.toString() + \"\\n\");"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return stringBuilder.toString();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCard\u003e getCardList() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        return cards.asObservableList();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public CardTag getCardTag() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        return cardTag;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public void setCardTag(CardTag cardTag) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        this.cardTag \u003d cardTag;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                || (other instanceof CardBank // instanceof handles nulls"},{"lineNumber":250,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equals(((CardBank) other).tags)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.cards.equals(((CardBank) other).cards))"},{"lineNumber":252,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.cardTag.equals(((CardBank) other).cardTag);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        return Objects.hash(tags, cards);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pukipuki":34,"-":226}},{"path":"src/main/java/seedu/flashy/model/card/McqCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model.card;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.UUID;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Shawnclq"},"content":"//@@author shawnclq"},{"lineNumber":17,"author":{"gitID":"Shawnclq"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Shawnclq"},"content":" * Represents a MCQ Flashcard."},{"lineNumber":19,"author":{"gitID":"Shawnclq"},"content":" * Guarantees: Front, Back, Options must not be null."},{"lineNumber":20,"author":{"gitID":"Shawnclq"},"content":" *"},{"lineNumber":21,"author":{"gitID":"Shawnclq"},"content":" */"},{"lineNumber":22,"author":{"gitID":"Shawnclq"},"content":"public class McqCard extends Card {"},{"lineNumber":23,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":24,"author":{"gitID":"Shawnclq"},"content":"    public static final String MESSAGE_MCQ_CARD_CONSTRAINTS \u003d"},{"lineNumber":25,"author":{"gitID":"Shawnclq"},"content":"            \"MCQ Card front, back and options can take any values, and it should not be blank\";"},{"lineNumber":26,"author":{"gitID":"Shawnclq"},"content":"    public static final String MESSAGE_MCQ_CARD_ANSWER_CONSTRAINTS \u003d"},{"lineNumber":27,"author":{"gitID":"Shawnclq"},"content":"            \"MCQ Card back should be an integer between 1 and the number of options input\";"},{"lineNumber":28,"author":{"gitID":"Shawnclq"},"content":"    public static final String TYPE \u003d \"MCQ\";"},{"lineNumber":29,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":30,"author":{"gitID":"Shawnclq"},"content":"    private final ObservableList\u003cString\u003e optionsList \u003d FXCollections.observableArrayList();"},{"lineNumber":31,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":32,"author":{"gitID":"Shawnclq"},"content":"    public McqCard(String front, String back, List\u003cString\u003e options) {"},{"lineNumber":33,"author":{"gitID":"Shawnclq"},"content":"        this(UUID.randomUUID(), front, back, options);"},{"lineNumber":34,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":36,"author":{"gitID":"Shawnclq"},"content":"    public McqCard(UUID id, String front, String back, List\u003cString\u003e options) {"},{"lineNumber":37,"author":{"gitID":"Shawnclq"},"content":"        super(id, front, back);"},{"lineNumber":38,"author":{"gitID":"Shawnclq"},"content":"        super.setType(TYPE);"},{"lineNumber":39,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(options);"},{"lineNumber":40,"author":{"gitID":"Shawnclq"},"content":"        for (String option: options) {"},{"lineNumber":41,"author":{"gitID":"Shawnclq"},"content":"            checkArgument(super.isValidCard(option), super.MESSAGE_CARD_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"Shawnclq"},"content":"        optionsList.addAll(options);"},{"lineNumber":44,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":45,"author":{"gitID":"Shawnclq"},"content":"        assert CollectionUtil.elementsAreUnique(optionsList);"},{"lineNumber":46,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":48,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Shawnclq"},"content":"     * Returns all options in this list as a Set."},{"lineNumber":50,"author":{"gitID":"Shawnclq"},"content":"     * This set is mutable and change-insulated against options list."},{"lineNumber":51,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"Shawnclq"},"content":"    public List\u003cString\u003e getOptions() {"},{"lineNumber":54,"author":{"gitID":"Shawnclq"},"content":"        assert CollectionUtil.elementsAreUnique(optionsList);"},{"lineNumber":55,"author":{"gitID":"Shawnclq"},"content":"        return optionsList;"},{"lineNumber":56,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":58,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Shawnclq"},"content":"     * Replaces the options in the list with those in the argument options list."},{"lineNumber":60,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Shawnclq"},"content":"    public void setOptions(List\u003cString\u003e options) {"},{"lineNumber":62,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(options);"},{"lineNumber":63,"author":{"gitID":"Shawnclq"},"content":"        optionsList.addAll(options);"},{"lineNumber":64,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":65,"author":{"gitID":"Shawnclq"},"content":"        assert CollectionUtil.elementsAreUnique(optionsList);"},{"lineNumber":66,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":68,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"Shawnclq"},"content":"     * Returns true if the list contains an equivalent String as the given argument."},{"lineNumber":70,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"Shawnclq"},"content":"    public boolean containsOption(String option) {"},{"lineNumber":72,"author":{"gitID":"Shawnclq"},"content":"        requireNonNull(option);"},{"lineNumber":73,"author":{"gitID":"Shawnclq"},"content":"        return optionsList.contains(option);"},{"lineNumber":74,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":76,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"Shawnclq"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":78,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Shawnclq"},"content":"    public ObservableList\u003cString\u003e asObservableList() {"},{"lineNumber":80,"author":{"gitID":"Shawnclq"},"content":"        assert CollectionUtil.elementsAreUnique(optionsList);"},{"lineNumber":81,"author":{"gitID":"Shawnclq"},"content":"        return FXCollections.unmodifiableObservableList(optionsList);"},{"lineNumber":82,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":84,"author":{"gitID":"Shawnclq"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"Shawnclq"},"content":"     * Returns true if a given front and back string is valid."},{"lineNumber":86,"author":{"gitID":"Shawnclq"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"Shawnclq"},"content":"    public static boolean isValidMcqCard(String back, List\u003cString\u003e options) {"},{"lineNumber":88,"author":{"gitID":"Shawnclq"},"content":"        requireAllNonNull(back, options);"},{"lineNumber":89,"author":{"gitID":"Shawnclq"},"content":"        int backInt;"},{"lineNumber":90,"author":{"gitID":"Shawnclq"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"Shawnclq"},"content":"            backInt \u003d Integer.valueOf(back);"},{"lineNumber":92,"author":{"gitID":"Shawnclq"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":93,"author":{"gitID":"Shawnclq"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"Shawnclq"},"content":"        return (backInt \u003e\u003d 1) \u0026\u0026 (backInt \u003c\u003d options.size());"},{"lineNumber":96,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":98,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"Shawnclq"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"Shawnclq"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitID":"Shawnclq"},"content":"            return true;"},{"lineNumber":102,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":104,"author":{"gitID":"Shawnclq"},"content":"        if (!(other instanceof McqCard)) {"},{"lineNumber":105,"author":{"gitID":"Shawnclq"},"content":"            return false;"},{"lineNumber":106,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":108,"author":{"gitID":"Shawnclq"},"content":"        McqCard otherCard \u003d (McqCard) other;"},{"lineNumber":109,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":110,"author":{"gitID":"Shawnclq"},"content":"        return otherCard.getFront().equals(this.getFront())"},{"lineNumber":111,"author":{"gitID":"Shawnclq"},"content":"                \u0026\u0026 otherCard.getBack().equals(this.getBack())"},{"lineNumber":112,"author":{"gitID":"Shawnclq"},"content":"                \u0026\u0026 otherCard.getOptions().containsAll(optionsList)"},{"lineNumber":113,"author":{"gitID":"Shawnclq"},"content":"                \u0026\u0026 optionsList.containsAll(otherCard.getOptions());"},{"lineNumber":114,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":116,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"Shawnclq"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitID":"Shawnclq"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":119,"author":{"gitID":"Shawnclq"},"content":"        return Objects.hash(super.id, super.front, back, optionsList);"},{"lineNumber":120,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":122,"author":{"gitID":"Shawnclq"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"Shawnclq"},"content":"    public String toString() {"},{"lineNumber":124,"author":{"gitID":"Shawnclq"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":125,"author":{"gitID":"Shawnclq"},"content":"        builder.append(\"Front: \").append(getFront());"},{"lineNumber":126,"author":{"gitID":"Shawnclq"},"content":"        for (String option: optionsList) {"},{"lineNumber":127,"author":{"gitID":"Shawnclq"},"content":"            builder.append(\" Option: \").append(option);"},{"lineNumber":128,"author":{"gitID":"Shawnclq"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"Shawnclq"},"content":"        builder.append(\" Back: \").append(getBack());"},{"lineNumber":130,"author":{"gitID":"Shawnclq"},"content":"        return builder.toString();"},{"lineNumber":131,"author":{"gitID":"Shawnclq"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Shawnclq"},"content":""},{"lineNumber":133,"author":{"gitID":"Shawnclq"},"content":"}"},{"lineNumber":134,"author":{"gitID":"Shawnclq"},"content":"//@@author"}],"authorContributionMap":{"Shawnclq":119,"-":15}},{"path":"src/main/java/seedu/flashy/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.flashy.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.flashy.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.ComponentManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.EventsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.model.CardBankChangedEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.CardListPanelSelectionChangedEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.EmptyCardBackEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.flashy.commons.events.ui.TagListPanelSelectionChangedEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.Card;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.CardNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.DuplicateCardException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.flashy.model.card.exceptions.NoCardSelectedException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.flashy.model.cardtag.CardTag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.flashy.model.cardtag.DuplicateEdgeException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.flashy.model.cardtag.EdgeNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.AddTagResult;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.exceptions.DuplicateTagException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.flashy.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the flashy book data."},{"lineNumber":41,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final CardBank cardBank;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cTag\u003e filteredTags;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cCard\u003e filteredCards;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Card selectedCard;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Tag selectedTag;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private LocalDateTime beforeThisDate;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given cardBank and userPrefs."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyCardBank cardBank, UserPrefs userPrefs) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireAllNonNull(cardBank, userPrefs);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with flashy book: \" + cardBank + \" and user prefs \" + userPrefs);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.cardBank \u003d new CardBank(cardBank);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        filteredTags \u003d new FilteredList\u003c\u003e(this.cardBank.getTagList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // To prevent direct referencing, which would cause setAll() to affect cardBank\u0027s list"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        filteredCards \u003d FXCollections.observableArrayList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        filteredCards.setAll(this.cardBank.getCardList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        selectedTag \u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        selectedCard \u003d null;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        beforeThisDate \u003d null;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this(new CardBank(), new UserPrefs());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyCardBank newData) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        cardBank.resetData(newData);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        indicateCardBankChanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public ReadOnlyCardBank getCardBank() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return cardBank;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void indicateCardBankChanged() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        raise(new CardBankChangedEvent(cardBank));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        updateFilteredCardList();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":98,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"jethrokuan"},"content":"    public synchronized void deleteTag(Tag target) throws TagNotFoundException {"},{"lineNumber":100,"author":{"gitID":"jethrokuan"},"content":"        CardTag cardTag \u003d this.cardBank.getCardTag();"},{"lineNumber":101,"author":{"gitID":"jethrokuan"},"content":"        List\u003cCard\u003e cards \u003d cardTag.getCards(target, this.cardBank.getCardList());"},{"lineNumber":102,"author":{"gitID":"jethrokuan"},"content":"        for (Card card : cards) {"},{"lineNumber":103,"author":{"gitID":"jethrokuan"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"jethrokuan"},"content":"                cardTag.removeEdge(card, target);"},{"lineNumber":105,"author":{"gitID":"jethrokuan"},"content":"            } catch (EdgeNotFoundException e) {"},{"lineNumber":106,"author":{"gitID":"jethrokuan"},"content":"                throw new IllegalStateException(\"Not possible to reach here.\");"},{"lineNumber":107,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":110,"author":{"gitID":"jethrokuan"},"content":"        cardBank.removeTag(target);"},{"lineNumber":111,"author":{"gitID":"jethrokuan"},"content":"        indicateCardBankChanged();"},{"lineNumber":112,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":114,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"jethrokuan"},"content":"    public synchronized AddTagResult addTag(Tag tag) {"},{"lineNumber":116,"author":{"gitID":"jethrokuan"},"content":"        AddTagResult tagResult \u003d cardBank.addTag(tag);"},{"lineNumber":117,"author":{"gitID":"jethrokuan"},"content":"        updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"},{"lineNumber":118,"author":{"gitID":"jethrokuan"},"content":"        indicateCardBankChanged();"},{"lineNumber":119,"author":{"gitID":"jethrokuan"},"content":"        return tagResult;"},{"lineNumber":120,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":122,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"jethrokuan"},"content":"    public void updateTag(Tag target, Tag editedTag)"},{"lineNumber":124,"author":{"gitID":"jethrokuan"},"content":"        throws DuplicateTagException, TagNotFoundException {"},{"lineNumber":125,"author":{"gitID":"jethrokuan"},"content":"        requireAllNonNull(target, editedTag);"},{"lineNumber":126,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":127,"author":{"gitID":"jethrokuan"},"content":"        cardBank.updateTag(target, editedTag);"},{"lineNumber":128,"author":{"gitID":"jethrokuan"},"content":"        indicateCardBankChanged();"},{"lineNumber":129,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Tag List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Tag} backed by the internal list of"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * {@code cardBank}"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredTags);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        filteredTags.setPredicate(predicate);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return cardBank.equals(other.cardBank)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            \u0026\u0026 filteredTags.equals(other.filteredTags);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":168,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"jethrokuan"},"content":"    public synchronized void addCard(Card card) throws DuplicateCardException {"},{"lineNumber":170,"author":{"gitID":"jethrokuan"},"content":"        cardBank.addCard(card);"},{"lineNumber":171,"author":{"gitID":"jethrokuan"},"content":"        indicateCardBankChanged();"},{"lineNumber":172,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":174,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"jethrokuan"},"content":"    public synchronized void deleteCard(Card card) throws CardNotFoundException {"},{"lineNumber":176,"author":{"gitID":"jethrokuan"},"content":"        CardTag cardTag \u003d this.getCardBank().getCardTag();"},{"lineNumber":177,"author":{"gitID":"jethrokuan"},"content":"        List\u003cTag\u003e tags \u003d cardTag.getTags(card, this.getCardBank().getTagList());"},{"lineNumber":178,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":179,"author":{"gitID":"jethrokuan"},"content":"        // We need to clone tags because removing tags while iterating over it results in strange behaviour."},{"lineNumber":180,"author":{"gitID":"jethrokuan"},"content":"        List\u003cTag\u003e tempTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":181,"author":{"gitID":"jethrokuan"},"content":"        for (Tag tag : tags) {"},{"lineNumber":182,"author":{"gitID":"jethrokuan"},"content":"            tempTags.add(tag);"},{"lineNumber":183,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":185,"author":{"gitID":"jethrokuan"},"content":"        int size \u003d tempTags.size();"},{"lineNumber":186,"author":{"gitID":"jethrokuan"},"content":"        for (Tag tag : tempTags) {"},{"lineNumber":187,"author":{"gitID":"jethrokuan"},"content":"            try {"},{"lineNumber":188,"author":{"gitID":"jethrokuan"},"content":"                cardTag.removeEdge(card, tag);"},{"lineNumber":189,"author":{"gitID":"jethrokuan"},"content":"                if (!cardTag.hasCards(tag)) {"},{"lineNumber":190,"author":{"gitID":"jethrokuan"},"content":"                    cardBank.removeTag(tag);"},{"lineNumber":191,"author":{"gitID":"jethrokuan"},"content":"                }"},{"lineNumber":192,"author":{"gitID":"jethrokuan"},"content":"            } catch (EdgeNotFoundException e) {"},{"lineNumber":193,"author":{"gitID":"jethrokuan"},"content":"                throw new IllegalStateException(\"Not possible to reach here.\");"},{"lineNumber":194,"author":{"gitID":"jethrokuan"},"content":"            } catch (TagNotFoundException e) {"},{"lineNumber":195,"author":{"gitID":"jethrokuan"},"content":"                throw new IllegalStateException(\"Not possible to reach here.\");"},{"lineNumber":196,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":197,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"jethrokuan"},"content":"        cardBank.deleteCard(card);"},{"lineNumber":199,"author":{"gitID":"jethrokuan"},"content":"        indicateCardBankChanged();"},{"lineNumber":200,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":202,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"pukipuki"},"content":"    //@@author pukipuki"},{"lineNumber":205,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"pukipuki"},"content":"    public Card getSelectedCard() {"},{"lineNumber":207,"author":{"gitID":"pukipuki"},"content":"        return selectedCard;"},{"lineNumber":208,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":210,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"pukipuki"},"content":"    public void setSelectedCard(Card selectedCard) {"},{"lineNumber":212,"author":{"gitID":"pukipuki"},"content":"        this.selectedCard \u003d selectedCard;"},{"lineNumber":213,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":215,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"pukipuki"},"content":"    public void answerSelectedCard(int confidenceLevel) throws NoCardSelectedException {"},{"lineNumber":217,"author":{"gitID":"pukipuki"},"content":"        if (selectedCard \u003d\u003d null) {"},{"lineNumber":218,"author":{"gitID":"pukipuki"},"content":"            logger.warning(\"no card selected, unable to apply to null.\");"},{"lineNumber":219,"author":{"gitID":"pukipuki"},"content":"            throw new NoCardSelectedException();"},{"lineNumber":220,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"pukipuki"},"content":"        boolean isTooEasy \u003d selectedCard.getSchedule().feedbackHandlerRouter(confidenceLevel);"},{"lineNumber":222,"author":{"gitID":"pukipuki"},"content":"        logger.fine(\"sending answer feedback to scheduler, confidenceLevel: \" + confidenceLevel);"},{"lineNumber":223,"author":{"gitID":"pukipuki"},"content":"        if (isTooEasy) {"},{"lineNumber":224,"author":{"gitID":"pukipuki"},"content":"            filteredCards.remove(selectedCard);"},{"lineNumber":225,"author":{"gitID":"pukipuki"},"content":"            emptyAndUnselectCard();"},{"lineNumber":226,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":227,"author":{"gitID":"pukipuki"},"content":"            showDueCards(beforeThisDate);"},{"lineNumber":228,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"pukipuki"},"content":"    //@@author"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void updateCard(Card target, Card editedCard)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        throws DuplicateCardException, CardNotFoundException {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedCard);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        cardBank.updateCard(target, editedCard);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        indicateCardBankChanged();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"yong-jie"},"content":"    //@@author yong-jie"},{"lineNumber":242,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":243,"author":{"gitID":"yong-jie"},"content":"    public void showAllCards() {"},{"lineNumber":244,"author":{"gitID":"yong-jie"},"content":"        filteredCards.setAll(this.cardBank.getCardList());"},{"lineNumber":245,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":247,"author":{"gitID":"yong-jie"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"yong-jie"},"content":"     * Synchronises the card list with that of the card bank."},{"lineNumber":249,"author":{"gitID":"yong-jie"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"yong-jie"},"content":"    private void updateFilteredCardList() {"},{"lineNumber":251,"author":{"gitID":"yong-jie"},"content":"        if (selectedTag \u003d\u003d null) {"},{"lineNumber":252,"author":{"gitID":"yong-jie"},"content":"            showAllCards();"},{"lineNumber":253,"author":{"gitID":"yong-jie"},"content":"            return;"},{"lineNumber":254,"author":{"gitID":"yong-jie"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"yong-jie"},"content":"        filterCardsByTag(selectedTag);"},{"lineNumber":256,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":258,"author":{"gitID":"yong-jie"},"content":"    @Override"},{"lineNumber":259,"author":{"gitID":"yong-jie"},"content":"    public void filterCardsByTag(Tag tag) {"},{"lineNumber":260,"author":{"gitID":"yong-jie"},"content":"        filteredCards.setAll(cardBank"},{"lineNumber":261,"author":{"gitID":"yong-jie"},"content":"            .getCardTag()"},{"lineNumber":262,"author":{"gitID":"yong-jie"},"content":"            .getCards(tag, cardBank.getCardList()));"},{"lineNumber":263,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":265,"author":{"gitID":"yong-jie"},"content":"    //@@author"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCard\u003e getFilteredCardList() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredCards);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"pukipuki"},"content":"    //@@author pukipuki"},{"lineNumber":272,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":273,"author":{"gitID":"pukipuki"},"content":"    public void setNextReview(LocalDateTime date) throws NoCardSelectedException {"},{"lineNumber":274,"author":{"gitID":"pukipuki"},"content":"        if (selectedCard \u003d\u003d null) {"},{"lineNumber":275,"author":{"gitID":"pukipuki"},"content":"            logger.warning(\"no card selected, unable to apply to null.\");"},{"lineNumber":276,"author":{"gitID":"pukipuki"},"content":"            throw new NoCardSelectedException();"},{"lineNumber":277,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"pukipuki"},"content":"        selectedCard.getSchedule().setNextReview(date);"},{"lineNumber":279,"author":{"gitID":"pukipuki"},"content":"        logger.fine(\"Setting next review date of card to: \" + date.toString());"},{"lineNumber":280,"author":{"gitID":"pukipuki"},"content":"        showDueCards(beforeThisDate);"},{"lineNumber":281,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":283,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":284,"author":{"gitID":"pukipuki"},"content":"    public void showDueCards(LocalDateTime date) {"},{"lineNumber":285,"author":{"gitID":"pukipuki"},"content":"        if (date \u003d\u003d null) {"},{"lineNumber":286,"author":{"gitID":"pukipuki"},"content":"            beforeThisDate \u003d LocalDate.now().atStartOfDay();"},{"lineNumber":287,"author":{"gitID":"pukipuki"},"content":"        } else {"},{"lineNumber":288,"author":{"gitID":"pukipuki"},"content":"            beforeThisDate \u003d date;"},{"lineNumber":289,"author":{"gitID":"pukipuki"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"pukipuki"},"content":"        filteredCards.setAll(this.cardBank.getReviewList(beforeThisDate, filteredCards));"},{"lineNumber":291,"author":{"gitID":"pukipuki"},"content":"        logger.fine(\"Showing cards due before: \" + beforeThisDate.toString());"},{"lineNumber":292,"author":{"gitID":"pukipuki"},"content":"        emptyAndUnselectCard();"},{"lineNumber":293,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"pukipuki"},"content":""},{"lineNumber":295,"author":{"gitID":"pukipuki"},"content":"    @Override"},{"lineNumber":296,"author":{"gitID":"pukipuki"},"content":"    public void emptyAndUnselectCard() {"},{"lineNumber":297,"author":{"gitID":"pukipuki"},"content":"        logger.fine(\"Clearing back of card.\");"},{"lineNumber":298,"author":{"gitID":"pukipuki"},"content":"        EventsCenter.getInstance().post(new EmptyCardBackEvent());"},{"lineNumber":299,"author":{"gitID":"pukipuki"},"content":"        this.selectedCard \u003d null;"},{"lineNumber":300,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"pukipuki"},"content":"    //@@author"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"jethrokuan"},"content":"    //@@author jethrokuan"},{"lineNumber":304,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"jethrokuan"},"content":"    public List\u003cTag\u003e getTags(Card card) {"},{"lineNumber":306,"author":{"gitID":"jethrokuan"},"content":"        return this.getCardBank()"},{"lineNumber":307,"author":{"gitID":"jethrokuan"},"content":"            .getCardTag()"},{"lineNumber":308,"author":{"gitID":"jethrokuan"},"content":"            .getTags(card, this.getCardBank().getTagList());"},{"lineNumber":309,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":311,"author":{"gitID":"jethrokuan"},"content":"    // NOTE: tag passed might not have the correct ids, so it is important to fetch them first."},{"lineNumber":312,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":313,"author":{"gitID":"jethrokuan"},"content":"    public void removeTags(Card card, Set\u003cTag\u003e tags) throws EdgeNotFoundException, TagNotFoundException {"},{"lineNumber":314,"author":{"gitID":"jethrokuan"},"content":"        CardTag cardTag \u003d this.getCardBank().getCardTag();"},{"lineNumber":315,"author":{"gitID":"jethrokuan"},"content":"        for (Tag tag : tags) {"},{"lineNumber":316,"author":{"gitID":"jethrokuan"},"content":"            int index \u003d this.cardBank.getTagList().indexOf(tag);"},{"lineNumber":317,"author":{"gitID":"jethrokuan"},"content":"            if (index \u003d\u003d -1) {"},{"lineNumber":318,"author":{"gitID":"jethrokuan"},"content":"                throw new TagNotFoundException(tag);"},{"lineNumber":319,"author":{"gitID":"jethrokuan"},"content":"            }"},{"lineNumber":320,"author":{"gitID":"jethrokuan"},"content":"            Tag existingTag \u003d this.cardBank.getTagList().get(index);"},{"lineNumber":321,"author":{"gitID":"jethrokuan"},"content":"            cardTag.removeEdge(card, existingTag);"},{"lineNumber":322,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":323,"author":{"gitID":"jethrokuan"},"content":"        indicateCardBankChanged(); // Force UI update."},{"lineNumber":324,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":326,"author":{"gitID":"jethrokuan"},"content":"    // NOTE: tag passed might not have the correct ids, so it is important to fetch them first."},{"lineNumber":327,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":328,"author":{"gitID":"jethrokuan"},"content":"    public void addTags(Card card, Set\u003cTag\u003e tags) throws DuplicateEdgeException {"},{"lineNumber":329,"author":{"gitID":"jethrokuan"},"content":"        CardTag cardTag \u003d this.getCardBank().getCardTag();"},{"lineNumber":330,"author":{"gitID":"jethrokuan"},"content":"        for (Tag tag : tags) {"},{"lineNumber":331,"author":{"gitID":"jethrokuan"},"content":"            Tag newOrExistingTag \u003d addTag(tag).getTag();"},{"lineNumber":332,"author":{"gitID":"jethrokuan"},"content":"            cardTag.addEdge(card, newOrExistingTag);"},{"lineNumber":333,"author":{"gitID":"jethrokuan"},"content":"        }"},{"lineNumber":334,"author":{"gitID":"jethrokuan"},"content":"        indicateCardBankChanged(); // Force UI update."},{"lineNumber":335,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"jethrokuan"},"content":""},{"lineNumber":337,"author":{"gitID":"jethrokuan"},"content":"    @Override"},{"lineNumber":338,"author":{"gitID":"jethrokuan"},"content":"    public void showUntaggedCards() {"},{"lineNumber":339,"author":{"gitID":"jethrokuan"},"content":"        Predicate\u003cCard\u003e predCardsNoTags \u003d card -\u003e getTags(card).isEmpty();"},{"lineNumber":340,"author":{"gitID":"jethrokuan"},"content":"        filteredCards.setAll(this.getCardBank().getCardList().filtered(predCardsNoTags));"},{"lineNumber":341,"author":{"gitID":"jethrokuan"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"jethrokuan"},"content":"    //@@author"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"yong-jie"},"content":"    //@@author yong-jie"},{"lineNumber":345,"author":{"gitID":"yong-jie"},"content":"    @Subscribe"},{"lineNumber":346,"author":{"gitID":"yong-jie"},"content":"    private void handleTagListPanelSelectionEvent(TagListPanelSelectionChangedEvent event) {"},{"lineNumber":347,"author":{"gitID":"yong-jie"},"content":"        selectedTag \u003d event.getNewSelection().tag;"},{"lineNumber":348,"author":{"gitID":"yong-jie"},"content":"        filterCardsByTag(selectedTag);"},{"lineNumber":349,"author":{"gitID":"yong-jie"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"yong-jie"},"content":""},{"lineNumber":351,"author":{"gitID":"pukipuki"},"content":"    //@@author pukipuki"},{"lineNumber":352,"author":{"gitID":"pukipuki"},"content":"    @Subscribe"},{"lineNumber":353,"author":{"gitID":"pukipuki"},"content":"    private void handleCardListPanelSelectionEvent(CardListPanelSelectionChangedEvent event) {"},{"lineNumber":354,"author":{"gitID":"pukipuki"},"content":"        this.selectedCard \u003d event.getNewSelection().card;"},{"lineNumber":355,"author":{"gitID":"pukipuki"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"pukipuki"},"content":"    //@@author"},{"lineNumber":357,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yong-jie":32,"jethrokuan":110,"pukipuki":64,"-":151}}]
