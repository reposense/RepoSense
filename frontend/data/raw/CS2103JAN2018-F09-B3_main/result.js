var resultJson = [{"path":"unused/NewsCardClickedEvent.java","lines":[{"lineNumber":1,"content":"//@@author Eldon-Chung-unused"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":" * Indicates a mouse click on a news card"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"public class NewsCardClickedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"    public final String url;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"    public NewsCardClickedEvent(String url) {"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"        this.url \u003d url;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Eldon-Chung":9,"-":12}},{"path":"unused/NewsListPanel.java","lines":[{"lineNumber":1,"content":"//@@author Eldon-Chung-unused"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * Panel containing the list of news links."},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"public class NewsListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String FXML \u003d \"NewsListPanel.fxml\";"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private ListView\u003cNewsCard\u003e newsListView;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public NewsListPanel() {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        super(FXML);"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        ObservableList\u003cNewsCard\u003e ol \u003d loadNewsList();"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        setConnections(ol);"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    private void setConnections(ObservableList\u003cNewsCard\u003e ol) {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        newsListView.setItems(ol);"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        newsListView.setCellFactory(listView -\u003e new NewsListViewCell());"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"     * Loads a dummy news list with fake article links"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"     * @return an observable NewsCard list"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    private ObservableList\u003cNewsCard\u003e loadNewsList() {"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cNewsCard\u003e al \u003d new ArrayList\u003cNewsCard\u003e();"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        al.add(new NewsCard(\"Newegg new accepts Bitcoin BCH through Bitpay!\", \"15 Mar 2018\","},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"                \"https://cryptopanic.com/news/1378058/Newegg-new-accepts-Bitcoin-BCH-through-Bitpay-0-Fees\"));"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        al.add(new NewsCard(\"Test2\", \"22 Feb 2018\", \"https://www.google.com\"));"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        return FXCollections.observableArrayList(al);"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code CoinCard}."},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    class NewsListViewCell extends ListCell\u003cNewsCard\u003e {"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        @Override"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        protected void updateItem(NewsCard news, boolean empty) {"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"            super.updateItem(news, empty);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"            if (empty || news \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"                setGraphic(null);"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"                setText(null);"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"            } else {"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"                setGraphic(news.getRoot());"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"null":1,"Eldon-Chung":58,"-":5}},{"path":"docs/team/eldon-chung.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"\u003d Eldon Chung - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"\u003d\u003d PROJECT: CoinBook"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"CoinBook is a desktop accounting application written in Java. It is targeted at cryptocurrency traders and enthusiasts, and allows them to keep track of the coins they hold, obtain price data and analytics, and read the latest news relevant to them in the same place. Primary interaction is through a CLI, and a GUI built with JavaFX."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"* *Major enhancement*: Added *advanced search criteria and boolean logical operators*"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"** What it does: Allows the user to search through the __CoinBook__ based on Code, price, etc as well as boolean combinations of these."},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"** Justification: This lets users search through a large set of coins quickly as well as allow users the power of very specific queries."},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"This allows for ease of use and handling of a large Coin base."},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"** Highlights: This enhancement involved revamping the entire input sanitation to allow for a higher level of parsing."},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"The resulting system was then used by enhancements written by other team members. Many alternative design considerations were made and tradeoffs were sacrificed."},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"** Credits: Concepts of tokenization, parsing, syntax specification and boolean predicate generation were covered extensively in __Compilers: Principles, Techniques, and Tools__ by Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman."},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"The conceptualization of the parser would not have been possible without the valuable lessons obtained from that book."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"* *Proposed extensions* :"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"** Boolean logical queries may be difficult for users to consistently express. One possible enhancement could be to include syntax"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"highlighting on the text as it is typed in to notify the user when the string is valid without requiring the user to use the `Enter` key."},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"** It could be very useful to automatically translate such boolean queries into English as the user types the queries, to give them a sense of"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"what their expression means. For example: when the user keys in `(p/\u003e50 AND t/fav) OR c/BTC` it could be possible for some text"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"to appear with the following sentence: \"Based on this query, you wish to find all coins that are priced above 50 dollars and you have tagged as favourite. Also,"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"you wish to find the coin named BTC\"."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"** The Tokenizer, along with its TokenTypes and the SyntaxParser was designed to be extensible in the case there needs to be"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"a drastic change in syntax. An approach to the Unix-style command line interface is another possible direction."},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"* *Minor enhancement*: Added a news panel which loads subreddits for coins through the view command when invoked. Also provided the ability for __CoinBook__ to warn"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"the user when the coin added does not exist."},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F09-B3/main/blob/master/collated/functional/Eldon-Chung.md[Functional code]] [https://github.com/CS2103JAN2018-F09-B3/main/blob/master/collated/test/Eldon-Chung.md[Test code]]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"*** Managed releases `v1.5rc` (1 release) on GitHub"},{"lineNumber":44,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"*** Refactored old tests to suit new code base (Pull requests https://github.com/CS2103JAN2018-F09-B3/main/pull/202[#202], https://github.com/CS2103JAN2018-F09-B3/main/pull/202[#211])"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"*** Refactored entire code base for general quality (https://github.com/CS2103JAN2018-F09-B3/main/pull/147[#147], https://github.com/CS2103JAN2018-F09-B3/main/pull/138[#138],"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"https://github.com/CS2103JAN2018-F09-B3/main/pull/112[#112], https://github.com/CS2103JAN2018-F09-B3/main/pull/189[#189], https://github.com/CS2103JAN2018-F09-B3/main/pull/204[#204])"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"*** Reported and addressed bugs (Pull requests https://github.com/CS2103JAN2018-F09-B3/main/pull/183[#183], https://github.com/CS2103JAN2018-F09-B3/main/issues/184[#184], https://github.com/CS2103JAN2018-F09-B3/main/issues/188[#188],"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"https://github.com/CS2103JAN2018-F09-B3/main/issues/191[#191], https://github.com/CS2103JAN2018-F09-B3/main/issues/192[#192], https://github.com/CS2103JAN2018-F09-B3/main/pull/193[#193])"},{"lineNumber":50,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"*** Managed the UG and DG: (Pull requests https://github.com/CS2103JAN2018-F09-B3/main/pull/121[#121], https://github.com/CS2103JAN2018-F09-B3/main/pull/180[#180], https://github.com/CS2103JAN2018-F09-B3/main/pull/76[#76])"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"*** Standardised the diagram color scheme and renamed \"address to coin\" in the UG and DG: (Pull requests https://github.com/CS2103JAN2018-F09-B3/main/commit/01dbe64f74fe4a7a8ce156988d8c25afb0ae64da[1])"},{"lineNumber":53,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"*** Reported bugs for other teams in the class(examples:  https://github.com/CS2103JAN2018-F12-B3/main/issues/108#event-1570704377[1])"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"** Tools:"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"*** Used PlantUML for generating diagrams for the Developer Guide"},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"|_Given below is the main section I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"include::../UserGuide.adoc[tag\u003dfindcommand]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"|_Given below is the main section I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":70,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"include::../DeveloperGuide.adoc[tag\u003dcondition]"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: PowerPointLabs"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"---"}],"authorContributionMap":{"Eldon-Chung":40,"-":37}},{"path":"docs/UsingGradle.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Using Gradle"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":5,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":6,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"* Running tests"},{"lineNumber":13,"author":{"gitID":"-"},"content":"* Managing library dependencies"},{"lineNumber":14,"author":{"gitID":"-"},"content":"* Analyzing code for style compliance"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Running Gradle Commands"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."},{"lineNumber":27,"author":{"gitID":"-"},"content":"`./gradlew clean allTests`"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Cleaning the Project"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* *`clean`* +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*`clean` to force Gradle to execute a task*: +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Creating the JAR file"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`shadowJar`* +"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"Creates the `coinbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"e.g. `./gradlew shadowJar`"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"****"},{"lineNumber":48,"author":{"gitID":"-"},"content":"To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"e.g. `./gradlew clean shadowJar`"},{"lineNumber":50,"author":{"gitID":"-"},"content":"****"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Rendering AsciiDoc files"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"* **`asciidoctor`** +"},{"lineNumber":58,"author":{"gitID":"-"},"content":"Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* **`deployOfflineDocs`** +"},{"lineNumber":60,"author":{"gitID":"-"},"content":"Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Running the application"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* *`run`* +"},{"lineNumber":65,"author":{"gitID":"-"},"content":"Builds and runs the application."},{"lineNumber":66,"author":{"gitID":"-"},"content":"* *`runShadow`* +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Builds the application as a fat JAR, and then runs it."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Running code style checks"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"* **`checkstyleMain`** +"},{"lineNumber":72,"author":{"gitID":"-"},"content":"Runs the code style check for the main code base"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* **`checkstyleTest`** +"},{"lineNumber":74,"author":{"gitID":"-"},"content":"Runs the code style check for the test code base"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d Running Tests"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"* **`allTests`** +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Runs all tests."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* **`guiTests`** +"},{"lineNumber":83,"author":{"gitID":"-"},"content":"Runs all tests in the `seedu.address.ui` and `systemtests` package"},{"lineNumber":84,"author":{"gitID":"-"},"content":"* **`nonGuiTests`** +"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Runs all non-GUI tests in the `seedu.address`"},{"lineNumber":86,"author":{"gitID":"-"},"content":"package"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* **`headless`** +"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Here are some examples:"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* `./gradlew headless allTests` -- Runs all tests in headless mode"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"},{"lineNumber":94,"author":{"gitID":"-"},"content":"tests"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d Updating Dependencies"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"* **`compileJava`** +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"See `build.gradle` -\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* **`compileTestJava`** +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."}],"authorContributionMap":{"Eldon-Chung":1,"-":105}},{"path":"unused/NewsCard.java","lines":[{"lineNumber":1,"content":"//@@author Eldon-Chung-unused"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.events.ui.NewsCardClickedEvent;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" * An UI component that displays information of a news link from www.cryptopanic.com."},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class NewsCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String FXML \u003d \"NewsListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CoinBook level 4\u003c/a\u003e"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    private HBox cardNewsPane;"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    private Label headline;"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    private Label pubDate;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    private String url;"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    public NewsCard(String title, String date, String url) {"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        this.headline.setText(title);"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        this.pubDate.setText(date);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        this.url \u003d url;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        if (!(other instanceof NewsCard)) {"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"            return false;"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        // state check"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        NewsCard card \u003d (NewsCard) other;"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        return this.headline.equals(card.headline)"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 this.pubDate.equals(card.pubDate)"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 this.url.equals(card.url);"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"     * Handles the mouse click event, {@code mouseEvent}."},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"    private void handleMouseClick(MouseEvent mouseEvent) {"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        if (mouseEvent.getEventType() \u003d\u003d MouseEvent.MOUSE_CLICKED) {"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"            logger.fine(\"User has clicked on \" + this.getClass().getName() + \" which contains URL \u0027\" + this.url + \"\u0027\");"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"            raise(new NewsCardClickedEvent(this.url));"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"null":1,"Eldon-Chung":48,"-":26}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"CoinBook is developed by the CS2103JAN2018-F09-B3 team. This project is based off +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"AddressBook - Level 4, which was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Eldon Chung"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::eldon-chung.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"{empty}[https://github.com/Eldon-Chung[github]] [\u003c\u003celdon-chung#, portfolio\u003e\u003e]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Role: Developer, Algorithms +"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"Responsibilities: Documentation, Logic, Testing"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Hew Yih Shiuan Ewald"},{"lineNumber":23,"author":{"gitID":"-"},"content":"image::ewaldhew.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"{empty}[http://github.com/ewaldhew[github]] [\u003c\u003cewaldhew#, portfolio\u003e\u003e]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"Role: Developer, Scheduling and tracking +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Responsibilities: UI, Notifications"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lai Cheng Yu"},{"lineNumber":32,"author":{"gitID":"-"},"content":"image::laichengyu.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"{empty}[http://github.com/laichengyu[github]] [\u003c\u003claichengyu#, portfolio\u003e\u003e]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"Role: Developer, Code quality +"},{"lineNumber":36,"author":{"gitID":"-"},"content":"Responsibilities: Integration"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Neil Mehta"},{"lineNumber":41,"author":{"gitID":"-"},"content":"image::neilish3re.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"{empty}[http://github.com/neilish3re[github]] [\u003c\u003cneilish3re#, portfolio\u003e\u003e]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"Responsibilities: Model"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Eldon-Chung":1,"-":46}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"public class SampleDataTest extends CoinBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected CoinBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    public void coinBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        Coin[] expectedList \u003d SampleDataUtil.getSampleCoins();"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        assertListMatching(getCoinListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":5,"-":46}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMB;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOS;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FAV;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HOT;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOS;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FAV;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.getAddCommandSuccessMessage;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.AMB;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.BOS;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.CAS;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.HORSE;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.IDT;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.KEYWORD_MATCHING_BTC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinUtil;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"public class AddCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: add a coin without tags to a non-empty coin book, command with leading spaces and trailing spaces"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        Coin toAdd \u003d AMB;"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMB + \"  \""},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"                + \"   \" + TAG_DESC_FAV + \" \";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: undo adding AMB to the list -\u003e Amy deleted */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: redo adding AMB to the list -\u003e Amy added again */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(toAdd);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: add a coin with all fields same as another coin in the coin book except name -\u003e added */"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        toAdd \u003d new CoinBuilder().withName(VALID_NAME_BOS)"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"                .withTags(VALID_TAG_FAV).build();"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOS"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"                + TAG_DESC_FAV;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: add to empty coin book -\u003e added */"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"        deleteAllCoins();"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(ALIS);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: add a coin with tags, command with parameters in random order -\u003e added */"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        toAdd \u003d BOS;"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FAV + NAME_DESC_BOS"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"                + TAG_DESC_HOT;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: add a coin, missing tags -\u003e added */"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(HORSE);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(IDT);"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        /* ------------------------ Perform add operation while a coin card is selected --------------------------- */"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: selects first card in the coin list, add a coin -\u003e added, card selection remains unchanged */"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        selectCoin(Index.fromOneBased(1));"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(CAS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: add a duplicate coin -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d CoinUtil.getAddCommand(HORSE);"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_COIN);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: add a duplicate coin except with different tags -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalCoins#ALIS"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // CoinBook#addCoin(Coin)"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d CoinUtil.getAddCommand(HORSE) + \" \" + PREFIX_TAG + \"fav\";"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_COIN);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d \"adds \" + CoinUtil.getCoinDetails(toAdd);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Code.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMB"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CoinListPanel} equal to the corresponding components in"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(Coin toAdd) {"},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(CoinUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"Eldon-Chung"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Coin)}. Executes {@code command}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":148,"author":{"gitID":"Eldon-Chung"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Coin)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(String command, Coin toAdd) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"            expectedModel.addCoin(toAdd);"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException dpe) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedResultMessage \u003d getAddCommandSuccessMessage(toAdd);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Coin)} except asserts that"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"     * 2. {@code Model}, {@code Storage} and {@code CoinListPanel} equal to the corresponding components in"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Coin)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"Eldon-Chung"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CoinListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":186,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":78,"-":120}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"public class ClearCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: clear non-empty coin book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":21,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: undo clearing coin book -\u003e original coin book restored */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: redo clearing coin book -\u003e cleared */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: selects first card in coin list and clears coin book -\u003e cleared and no card selected */"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original coin book"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        selectCoin(Index.fromOneBased(1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: clear empty coin book -\u003e cleared */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":12,"-":82}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d CoinBook - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":pdf-stylesdir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":pdf-style: pdf"},{"lineNumber":10,"author":{"gitID":"-"},"content":":xrefstyle: basic"},{"lineNumber":11,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":14,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B3/main"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"By: `Team CS2103JAN2018-F09-B3` Since: `Feb 2018` Licence: `MIT`"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"_CoinBook_ is a desktop application that is made for users who prefer to work on a mouse-free environment where everything can be done through commands typed in with the keyboard. There is no need to click on visual components of the App to perform tasks. In other words, _CoinBook_ offers a command line interface with minimal [gloss]#\u003c\u003cgui,graphical user interface (GUI)\u003e\u003e# dependence."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"_Coinbook_ allows you to store a portfolio of your cryptocurrency purchases as well as track the latest price trends and news, in addition to providing various"},{"lineNumber":25,"author":{"gitID":"-"},"content":"tools to simplify and expedite your management process such as profit calculation."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"This guide will help you set up _CoinBook_, as well as introduce its various features."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d How to Use this Guide"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Read this document to get up and running fast with _CoinBook_. The first thing you need to do is to get it set up, by reading the \u003c\u003cQuick Start\u003e\u003e section. Once you have _CoinBook_ running, get to know the things you can do with it by reading the \u003c\u003cFeatures\u003e\u003e section. If you prefer to just have a quick overview of the available commands, skip to the \u003c\u003cCommand Summary\u003e\u003e section."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"You may find the tips below helpful in using this guide."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Boxes::"},{"lineNumber":35,"author":{"gitID":"-"},"content":"There are various types of boxes that provide extra information:"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"This icon indicates tips for usage and points out little details you may have missed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":"This icon marks additional noteworthy information provided for reference."},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":"This icon warns you of things you should watch out for. Make sure to keep these in mind!"},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"[[example]]"},{"lineNumber":50,"author":{"gitID":"-"},"content":"Markup::"},{"lineNumber":51,"author":{"gitID":"-"},"content":"Text with special meaning look different. Here are the various types:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"* Commands, filenames, and other miscellaneous keywords are `monospaced for emphasis`"},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Glossary terms have a [gloss]#dotted underline#"},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Keyboard keys are marked like kbd:[this]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"** kbd:[Q] means to press the `Q` key"},{"lineNumber":56,"author":{"gitID":"-"},"content":"** kbd:[Ctrl]+kbd:[Q] means to hold down the `Ctrl` key and then press the `Q` key"},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Links are marked \u003c\u003cexample,blue with underline\u003e\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"** Cross-ref links bring you to another part of the document, and look like \u003c\u003cexample,this\u003e\u003e"},{"lineNumber":59,"author":{"gitID":"-"},"content":"** External cross-ref links bring you to another document, and look like [exref]#\u003c\u003cexample,this\u003e\u003e#"},{"lineNumber":60,"author":{"gitID":"-"},"content":"** External links bring you to another website, and look like [ext]#\u003c\u003cexample,this\u003e\u003e#"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"Finding Information::"},{"lineNumber":63,"author":{"gitID":"-"},"content":"Check the table of contents and click on the desired topic. If you wish to search for a particular keyword, press kbd:[Ctrl]+kbd:[F] and type into the opened find dialog."},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Follow the steps below to begin using _CoinBook_ :"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your computer."},{"lineNumber":70,"author":{"gitID":"-"},"content":"+"},{"lineNumber":71,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":72,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":73,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8. +"},{"lineNumber":74,"author":{"gitID":"-"},"content":"You can obtain the latest version [ext]#http://www.oracle.com/technetwork/java/javase/downloads/index.html[here]# (Download JRE)."},{"lineNumber":75,"author":{"gitID":"-"},"content":"+"},{"lineNumber":76,"author":{"gitID":"-"},"content":".  Download the latest `coinbook.jar` [exref]#link:{repoURL}/releases[here]#."},{"lineNumber":77,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your _CoinBook_."},{"lineNumber":78,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds (Fig. 1)."},{"lineNumber":79,"author":{"gitID":"-"},"content":"+"},{"lineNumber":80,"author":{"gitID":"-"},"content":".Startup Window"},{"lineNumber":81,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":82,"author":{"gitID":"-"},"content":"+"},{"lineNumber":83,"author":{"gitID":"-"},"content":". Type your commands in the command box and press kbd:[Enter] to execute them. +"},{"lineNumber":84,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":87,"author":{"gitID":"-"},"content":"  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command. Command \u003c\u003calias,aliases\u003e\u003e are specified after the `|` symbol."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d How to Read the Main Window"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"The figure below (Fig. 2) describes each section of the user interface."},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":".Main Layout Window"},{"lineNumber":94,"author":{"gitID":"-"},"content":"image::LabelledUI.png[width\u003d\"800\"]"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003c1\u003e File Menu - Contains the buttons to exit and bring up the Help window."},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003c2\u003e Command Box - Contains the text box for you to type your commands into."},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003c3\u003e Result Display Pane - Contains the text responses of the program. The responses usually either acknowledge commands or notify that an error has occurred."},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003c4\u003e Listing Pane - Contains the list of coin accounts that you currently own."},{"lineNumber":100,"author":{"gitID":"-"},"content":"\u003c5\u003e Coin Account - Contains information on each coin. From top to bottom, left to right:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"* Index of the coin in this listing"},{"lineNumber":102,"author":{"gitID":"-"},"content":"* Coin trading code, and icon (top 100 coins only)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"* Amount currently held"},{"lineNumber":104,"author":{"gitID":"-"},"content":"* Tags"},{"lineNumber":105,"author":{"gitID":"-"},"content":"* Current price"},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003c6\u003e Detail Window - Shows the price chart and subreddit, if available, that is associated with the coin of your choice."},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003c7\u003e Status Bar - Shows various information about the state of the App. From left to right:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"* Update Status - Notifies you when was the last time you had synchronised your program to obtain the latest prices."},{"lineNumber":109,"author":{"gitID":"-"},"content":"* Filter Status - Shows the current filter applied to the listing via the `find` command."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* Account Counter - Indicates the total number of coin accounts you currently possess in CoinBook."},{"lineNumber":111,"author":{"gitID":"-"},"content":"* Storage Filepath - Shows the current file path at which the data is stored."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"_CoinBook_ allows you to manage your coin accounts easily through the use of commands. All you need to do is type in the command, followed by its required or optional _parameters_, then press kbd:[Enter] to execute it."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":".Terminology"},{"lineNumber":119,"author":{"gitID":"-"},"content":"****"},{"lineNumber":120,"author":{"gitID":"-"},"content":"The following terms are used in the feature list to refer to specific concepts."},{"lineNumber":121,"author":{"gitID":"-"},"content":"[[spec]]"},{"lineNumber":122,"author":{"gitID":"-"},"content":"* Target"},{"lineNumber":123,"author":{"gitID":"-"},"content":"** Refers to the account or group to execute the command upon"},{"lineNumber":124,"author":{"gitID":"-"},"content":"** This is used in commands requiring a target coin, and can be any one of the coin\u0027s:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"*** `INDEX`: Its index number in the current coin listing"},{"lineNumber":126,"author":{"gitID":"-"},"content":"*** `CODE`: The trading code of the coin, e.g. `BTC`"},{"lineNumber":127,"author":{"gitID":"-"},"content":"*** `NAME`: The name of the coin, e.g. `Bitcoin`, and is case-insensitive [Coming in v2.0]"},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Option/Parameter"},{"lineNumber":129,"author":{"gitID":"-"},"content":"** Refers to the additional information you must provide for the command"},{"lineNumber":130,"author":{"gitID":"-"},"content":"** These have a letter representing the option, followed by a slash (`/`), followed by the desired value"},{"lineNumber":131,"author":{"gitID":"-"},"content":"** The name of the option follows each letter. You should replace this with the desired value, e.g. `t/TAG` indicates the desired value of the tag should be typed after `t/`"},{"lineNumber":132,"author":{"gitID":"-"},"content":"****"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":".Command Format"},{"lineNumber":135,"author":{"gitID":"-"},"content":"****"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Each command comes with a specific _format_ consisting of one or more parts. Please note the following conventions:"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Command parts denoted in `UPPERCASE` should be supplied by the user"},{"lineNumber":139,"author":{"gitID":"-"},"content":"* Parts in square brackets are optional, e.g."},{"lineNumber":140,"author":{"gitID":"-"},"content":"`TARGET [t/TAG]`"},{"lineNumber":141,"author":{"gitID":"-"},"content":"can be used as either `BTC t/fav` or `BTC`"},{"lineNumber":142,"author":{"gitID":"-"},"content":"* Parts with `...` after them can be used zero or more times, e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/cheap`, `t/active t/fav`, etc."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* If an option without `...` is used multiple times, only the rightmost value that you typed will be used, e.g. use of `c/CODE` as `c/BTC c/ETH` will be taken as `c/ETH` only"},{"lineNumber":144,"author":{"gitID":"-"},"content":"* Parameters can be in any order, e.g. if the command specifies `t/TAG a/VALUE`, then `a/VALUE t/TAG` is also acceptable"},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Parts in curly braces indicate multiple possibilities, e.g. we use \u003c\u003cspec,`TARGET`\u003e\u003e as shorthand for `{INDEX,NAME,CODE}`"},{"lineNumber":146,"author":{"gitID":"-"},"content":"****"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d View help `help` | `?`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":151,"author":{"gitID":"-"},"content":"----"},{"lineNumber":152,"author":{"gitID":"-"},"content":"help"},{"lineNumber":153,"author":{"gitID":"-"},"content":"----"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"Opens the help window."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add a new coin account `add` | `a`"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":160,"author":{"gitID":"-"},"content":"----"},{"lineNumber":161,"author":{"gitID":"-"},"content":"add c/CODE [t/TAG]..."},{"lineNumber":162,"author":{"gitID":"-"},"content":"----"},{"lineNumber":163,"author":{"gitID":"-"},"content":"[cols\u003d\"1,3a\"]"},{"lineNumber":164,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":165,"author":{"gitID":"-"},"content":"|`*CODE*`"},{"lineNumber":166,"author":{"gitID":"-"},"content":"|Must be alphabets only"},{"lineNumber":167,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":168,"author":{"gitID":"-"},"content":"If a non-existent trading code is added, its price will not be updated with the latest price data when you run the `sync` command."},{"lineNumber":169,"author":{"gitID":"-"},"content":"|`*TAG*`"},{"lineNumber":170,"author":{"gitID":"-"},"content":"|Must be alphanumeric, i.e. only alphabets and digits are allowed"},{"lineNumber":171,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"Adds a new coin account into the list, with the given trading code, and the given tags."},{"lineNumber":174,"author":{"gitID":"-"},"content":"You will be notified in the result pane if the added coin is not known to have a subreddit, for the viewing of news updates. See \u003c\u003cview,`view` command\u003e\u003e."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":".Example"},{"lineNumber":177,"author":{"gitID":"-"},"content":"----"},{"lineNumber":178,"author":{"gitID":"-"},"content":"add c/BTC"},{"lineNumber":179,"author":{"gitID":"-"},"content":"----"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Adds the coin with the code `BTC` to _CoinBook_."},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add value to an account `buy` | `b` `[Since v1.4]`"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":185,"author":{"gitID":"-"},"content":"----"},{"lineNumber":186,"author":{"gitID":"-"},"content":"buy TARGET a/AMOUNT"},{"lineNumber":187,"author":{"gitID":"-"},"content":"----"},{"lineNumber":188,"author":{"gitID":"-"},"content":"[cols\u003d\"1,3\"]"},{"lineNumber":189,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":190,"author":{"gitID":"-"},"content":"|`*AMOUNT*` | Must be a positive number"},{"lineNumber":191,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"Adds the given `AMOUNT`, in coin units, into the specified coin account."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":".Example"},{"lineNumber":196,"author":{"gitID":"-"},"content":"----"},{"lineNumber":197,"author":{"gitID":"-"},"content":"buy BTC a/0.5"},{"lineNumber":198,"author":{"gitID":"-"},"content":"----"},{"lineNumber":199,"author":{"gitID":"-"},"content":"Adds 0.5 to the amount held in the `BTC` account."},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sell coin from an account `sell` | `s` `[Since v1.4]`"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":204,"author":{"gitID":"-"},"content":"----"},{"lineNumber":205,"author":{"gitID":"-"},"content":"sell TARGET a/AMOUNT"},{"lineNumber":206,"author":{"gitID":"-"},"content":"----"},{"lineNumber":207,"author":{"gitID":"-"},"content":"[cols\u003d\"1,3a\"]"},{"lineNumber":208,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":209,"author":{"gitID":"-"},"content":"|`*AMOUNT*` | Must be a positive number"},{"lineNumber":210,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":211,"author":{"gitID":"-"},"content":"If you enter an amount greater than the amount you hold in that account, only that much will be subtracted, i.e. the value will not go below zero."},{"lineNumber":212,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":213,"author":{"gitID":"-"},"content":"Removes the given `AMOUNT` from the specified coin account."},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":".Example"},{"lineNumber":216,"author":{"gitID":"-"},"content":"----"},{"lineNumber":217,"author":{"gitID":"-"},"content":"sell BTC a/0.5"},{"lineNumber":218,"author":{"gitID":"-"},"content":"----"},{"lineNumber":219,"author":{"gitID":"-"},"content":"Subtracts 0.5 from the amount held in the `BTC` account."},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Delete an account `delete` | `d`"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":224,"author":{"gitID":"-"},"content":"----"},{"lineNumber":225,"author":{"gitID":"-"},"content":"delete TARGET"},{"lineNumber":226,"author":{"gitID":"-"},"content":"----"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"Deletes the specified coin account."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":".Example"},{"lineNumber":231,"author":{"gitID":"-"},"content":"----"},{"lineNumber":232,"author":{"gitID":"-"},"content":"delete 3"},{"lineNumber":233,"author":{"gitID":"-"},"content":"----"},{"lineNumber":234,"author":{"gitID":"-"},"content":"The third entry in the current listing is removed."},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":237,"author":{"gitID":"-"},"content":"Coin accounts are not automatically removed when their value goes to 0 to allow later reuse, or even for archival or record purposes. You need to remove them explicitly with this command."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clear all entries `clear` | `c`"},{"lineNumber":240,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":242,"author":{"gitID":"-"},"content":"----"},{"lineNumber":243,"author":{"gitID":"-"},"content":"clear"},{"lineNumber":244,"author":{"gitID":"-"},"content":"----"},{"lineNumber":245,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Resets all data in _CoinBook_."},{"lineNumber":247,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":249,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":250,"author":{"gitID":"-"},"content":"This command can be reversed with `undo`, but only in the same session. The effect is permanent once _CoinBook_ is closed."},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":252,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Tag an account `tag` | `t`"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":256,"author":{"gitID":"-"},"content":"----"},{"lineNumber":257,"author":{"gitID":"-"},"content":"tag TARGET t/TAG..."},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"[cols\u003d\"1,3\"]"},{"lineNumber":260,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":261,"author":{"gitID":"-"},"content":"|`*TAG*`"},{"lineNumber":262,"author":{"gitID":"-"},"content":"|Must be alphanumeric, i.e. only alphabets and digits are allowed"},{"lineNumber":263,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"Sets the specified coin\u0027s tags to the given tags."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":".Examples"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":" tag 1 t/fav"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"The first entry in the list is tagged with the `fav` tag."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":" tag 3 t/"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"The third entry in the list has all of its tags removed."},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":" tag BTC t/fav t/watch"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"The `BTC` account is tagged with `fav` and `watch`."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":282,"author":{"gitID":"-"},"content":"A coin account can have any number of tags (including 0)"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d List all accounts `list` | `l`"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":287,"author":{"gitID":"-"},"content":"----"},{"lineNumber":288,"author":{"gitID":"-"},"content":"list"},{"lineNumber":289,"author":{"gitID":"-"},"content":"----"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"Updates the listing to show all coin accounts in _CoinBook_."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"[[view]]"},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d View details of an account `view` | `v` `[Since v1.5]`"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":297,"author":{"gitID":"-"},"content":"----"},{"lineNumber":298,"author":{"gitID":"-"},"content":"view TARGET"},{"lineNumber":299,"author":{"gitID":"-"},"content":"----"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"Opens up the detail window for the account specified. The detail window includes information such as:"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"* Total amount in dollars spent in purchasing this coin"},{"lineNumber":304,"author":{"gitID":"-"},"content":"* Amount earned from selling this coin"},{"lineNumber":305,"author":{"gitID":"-"},"content":"* Possible profit if all coin in this account is sold at the current price"},{"lineNumber":306,"author":{"gitID":"-"},"content":"* Chart of the price history"},{"lineNumber":307,"author":{"gitID":"-"},"content":"* Subreddit of this coin, if there is one"},{"lineNumber":308,"author":{"gitID":"-"},"content":"* etc... [More analytics coming in v2.0]"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":".Examples"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":" view BTC"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"See details for the `BTC` account"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":" view 2"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"See details for the 2nd account in the current listing"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"Eldon-Chung"},"content":"//tag::findcommand[]"},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Search through accounts `find` | `f` `[Since v1.4]`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":324,"author":{"gitID":"-"},"content":"----"},{"lineNumber":325,"author":{"gitID":"-"},"content":"find CONDITION"},{"lineNumber":326,"author":{"gitID":"-"},"content":"----"},{"lineNumber":327,"author":{"gitID":"-"},"content":"[cols\u003d\"1,3\"]"},{"lineNumber":328,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":329,"author":{"gitID":"-"},"content":"|`*CONDITION*`"},{"lineNumber":330,"author":{"gitID":"-"},"content":"|Must follow the \u003c\u003cfind,format\u003e\u003e listed below"},{"lineNumber":331,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"Updates the listing to show only coin accounts whose details satisfy the given condition."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"[[find]]"},{"lineNumber":336,"author":{"gitID":"-"},"content":".Condition Query Format"},{"lineNumber":337,"author":{"gitID":"-"},"content":"****"},{"lineNumber":338,"author":{"gitID":"-"},"content":"* Possible query options are: +"},{"lineNumber":339,"author":{"gitID":"-"},"content":"** `n/NAME`:  Name of the coin [Coming in v2.0]"},{"lineNumber":340,"author":{"gitID":"Eldon-Chung"},"content":"** `c/CODE`: Trading code of the coin (can be a substring, and is case insensitive)"},{"lineNumber":341,"author":{"gitID":"-"},"content":"** `t/TAG...`: Tags attached to the coin"},{"lineNumber":342,"author":{"gitID":"-"},"content":"** `p/PRICE`: Current price, in dollars, of the coin"},{"lineNumber":343,"author":{"gitID":"-"},"content":"** `h/AMOUNT`: Current amount, in coin units, held in an account"},{"lineNumber":344,"author":{"gitID":"-"},"content":"** `b/AMOUNT`: Total amount, in dollars, ever bought in the account"},{"lineNumber":345,"author":{"gitID":"-"},"content":"** `s/AMOUNT`: Total amount, in dollars, ever sold from the account"},{"lineNumber":346,"author":{"gitID":"-"},"content":"** `m/MADE`: Total profit, in dollars, made from this account so far"},{"lineNumber":347,"author":{"gitID":"-"},"content":"** `w/WORTH`: How much, in dollars, the current amount held is worth at the current price"},{"lineNumber":348,"author":{"gitID":"-"},"content":"* To specify amounts, put \u0027\u003d\u0027, `\u003e`, or `\u003c` to specify amounts equal to, greater, or less than; for example:"},{"lineNumber":349,"author":{"gitID":"-"},"content":"** `m/\u003d90` : Profit made is exactly $90"},{"lineNumber":350,"author":{"gitID":"-"},"content":"** `p/\u003e500`: Current price exceeding $500"},{"lineNumber":351,"author":{"gitID":"-"},"content":"** `s/\u003c20`: Total amount sold less than $20"},{"lineNumber":352,"author":{"gitID":"-"},"content":"* Possible logical operators include:"},{"lineNumber":353,"author":{"gitID":"-"},"content":"** `AND`: The conditions on both sides need to be matched"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** `OR`: Only one of the conditions on either side need to be matched"},{"lineNumber":355,"author":{"gitID":"-"},"content":"** `NOT`: Reverses the matching result of the following condition"},{"lineNumber":356,"author":{"gitID":"-"},"content":"** `({nbsp})`: Evaluates conditions inside parentheses first, starting with the innermost one"},{"lineNumber":357,"author":{"gitID":"-"},"content":"****"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":".Examples"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":" find c/BT"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"Finds accounts with `BT` in their code"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":" find t/fav"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"Finds accounts with the `fav` tag"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"Eldon-Chung"},"content":" find (p/\u003e500 AND t/fav) OR h/\u003c20"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"Finds accounts either with current price more than $500 and tagged `fav`, or with less than 20 coins left"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"// tag::notifications[]"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"Eldon-Chung"},"content":"//end::findcommand[]"},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Set up notifications `notify` | `n` `[Since v1.5rc]`"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":379,"author":{"gitID":"-"},"content":"----"},{"lineNumber":380,"author":{"gitID":"-"},"content":"notify CONDITION"},{"lineNumber":381,"author":{"gitID":"-"},"content":"----"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"Sets a condition that triggers a popup notification whenever the condition matches the new data for a coin after a price update. The condition query mostly follows the same format as that used in \u003c\u003cfind,find\u003e\u003e, with the following additional options:"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":".Notification Options Format"},{"lineNumber":386,"author":{"gitID":"-"},"content":"****"},{"lineNumber":387,"author":{"gitID":"-"},"content":"* You can put `+` or `-` before specifying any of the following amounts to test its change instead of its absolute value:"},{"lineNumber":388,"author":{"gitID":"-"},"content":"** `p/PRICE`: Current price, in dollars, of the coin"},{"lineNumber":389,"author":{"gitID":"-"},"content":"** `w/WORTH`: How much, in dollars, the current amount held is worth at the current price"},{"lineNumber":390,"author":{"gitID":"-"},"content":"* For example:"},{"lineNumber":391,"author":{"gitID":"-"},"content":"** `p/+1000`: Current price rose $1000"},{"lineNumber":392,"author":{"gitID":"-"},"content":"** `p/pass:[-]\u003e500`: Current price fell more than $500"},{"lineNumber":393,"author":{"gitID":"-"},"content":"****"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"You can click on the notification pop-up to jump quickly to the coin account that triggered it."},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":".Examples"},{"lineNumber":398,"author":{"gitID":"-"},"content":"----"},{"lineNumber":399,"author":{"gitID":"-"},"content":"notify h/\u003e0"},{"lineNumber":400,"author":{"gitID":"-"},"content":"----"},{"lineNumber":401,"author":{"gitID":"-"},"content":"Notify when the amount held in an account is more than 0 after the update. This always triggers and hence is useless on its own, but can be combined with other conditions to restrict notifications to a smaller set of accounts"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"----"},{"lineNumber":404,"author":{"gitID":"-"},"content":"notify c/BTC w/\u003d50"},{"lineNumber":405,"author":{"gitID":"-"},"content":"----"},{"lineNumber":406,"author":{"gitID":"-"},"content":"Notify when the amount worth in dollars of the `BTC` account is $50"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"----"},{"lineNumber":409,"author":{"gitID":"-"},"content":"notify w/+\u003e1000 c/ETH"},{"lineNumber":410,"author":{"gitID":"-"},"content":"----"},{"lineNumber":411,"author":{"gitID":"-"},"content":"Notify when the amount worth in dollars of the `ETH` account rises by more than $1000"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d List added notifications `listnotifs` | `ln` `[Since v1.5]`"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":416,"author":{"gitID":"-"},"content":"----"},{"lineNumber":417,"author":{"gitID":"-"},"content":"listnotifs"},{"lineNumber":418,"author":{"gitID":"-"},"content":"----"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"Opens the notification list window."},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"// end::notifications[]"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"// tag::order[]"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Change listing order `order` | `o` `[Since v1.5]`"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":430,"author":{"gitID":"-"},"content":"----"},{"lineNumber":431,"author":{"gitID":"-"},"content":"order {a,z}"},{"lineNumber":432,"author":{"gitID":"-"},"content":"----"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"Orders the coin listing in lexicographical order or reverse lexicographical order. +"},{"lineNumber":435,"author":{"gitID":"-"},"content":"Put `a` after the command word to sort it in lexicographical order, and `z` to sort in reverse lexicographical order. The listing is sorted by the leftmost entered option first, then equal values are sorted by the next one, and so on."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"The default order is lexicographical order of the coin names (i.e., option `a`)."},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":".Examples"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":" order a"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"Sort the listing in lexicographical order (default option, whether \"a\" is added after the command word or not)."},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":" order z"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"Sort the listing in reverse lexicographical order."},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":451,"author":{"gitID":"-"},"content":"This command can be reversed with `undo`, but only in the same session. The effect is permanent once _CoinBook_ is closed."},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"// end::order[]"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d List past commands `history` | `h`"},{"lineNumber":457,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":459,"author":{"gitID":"-"},"content":"----"},{"lineNumber":460,"author":{"gitID":"-"},"content":"history"},{"lineNumber":461,"author":{"gitID":"-"},"content":"----"},{"lineNumber":462,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered previously, in reverse chronological order."},{"lineNumber":464,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":466,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":467,"author":{"gitID":"-"},"content":"Pressing the kbd:[UP] and kbd:[DOWN] arrow keys will also display the previous and next input respectively in the command box."},{"lineNumber":468,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":469,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":471,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo previous command `undo` | `z`"},{"lineNumber":472,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":474,"author":{"gitID":"-"},"content":"----"},{"lineNumber":475,"author":{"gitID":"-"},"content":"undo"},{"lineNumber":476,"author":{"gitID":"-"},"content":"----"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"Restores the data to the state before the previous _undoable_ command was executed."},{"lineNumber":479,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":481,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":482,"author":{"gitID":"-"},"content":"Undoable commands: Commands that modify the data (`buy`, `sell`, `tag` and `clear`)"},{"lineNumber":483,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":484,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":".Examples"},{"lineNumber":486,"author":{"gitID":"-"},"content":"----"},{"lineNumber":487,"author":{"gitID":"-"},"content":"buy BTC a/10 \u003c1\u003e"},{"lineNumber":488,"author":{"gitID":"-"},"content":"list"},{"lineNumber":489,"author":{"gitID":"-"},"content":"undo \u003c1\u003e"},{"lineNumber":490,"author":{"gitID":"-"},"content":"----"},{"lineNumber":491,"author":{"gitID":"-"},"content":"This reverses the `buy BTC a/10` command."},{"lineNumber":492,"author":{"gitID":"-"},"content":"----"},{"lineNumber":493,"author":{"gitID":"-"},"content":"view 1"},{"lineNumber":494,"author":{"gitID":"-"},"content":"list"},{"lineNumber":495,"author":{"gitID":"-"},"content":"undo"},{"lineNumber":496,"author":{"gitID":"-"},"content":"----"},{"lineNumber":497,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":498,"author":{"gitID":"-"},"content":"----"},{"lineNumber":499,"author":{"gitID":"-"},"content":"sell BTC a/10 \u003c2\u003e"},{"lineNumber":500,"author":{"gitID":"-"},"content":"clear \u003c1\u003e"},{"lineNumber":501,"author":{"gitID":"-"},"content":"undo \u003c1\u003e"},{"lineNumber":502,"author":{"gitID":"-"},"content":"undo \u003c2\u003e"},{"lineNumber":503,"author":{"gitID":"-"},"content":"----"},{"lineNumber":504,"author":{"gitID":"-"},"content":"The first `undo` reverses the `clear` command, the second reverses the `sell BTC a/10` command."},{"lineNumber":505,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redo undone command `redo` | `y`"},{"lineNumber":507,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":509,"author":{"gitID":"-"},"content":"----"},{"lineNumber":510,"author":{"gitID":"-"},"content":"redo"},{"lineNumber":511,"author":{"gitID":"-"},"content":"----"},{"lineNumber":512,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command."},{"lineNumber":514,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":".Examples"},{"lineNumber":516,"author":{"gitID":"-"},"content":"----"},{"lineNumber":517,"author":{"gitID":"-"},"content":"buy BTC a/10 \u003c1\u003e"},{"lineNumber":518,"author":{"gitID":"-"},"content":"undo \u003c1\u003e\u003c2\u003e"},{"lineNumber":519,"author":{"gitID":"-"},"content":"redo \u003c2\u003e"},{"lineNumber":520,"author":{"gitID":"-"},"content":"----"},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003c1\u003e Reverses the `buy BTC a/10` command, and"},{"lineNumber":522,"author":{"gitID":"-"},"content":"\u003c2\u003e Reapplies it"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"The result is as if only the first line was executed."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"----"},{"lineNumber":527,"author":{"gitID":"-"},"content":"list"},{"lineNumber":528,"author":{"gitID":"-"},"content":"redo"},{"lineNumber":529,"author":{"gitID":"-"},"content":"----"},{"lineNumber":530,"author":{"gitID":"-"},"content":"The command fails as there are no `undo` commands executed previously."},{"lineNumber":531,"author":{"gitID":"-"},"content":"----"},{"lineNumber":532,"author":{"gitID":"-"},"content":"sell BTC a/10 \u003c2\u003e"},{"lineNumber":533,"author":{"gitID":"-"},"content":"clear \u003c1\u003e"},{"lineNumber":534,"author":{"gitID":"-"},"content":"undo \u003c1\u003e\u003c4\u003e"},{"lineNumber":535,"author":{"gitID":"-"},"content":"undo \u003c2\u003e\u003c3\u003e"},{"lineNumber":536,"author":{"gitID":"-"},"content":"redo \u003c3\u003e"},{"lineNumber":537,"author":{"gitID":"-"},"content":"redo \u003c4\u003e"},{"lineNumber":538,"author":{"gitID":"-"},"content":"----"},{"lineNumber":539,"author":{"gitID":"-"},"content":"This sequence of commands:"},{"lineNumber":540,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003c1\u003e Reverses the `clear` command"},{"lineNumber":542,"author":{"gitID":"-"},"content":"\u003c2\u003e Reverses the `sell BTC a/10` command"},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003c3\u003e Reapplies the `sell BTC a/10` command, and finally"},{"lineNumber":544,"author":{"gitID":"-"},"content":"\u003c4\u003e Reapplies the `clear` command"},{"lineNumber":545,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"The result is as if only the first two lines were executed. Notice how the order of redoing is opposite from the undoing."},{"lineNumber":547,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":549,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"// tag::sync[]"},{"lineNumber":551,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sync with price server `sync` | `sy` `[Since v1.5]`"},{"lineNumber":552,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":554,"author":{"gitID":"-"},"content":"----"},{"lineNumber":555,"author":{"gitID":"-"},"content":"sync"},{"lineNumber":556,"author":{"gitID":"-"},"content":"----"},{"lineNumber":557,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"Obtains the latest price data to update price metrics of all owned coins."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":561,"author":{"gitID":"-"},"content":" You may notice some coins disappearing from the list view after syncing. This is most likely because the relevant coins no longer satisfy the currently applied list filter. +"},{"lineNumber":562,"author":{"gitID":"-"},"content":" Run the `list` command if you wish to see all coins."},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"// end::sync[]"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"//tag::autocomplete[]"},{"lineNumber":567,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Autocomplete `[Since v1.5]`"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"Pressing any key will auto-suggest the field with all possible matching inputs."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"Pressing the kbd:[UP] and kbd:[DOWN] arrow keys will allow navigation of the input suggestions."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"Once the desired command is selected as indicated by light grey highlight, pressing the kbd:[ENTER] key will input the command into the command box."},{"lineNumber":574,"author":{"gitID":"-"},"content":"//end::autocomplete[]"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exit the program : `exit` | `q`"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":".Format"},{"lineNumber":579,"author":{"gitID":"-"},"content":"----"},{"lineNumber":580,"author":{"gitID":"-"},"content":"exit"},{"lineNumber":581,"author":{"gitID":"-"},"content":"----"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"Exits the program."},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":586,"author":{"gitID":"-"},"content":" After exiting the program, any changes made in the session will not be undoable with the `undo` command in the next session."},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Save data"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"_CoinBook_ data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":591,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":596,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous _CoinBook_ folder  (default location: `data/`)."},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"[width\u003d\"90%\",cols\u003d\"10%,\u003c23%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":601,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":602,"author":{"gitID":"-"},"content":"| Command |Format | Description"},{"lineNumber":603,"author":{"gitID":"-"},"content":"| *Add* | `add c/CODE [t/TAG]...` | Adds a coin account with the specified trading CODE."},{"lineNumber":604,"author":{"gitID":"-"},"content":"| *Buy* | `buy TARGET a/AMOUNT` | Adds AMOUNT of coin to the targeted account."},{"lineNumber":605,"author":{"gitID":"-"},"content":"| *Clear* | `clear` | Deletes all coin accounts."},{"lineNumber":606,"author":{"gitID":"-"},"content":"| *Delete* | `delete TARGET` | Deletes targeted coin account."},{"lineNumber":607,"author":{"gitID":"-"},"content":"| *Exit* |  `exit` | Exits the program."},{"lineNumber":608,"author":{"gitID":"-"},"content":"| *Find* | `find CONDITION` | Finds all coin accounts that fit the CONDITION."},{"lineNumber":609,"author":{"gitID":"-"},"content":"| *Help* | `help` | Displays the help page."},{"lineNumber":610,"author":{"gitID":"-"},"content":"| *History* | `history` | Shows the user a history of previously input commands."},{"lineNumber":611,"author":{"gitID":"-"},"content":"| *List* | `list` | Lists all coin accounts."},{"lineNumber":612,"author":{"gitID":"-"},"content":"| *Notify* | `notify CONDITION` | Sets a notification for when the CONDITION has been met."},{"lineNumber":613,"author":{"gitID":"-"},"content":"| *Order* | `order {a,z}` | Sorts the coin accounts based on their code."},{"lineNumber":614,"author":{"gitID":"-"},"content":"| *Redo* | `redo` | Reapplies the previously un-done command."},{"lineNumber":615,"author":{"gitID":"-"},"content":"| *Sell* | `sell TARGET a/AMOUNT` | Subtracts AMOUNT of coin from the targeted account."},{"lineNumber":616,"author":{"gitID":"-"},"content":"| *Sync* | `sync` | Fetches data from online sources to update the prices."},{"lineNumber":617,"author":{"gitID":"-"},"content":"| *Tag* | `tag TARGET [t/TAG]...` | Tags the targeted account with TAG name."},{"lineNumber":618,"author":{"gitID":"-"},"content":"| *Undo* | `undo` | Reverts the effect of the previous undo-able command."},{"lineNumber":619,"author":{"gitID":"-"},"content":"| *View* | `view TARGET` | Views information about the targeted account."},{"lineNumber":620,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":621,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":623,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"[[alias]] Alias::"},{"lineNumber":626,"author":{"gitID":"-"},"content":"Alternate names for commands."},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"[[gui]] Graphical User Interface::"},{"lineNumber":629,"author":{"gitID":"-"},"content":"A type of user interface that lets users interact with the app through visual indicators, icons, mouse actions, etc. as compared to typed commands."}],"authorContributionMap":{"Eldon-Chung":27,"-":602}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import guitests.guihandles.BrowserWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"public class HelpCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        getCoinListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        executeCommand(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        assertListMatching(getCoinListPanel(), getModel().getFilteredCoinList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(ERROR_MESSAGE, BrowserWindowHandle.isWindowPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        new BrowserWindowHandle(guiRobot.getStage(BrowserWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(ERROR_MESSAGE, BrowserWindowHandle.isWindowPresent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":10,"-":84}},{"path":"src/test/java/systemtests/ViewCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TARGET;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.ViewCommand.MESSAGE_SELECT_COIN_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.KEYWORD_MATCHING_BTC;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoins;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"public class ViewCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: select the first card in the coin list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        String command \u003d \"   \" + ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, INDEX_FIRST_COIN);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: select the last card in the coin list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        Index coinCount \u003d Index.fromOneBased(getTypicalCoins().size());"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d ViewCommand.COMMAND_WORD + \" \" + coinCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, coinCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: select the middle card in the coin list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        Index middleIndex \u003d Index.fromOneBased(coinCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d ViewCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered person list, select index within bounds of coin book but out of bounds of coin list"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        int invalidIndex \u003d getModel().getCoinBook().getCoinList().size();"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered coin list, select index within bounds of address book and coin list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredCoinList().size());"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d ViewCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"        invalidIndex \u003d getModel().getFilteredCoinList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (symbols) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(ViewCommand.COMMAND_WORD + \" -#abc\","},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(ViewCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        deleteAllCoins();"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code expectedSelectedCardIndex} of the selected coin.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CoinListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"                MESSAGE_SELECT_COIN_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"        int preExecutionSelectedCardIndex \u003d getCoinListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CoinListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":45,"-":108}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyCoinBook\u003e coinBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(coinBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":2,"-":71}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TARGET;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_COIN_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.getCoin;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.KEYWORD_MATCHING_BTC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"public class DeleteCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: delete the first coin in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_COIN.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        Coin deletedCoin \u003d removeCoin(expectedModel, INDEX_FIRST_COIN);"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_COIN_SUCCESS, deletedCoin);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: delete the last coin in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        Index lastCoinIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(lastCoinIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: undo deleting the last coin in the list -\u003e last coin restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: redo deleting the last coin in the list -\u003e last coin deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        removeCoin(modelBeforeDeletingLast, lastCoinIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: delete the middle coin in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        Index middleCoinIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(middleCoinIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered person list, delete index within bounds of coin book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        Index index \u003d INDEX_FIRST_COIN;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCoinList().size());"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered person list, delete index within bounds of coin book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getCoinBook().getCoinList().size();"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        /* --------------------- Performing delete operation while a coin card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: delete the selected coin -\u003e coin list panel selects the coin before the deleted coin */"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        showAllCoins();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        selectCoin(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        deletedCoin \u003d removeCoin(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_COIN_SUCCESS, deletedCoin);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getCoinBook().getCoinList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (symbols) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -#abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"     * Removes the {@code Coin} at the specified {@code index} in {@code model}\u0027s coin book."},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"     * @return the removed coin"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":"    private Coin removeCoin(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"        Coin targetCoin \u003d getCoin(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"            model.deleteCoin(targetCoin);"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (CoinNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"            throw new AssertionError(\"targetCoin is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Eldon-Chung"},"content":"        return targetCoin;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"Eldon-Chung"},"content":"     * Deletes the coin at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"        Coin deletedCoin \u003d removeCoin(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_COIN_SUCCESS, deletedCoin);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":56,"-":144}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Predicate\u003cCoin\u003e PREDICATE_MATCHING_NO_COINS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static void setFilteredList(Model model, List\u003cCoin\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        Optional\u003cPredicate\u003cCoin\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateFilteredCoinList(predicate.orElse(PREDICATE_MATCHING_NO_COINS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public static void setFilteredList(Model model, Coin... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns a predicate that evaluates to true if this {@code Coin} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    private static Predicate\u003cCoin\u003e getPredicateMatching(Coin other) {"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        return coin -\u003e coin.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":9,"-":30}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class ErrorDialogGuiTest extends CoinBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":33}},{"path":"src/test/java/systemtests/NotifyCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.NotificationsWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListNotifsCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SyncCommand;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the notification system, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class NotifyCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openNotificationWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertNotificationWindowNotOpen();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        executeCommand(ListNotifsCommand.COMMAND_WORD);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertNotificationWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        executeCommand(SyncCommand.COMMAND_WORD);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // open notification window and give it focus"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        executeCommand(ListNotifsCommand.COMMAND_WORD);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // assert that while the notification window is open the UI updates correctly for a command execution"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        executeCommand(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertNotEquals(ListNotifsCommand.MESSAGE_SUCCESS, getResultDisplay().getText());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        assertListMatching(getCoinListPanel(), getModel().getFilteredCoinList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Asserts that the notification window is open, and closes it after checking."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private void assertNotificationWindowOpen() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, NotificationsWindowHandle.isWindowPresent());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        new NotificationsWindowHandle(guiRobot.getStage(NotificationsWindowHandle.NOTIFICATIONS_WINDOW_TITLE)).close();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Asserts that the notification window isn\u0027t open."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertNotificationWindowNotOpen() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, NotificationsWindowHandle.isWindowPresent());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":3,"-":68}},{"path":"src/test/java/systemtests/CoinBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.ui.BrowserPanel.SUBREDDIT_NOT_FOUND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.ITEM_COUNT_STATUS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"import guitests.guihandles.CoinListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.TypicalCoins;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * A system test class for CoinBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":50,"author":{"gitID":"-"},"content":" */"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"public abstract class CoinBookSystemTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e RESULT_DISPLAY_DEFAULT_STYLE \u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-area\", \"result-display\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e RESULT_DISPLAY_ERROR_STYLE \u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-area\", \"result-display\", ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected CoinBook getInitialData() {"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        return TypicalCoins.getTypicalCoinBook();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinListPanelHandle getCoinListPanel() {"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"        return mainWindowHandle.getCoinListPanel();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":139,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"     * Displays all coins in the coin book."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"    protected void showAllCoins() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getCoinBook().getCoinList().size(), getModel().getFilteredCoinList().size());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"Eldon-Chung"},"content":"     * Displays all coins with any parts of their codes matching {@code keyword} (case-insensitive)."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"    protected void showCoinsWithName(String keyword) {"},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + keyword);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredCoinList().size() \u003c getModel().getCoinBook().getCoinList().size());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"     * Selects the coin at {@code index} of the displayed list."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":"    protected void selectCoin(Index index) {"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"        executeCommand(ViewCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":167,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(index.getZeroBased(), getCoinListPanel().getSelectedCardIndex());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":"     * Deletes all coins in the coin book."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"Eldon-Chung"},"content":"    protected void deleteAllCoins() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getCoinBook().getCoinList().size());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same coin objects as {@code expectedModel}"},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":"     * and the coin list panel displays the coins in the model correctly."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedModel.getCoinBook(), testApp.readStorageCoinBook());"},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"        assertListMatching(getCoinListPanel(), expectedModel.getFilteredCoinList());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"Eldon-Chung"},"content":"     * Calls {@code BrowserPanelHandle}, {@code CoinListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberItemCount();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":202,"author":{"gitID":"Eldon-Chung"},"content":"        getCoinListPanel().rememberSelectedCoinCard();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":207,"author":{"gitID":"Eldon-Chung"},"content":"     * of the previously selected coin."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":212,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(getCoinListPanel().isAnyCardSelected());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the coin in the coin list panel at"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":219,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinListPanelHandle#isSelectedCoinCardChanged()"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":222,"author":{"gitID":"Eldon-Chung"},"content":"        String selectedCardName \u003d getCoinListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":224,"author":{"gitID":"Eldon-Chung"},"content":"        expectedUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + SUBREDDIT_NOT_FOUND);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getCoinListPanel().getSelectedCardIndex());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts that the browser\u0027s url and the selected card in the coin list panel remain unchanged."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":233,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinListPanelHandle#isSelectedCoinCardChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":237,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(getCoinListPanel().isSelectedCoinCardChanged());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Asserts that the feedback messages show the default style."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(RESULT_DISPLAY_DEFAULT_STYLE, getResultDisplay().getStyleClass());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Asserts that the feedback messages show the error style."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertEquals(RESULT_DISPLAY_ERROR_STYLE, getResultDisplay().getStyleClass());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertFalse(handle.isItemCountChanged());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertFalse(handle.isItemCountChanged());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Asserts that the status bar was updated correctly,"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * while the save location remains the same."},{"lineNumber":282,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        String expectedItemCountStatus \u003d String.format(ITEM_COUNT_STATUS,"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                testApp.getModel().getCoinBook().getCoinList().size());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertEquals(expectedItemCountStatus, handle.getItemCount());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":296,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":301,"author":{"gitID":"Eldon-Chung"},"content":"            assertListMatching(getCoinListPanel(), getModel().getFilteredCoinList());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":312,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":37,"-":279}},{"path":"src/test/java/seedu/address/ui/NotificationsWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.TypicalRules.getTypicalRuleBook;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import guitests.guihandles.NotificationsWindowHandle;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"public class NotificationsWindowTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"    private NotificationsWindow notificationsWindow;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"    private NotificationsWindowHandle notificationsWindowHandle;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    @Before"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    public void setUp() throws Exception {"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"        guiRobot.interact(() -\u003e notificationsWindow \u003d"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"                new NotificationsWindow(new Stage(), getTypicalRuleBook().getRuleList()));"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"        Stage windowStage \u003d FxToolkit.setupStage((stage) -\u003e stage.setScene(notificationsWindow.getRoot().getScene()));"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"        FxToolkit.showStage();"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"        notificationsWindowHandle \u003d new NotificationsWindowHandle(windowStage);"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    public void display() {"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"            notificationsWindow.show();"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"            assertTrue(NotificationsWindowHandle.isWindowPresent());"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        });"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":37}},{"path":"src/test/java/seedu/address/ui/RuleListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalRules.getTypicalRules;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_SECOND_COIN;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysRule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.RuleCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.RuleListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class RuleListPanelTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cRule\u003e TYPICAL_RULES \u003d"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalRules());"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_COIN);"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private RuleListPanelHandle ruleListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        RuleListPanel ruleListPanel \u003d new RuleListPanel(TYPICAL_RULES);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(ruleListPanel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ruleListPanelHandle \u003d new RuleListPanelHandle(getChildNode(ruleListPanel.getRoot(),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                RuleListPanelHandle.RULE_LIST_VIEW_ID));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_RULES.size(); i++) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            ruleListPanelHandle.navigateToCard(TYPICAL_RULES.get(i));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Rule expectedRule \u003d TYPICAL_RULES.get(i);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            RuleCardHandle actualCard \u003d ruleListPanelHandle.getRuleCardHandle(i);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            assertCardDisplaysRule(expectedRule, actualCard);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            assertEquals(expectedRule.toString(), actualCard.getValue());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":3,"-":43}},{"path":"src/test/java/seedu/address/ui/BrowserWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.ui.BrowserWindow.USERGUIDE_FILE_PATH;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import guitests.guihandles.BrowserWindowHandle;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"public class BrowserWindowTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    private BrowserWindow browserWindow;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    private BrowserWindowHandle browserWindowHandle;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    @Before"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    public void setUp() throws Exception {"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"        guiRobot.interact(() -\u003e browserWindow \u003d new BrowserWindow(BrowserWindow.USERGUIDE_FILE_PATH));"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        Stage helpWindowStage \u003d FxToolkit.setupStage((stage) -\u003e stage.setScene(browserWindow.getRoot().getScene()));"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        browserWindowHandle \u003d new BrowserWindowHandle(helpWindowStage);"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public void display() {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        URL expectedHelpPage \u003d BrowserWindow.class.getResource(USERGUIDE_FILE_PATH);"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedHelpPage, browserWindowHandle.getLoadedUrl());"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":23,"-":10}},{"path":"src/test/java/seedu/address/ui/CoinCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCoin;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import guitests.guihandles.CoinCardHandle;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinWithNoTags \u003d new CoinBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"        CoinCard coinCard \u003d new CoinCard(coinWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        uiPartRule.setUiPart(coinCard);"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"        assertCardDisplay(coinCard, coinWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinWithTags \u003d new CoinBuilder().build();"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"        coinCard \u003d new CoinCard(coinWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"        uiPartRule.setUiPart(coinCard);"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        assertCardDisplay(coinCard, coinWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coin \u003d new CoinBuilder().build();"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        CoinCard coinCard \u003d new CoinCard(coin, 0);"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        // same coin, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        CoinCard copy \u003d new CoinCard(coin, 0);"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(coinCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(coinCard.equals(coinCard));"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(coinCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(coinCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        // different coin, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        Coin differentCoin \u003d new CoinBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(coinCard.equals(new CoinCard(differentCoin, 0)));"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        // same coin, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(coinCard.equals(new CoinCard(coin, 1)));"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts that {@code coinCard} displays the details of {@code expectedCoin} correctly and matches"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCardDisplay(CoinCard coinCard, Coin expectedCoin, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        CoinCardHandle coinCardHandle \u003d new CoinCardHandle(coinCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", coinCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        // verify coin details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        assertCardDisplaysCoin(expectedCoin, coinCardHandle);"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":67,"-":5}},{"path":"src/test/java/systemtests/TagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FAV;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HOT;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FAV;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOT;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.KEYWORD_MATCHING_BTC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"public class TagCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        Index index \u003d INDEX_FIRST_COIN;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + TagCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"                + TAG_DESC_HOT + \" \";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Coin editedCoin \u003d new CoinBuilder()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .withName(model.getFilteredCoinList().get(index.getZeroBased()).getCode().toString())"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"                .withTags(VALID_TAG_HOT).build();"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, editedCoin);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: undo editing the last coin in the list -\u003e last coin restored */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: redo editing the last coin in the list -\u003e last coin edited again */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateCoin("},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"                getModel().getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased()), editedCoin);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        index \u003d INDEX_FIRST_COIN;"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FAV + \"s\";"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToEdit \u003d getModel().getFilteredCoinList().get(index.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        editedCoin \u003d new CoinBuilder(coinToEdit).withTags(VALID_TAG_FAV + \"s\").build();"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, editedCoin);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        index \u003d INDEX_FIRST_COIN;"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG;"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        editedCoin \u003d new CoinBuilder(coinToEdit).withTags().build();"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, editedCoin);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered coin list, edit index within bounds of coin book and coin list -\u003e edited */"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_COIN;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCoinList().size());"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + TAG_DESC_FAV;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        coinToEdit \u003d getModel().getFilteredCoinList().get(index.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        editedCoin \u003d new CoinBuilder(coinToEdit).withTags(VALID_TAG_FAV).build();"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, editedCoin);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered coin list, edit index within bounds of coin book but out of bounds of coin list"},{"lineNumber":85,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getCoinBook().getCoinList().size();"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + invalidIndex + TAG_DESC_FAV,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        /* --------------------- Performing edit operation while a coin card is selected -------------------------- */"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: selects first card in the coin list, edit a coin -\u003e edited, card selection remains unchanged but"},{"lineNumber":96,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        showAllCoins();"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        index \u003d INDEX_FIRST_COIN;"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        selectCoin(index);"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FAV + \"s\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"        // browser\u0027s url is updated to reflect the new coin\u0027s name"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, ALIS, index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" 0\" + TAG_DESC_FAV,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" -1\" + TAG_DESC_FAV,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"        invalidIndex \u003d getModel().getFilteredCoinList().size() + 1;"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + invalidIndex + TAG_DESC_FAV,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + TAG_DESC_FAV,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased(),"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                TagCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandFailure(TagCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Coin, Index)} except that"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @see TagCommandSystemTest#assertCommandSuccess(String, Index, Coin, Index)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Coin editedCoin) {"},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, toEdit, editedCoin, null);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"Eldon-Chung"},"content":"     * 2. Asserts that the model related components are updated to reflect the coin at index {@code toEdit} being"},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"     * updated to values specified {@code editedCoin}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @see TagCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Coin editedCoin,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"            expectedModel.updateCoin("},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"                    expectedModel.getFilteredCoinList().get(toEdit.getZeroBased()), editedCoin);"},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":"            expectedModel.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException | CoinNotFoundException e) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"                    \"editedCoin is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                String.format(TagCommand.MESSAGE_EDIT_COIN_SUCCESS, editedCoin), expectedSelectedCardIndex);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * @see TagCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":214,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":70,"-":156}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import guitests.guihandles.CoinCardHandle;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import guitests.guihandles.CoinListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.RuleCardHandle;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public static void assertCardEquals(CoinCardHandle expectedCard, CoinCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedCard.getAmount(), actualCard.getAmount());"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedCard.getPrice(), actualCard.getPrice());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(RuleCardHandle expectedCard, RuleCardHandle actualCard) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getValue(), actualCard.getValue());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedCoin}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    public static void assertCardDisplaysCoin(Coin expectedCoin, CoinCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedCoin.getCode().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedCoin.getCurrentAmountHeld().toString(), actualCard.getAmount());"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedCoin.getPrice().toString(), actualCard.getPrice());"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedCoin.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedRule}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysRule(Rule expectedRule, RuleCardHandle actualCard) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(expectedRule.toString(), actualCard.getValue());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts that the list in {@code coinListPanelHandle} displays the details of {@code coins} correctly and"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"    public static void assertListMatching(CoinListPanelHandle coinListPanelHandle, Coin... coins) {"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        for (int i \u003d 0; i \u003c coins.length; i++) {"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"            assertCardDisplaysCoin(coins[i], coinListPanelHandle.getCoinCardHandle(i));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts that the list in {@code coinListPanelHandle} displays the details of {@code coins} correctly and"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"    public static void assertListMatching(CoinListPanelHandle coinListPanelHandle, List\u003cCoin\u003e coins) {"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        assertListMatching(coinListPanelHandle, coins.toArray(new Coin[0]));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts the size of the list in {@code coinListPanelHandle} equals to {@code size}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"    public static void assertListSize(CoinListPanelHandle coinListPanelHandle, int size) {"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        int numberOfPeople \u003d coinListPanelHandle.getListSize();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":21,"-":66}},{"path":"src/test/java/seedu/address/ui/ChartsPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import guitests.guihandles.ChartsPanelHandle;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.ui.CoinPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"public class ChartsPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"    private CoinPanelSelectionChangedEvent selectionChangedEventValidCoinStub;"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    private CoinPanelSelectionChangedEvent selectionChangedEventInvalidCoinStub;"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    private ChartsPanel chartsPanel;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"    private ChartsPanelHandle chartsPanelHandle;"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"        final ArrayList\u003cString\u003e testDataX \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"                \"1452592800\", \"1452596400\", \"1452600000\", \"1452603600\", \"1452607200\","},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"                \"1452610800\", \"1452614400\", \"1452618000\", \"1452621600\"));"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        final ArrayList\u003cAmount\u003e testDataY \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"                new Amount(\"0.002591\"), new Amount(\"0.002580\"), new Amount(\"0.002617\"),"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"                new Amount(\"0.002563\"), new Amount(\"0.002597\"), new Amount(\"0.002576\"),"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"                new Amount(\"0.002555\"), new Amount(\"0.002719\"), new Amount(\"0.002575\")));"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"        Coin validCodeCoin \u003d ALIS;"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"        Coin invalidCodeCoin \u003d new CoinBuilder().withName(\"invalid\").build();"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"        validCodeCoin.getPrice().setHistorical(testDataY, testDataX);"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"        selectionChangedEventValidCoinStub \u003d new CoinPanelSelectionChangedEvent(new CoinCard(validCodeCoin, 0));"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"        selectionChangedEventInvalidCoinStub \u003d new CoinPanelSelectionChangedEvent(new CoinCard(invalidCodeCoin, 1));"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"        guiRobot.interact(() -\u003e chartsPanel \u003d new ChartsPanel());"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"        uiPartRule.setUiPart(chartsPanel);"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"        chartsPanelHandle \u003d new ChartsPanelHandle(chartsPanel.getRoot());"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"    public void display() throws Exception {"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"        postNow(selectionChangedEventValidCoinStub);"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(chartsPanelHandle.isEmpty());"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"        postNow(selectionChangedEventInvalidCoinStub);"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(chartsPanelHandle.isEmpty());"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":61}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.events.ui.CoinPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    private CoinPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        selectionChangedEventStub \u003d new CoinPanelSelectionChangedEvent(new CoinCard(ALIS, 0));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        // associated web page of a coin"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        /*"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        URL expectedCoinUrl \u003d new URL(BrowserPanel.SUBREDDIT_NOT_FOUND"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        + ALIS.getCode().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedCoinUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":10,"-":39}},{"path":"src/test/java/seedu/address/ui/CoinListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoins;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_SECOND_COIN;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCoin;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import guitests.guihandles.CoinCardHandle;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import guitests.guihandles.CoinListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private static final ObservableList\u003cCoin\u003e TYPICAL_COINS \u003d"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"            FXCollections.observableList(getTypicalCoins());"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_COIN);"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    private CoinListPanelHandle coinListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        CoinListPanel coinListPanel \u003d new CoinListPanel(TYPICAL_COINS);"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        uiPartRule.setUiPart(coinListPanel);"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        coinListPanelHandle \u003d new CoinListPanelHandle(getChildNode(coinListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"                CoinListPanelHandle.COIN_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_COINS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"            coinListPanelHandle.navigateToCard(TYPICAL_COINS.get(i));"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"            Coin expectedCoin \u003d TYPICAL_COINS.get(i);"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"            CoinCardHandle actualCard \u003d coinListPanelHandle.getCoinCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"            assertCardDisplaysCoin(expectedCoin, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        CoinCardHandle expectedCard \u003d coinListPanelHandle.getCoinCardHandle(INDEX_SECOND_COIN.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        CoinCardHandle selectedCard \u003d coinListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":33,"-":25}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableCoinBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    protected static final String COIN_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyCoinBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyCoinBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(true);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableCoinBook(this.initialDataSupplier.get()),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        userPrefs.setCoinBookFilePath(saveFileLocation);"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        userPrefs.setCoinBookName(COIN_BOOK_NAME);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBook readStorageCoinBook() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new CoinBook(storage.readCoinBook().get());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the CoinBook format.\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return storage.getCoinBookFilePath();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getCoinBook()), new UserPrefs());"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredCoinList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"-":116}},{"path":"src/test/java/seedu/address/commons/core/index/IndexTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertCreateOneBasedFailure(0);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCreateZeroBasedFailure(-1);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidZeroBasedIndex, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidOneBasedIndex, false);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            if (isZeroBased) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Index.fromZeroBased(invalidIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                Index.fromOneBased(invalidIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            fail(\"The expected IndexOutOfBoundsException was not thrown.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException ie) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // expected behaviour"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        final Index fifthCoinIndex \u003d Index.fromOneBased(5);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(fifthCoinIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(fifthCoinIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(fifthCoinIndex.equals(fifthCoinIndex));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(fifthCoinIndex.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(fifthCoinIndex.equals(5.0f));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(fifthCoinIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":7,"-":86}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d CoinBook - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnumlevels: 5"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":pdf-stylesdir: stylesheets"},{"lineNumber":10,"author":{"gitID":"-"},"content":":pdf-style: pdf"},{"lineNumber":11,"author":{"gitID":"-"},"content":":xrefstyle: basic"},{"lineNumber":12,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":15,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B3/main"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"By: `Team CS2103JAN2018-F09-B3` Since: `Feb 2018` Licence: `MIT`"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":22,"author":{"gitID":"-"},"content":"__CoinBook__ is a desktop application written in Java with JavaFX. You may refer to the [exref]##\u003c\u003cUserGuide#, User Guide\u003e\u003e## for more information regarding the application itself."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"This guide is for developers interested in contributing to the current project, forking their own project,"},{"lineNumber":25,"author":{"gitID":"-"},"content":"or those who are just interested in the internal design and implementation details of _CoinBook_."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"To set up the project and work environment, read the next section, \u003c\u003cGetting Started with CoinBook\u003e\u003e. New developers should also read about the overall \u003c\u003cDesign\u003e\u003e to apprise"},{"lineNumber":28,"author":{"gitID":"-"},"content":"themselves of the architecture in this software. Existing developers may also find it useful as a reference."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"If you wish to extend the key features in _CoinBook_, the chapter on \u003c\u003cImplementation\u003e\u003e delves into non-trivial details involving these features."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"New developers should also read the \u003c\u003cDocumentation\u003e\u003e, \u003c\u003cTesting\u003e\u003e, and \u003c\u003cDevOps\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"sections to learn more about the workflow, tools and frameworks currently being used in the project."},{"lineNumber":34,"author":{"gitID":"-"},"content":"You must follow the existing workflow if you are keen on contributing to the project."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"The appendices serve as a useful reference for both new and existing developers alike. Any new feature contribution"},{"lineNumber":37,"author":{"gitID":"-"},"content":"under consideration should be aligned with the design philosophies and product direction, to be considered for inclusion."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Getting Started with CoinBook"},{"lineNumber":40,"author":{"gitID":"-"},"content":"Follow the instructions given in this section to get up and running with _CoinBook_. To summarise:"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":". Make sure you have the prerequisites installed. See \u003c\u003cprereq\u003e\u003e for details."},{"lineNumber":43,"author":{"gitID":"-"},"content":". Clone and import the project. See \u003c\u003cSetting Up\u003e\u003e for details."},{"lineNumber":44,"author":{"gitID":"-"},"content":". Set up additional requirements before writing your code. See \u003c\u003cconfig\u003e\u003e for details."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"For the full details, continue reading."},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Obtaining Prerequisites [[prereq]]"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"The following are required to ensure that _CoinBook_ works well."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":53,"author":{"gitID":"-"},"content":"+"},{"lineNumber":54,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":56,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":57,"author":{"gitID":"-"},"content":"+"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":62,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":63,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` -\u003e `Settings` -\u003e `Plugins` to re-enable them."},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting Up"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Follow the steps below to set up the project in your computer."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":70,"author":{"gitID":"-"},"content":". Open IntelliJ. If you are not in the welcome screen, click `File` -\u003e `Close Project` to close the existing project dialog first."},{"lineNumber":71,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle."},{"lineNumber":72,"author":{"gitID":"-"},"content":".. Click `Configure` -\u003e `Project Defaults` -\u003e `Project Structure`."},{"lineNumber":73,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":74,"author":{"gitID":"-"},"content":". Click `Import Project`."},{"lineNumber":75,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":76,"author":{"gitID":"-"},"content":". Click `Open as Project`."},{"lineNumber":77,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings."},{"lineNumber":78,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. Otherwise, check that you have all the \u003c\u003cprereq,system requirements\u003e\u003e and try again. +"},{"lineNumber":79,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the Setup"},{"lineNumber":82,"author":{"gitID":"-"},"content":"After setting up the project by following the steps in the previous part, do the below to make sure you have everything set up nicely."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands."},{"lineNumber":85,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuring the Environment [[config]]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Before embarking on your modifications to _CoinBook_, you should set up the following things to facilitate a smooth development experience."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the Coding Style"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"This project follows [ext]#https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]#. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify this:"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":". Go to `File` -\u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` -\u003e `Preferences...` (macOS)."},{"lineNumber":95,"author":{"gitID":"-"},"content":". Select `Editor` -\u003e `Code Style` -\u003e `Java`."},{"lineNumber":96,"author":{"gitID":"-"},"content":". Click on the `Imports` tab, and set the following options within."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"* Set `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027` to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":99,"author":{"gitID":"-"},"content":"* Set the order for `Import Layout`: `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Optionally, you can follow the [exref]##\u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e## document to configure Intellij to check style-compliance as you write code."},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating Documentation to Match Your Fork"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-F09-B3/main` repo. If you plan to develop this as a separate product (instead of contributing to `CS2103JAN2018-F09-B3/main`), you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting Up Continuous Integration"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"See [exref]##\u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e## to learn how to set up Travis to perform Continuous Integration (CI) for your fork."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see [exref]##\u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e##)."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":114,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see [exref]##\u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e##)."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":119,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures that your app works on both Unix-based platforms and Windows-based platforms. Travis is Unix-based and AppVeyor is Windows-based."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting Started With Coding"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"When you are ready to start coding, get some sense of the overall design by reading the next section on _CoinBook_\u0027s \u003c\u003cDesign\u003e\u003e."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":126,"author":{"gitID":"-"},"content":"This chapter offers a high-level overview of the components in _CoinBook_ and how they interact with one another. You should read this first to get some idea of which parts you might want to modify to suit your needs."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":129,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* below (Fig. 1) explains the high-level design of the App."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":134,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"Following is a quick overview of each component:"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"* `*Main*` has only one class called [exref]#link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]#. It is responsible for the following:"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"** (On app launch) Initializes the components in the correct sequence, and connecting them up with one another"},{"lineNumber":141,"author":{"gitID":"-"},"content":"** (On shut down) Shuts down all components and invoking cleanup methods where necessary"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"* `*Commons*` represents a collection of classes (the [exref]#link:{repoURL}/src/main/java/seedu/address/commons[`seedu.address.commons`]# package) used by multiple other components. Two of these classes play important roles at the architectural level."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"** `EventsCenter` uses [ext]#https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]#, and is used by other components to communicate with one another using events (i.e. a form of \u003c\u003cevent-driven-design,Event Driven Design\u003e\u003e)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"** `LogsCenter` is used by classes to write log messages to the App\u0027s log file"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* The rest of the App consists of:"},{"lineNumber":149,"author":{"gitID":"-"},"content":"** \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e which holds the UI components of the App +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"** \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e which processes and executes commands +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"** \u003c\u003cDesign-Model,*`Model`*\u003e\u003e which holds the data of the App in memory +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"** \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e which reads data from and writes data to the hard disk"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"* Each of the above four components:"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"** Defines its [gloss]#\u003c\u003cAPI,_API_\u003e\u003e# in an interface with the same name as the component"},{"lineNumber":157,"author":{"gitID":"-"},"content":"** Exposes its functionality using a `{Component Name}Manager` class"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":160,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see Fig. 2 below) defines its API in the `Logic.java` interface and exposes its functionality via the `LogicManager.java` class."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":163,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"[[event-driven-design]]"},{"lineNumber":166,"author":{"gitID":"-"},"content":"We use event-driven design in order to allow communication between separate components without increasing coupling. The short section below gives a brief introduction to how events are being used in the App."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below (Fig. 3) shows the interaction between the various components when the user issues the command `delete 1`."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":".Component Interactions for `delete 1` Command Part 1"},{"lineNumber":171,"author":{"gitID":"-"},"content":"image::SDforDeleteCoin.png[width\u003d\"800\"]"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"Note how `Model` simply raises `CoinBookChangedEvent` when the data is changed, instead of asking `Storage` to save the updates to the hard disk."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"Fig. 4 below shows how `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":".Component Interactions for `delete 1` Command Part 2"},{"lineNumber":179,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[]"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":182,"author":{"gitID":"-"},"content":"The event is propagated through `EventsCenter` to `Storage` and `UI` without `Model` having to be [gloss]#\u003c\u003ccoupling,coupled\u003e\u003e# to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"The following sections give more details about each component."},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":187,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI Component"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"*API* : [exref]#link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]#"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"*Responsibilities* +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"The `UI` component:"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component"},{"lineNumber":195,"author":{"gitID":"-"},"content":"* Binds itself to data in `Model` so that the UI can update itself automatically when data in `Model` changes"},{"lineNumber":196,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"*Internals* +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"The following diagram (Fig. 5) illustrates the structure of this component:"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":202,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The user interface (UI) consists of a `MainWindow` that is made up of several parts, e.g. `CommandBox`, `ResultDisplay`, `CoinListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of the UI parts are defined in matching `.fxml` files located in the `src/main/resources/view` folder. For example, the layout of the"},{"lineNumber":207,"author":{"gitID":"-"},"content":"[exref]#link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`]# is specified in"},{"lineNumber":208,"author":{"gitID":"-"},"content":"[exref]#link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]#."},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":211,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic Component"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":214,"author":{"gitID":"-"},"content":"[exref]#link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]#"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"*Responsibilities* +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"The `Logic` component:"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"* Parses and executes user commands"},{"lineNumber":220,"author":{"gitID":"-"},"content":"* Manages command history and undo/redo information"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"*Internals* +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"The following diagrams (Fig. 6, 7) illustrate the structure of this component:"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":226,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":227,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. Example of `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram,Fig. 6\u003e\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"When a user issues a command, the following steps are performed by `Logic` through `LogicManager`:"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":". Parse the user command using the `CoinBookParser` class."},{"lineNumber":235,"author":{"gitID":"-"},"content":". Run the `execute` method on the resulting `Command` object."},{"lineNumber":236,"author":{"gitID":"-"},"content":".  Encapsulate the result of the execution as a `CommandResult` object which is then passed back to the UI."},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":239,"author":{"gitID":"-"},"content":" The command execution can affect `Model` (e.g. adding a coin) and/or raise events."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram (Fig. 8) for interactions within the `Logic` component for the `execute(\"delete{nbsp}1\")` API call."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":244,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model Component"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":250,"author":{"gitID":"-"},"content":"[exref]#link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]#"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"*Responsibilities* +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"The `Model` component:"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"* Stores a `UserPref` object that represents the user\u0027s preferences"},{"lineNumber":256,"author":{"gitID":"-"},"content":"* Stores the CoinBook data"},{"lineNumber":257,"author":{"gitID":"-"},"content":"* Exposes an unmodifiable `ObservableList\u003cCoin\u003e` that can be _observed_ e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list changes"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":260,"author":{"gitID":"-"},"content":" `Model` does not depend on any of the other three components"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"*Internals* +"},{"lineNumber":263,"author":{"gitID":"-"},"content":"The following diagram (Fig. 9) illustrates the structure of this component:"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":266,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":270,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage Component"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":273,"author":{"gitID":"-"},"content":"[exref]#link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]#"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"*Responsibilities* +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"The `Storage` component:"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"* Saves `UserPref` objects in JSON format or reads it back into the App"},{"lineNumber":279,"author":{"gitID":"-"},"content":"* Saves the CoinBook data in XML format or reads it back into the App"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"*Internals* +"},{"lineNumber":282,"author":{"gitID":"-"},"content":"The following diagram (Fig. 10) illustrates the structure of this component:"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":285,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"This chapter describes some noteworthy details on how certain features and components have been implemented. It is highly recommended to read the previous chapter on \u003c\u003cDesign\u003e\u003e first so that you have some picture of where these features fit in."},{"lineNumber":290,"author":{"gitID":"Eldon-Chung"},"content":"//tag::condition[]"},{"lineNumber":291,"author":{"gitID":"-"},"content":"[[condition]]"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Condition Parser Component"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":296,"author":{"gitID":"-"},"content":"The general parser for the SQL-like arguments for the find command can be broken down into a few sub-components, namely `ArgumentTokenizer`, `SyntaxParser`, `SemanticParser`, and a `ConditionGenerator`, while using classes such as `Condition`,"},{"lineNumber":297,"author":{"gitID":"-"},"content":"`Token`, `TokenType`, `TokenStack` to model the data that is to be operated on throughout the process. Their tasks are"},{"lineNumber":298,"author":{"gitID":"-"},"content":"delegated as follows:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"* `ArgumentTokenizer` : Lexically analyzes the input string, then creates a list of tokens"},{"lineNumber":301,"author":{"gitID":"-"},"content":"* `SyntaxParser` : Parses the input by matching the tokens versus a list of rules to ensure they fit the desired"},{"lineNumber":302,"author":{"gitID":"-"},"content":"structure"},{"lineNumber":303,"author":{"gitID":"-"},"content":"* `SemanticParser` : Parses the input by matching the tokens versus a list of rules to ensure their meaning is semantically valid"},{"lineNumber":304,"author":{"gitID":"-"},"content":"* `ConditionGenerator` : Uses the list of tokens to create the equivalent lambda function to evaluate `Coin` objects against."},{"lineNumber":305,"author":{"gitID":"-"},"content":"* `Condition` : Serves as a wrapper/container for the boolean lambdas used to evaluate coins for filtering purposes."},{"lineNumber":306,"author":{"gitID":"-"},"content":"* `Token` : Serves as a container for the sectioned input strings."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":309,"author":{"gitID":"-"},"content":"The distinction between the Syntax Parser and the Semantic Parser is that the former is oblivious as to what the"},{"lineNumber":310,"author":{"gitID":"-"},"content":"input actually means, and only cares whether the structure is correct, whereas the latter verifies the meaning behind the"},{"lineNumber":311,"author":{"gitID":"-"},"content":"input. +"},{"lineNumber":312,"author":{"gitID":"-"},"content":"For example, `n/BTC AND OR p/\u003e500` is invalid syntatically, whereas `n/BTC or p/\u003eBTC` is valid syntatically"},{"lineNumber":313,"author":{"gitID":"-"},"content":"but not semantically, since it would not make sense to search for `Coin` objects whose price attribute was more than"},{"lineNumber":314,"author":{"gitID":"-"},"content":"\"BTC\" (prices cannot be compared to names)."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"The following sequence diagram (Fig. 11) will show how input arguments accompanying the `find` command are parsed:"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":".Sequence Diagram for Argument Parsing"},{"lineNumber":319,"author":{"gitID":"-"},"content":"image::FindCommandSequence.png[]"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"The `SyntaxParser`, `SemanticParser` and `ConditionGenerator` classes reside in a separate module that will be called by the"},{"lineNumber":322,"author":{"gitID":"-"},"content":"`ParserUtil` class during the ParseCondition method."},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"The following activity diagram (Fig. 12) expands on the Parse Sequence block in the previous diagram."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":".Activity Diagram for Parser Operations"},{"lineNumber":327,"author":{"gitID":"-"},"content":"image::FindActivityDiagram.png[]"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"The `Condition` object that is generated at the end is actually just a `Predicate` object that evaluates properties of"},{"lineNumber":330,"author":{"gitID":"-"},"content":"the Coin objects and returns a true/false value."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Error handling"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"On syntactically and semantically invalid inputs, `ConditionParser` will retrieve the expected and actual type of"},{"lineNumber":335,"author":{"gitID":"-"},"content":"`Token` that were not a match during the parsing phase from `TokenStack` and raise a `ParseException` before returning."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"In the event that strings intended to represent tags or numbers are not valid, an `IllegalValueException` is raised instead,"},{"lineNumber":338,"author":{"gitID":"-"},"content":"as per convention from `ParserUtil`."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Advanced Details"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Argument Tokenizing"},{"lineNumber":343,"author":{"gitID":"-"},"content":"We will illustrate the flow of tokenizing an example input:"},{"lineNumber":344,"author":{"gitID":"-"},"content":"```"},{"lineNumber":345,"author":{"gitID":"-"},"content":"\u003e n/BTC OR ( t/fav AND p/\u003e100 )"},{"lineNumber":346,"author":{"gitID":"-"},"content":"```"},{"lineNumber":347,"author":{"gitID":"-"},"content":"The Lexer would tokenize this into:"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"```"},{"lineNumber":350,"author":{"gitID":"-"},"content":"\u003e [n/,OPTION][BTC,STRING][OR ,BINARYOP][(,LEFTPAREN][t/,OPTION][fav,STRING][AND,BINRARYOP][p/,OPTION][\u003e,COMPARATOR][100,NUMBER][),RIGHTPAREN]"},{"lineNumber":351,"author":{"gitID":"-"},"content":"```"},{"lineNumber":352,"author":{"gitID":"-"},"content":"Notice how the whitespace has now been discarded, since it is not used for the purposes of parsing. Also each section of"},{"lineNumber":353,"author":{"gitID":"-"},"content":"the input (i.e. token) has now been grouped with a type."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"Below is a sequence diagram (Fig. 13) describing the behaviour of `ArgumentTokenizer` on the input:"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":".Sequence Diagram for the `ArgumentTokenizer` Class"},{"lineNumber":358,"author":{"gitID":"-"},"content":"image::Lexer.png[]"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Syntax Parser"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"Next, the syntax parser has to ensure that the sequence of tokens is actually structurally valid."},{"lineNumber":363,"author":{"gitID":"-"},"content":"This is done by matching the tokens off based on the following rules, expressed in Backus-Naur form:"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":". `EXPRESSION` :\u003d `TERM` | `TERM` `BINARYOP` `EXPRESSION`"},{"lineNumber":366,"author":{"gitID":"-"},"content":". `TERM` :\u003d `LEFTPAREN` `EXPRESSION` `RIGHTPAREN` | `UNARYOP` `TERM` | `CONDITION`"},{"lineNumber":367,"author":{"gitID":"-"},"content":". `CONDITION` :\u003d `OPTION` `COMPARATOR` `NUM` | `OPTION` `STRING`"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"```"},{"lineNumber":371,"author":{"gitID":"-"},"content":"\u003e [n/,OPTION][BTC,STRING][ OR ,BINARYOP][(,LEFTPAREN][t/,OPTION][fav,STRING][AND,BINRARYOP][p/,OPTION][\u003e,COMPARATOR][100,NUMBER][),RIGHTPAREN]"},{"lineNumber":372,"author":{"gitID":"-"},"content":"```"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"Using our example, we will illustrate how we can sequentially express the above tokenized argument based on the provided rules:"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":". `*EXPRESSION*`"},{"lineNumber":377,"author":{"gitID":"-"},"content":". `*TERM*` `*BINARYOP*` `*EXPRESSION*`"},{"lineNumber":378,"author":{"gitID":"-"},"content":". `*CONDITION*` `*BINARYOP*` `*EXPRESSION*`"},{"lineNumber":379,"author":{"gitID":"-"},"content":". `*OPTION*` `*STRING*` `*BINARYOP*` `*EXPRESSION*`"},{"lineNumber":380,"author":{"gitID":"-"},"content":". `n/` `*STRING*` `*BINARYOP*` `*EXPRESSION*`"},{"lineNumber":381,"author":{"gitID":"-"},"content":". `n/` `BTC` `*BINARYOP*` `*EXPRESSION*`"},{"lineNumber":382,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `*EXPRESSION*`"},{"lineNumber":383,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `*TERM*`"},{"lineNumber":384,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `*EXPRESSION*` `)`"},{"lineNumber":385,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `*TERM*` `*BINARYOP*` `*EXPRESSION*` `)`"},{"lineNumber":386,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `*CONDITION*` `*BINARYOP*` `*EXPRESSION*` `)`"},{"lineNumber":387,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `*OPTION*` `*STRING*` `*BINARYOP*` `*EXPRESSION*` `)`"},{"lineNumber":388,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `*STRING*` `*BINARYOP*` `*EXPRESSION*` `)`"},{"lineNumber":389,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `fav` `*BINARYOP*` `*EXPRESSION*` `)`"},{"lineNumber":390,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `fav` `AND` `*EXPRESSION*` `)`"},{"lineNumber":391,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `fav` `AND` `*TERM*` `)`"},{"lineNumber":392,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `fav` `AND` `*CONDITION*` `)`"},{"lineNumber":393,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `fav` `AND` `*OPTION*` `*COMPARATOR*` `*NUM*` `)`"},{"lineNumber":394,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `fav` `AND` `p/` `*COMPARATOR*` `*NUM*` `)`"},{"lineNumber":395,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `fav` `AND` `p/` `\u003e` `*NUM*` `)`"},{"lineNumber":396,"author":{"gitID":"-"},"content":". `n/` `BTC` `OR` `(` `t/` `fav` `AND` `p/` `\u003e` `100` `)`"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"The recursive methods `Expression`, `Term`, `Condition` in the syntax parser class will match their own respective tokens"},{"lineNumber":399,"author":{"gitID":"-"},"content":"as necessary. In fact the method calls in the parser are exactly the same as the matches made in the previously stated sequence."},{"lineNumber":400,"author":{"gitID":"-"},"content":"For example, here is the implementation for `EXPRESSION`."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":403,"author":{"gitID":"-"},"content":"----"},{"lineNumber":404,"author":{"gitID":"-"},"content":"boolean expression() {"},{"lineNumber":405,"author":{"gitID":"-"},"content":"    if (!term()) {"},{"lineNumber":406,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":408,"author":{"gitID":"-"},"content":"    while (tokenStack.matchAndPopTokenType(TokenType.BINARYBOOL)) {"},{"lineNumber":409,"author":{"gitID":"-"},"content":"        if (!term()) {"},{"lineNumber":410,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":411,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":412,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":413,"author":{"gitID":"-"},"content":"    return true;"},{"lineNumber":414,"author":{"gitID":"-"},"content":"}"},{"lineNumber":415,"author":{"gitID":"-"},"content":"----"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"Visually we can represent sequence of matching with the following parse tree (Fig. 14), which also serves as the recursion tree:"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":".Parse and Recursion Tree for the Example Input"},{"lineNumber":420,"author":{"gitID":"-"},"content":"image::parsetree.png[]"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Semantic Parser"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"Following up, the Semantic Parser has to verify that the conditions are correct. This can be done by verifying the"},{"lineNumber":425,"author":{"gitID":"-"},"content":"type of the condition versus the parameters that follow. For example, a name condition should only be followed by a string."},{"lineNumber":426,"author":{"gitID":"-"},"content":"This can be done by checking the corresponding option class versus the type of token that follows."},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"Thus, the checks that are made are just to ensure every string type option is followed by a string and every number type"},{"lineNumber":429,"author":{"gitID":"-"},"content":"option is followed by a number."},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Condition Generator"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"Lastly, the condition generator creates lambdas based on the type of conditions found, and then recursively composes each"},{"lineNumber":434,"author":{"gitID":"-"},"content":"condition based on the binary operators encounters up the recursion tree."},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"The final `Condition` object is actually just a composition of many individual `Condition` objects. This can be done"},{"lineNumber":437,"author":{"gitID":"-"},"content":"as a back call at the end of each recursion tree."},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"For example, consider the following argument:"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"```"},{"lineNumber":442,"author":{"gitID":"-"},"content":"p/\u003e100 AND t/fav"},{"lineNumber":443,"author":{"gitID":"-"},"content":"```"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"`p/\u003e100` is a condition on price whereas `t/fav` is a condition on tags, and they can be composed using the `Predicate`"},{"lineNumber":446,"author":{"gitID":"-"},"content":"method `and()` to return a logical conjunction of the two conditions."},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Specification of syntax"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Have the structure of the methods reflect exactly the syntax."},{"lineNumber":453,"author":{"gitID":"-"},"content":"** Pros: Any subsequent changes can be easily made by having the code reflect the new syntax, since the syntax is apparent."},{"lineNumber":454,"author":{"gitID":"-"},"content":"** Cons: It is more cumbersome to have to alter the code every time there is a change in syntax."},{"lineNumber":455,"author":{"gitID":"-"},"content":"* **Alternative 2:** Specify the syntax in a separate file (e.g. EBNF file), and metaprogram the parser based on the file."},{"lineNumber":456,"author":{"gitID":"-"},"content":"** Pros: This requires no code change whenever the syntax has to be modified."},{"lineNumber":457,"author":{"gitID":"-"},"content":"** Cons: The code to support this would be more complicated and not apparent to developers immediately."},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `SyntaxParser`, `SemanticParser`, `ConditionGenerator`"},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Have separate classes that have the same structure but with different return values."},{"lineNumber":462,"author":{"gitID":"-"},"content":"** Pros: This approach maintains SRP."},{"lineNumber":463,"author":{"gitID":"-"},"content":"** Cons: A change in syntax will require changes across 3 classes. It is also very redundant to have similar code."},{"lineNumber":464,"author":{"gitID":"-"},"content":"* **Alternative 2:** Have a single implementation that performs syntax parsing, semantic parsing and the condition generation."},{"lineNumber":465,"author":{"gitID":"-"},"content":"** Pros: There will be less redundant code."},{"lineNumber":466,"author":{"gitID":"-"},"content":"** Cons: This approach clearly violates SRP."},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"Eldon-Chung"},"content":"// end::condition[]"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":472,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo Feature"},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports the undoing and redoing of commands that modify the stored data (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. Here is the inheritance diagram for commands (Fig. 15):"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":".Class Diagram for Logic"},{"lineNumber":480,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the App data before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks, while the child classes implement the details for executing the specific command. This technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the [ext]#https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]#."},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented in this way:"},{"lineNumber":485,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":486,"author":{"gitID":"-"},"content":"----"},{"lineNumber":487,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":488,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":489,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":490,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":491,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":492,"author":{"gitID":"-"},"content":"}"},{"lineNumber":493,"author":{"gitID":"-"},"content":"----"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented in this way:"},{"lineNumber":496,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":497,"author":{"gitID":"-"},"content":"----"},{"lineNumber":498,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":499,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":500,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":501,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":504,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":505,"author":{"gitID":"-"},"content":"}"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":508,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":509,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":510,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":511,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":512,"author":{"gitID":"-"},"content":"}"},{"lineNumber":513,"author":{"gitID":"-"},"content":"----"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. `UndoRedoStack` is empty at the beginning."},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th entry. The current state of the App data is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto `undoStack` (the current state is saved together with the command). Fig. 16 below illustrates this."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":".Undo/Redo Stack Part 1"},{"lineNumber":520,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"As the user continues to issue more commands, they are added into `undoStack`. For example, the user may execute `add n/BTC` to add a new coin, resulting in the below picture (Fig. 17):"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":".Undo/Redo Stack Part 2"},{"lineNumber":525,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":528,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to `UndoRedoStack` at all."},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"Eldon-Chung"},"content":"The user now decides that adding the coin was a mistake, and decides to undo that action using `undo`."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"The `Logic` component will pop the most recent command out of `undoStack` and push it to `redoStack`. At the same time, the data is restored to the state before the `add` command executed. The figure below (Fig. 18) illustrates the result:"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":".Undo/Redo Stack Part 3"},{"lineNumber":535,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":538,"author":{"gitID":"-"},"content":"If `undoStack` is empty, i.e., there are no other commands left to be undone, an `Exception` will be thrown when trying to pop `undoStack`."},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"The following sequence diagram (Fig. 19) shows how the undo operation works:"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":".Sequence Diagram for Undo"},{"lineNumber":543,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"The `redo` command does the exact opposite (pops from `redoStack`, pushes to `undoStack`, and restores the data to the state after the command is executed)."},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":548,"author":{"gitID":"-"},"content":"If `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when attempting to pop `redoStack`."},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into `undoStack`. However, now that `redoStack` is not empty, it will be purged as it no longer makes sense to redo the `add n/BTC` command (this is the behavior that most modern desktop applications follow). Refer to Fig. 20 below:"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":".Undo/Redo Stack Part 4"},{"lineNumber":553,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution (Fig. 21):"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":".Undo/Redo Stack Part 5"},{"lineNumber":558,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"The following activity diagram (Fig. 22) summarizes the logic for `UndoRedoStack` when a user executes a new command:"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":".Activity Diagram for Undo/Redo"},{"lineNumber":563,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":570,"author":{"gitID":"-"},"content":"** Pros: No undo/redo functionality is lost as it is now part of the default behaviour. +"},{"lineNumber":571,"author":{"gitID":"-"},"content":"Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":572,"author":{"gitID":"-"},"content":"** Cons: It may be harder for new developers to understand the template pattern."},{"lineNumber":573,"author":{"gitID":"-"},"content":"* **Alternative 2:** Override `execute()`"},{"lineNumber":574,"author":{"gitID":"-"},"content":"** Pros: It is easier for new developers to understand as it does not involve the template pattern."},{"lineNumber":575,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Execution of undo \u0026 redo"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Save the entire state"},{"lineNumber":580,"author":{"gitID":"-"},"content":"** Pros: It is much easier to implement."},{"lineNumber":581,"author":{"gitID":"-"},"content":"** Cons: This may bring about performance issues in terms of memory usage."},{"lineNumber":582,"author":{"gitID":"-"},"content":"* **Alternative 2:** Make each command implement specific undo/redo operations"},{"lineNumber":583,"author":{"gitID":"-"},"content":"** Pros: This will use less memory (e.g. for `delete`, just save the coin being deleted)."},{"lineNumber":584,"author":{"gitID":"-"},"content":"** Cons: It is crucial that the implementation of each individual command is correct."},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Include only commands that modify the App data (e.g. `add`, `clear`, `edit`)"},{"lineNumber":590,"author":{"gitID":"-"},"content":"** Pros: Only changes that are hard to do manually can be reverted like this. +"},{"lineNumber":591,"author":{"gitID":"-"},"content":"e.g. The view can easily be re-modified as no data is lost, so not undoable with `undo`."},{"lineNumber":592,"author":{"gitID":"-"},"content":"** Cons: The user might think that undo also applies when the list is modified (filtering for example), only to realize otherwise after executing `undo`."},{"lineNumber":593,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands"},{"lineNumber":594,"author":{"gitID":"-"},"content":"** Pros: This might be more intuitive for the user."},{"lineNumber":595,"author":{"gitID":"-"},"content":"** Cons: The user has no way of skipping such commands if he or she just wants to reset changes made to the data and not the view. +"},{"lineNumber":596,"author":{"gitID":"-"},"content":"**Additional Info:** See the discussion  [ext]#https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]#."},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":602,"author":{"gitID":"-"},"content":"** Pros: This implementation will be easier to understand for new Computer Science undergraduates, who represent the majority of incoming developers to the project."},{"lineNumber":603,"author":{"gitID":"-"},"content":"** Cons: It introduces duplicated logic. Whenever a new command is executed, both `HistoryManager` and `UndoRedoStack` must be updated separately."},{"lineNumber":604,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for both undo/redo"},{"lineNumber":605,"author":{"gitID":"-"},"content":"** Pros: There will be no need to maintain a separate stack, by just reusing what is already in the codebase."},{"lineNumber":606,"author":{"gitID":"-"},"content":"** Cons: We must remember to skip already undone commands. +"},{"lineNumber":607,"author":{"gitID":"-"},"content":"This approach also violates the Single Responsibility Principle and the Separation of Concerns Principle as `HistoryManager` now needs to do two different things."},{"lineNumber":608,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"// tag::notifications[]"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d User-Set Notifications"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"The notification system is facilitated by a `RuleBook`, which is located within the `Model` component as part of the App data. `RuleBook` holds a set of rules which define conditions to trigger some predefined action when met. A `RuleChecker` in `Logic` does this work of checking rules and executing the associated actions."},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"Let us walk through the implementation of notifications by considering a typical scenario involving this feature. Suppose the user wants to keep track of a certain coin\u0027s price, say `BTC`."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"The user adds a new notification using `NotifyCommand`, e.g. `notify c/BTC p/\u003e15000`, which sets a new notification to be triggered for when the price of `BTC` crosses $15000. The corresponding rule is added to the `RuleBook`."},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"Later on, the user may add other notifications. So now, there are a list of different rules stored in _CoinBook_. When the price data is synced with latest data from the web, whether from the regular update or triggered by the user with the `sync` command, a `CoinChangedEvent` is sent out for each updated coin."},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"`RuleChecker` catches these events, and checks against the `RuleBook`. If any match, the corresponding action is executed. Here, a notification pops up to alert the user."},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"The diagram below (Fig. 23a,23b) summarises these interactions:"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"image::NotificationsSequenceDiagram1.png[width\u003d\"800\"]"},{"lineNumber":629,"author":{"gitID":"-"},"content":".Sequence Diagram for Notifications"},{"lineNumber":630,"author":{"gitID":"-"},"content":"image::NotificationsSequenceDiagram2.png[width\u003d\"800\"]"},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Advanced Details and Proposed Extensions"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"In order to allow for future extensions, the rule system has been designed to separate, as much as possible, the construction of the rule and its later behaviour."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Structure of the `Rule` Class"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"The `Rule` class looks like the following:"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":641,"author":{"gitID":"-"},"content":"----"},{"lineNumber":642,"author":{"gitID":"-"},"content":"public class Rule\u003cT\u003e {                    \u003c5\u003e"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"    public final Predicate\u003cT\u003e condition;"},{"lineNumber":645,"author":{"gitID":"-"},"content":"    public final ActionCommand\u003cT\u003e action; \u003c1\u003e"},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"    public final RuleType type;           \u003c2\u003e"},{"lineNumber":648,"author":{"gitID":"-"},"content":"    public final String description;"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"    protected Rule(String description, RuleType type,"},{"lineNumber":651,"author":{"gitID":"-"},"content":"                   ActionParser\u003cT\u003e actionParser,"},{"lineNumber":652,"author":{"gitID":"-"},"content":"                   ConditionParser\u003cT\u003e conditionParser) {     \u003c4\u003e"},{"lineNumber":653,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":654,"author":{"gitID":"-"},"content":"        this.type \u003d type;"},{"lineNumber":655,"author":{"gitID":"-"},"content":"        this.action \u003d actionParser.parse(description);"},{"lineNumber":656,"author":{"gitID":"-"},"content":"        this.condition \u003d conditionParser.parse(description);"},{"lineNumber":657,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":660,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":661,"author":{"gitID":"-"},"content":"        return String.format(RULE_FORMAT_STRING, type, description);   \u003c3\u003e"},{"lineNumber":662,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"    @FunctionalInterface"},{"lineNumber":665,"author":{"gitID":"-"},"content":"    protected interface ActionParser\u003cT\u003e {"},{"lineNumber":666,"author":{"gitID":"-"},"content":"        ActionCommand\u003cT\u003e parse(String args);"},{"lineNumber":667,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"    @FunctionalInterface"},{"lineNumber":670,"author":{"gitID":"-"},"content":"    protected interface ConditionParser\u003cT\u003e {"},{"lineNumber":671,"author":{"gitID":"-"},"content":"        Predicate\u003cT\u003e parse(String args) throws IllegalValueException;"},{"lineNumber":672,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"    [...]"},{"lineNumber":675,"author":{"gitID":"-"},"content":"}"},{"lineNumber":676,"author":{"gitID":"-"},"content":"----"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"The above snippet demonstrates several noteworthy points:"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"\u003c1\u003e Each `Rule` object is a condition-action pair"},{"lineNumber":681,"author":{"gitID":"-"},"content":"\u003c2\u003e It is completely described by its `type` and `description`"},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003c3\u003e By storing the above two values as strings, the exact object can be fully reconstructed after restarting"},{"lineNumber":683,"author":{"gitID":"-"},"content":"\u003c4\u003e The constructor has `protected` access so that this base `Rule` class must be extended as new rule types to be used from outside"},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003c5\u003e The class is generic, and parameterized by the type of the object it is a condition upon, e.g. notification rules test against `Coin` objects"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"This structure follows very closely the [ext]#https://sourcemaking.com/design_patterns/strategy[Strategy design pattern]# as described in the \"Gang of Four\" book. It leads to the following class structure, as used above (see Fig. 24):"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":".Class Diagram for Rule System"},{"lineNumber":689,"author":{"gitID":"-"},"content":"image::NotificationClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"An example concrete implementation is the `NotificationRule` class used for notifications:"},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":694,"author":{"gitID":"-"},"content":"----"},{"lineNumber":695,"author":{"gitID":"-"},"content":"public class NotificationRule extends Rule\u003cCoin\u003e {"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"    private static final ActionParser\u003cCoin\u003e"},{"lineNumber":698,"author":{"gitID":"-"},"content":"    parseAction \u003d SpawnNotificationCommand::new;"},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"    private static final ConditionParser\u003cCoin\u003e"},{"lineNumber":701,"author":{"gitID":"-"},"content":"    parseCondition \u003d NotifyCommandParser::parseNotifyCondition;"},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"    public NotificationRule(String value) {"},{"lineNumber":704,"author":{"gitID":"-"},"content":"        super(value, RuleType.NOTIFICATION, parseAction, parseCondition);"},{"lineNumber":705,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":706,"author":{"gitID":"-"},"content":"}"},{"lineNumber":707,"author":{"gitID":"-"},"content":"----"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"The notification command fills in the abstract `actionParser` and `conditionParser` with functions implemented in various places, but which follow the template `FunctionalInterface` shown above."},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"`conditionParser` takes in the description string and returns a `Predicate\u003cT\u003e` object, which can be tested against an object of type `T`. This results in a `true` or `false` output depending on whether that object satisfies the condition. `NotificationRule` uses the same `ConditionParser` as in the `find` command, explained in the previous \u003c\u003ccondition,section\u003e\u003e."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"`actionParser` takes in the same description string and returns an `ActionCommand`, which is just:"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":716,"author":{"gitID":"-"},"content":"----"},{"lineNumber":717,"author":{"gitID":"-"},"content":"public abstract class ActionCommand\u003cT\u003e extends Command {"},{"lineNumber":718,"author":{"gitID":"-"},"content":"    public abstract void setExtraData(T data, BaseEvent event);"},{"lineNumber":719,"author":{"gitID":"-"},"content":"}"},{"lineNumber":720,"author":{"gitID":"-"},"content":"----"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"It adds a method atop \u003c\u003cfig-LogicClassDiagram,`Command`\u003e\u003e objects, to receive extra data which is only known after matching the rule. An easy example is the object that triggered the rule itself, which cannot be known until it is actually tested, and that only happens after the `Rule` has been constructed. This is the first extra data. You shall see the reason for the second one (`event`) later."},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Rule Checking System"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"The rule checker is implemented via the \u003c\u003cevent-driven-design,event-driven approach\u003e\u003e described in the previous chapter. The rule checker looks something like the below (simplified from actual):"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":729,"author":{"gitID":"-"},"content":"----"},{"lineNumber":730,"author":{"gitID":"-"},"content":"public class RuleChecker {"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"    private final RuleBook rules;"},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":735,"author":{"gitID":"-"},"content":"    public void handleCoinChangedEvent(CoinChangedEvent cce) {"},{"lineNumber":736,"author":{"gitID":"-"},"content":"        for (Rule r : rules.getRuleList()) {"},{"lineNumber":737,"author":{"gitID":"-"},"content":"            r.action.setExtraData(cce.data, cce);"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"            switch (r.type) {"},{"lineNumber":740,"author":{"gitID":"-"},"content":"            case NOTIFICATION:"},{"lineNumber":741,"author":{"gitID":"-"},"content":"                checkAndFire(r, cce.data);"},{"lineNumber":742,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":743,"author":{"gitID":"-"},"content":"            [...more types in the future]"},{"lineNumber":744,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":745,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":746,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"    private static \u003cT\u003e void checkAndFire(Rule\u003cT\u003e rule, T data) {"},{"lineNumber":749,"author":{"gitID":"-"},"content":"        if (rule.condition.test(data)) {"},{"lineNumber":750,"author":{"gitID":"-"},"content":"            rule.action.execute();"},{"lineNumber":751,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":752,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":753,"author":{"gitID":"-"},"content":"}"},{"lineNumber":754,"author":{"gitID":"-"},"content":"----"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"An instance of `RuleChecker` lives inside `LogicManager`, at the same level of architecture as the `UndoRedoStack` or the `CommandHistory` (\u003c\u003cfig-LogicClassDiagram,see here\u003e\u003e)."},{"lineNumber":757,"author":{"gitID":"-"},"content":"The rule testing procedure is initiated by an event, usually capturing information about a change in the state of some objects of interest."},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"`RuleChecker`, upon capturing this event, begins looping through the list of rules, testing each one\u0027s condition against the event data, executing the attached action if necessary."},{"lineNumber":760,"author":{"gitID":"-"},"content":"The extra data is set with the potentially matching object, as well as the event itself as alluded to above. These should consist of all necessary context for the action\u0027s execution."},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"A concrete example from `NotificationRule`:"},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":765,"author":{"gitID":"-"},"content":"----"},{"lineNumber":766,"author":{"gitID":"-"},"content":"public class SpawnNotificationCommand extends ActionCommand\u003cCoin\u003e {"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"    private final String message;"},{"lineNumber":769,"author":{"gitID":"-"},"content":"    private Coin jumpTo;"},{"lineNumber":770,"author":{"gitID":"-"},"content":"    private Index index;"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"    public SpawnNotificationCommand(String message) {"},{"lineNumber":773,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":774,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":777,"author":{"gitID":"-"},"content":"    public void setExtraData(Coin data, BaseEvent event) {"},{"lineNumber":778,"author":{"gitID":"-"},"content":"        jumpTo \u003d data;"},{"lineNumber":779,"author":{"gitID":"-"},"content":"        index \u003d ((CoinChangedEvent) event).index;"},{"lineNumber":780,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":783,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":784,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowNotificationRequestEvent("},{"lineNumber":785,"author":{"gitID":"-"},"content":"            message, index, jumpTo.getCode().toString()));"},{"lineNumber":786,"author":{"gitID":"-"},"content":"        return new CommandResult(\"\");"},{"lineNumber":787,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":788,"author":{"gitID":"-"},"content":"   }"},{"lineNumber":789,"author":{"gitID":"-"},"content":"}"},{"lineNumber":790,"author":{"gitID":"-"},"content":"----"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"This sends yet another event, `ShowNotificationRequestEvent`, along with some data about the coin that matched the notification rule."},{"lineNumber":793,"author":{"gitID":"-"},"content":"The event is then captured by the `UI` component, which responds by creating a pop-up notification to show to the user."},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Proposed Extensions"},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"With the above in mind, you should be able to see that it is relatively easy to add other kinds of rules to _CoinBook_. For example:"},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"* Scheduled tasks"},{"lineNumber":800,"author":{"gitID":"-"},"content":"** Condition: Time-based"},{"lineNumber":801,"author":{"gitID":"-"},"content":"** Action: User-set, e.g. run the `sync` command, export data to file and mail, etc."},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"* Webhook rules"},{"lineNumber":804,"author":{"gitID":"-"},"content":"** Condition: Similar to notifications"},{"lineNumber":805,"author":{"gitID":"-"},"content":"** Action: Instead of just popping-up a notification, post some preformatted data to a URL"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"* Associated actions"},{"lineNumber":808,"author":{"gitID":"-"},"content":"** Condition: Action made upon some coin account"},{"lineNumber":809,"author":{"gitID":"-"},"content":"** Action: Another action which depends on the first is generated and executed upon predefined targets"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of rules"},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Make them generalized trigger-action pairs"},{"lineNumber":816,"author":{"gitID":"-"},"content":"** Pros: Later extension is easy to make by simply defining new condition and action parsers along with associated input."},{"lineNumber":817,"author":{"gitID":"-"},"content":"** Cons: This design pattern (Strategy pattern) is more advanced and may be hard for new developers to understand. Code readability may also suffer."},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"* **Alternative 2:** Make only a single `NotificationRule` type"},{"lineNumber":820,"author":{"gitID":"-"},"content":"** Pros: This is quicker to implement as the behaviour is hard-coded."},{"lineNumber":821,"author":{"gitID":"-"},"content":"** Cons: It will be more difficult to extend rules to handle other events in the future."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":824,"author":{"gitID":"-"},"content":"`RuleBook` is made general-purpose and it can hold other types of rules for future extensions, e.g. Automated Task Rules, etc."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of notification to use"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"* **Alternative 1:** Use platform-side notifications, e.g. system tray"},{"lineNumber":829,"author":{"gitID":"-"},"content":"** Pros: The user can integrate these into their own workflow, such as setting other programs to listen in on system notifications and forward them to their other device, generate emails, take actions, etc. The user has some control over how notifications look and behave."},{"lineNumber":830,"author":{"gitID":"-"},"content":"** Cons: They may not work on every platform; they are heavily dependent on implementation of Java features. For example, some distributions of Linux may not include system trays."},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Use application-side notifications."},{"lineNumber":833,"author":{"gitID":"-"},"content":"** Pros: This will only require the same framework which displays the App window itself, so is guaranteed to work alongside the App."},{"lineNumber":834,"author":{"gitID":"-"},"content":"** Cons: There will be less flexibility in customisation and availability of integration into user\u0027s preferred workflow."},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Undo-ability of `NotifyCommand`"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Leave it non-undoable"},{"lineNumber":839,"author":{"gitID":"-"},"content":"** Pros: Notification rule data can be kept separate from coin data. +"},{"lineNumber":840,"author":{"gitID":"-"},"content":"The basic functionality of `RuleBook` is implemented inside `Model` which deals with data, but the rules are instantiated only in the `Notifications` component itself. A rule manager window will be available for editing or deleting existing notifications."},{"lineNumber":841,"author":{"gitID":"-"},"content":"** Cons: The UI will be less intuitive as users have to manage coins and rules in slightly different manners."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"* **Alternative 2:** Make it an `UndoableCommand` just like `add`, `edit`, etc."},{"lineNumber":844,"author":{"gitID":"-"},"content":"** Pros: This offers an intuitive, single interface for similar operations."},{"lineNumber":845,"author":{"gitID":"-"},"content":"** Cons: This would increase the coupling between the coin data and the rule data parts of `Model`, since the current implementation of `UndoableCommand` requires saving the state of `Model`, which is a wrapper for just the coin data. +"},{"lineNumber":846,"author":{"gitID":"-"},"content":"We want to keep `Model` as an interface for just the coin data itself."},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"// end::notifications[]"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"// tag::organisation[]"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"[[Implementation-Organisation]]"},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Organisation Features"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Sorting"},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"The sorting mechanism is facilitated by `Collections.sort`. It supports sorting the coin list passed into the sort method to arrange the coins in a manner that the user chooses."},{"lineNumber":859,"author":{"gitID":"-"},"content":"The way `Collections.sort` works is that it takes the collection\u0027s underlying array and calls its sort method to sort the actual elements. The sorting algorithm used by Java is Timsort."},{"lineNumber":860,"author":{"gitID":"-"},"content":"This sorts the collection in-place, i.e., it modifies the given collection by sorting its elements directly. As a result, a sorted copy need not be made, saving resources."},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"The diagram (Fig. 25) below is the Sequence Diagram for interactions that occur from when the sort command is first called by the user to when the Coin List is sorted."},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":".Sequence Diagram for SortCommand"},{"lineNumber":865,"author":{"gitID":"-"},"content":"image::SortCommand_SequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"The order mechanism is facilitated by `SortCommand` which is also an `UndoableCommand`."},{"lineNumber":868,"author":{"gitID":"-"},"content":"`SortCommandParser` checks for the sort order (a or z parameter) to decide the relevant `SortCommand` to call."},{"lineNumber":869,"author":{"gitID":"-"},"content":"The `internalList` object is then sorted using Java\u0027s sort method."},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"How the sort procedure works:"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"* Sort by lexicographical order"},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"** We can use `compareTo()` for comparing coin code names. For _CoinBook_, we want to order our list of coins lexicographically, based on the alphabetical order of their component letters."},{"lineNumber":876,"author":{"gitID":"-"},"content":"This is done by passing `internalList` into the sort function which then uses `getCode()` to compare each of the component letters of the coin code, which will then arrange coins based on the lexicographical value of the code string."},{"lineNumber":877,"author":{"gitID":"-"},"content":"The coin code strings with the lowest lexicographical value will appear first followed by coin code strings with higher lexicographical values as you go further down the list."},{"lineNumber":878,"author":{"gitID":"-"},"content":"** We can either use the `reversed` function on `Comparator` or change the compare condition of `compareTo()` to invert the default setting and arrange the coins from highest to lowest lexicographical value instead."},{"lineNumber":879,"author":{"gitID":"-"},"content":"** We do not have to pass in any comparator for the list to be correctly sorted because the 3-letter coin code is a `String` which implements the `Comparable` _interface_, and hence guarantees its own implementation of the sort comparator."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Grouping `[Coming in v2.0]`"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"The group feature can use the `Collectors` class, which provides methods for grouping data stored in collections. Grouping would permit the user to organise coin data based on a common field, e.g coins prices equal to or over 1000 dollars per coin."},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"The `GroupingBy` method from the `Collectors` class is responsible for organising the coin data into groups. In this case the group is defined by the value of the coin. The `Collect` method from the `Stream` class accepts the `GroupingBy` method as its argument and returns a map containing the results. The results are then displayed."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"Using the `GroupingBy` collector from the `Collector` class, it takes a single parameter (or classifier) that assigns a grouping key to every stream element."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"By default, elements with the same key are inserted into a `List\u003cT\u003e`, although this can be changed by specifying a second parameter to `GroupingBy`."},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `SortCommand`"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `Collections.sort`"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"** Pros: There is no need to pass any comparator for the coin list since `String` already implements the `Comparable` interface."},{"lineNumber":898,"author":{"gitID":"-"},"content":"** Cons: The developer needs to understand the relationship between array lists and collections."},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"* **Alternative 2:** Add a new sorting function (e.g. Selection Sort)"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"** Pros: This possibly allows us to reduce the time required to execute the sorting command."},{"lineNumber":903,"author":{"gitID":"-"},"content":"** Cons: This would take more time and a considerable amount of effort to incorporate into our CoinBook since we would not be using Java’s in-built sorting method."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Undo-ability of `SortCommand`"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Make it an `UndoableCommand` just like `add`, `clear`, `edit` etc."},{"lineNumber":908,"author":{"gitID":"-"},"content":"** Pros: This offers an intuitive, single interface for similar operations."},{"lineNumber":909,"author":{"gitID":"-"},"content":"** Cons: This would increase the coupling between the coin data and the rule data parts of `Model`, since the current implementation of `UndoableCommand` requires saving the state of `Model`, which is a wrapper for just the coin data. +"},{"lineNumber":910,"author":{"gitID":"-"},"content":"We want to keep `Model` as an interface for just the coin data itself."},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"* **Alternative 2:** Leave it non-undoable"},{"lineNumber":913,"author":{"gitID":"-"},"content":"** Pros: Sort Command data can be kept separate from coin data. +"},{"lineNumber":914,"author":{"gitID":"-"},"content":"** Cons: The UI will be less intuitive as users would have to change how they manage coins and rules. +"},{"lineNumber":915,"author":{"gitID":"-"},"content":"The user would not be able to undo the sort order once it is applied, and this might be inconvenient if the user wanted the sort function for a temporary means only or the user accidentally triggered the sort. +"},{"lineNumber":916,"author":{"gitID":"-"},"content":"Sometimes a user might want their own customised way of arranging coins and so the non-undoable nature might compromise this."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Groups function `[Coming in v2.0]`"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `GroupingBy` method"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"** Pros: The user has an additional option where he can view coins based on a specified attribute."},{"lineNumber":924,"author":{"gitID":"-"},"content":"** Cons: The developer needs to understand the relationship between `Stream`, `ArrayList` and `Collector` classes."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"* **Alternative 2:** Add additional tags in lieu of grouping"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"** Pros: The codebase already has support for tags and so not a lot of changes will be required."},{"lineNumber":929,"author":{"gitID":"-"},"content":"** Cons: Commands will not be executable at a group level because tags merely depict the attribute of the coins, but groups act as a tool to manage several coins at the same time. I.e.: Grouping would add more functionality to the CoinBook for mass coin management."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"// end::organisation[]"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"// tag::sync[]"},{"lineNumber":934,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sync Feature"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"The sync mechanism is facilitated by `FetchUtil`, which uses a 3rd party library `AsyncHttpClient` that supports asynchronous dispatching of HTTP requests."},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"Suppose the user wants to update the prices of all coins owned with the latest data."},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"The user executes the sync command using `SyncCommand`, i.e. `sync`, which first builds the API URL. The API URL is built using `UrlBuilderUtil`, which first retrieves the coin code of every coin account that the user has, then concatenates to [gloss]#\u003c\u003cccmp,CryptoCompare\u003e\u003e# API URL as HTTP parameters."},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"`FetchUtil` is then used to send a HTTP GET request to CryptoCompare using this built URL via `AsyncHTTPClient` and returns a `Future\u003cResponse\u003e` to `SyncCommand`. When the response data from the `Future\u003cResponse\u003e` object is received, this data is then deserialized into `Price` objects to be passed to the `ModelManager` for updating."},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"Once the `ModelManager` receives the new `Price` objects, it passes them to the `CoinBook` to carry out price updates for each coin via `CoinChangedEvent`."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"The following sequence diagram (Fig. 26) is a visual representation of the above described process."},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":".Sequence Diagram for Sync"},{"lineNumber":949,"author":{"gitID":"-"},"content":"image::SyncCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Asynchronous vs synchronous fetching"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Asynchronous fetching"},{"lineNumber":956,"author":{"gitID":"-"},"content":"** Pros: This allows background processes to still continue, such as a loading animation to provide visual feedback to the user that data fetching is in progress and the application has not hanged."},{"lineNumber":957,"author":{"gitID":"-"},"content":"** Cons: This is more tedious to implement and requires the use of 3rd party libraries that may have bugs."},{"lineNumber":958,"author":{"gitID":"-"},"content":"* **Alternative 2:** Synchronous fetching."},{"lineNumber":959,"author":{"gitID":"-"},"content":"** Pros: This is easier to implement and only uses Java API which is much more robust and less susceptible to unforeseen bugs."},{"lineNumber":960,"author":{"gitID":"-"},"content":"** Cons: This leads to a worse user experience as the user may not know if the sync command is actually running or the application has hanged."},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"// end::sync[]"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"// tag::autocomplete[]"},{"lineNumber":965,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Autocomplete Feature"},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"The autocomplete mechanism is facilitated by `CommandBox`, which uses `COMMAND_LIST` from `CommandList`. It supports the predicting of a word or phrase that the user may type based on a partial text query."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"Suppose the user is trying to use the `sell` command."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"The user will first type `s` into the command line."},{"lineNumber":972,"author":{"gitID":"-"},"content":"```"},{"lineNumber":973,"author":{"gitID":"-"},"content":"s"},{"lineNumber":974,"author":{"gitID":"-"},"content":"```"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"Now, the autocomplete feature will then auto-suggest inputs to complete the query by displaying a pop-up of all commands that contain the letter `s` (See Fig. 27)."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":".Auto-suggestions Display"},{"lineNumber":979,"author":{"gitID":"-"},"content":"image::AutocompleteBefore.png[width\u003d\"200\"]"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"When the user then presses kbd:[DOWN] twice to reach his desired `sell` command, the selected suggestion will be highlighted light grey (See Fig. 28)."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":".Command Selection"},{"lineNumber":984,"author":{"gitID":"-"},"content":"image::AutocompleteNav.png[width\u003d\"200\"]"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"The user can then press kbd:[Enter] to confirm his selection of the `sell` command."},{"lineNumber":987,"author":{"gitID":"-"},"content":"```"},{"lineNumber":988,"author":{"gitID":"-"},"content":"sell"},{"lineNumber":989,"author":{"gitID":"-"},"content":"```"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: The fields which autocomplete works on"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Apply only for command word"},{"lineNumber":996,"author":{"gitID":"-"},"content":"** Pros: This reduces the implementation cost."},{"lineNumber":997,"author":{"gitID":"-"},"content":"** Cons: The reduced functionality may not satisfy every user."},{"lineNumber":998,"author":{"gitID":"-"},"content":"* **Alternative 2:** Apply for both command word and command parameters."},{"lineNumber":999,"author":{"gitID":"-"},"content":"** Pros: User experience will be slightly improved over the alternative."},{"lineNumber":1000,"author":{"gitID":"-"},"content":"** Cons: This has a lower value to effort ratio to implement due to restrictions of the ControlsFX and JavaFX libraries."},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store the list of commands"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"* **Alternative 1 :** Use a Radix Tree"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"** Pros: This is easier to understand for new Computer Science undergraduates, who represent the majority of incoming developers to the project."},{"lineNumber":1006,"author":{"gitID":"-"},"content":"** Cons: The implementation could be non-trivial."},{"lineNumber":1007,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Use a linear data structure"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"** Pros: This is much easier to implement and integrates nicely with ControlsFX."},{"lineNumber":1009,"author":{"gitID":"-"},"content":"** Cons: The solution will be inefficient, with a higher time complexity incurred."},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"-"},"content":"// end::autocomplete[]"},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"We are using the `java.util.logging` package for logging. The `LogsCenter` class is used to manage _logging levels_ and logging destinations."},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"Log messages are categorized into four logging levels of varying importance:"},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":"* `SEVERE` : Indicates critical problems which may possibly cause the termination of the App"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"* `WARNING` : Indicates the App can continue running, but the user should take caution"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"* `INFO` : Indicates information regarding noteworthy actions by the App"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"* `FINE` : Indicates details that are not usually noteworthy but may be useful in debugging e.g. printing the list contents instead of just its size"},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)."},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"The `Logger` for a class `Class` can be obtained using `LogsCenter.getLogger(Class)`, which will log messages according to the specified logging level. Currently, log messages are output through `Console` as well as written to a `.log` file."},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":1029,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file. By default, this is `config.json`."},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"We use AsciiDoc for writing documentation."},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"We chose AsciiDoc over Markdown because AsciiDoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"See [exref]##\u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e## to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1043,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"See [exref]##\u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e## to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF Format"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"We use [ext]#https://www.google.com/chrome/browser/desktop/[Google Chrome]# for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":".  Follow the instructions in [exref]##\u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e## to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1056,"author":{"gitID":"-"},"content":".  Find the generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1057,"author":{"gitID":"-"},"content":".  In Chrome\u0027s menu, click on the `Print` option."},{"lineNumber":1058,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot (Fig. 29) below."},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":".Options for Saving Documentation as PDF Files in Chrome"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"When developing new features it is always important to write tests so that you can verify whether the features are working as intended, alone or with one another. This chapter introduces the basics of testing."},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of Tests"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"We use two types of tests in _Coinbook_:"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"*Type 1: GUI Tests* - These are tests involving the GUI. They include:"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1075,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in the `seedu.address.ui` package."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"*Type 2: Non-GUI Tests* - These are tests not involving the GUI. They include:"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"..  _Integration tests_ that check the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These tests check multiple code units as well as the connections between them. +"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"There are three ways to run tests on your computer before sharing your changes to source control."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"* To run a subset of tests, right-click on a test package, test class, or a test, e.g. `ABC`, and choose `Run \u0027ABC\u0027` (see Fig. 30)"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":".Running Tests"},{"lineNumber":1097,"author":{"gitID":"-"},"content":"image::RunningTests.png[]"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"Open a console and run the following command:"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"Windows"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"```"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"\u003e gradlew clean allTests"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"```"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"Mac/Linux"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"```"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"$ ./gradlew clean allTests"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"```"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"See [exref]##\u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e## for more info on how to run tests using Gradle."},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"Thanks to the [ext]#https://github.com/TestFX/TestFX[TestFX]# library we use, our GUI tests can be run in _headless_ mode. In headless mode, GUI tests do not show up on the screen. This means the developer can do other things on their computer while the tests are running."},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the following command:"},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"Windows"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"```"},{"lineNumber":1123,"author":{"gitID":"-"},"content":"\u003e gradlew clean headless allTests"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"```"},{"lineNumber":1125,"author":{"gitID":"-"},"content":"Mac/Linux"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"```"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"$ ./gradlew clean headless allTests"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"```"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might cause some GUI tests to fail due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"\u003c\u003cContinuous Integration\u003e\u003e also automatically runs the tests specified with Gradle, but it is a good habit to test things on your own machine first."},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"Here are some common problems you may face when trying to run tests locally."},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1143,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"\u003d\u003d DevOps"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"This chapter introduces various systems we can put in place to unify the tasks of _development_ and _operations_, or _DevOps_ in short. We are mostly concerned with ways to reduce turnaround time through simple automation, and ways to manage the distribution of the completed App."},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"See [exref]##\u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e## to learn how to use Gradle for build automation."},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"We use [ext]#https://travis-ci.org/[Travis CI]# and [ext]#https://www.appveyor.com/[AppVeyor]# to perform _Continuous Integration_ on our projects. See [exref]##\u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e## and [exref]##\u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e## for more details."},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"We use [ext]#https://coveralls.io/[Coveralls]# to track the code coverage of our projects. See [exref]##\u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e## for more details."},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"When a pull request contains changes to AsciiDoc files, you can use [ext]#https://www.netlify.com/[Netlify]# to see a preview of the HTML version of those AsciiDoc files when the pull request is merged. See [exref]##\u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e## for more details."},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Release Procedure"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"Here are the steps to creating a new release."},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":".  Update the version number in"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"[exref]#link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]#."},{"lineNumber":1170,"author":{"gitID":"-"},"content":".  Generate a JAR file [exref]##\u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e##."},{"lineNumber":1171,"author":{"gitID":"-"},"content":".  Tag the repo with the version number, e.g. `v0.1`."},{"lineNumber":1172,"author":{"gitID":"-"},"content":".  [ext]#https://help.github.com/articles/creating-releases/[Create a new release using GitHub]# and upload the JAR file you created in step 2."},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Dependency Management"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, _CoinBook_ depends on the [ext]#http://wiki.fasterxml.com/JacksonHome[Jackson library]# for XML parsing. Gradle can manage these _dependencies_ for you by downloading the them automatically, instead of having to: +"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"* Include those libraries in the repo (this bloats the repo size), or +"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"* Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Goals"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of cryptocurrencies"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"* prefers desktop apps over other types"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"* requires various analysis and visualisation tools for decision-making"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"*Value proposition*: manage cryptocurrencies faster than a typical mouse/GUI driven app"},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"*Eldon Chung*"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"* Major: Search enhancement. Support for SQL-like queries with logical operators as well as additional search specifiers besides name, such as tags and price. This lets users manage their large portfolio easily through efficient filtering."},{"lineNumber":1200,"author":{"gitID":"-"},"content":"* Minor: Fetch news. Fetches news related to cryptocurrencies from sources such as RSS feeds. This lets users keep track of latest developments in the scene to aid their decision making."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"*Ewald Hew*"},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"* Major: Notifications and rule system. Make notifications based on user-set rules, checked when coin data updates. This helps users stay on top of what\u0027s happening and obtain important information at the right time."},{"lineNumber":1205,"author":{"gitID":"-"},"content":"* Minor: Charts panel for data visualization. This lets users analyse price trends for decision making."},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"-"},"content":"*Lai Cheng Yu*"},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"* Major: Data fetching system. Syncs and updates the price data, etc., in the model from a source. This lets users keep up to date on latest developments."},{"lineNumber":1210,"author":{"gitID":"-"},"content":"* Minor: User experience and user interface. Create smoother workflow via GUI hints, autocompletion and vibrant GUI with coin icons. This helps users manage their portfolio quickly and efficiently, lets them focus on the more important tasks and attracts/keeps users."},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"*Neil Mehta*"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"* Major: Organization options. Sorting options and groups. This lets users switch between different contexts to fit in with their objectives at the moment, and helps them focus on only what is relevant."},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"[width\u003d\"80%\",cols\u003d\"20%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1223,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1224,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |figure out how to use the application."},{"lineNumber":1225,"author":{"gitID":"-"},"content":"|`* * *` |user |see my personal portfolio |track gains/losses."},{"lineNumber":1226,"author":{"gitID":"-"},"content":"|`* * *` |user |add new coin accounts |"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"|`* * *` |user |delete coin accounts | remove unwanted information."},{"lineNumber":1228,"author":{"gitID":"-"},"content":"|`* * *` |user |have a tagging system |simplify and categorize my accounts."},{"lineNumber":1229,"author":{"gitID":"-"},"content":"|`* * *` |user actively trading |be able to store up to 2000 cryptocurrencies |maintain my extensive portfolio."},{"lineNumber":1230,"author":{"gitID":"-"},"content":"|`* * *` |user |have a search and find feature |avoid going through all coins manually."},{"lineNumber":1231,"author":{"gitID":"-"},"content":"|`* * *` |user who values privacy |use a program without making accounts |keep it simple."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"|`* * *` |user who values privacy |store my [gloss]#\u003c\u003csensitive-data,sensitive data\u003e\u003e# only on local storage |avoid having my data on potentially insecure servers."},{"lineNumber":1233,"author":{"gitID":"-"},"content":"|`* * *` |user |avoid lots of manual entry |save time."},{"lineNumber":1234,"author":{"gitID":"-"},"content":"|`* *` |user |not to have to exit the current search results before entering a new command |operate on my search results efficiently."},{"lineNumber":1235,"author":{"gitID":"-"},"content":"|`* *` |user |have a sorting feature for names, coin prices, account values, etc. |quickly rank my choices."},{"lineNumber":1236,"author":{"gitID":"-"},"content":"|`* *` |user |have a bookmarks or favourites watchlist |prioritise certain coins."},{"lineNumber":1237,"author":{"gitID":"-"},"content":"|`* *` |user |be able to import/export my data |transfer it to other computers."},{"lineNumber":1238,"author":{"gitID":"-"},"content":"|`*` |user |have different color themes | customise my program."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"|`*` |user |have multilingual support |understand the program better."},{"lineNumber":1240,"author":{"gitID":"-"},"content":"|`*` |user |have fixed interval backups, that can be manually set |ensure my data will not be lost."},{"lineNumber":1241,"author":{"gitID":"-"},"content":"|`*` |user |write custom \u003c\u003cmacros,macros\u003e\u003e and aliasing for commands |customize my experience."},{"lineNumber":1242,"author":{"gitID":"-"},"content":"|`*` |user |track price, market cap, and circulating supply |get all my information in one place."},{"lineNumber":1243,"author":{"gitID":"-"},"content":"|`*`  |user |see \u003c\u003cRSI,RSI\u003e\u003e or \u003c\u003cMACD,MACD\u003e\u003e graphs |analyse price trends for decision-making."},{"lineNumber":1244,"author":{"gitID":"-"},"content":"|`*` |user |see Overbought/Oversold lines | do as above."},{"lineNumber":1245,"author":{"gitID":"-"},"content":"|`*` |user |be able to set [gloss]#\u003c\u003csupport-lines,support\u003e\u003e# and [gloss]#\u003c\u003cresistance-lines,resistance\u003e\u003e# lines | do as above."},{"lineNumber":1246,"author":{"gitID":"-"},"content":"|`*` |user |have candlestick graphs with [gloss]#\u003c\u003csimple-moving-average,simple\u003e\u003e# / [gloss]#\u003c\u003cexponential-moving-average,exponential\u003e\u003e# moving average overlay | do as above."},{"lineNumber":1247,"author":{"gitID":"-"},"content":"|`*` |user |be able to search information on a specific coin |get all my information in one place."},{"lineNumber":1248,"author":{"gitID":"-"},"content":"|`*` |user |have desktop notifications |be informed when something needs my attention."},{"lineNumber":1249,"author":{"gitID":"-"},"content":"|`*` |user |have a daily/hourly report |keep track of the current state of my accounts."},{"lineNumber":1250,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1251,"author":{"gitID":"-"},"content":""},{"lineNumber":1252,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is `CoinBook` and the *Actor* is the `User`, unless specified otherwise)"},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Delete Coin Listings"},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"1. User requests to delete a coin listing"},{"lineNumber":1262,"author":{"gitID":"-"},"content":"2. CoinBook deletes the specified coin"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"* 2a. The specified coin does not exist in the storage."},{"lineNumber":1270,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"** 2a1. CoinBook shows an error message."},{"lineNumber":1273,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1274,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Export Storage Data"},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"1.  User requests to export storage data."},{"lineNumber":1281,"author":{"gitID":"-"},"content":"2.  CoinBook requests for the file destination."},{"lineNumber":1282,"author":{"gitID":"-"},"content":"3.  User specifies the file destination."},{"lineNumber":1283,"author":{"gitID":"-"},"content":"4.  CoinBook exports the file."},{"lineNumber":1284,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1290,"author":{"gitID":"-"},"content":"* 2a. The storage is empty."},{"lineNumber":1291,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1292,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":"* 3a. The given file destination is invalid."},{"lineNumber":1295,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1297,"author":{"gitID":"-"},"content":"** 3a1. CoinBook shows an error message."},{"lineNumber":1298,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1299,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Set Notifications"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"-"},"content":"1. User sets the condition under which he/she wishes to be notified."},{"lineNumber":1306,"author":{"gitID":"-"},"content":"2. CoinBook notifies the user the condition has been acknowledged."},{"lineNumber":1307,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1308,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"* 2a. The condition argument was invalid."},{"lineNumber":1314,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"** 2a1. CoinBook shows an error message."},{"lineNumber":1316,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Tag Items for Group Commands"},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":"1. User finds the coins that he wishes to group using the `Find` command."},{"lineNumber":1324,"author":{"gitID":"-"},"content":"2. CoinBook shows a list of coins."},{"lineNumber":1325,"author":{"gitID":"-"},"content":"3. User tags all the found using the `TagAll` command."},{"lineNumber":1326,"author":{"gitID":"-"},"content":"4. CoinBook updates the tags on the coins and the list view."},{"lineNumber":1327,"author":{"gitID":"-"},"content":"5. User then operates on all coins that were tagged. e.g. `buy tag 50`"},{"lineNumber":1328,"author":{"gitID":"-"},"content":"6. CoinBook shows the result to the User."},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"* 2a. The tag name was invalid."},{"lineNumber":1334,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"** 2a1. CoinBook shows an error message."},{"lineNumber":1336,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1337,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1343,"author":{"gitID":"-"},"content":".  Should be able to hold up to 2000 Coin accounts without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1344,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1345,"author":{"gitID":"-"},"content":".  Should be accurate in the representation of Coin amounts, free of numerical errors."},{"lineNumber":1346,"author":{"gitID":"-"},"content":".  All sensitive data should be stored locally."},{"lineNumber":1347,"author":{"gitID":"-"},"content":".  Should only make configuration files in the local directory to remain fully portable."},{"lineNumber":1348,"author":{"gitID":"-"},"content":".  Should not take more than one minute to generate summary reports."},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1351,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":"[[API]] API::"},{"lineNumber":1354,"author":{"gitID":"-"},"content":"Short for Application-Programmer Interface."},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":"[[alias]] Alias::"},{"lineNumber":1357,"author":{"gitID":"-"},"content":"Alternative forms of commands that are usually shorter for typing efficiency."},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":"[[ccmp]] CryptoCompare::"},{"lineNumber":1360,"author":{"gitID":"-"},"content":"A website that hosts \u003c\u003ccryptocurrency,cryptocurrency\u003e\u003e information, including cap rankings, prices, volumes and circulating supplies."},{"lineNumber":1361,"author":{"gitID":"-"},"content":""},{"lineNumber":1362,"author":{"gitID":"-"},"content":"[[coin]] Coin::"},{"lineNumber":1363,"author":{"gitID":"-"},"content":"See \u003c\u003ccryptocurrency, Cryptocurrency\u003e\u003e."},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":"[[coupling]] Coupling::"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"Two classes are coupled if a change in the implementation of one may necessitate a change in the other."},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":"[[cryptocurrency]] Cryptocurrency::"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"Digital currency. Examples are: Bitcoin, Dogecoin, Etherium."},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"[[exponential-moving-average]] Exponential moving average::"},{"lineNumber":1372,"author":{"gitID":"-"},"content":"A moving average window of closing prices over a past period that places more weight on the more recent days considered. Since cryptocurrencies do not have a closing price, this defaults to their price at 23:59:59 at the timezone of the exchange."},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":"[[MACD]] Moving Average Convergence Divergence (MACD)::"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"Moving Average Convergence Divergence is an indicator that is the difference between two moving averages."},{"lineNumber":1376,"author":{"gitID":"-"},"content":""},{"lineNumber":1377,"author":{"gitID":"-"},"content":"[[macros]] Macros::"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"A set of commands that can be executed under a single custom command is a macro. For example, if a user wishes to only view coins of a specific tag in a certain sorted order, he can set create a custom macro (e.g. `sortfavourites`) such that upon entering it at a command, the program will internally first call the `search` command on the user set tags, then call the `sort` command."},{"lineNumber":1379,"author":{"gitID":"-"},"content":""},{"lineNumber":1380,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1381,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":"[[resistance-lines]] Resistance Lines::"},{"lineNumber":1384,"author":{"gitID":"-"},"content":"When the price of a coin has risen to a certain amount, the price may eventually sustain its value at this point for a period of time. This is when it obtains \"resistance\"."},{"lineNumber":1385,"author":{"gitID":"-"},"content":""},{"lineNumber":1386,"author":{"gitID":"-"},"content":"[[RSI]] Relative Strength Index::"},{"lineNumber":1387,"author":{"gitID":"-"},"content":"Relative Strength Index is used as an indicator to compare the current strength of cryptocurrency versus its historical strength. The strength is calculated based on the closing prices over a period of time."},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"-"},"content":"[[sensitive-data]] Sensitive Data::"},{"lineNumber":1390,"author":{"gitID":"-"},"content":"Refers to data that is not meant to be shared with others."},{"lineNumber":1391,"author":{"gitID":"-"},"content":""},{"lineNumber":1392,"author":{"gitID":"-"},"content":"[[simple-moving-average]] Simple Moving Average::"},{"lineNumber":1393,"author":{"gitID":"-"},"content":"A moving average window of closing prices over a past period that places equal weight on all days considered. Since cryptocurrencies do not have a closing price, this defaults to their price at 23:59:59 at the timezone of the exchange."},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"[[support-lines]] Support lines::"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"When the price of a coin has fallen to a certain amount, the price may eventually sustain its value at this point for a period of time. This is when it obtains \"support\"."},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1399,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"-"},"content":"Given below are instructions to test the App manually. This is a way to supplement the automated testing and find bugs through some concerted effort to break the software."},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1404,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launching and Shutting Down"},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":". Launching initially"},{"lineNumber":1409,"author":{"gitID":"-"},"content":""},{"lineNumber":1410,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder."},{"lineNumber":1411,"author":{"gitID":"-"},"content":".. Double-click the jar file. +"},{"lineNumber":1412,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1415,"author":{"gitID":"-"},"content":""},{"lineNumber":1416,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1417,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1418,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1419,"author":{"gitID":"-"},"content":""},{"lineNumber":1420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a Coin"},{"lineNumber":1421,"author":{"gitID":"-"},"content":""},{"lineNumber":1422,"author":{"gitID":"Eldon-Chung"},"content":". Deleting a coin while all coins are listed"},{"lineNumber":1423,"author":{"gitID":"-"},"content":""},{"lineNumber":1424,"author":{"gitID":"Eldon-Chung"},"content":".. Prerequisites: List all coins using the `list` command. Multiple coins in the list."},{"lineNumber":1425,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1426,"author":{"gitID":"-"},"content":"   Expected: First coin is deleted from the list. Details of the deleted entry shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1427,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1428,"author":{"gitID":"Eldon-Chung"},"content":"   Expected: No coin is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1429,"author":{"gitID":"-"},"content":".. Other incorrect commands to try: `delete`, `delete x` (where x is larger than the list size), `delete -1` +"},{"lineNumber":1430,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1431,"author":{"gitID":"-"},"content":""},{"lineNumber":1432,"author":{"gitID":"-"},"content":". Deleting a coin while its details are being displayed"},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":".. Prerequisites: List coins as above. Select the second coin using the `view 2` command. The detail window should be open on the right side."},{"lineNumber":1435,"author":{"gitID":"-"},"content":".. Test case: `delete 2` +"},{"lineNumber":1436,"author":{"gitID":"-"},"content":"   Expected: The coin is removed from the list. The detail window should return to a blank one, as when no coin is selected."},{"lineNumber":1437,"author":{"gitID":"-"},"content":""},{"lineNumber":1438,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving Data"},{"lineNumber":1439,"author":{"gitID":"-"},"content":""},{"lineNumber":1440,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1441,"author":{"gitID":"-"},"content":""},{"lineNumber":1442,"author":{"gitID":"-"},"content":".. Start the App so that it is ready to run some commands."},{"lineNumber":1443,"author":{"gitID":"Eldon-Chung"},"content":".. Navigate to the location of the data file, `data/coinbook.xml`, and rename or delete it. +"},{"lineNumber":1444,"author":{"gitID":"-"},"content":"Expected: The coin list in App memory remains the same, and a new data file is created upon the next command that modifies it."},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"-"},"content":". Transferring data files to another computer"},{"lineNumber":1447,"author":{"gitID":"-"},"content":""},{"lineNumber":1448,"author":{"gitID":"-"},"content":".. Download _CoinBook_ to the new computer."},{"lineNumber":1449,"author":{"gitID":"-"},"content":".. Copy the `data/` folder in the old installation to the new installation folder."},{"lineNumber":1450,"author":{"gitID":"-"},"content":".. Launch the App as in F.1.1. +"},{"lineNumber":1451,"author":{"gitID":"-"},"content":"Expected: All data from the old installation should be preserved and appear in the listing when the App is launched."},{"lineNumber":1452,"author":{"gitID":"-"},"content":""},{"lineNumber":1453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding Coins"},{"lineNumber":1454,"author":{"gitID":"-"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":". Finding a coin from a long list of coins"},{"lineNumber":1456,"author":{"gitID":"-"},"content":""},{"lineNumber":1457,"author":{"gitID":"-"},"content":".. Prerequisites: List all coins using the `list` command. Multiple coins in the list. Some coins are tagged with `fav`. +"},{"lineNumber":1458,"author":{"gitID":"-"},"content":"Run the command `tag 1 t/fav` to tag the first coin in the list."},{"lineNumber":1459,"author":{"gitID":"-"},"content":".. Test case: `find c/e` +"},{"lineNumber":1460,"author":{"gitID":"-"},"content":"Expected: The list only shows coins with the letter `e` in their trading code."},{"lineNumber":1461,"author":{"gitID":"-"},"content":".. Test case: `find p/\u003e1` +"},{"lineNumber":1462,"author":{"gitID":"-"},"content":"Expected: The list only shows coins with a price greater than $1."},{"lineNumber":1463,"author":{"gitID":"-"},"content":".. Test case: `find t/fav OR ( p/\u003e1000 AND h/\u003e2000)` +"},{"lineNumber":1464,"author":{"gitID":"-"},"content":"Expected: The list only shows coins with either the `fav` tag or with price greater than $1000 and amount held greater than 2000 coins simultaneously."},{"lineNumber":1465,"author":{"gitID":"-"},"content":""},{"lineNumber":1466,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting Notifications"},{"lineNumber":1467,"author":{"gitID":"-"},"content":""},{"lineNumber":1468,"author":{"gitID":"-"},"content":". Creating a new notification"},{"lineNumber":1469,"author":{"gitID":"-"},"content":""},{"lineNumber":1470,"author":{"gitID":"-"},"content":".. Prerequisites: Have known coins added to the list that can receive price updates, e.g. BTC. +"},{"lineNumber":1471,"author":{"gitID":"-"},"content":"Otherwise, run the command `add c/BTC`"},{"lineNumber":1472,"author":{"gitID":"-"},"content":".. Test case: `notify c/BTC AND p/\u003e1000`, `sync` +"},{"lineNumber":1473,"author":{"gitID":"-"},"content":"Expected: The latest price of Bitcoin is fetched, and, assuming the price has not completely crashed, a notification"},{"lineNumber":1474,"author":{"gitID":"-"},"content":"should pop up in the bottom-right corner of the screen. +"},{"lineNumber":1475,"author":{"gitID":"-"},"content":"If price is below 1000, use a smaller value after `p/` and try again"},{"lineNumber":1476,"author":{"gitID":"-"},"content":".. Test case: `listnotifs` +"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"Expected: The notification list window should open, and any added notification rules are listed."},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"-"},"content":". Using notifications to jump to view coin"},{"lineNumber":1480,"author":{"gitID":"-"},"content":""},{"lineNumber":1481,"author":{"gitID":"-"},"content":".. Prerequisites: Have multiple known coins added to the list that can receive price updates, e.g. BTC, ETH, XRP, DOGE..."},{"lineNumber":1482,"author":{"gitID":"-"},"content":".. Test case: `notify p/\u003e1`, `sync` +"},{"lineNumber":1483,"author":{"gitID":"-"},"content":"Click on any notification. +"},{"lineNumber":1484,"author":{"gitID":"-"},"content":"Expected: The coin stated on the notification is opened in the detail window, and its price history chart and subreddit page can be seen."},{"lineNumber":1485,"author":{"gitID":"-"},"content":""},{"lineNumber":1486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Syncing Coin Data"},{"lineNumber":1487,"author":{"gitID":"-"},"content":""},{"lineNumber":1488,"author":{"gitID":"-"},"content":". Running the sync"},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"-"},"content":".. Test case: `sync` +"},{"lineNumber":1491,"author":{"gitID":"-"},"content":"Expected: The latest prices are fetched, as mentioned in the previous section F.5."},{"lineNumber":1492,"author":{"gitID":"-"},"content":""},{"lineNumber":1493,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting Coin List"},{"lineNumber":1494,"author":{"gitID":"-"},"content":""},{"lineNumber":1495,"author":{"gitID":"-"},"content":". Sorting in Lexicographical Order"},{"lineNumber":1496,"author":{"gitID":"-"},"content":""},{"lineNumber":1497,"author":{"gitID":"-"},"content":".. Prerequisites: Multiple coins in the list"},{"lineNumber":1498,"author":{"gitID":"-"},"content":".. Test case: `order` +"},{"lineNumber":1499,"author":{"gitID":"-"},"content":"Expected: The coins should be sorted by their trading codes alphabetically."},{"lineNumber":1500,"author":{"gitID":"-"},"content":".. Test case: `order z` +"},{"lineNumber":1501,"author":{"gitID":"-"},"content":"Expected: The coins should be sorted in reverse order, again by trading codes."}],"authorContributionMap":{"Eldon-Chung":7,"-":1494}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.ITEM_COUNT_STATUS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CoinBookChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.TypicalCoins;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final CoinBookChangedEvent EVENT_STUB \u003d new CoinBookChangedEvent(new CoinBook());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static CoinBookChangedEvent eventADDED;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(0, STUB_SAVE_LOCATION);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook tempCoinBook \u003d new CoinBook();"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        tempCoinBook.addCoin(TypicalCoins.ALIS);"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        eventADDED \u003d new CoinBookChangedEvent(tempCoinBook);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                String.format(ITEM_COUNT_STATUS, 0),"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                SYNC_STATUS_INITIAL);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(ITEM_COUNT_STATUS, EVENT_STUB.data.getCoinList().size()),"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // after address book is updated again"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        postNow(eventADDED);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(ITEM_COUNT_STATUS, eventADDED.data.getCoinList().size()),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Asserts that the -"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *   save location matches that of {@code expectedSaveLocation},"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *   item count matches that of {@code expectedItemCount}, and"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *   sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                                        String expectedItemCount,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                        String expectedSyncStatus) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(expectedItemCount, statusBarFooterHandle.getItemCount());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":7,"-":90}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.storage.XmlAdaptedCoin;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableCoinBook;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBookBuilder;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validCoinBook.xml\");"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    private static final File MISSING_COIN_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingCoinField.xml\");"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    private static final File INVALID_COIN_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidCoinField.xml\");"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    private static final File VALID_COIN_FILE \u003d new File(TEST_DATA_FOLDER + \"validCoin.xml\");"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempCoinBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"ABC\";"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"favs\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, CoinBook.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, CoinBook.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, CoinBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        CoinBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableCoinBook.class).toModelType();"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(9, dataFromFile.getCoinList().size());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"    public void xmlAdaptedCoinFromFile_fileWithMissingCoinField_validResult() throws Exception {"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        XmlAdaptedCoin actualCoin \u003d XmlUtil.getDataFromFile("},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"                MISSING_COIN_FIELD_FILE, XmlAdaptedCoinWithRootElement.class);"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        XmlAdaptedCoin expectedCoin \u003d new XmlAdaptedCoin("},{"lineNumber":78,"author":{"gitID":"-"},"content":"                null, VALID_TAGS);"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedCoin, actualCoin);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"    public void xmlAdaptedCoinFromFile_fileWithValidCoin_validResult() throws Exception {"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"        XmlAdaptedCoin actualCoin \u003d XmlUtil.getDataFromFile("},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"                VALID_COIN_FILE, XmlAdaptedCoinWithRootElement.class);"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        XmlAdaptedCoin expectedCoin \u003d new XmlAdaptedCoin("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedCoin, actualCoin);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new CoinBook());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new CoinBook());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        XmlSerializableCoinBook dataToWrite \u003d new XmlSerializableCoinBook(new CoinBook());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlSerializableCoinBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableCoinBook.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBookBuilder builder \u003d new CoinBookBuilder(new CoinBook());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableCoinBook("},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"                builder.withCoin(new CoinBuilder().build()).withTag(\"active\").build());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableCoinBook.class);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"Eldon-Chung"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedCoin}"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"Eldon-Chung"},"content":"    @XmlRootElement(name \u003d \"coin\")"},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":"    private static class XmlAdaptedCoinWithRootElement extends XmlAdaptedCoin {}"},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":25,"-":108}},{"path":"src/test/java/seedu/address/logic/CommandHistoryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class CommandHistoryTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void add() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        final String validCommand \u003d \"clear\";"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        final String invalidCommand \u003d \"adds BTC\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        history.add(validCommand);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        history.add(invalidCommand);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":26}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TARGET;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SyncCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":52,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"laichengyu"},"content":"    public void execute_syncCommand_success() {"},{"lineNumber":54,"author":{"gitID":"laichengyu"},"content":"        thrown \u003d ExpectedException.none();"},{"lineNumber":55,"author":{"gitID":"laichengyu"},"content":"        assertSyncCorrect();"},{"lineNumber":56,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    public void getFilteredCoinList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        logic.getFilteredCoinList().remove(0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getCoinBook(), new RuleBook(), new UserPrefs());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":128,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":136,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"laichengyu"},"content":"     * Asserts that the result display shows {@code SyncCommand.MESSAGE_SUCCESS} upon the execution of"},{"lineNumber":138,"author":{"gitID":"laichengyu"},"content":"     * {@code SyncCommand}."},{"lineNumber":139,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"laichengyu"},"content":"    private void assertSyncCorrect() {"},{"lineNumber":141,"author":{"gitID":"laichengyu"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"laichengyu"},"content":"            CommandResult result \u003d logic.execute(SyncCommand.COMMAND_WORD);"},{"lineNumber":143,"author":{"gitID":"laichengyu"},"content":"            String expectedMessage \u003d SyncCommand.MESSAGE_SUCCESS;"},{"lineNumber":144,"author":{"gitID":"laichengyu"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":145,"author":{"gitID":"laichengyu"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":146,"author":{"gitID":"laichengyu"},"content":"            throw new AssertionError(\"Parsing and execution of SyncCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":147,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":2,"laichengyu":22,"-":126}},{"path":"src/test/java/seedu/address/commons/util/FetchUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address.commons.util;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":"import java.util.concurrent.ExecutionException;"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":"import java.util.concurrent.Future;"},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"import org.asynchttpclient.Response;"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.JsonElement;"},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.JsonObject;"},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"public class FetchUtilTest {"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":"    private static final String url \u003d \"https://min-api.cryptocompare.com/data/pricemulti?fsyms\u003dBTC\u0026tsyms\u003dUSD\";"},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"laichengyu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":"     * This test checks if the asynchronous fetch is performed correctly."},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":"     * However, due to the nature of the ever changing response data, it is not possible to verify the"},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":"     * values of the returned JSON."},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":"     * Hence, assertion is done on the structure of the returned JSON instead."},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"     * This test also requires an online connection, so if it fails, check your internet connection or"},{"lineNumber":33,"author":{"gitID":"laichengyu"},"content":"     * disable this test temporarily."},{"lineNumber":34,"author":{"gitID":"laichengyu"},"content":"     * @throws InterruptedException"},{"lineNumber":35,"author":{"gitID":"laichengyu"},"content":"     * @throws ExecutionException"},{"lineNumber":36,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"laichengyu"},"content":"    public void asyncFetch() throws InterruptedException, ExecutionException {"},{"lineNumber":39,"author":{"gitID":"laichengyu"},"content":"        Future\u003cResponse\u003e future \u003d FetchUtil.asyncFetch(url);"},{"lineNumber":40,"author":{"gitID":"laichengyu"},"content":"        Response response \u003d future.get();"},{"lineNumber":41,"author":{"gitID":"laichengyu"},"content":"        JsonObject jsonObj \u003d FetchUtil.parseStringToJsonObj(response.getResponseBody());"},{"lineNumber":42,"author":{"gitID":"laichengyu"},"content":"        Map.Entry\u003cString, JsonElement\u003e soleEntry \u003d getEntryFromJsonObj(jsonObj);"},{"lineNumber":43,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":44,"author":{"gitID":"laichengyu"},"content":"        assertEquals(\"BTC\", soleEntry.getKey());"},{"lineNumber":45,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":46,"author":{"gitID":"laichengyu"},"content":"        Map.Entry\u003cString, JsonElement\u003e nestedEntry \u003d getEntryFromJsonObj(soleEntry"},{"lineNumber":47,"author":{"gitID":"laichengyu"},"content":"                .getValue()"},{"lineNumber":48,"author":{"gitID":"laichengyu"},"content":"                .getAsJsonObject());"},{"lineNumber":49,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":50,"author":{"gitID":"laichengyu"},"content":"        assertEquals(\"USD\", nestedEntry.getKey());"},{"lineNumber":51,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":53,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"laichengyu"},"content":"    public void parseStringToJsonObj() {"},{"lineNumber":55,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":56,"author":{"gitID":"laichengyu"},"content":"        // valid json string"},{"lineNumber":57,"author":{"gitID":"laichengyu"},"content":"        String str \u003d \"{\\\"USD\\\":494.3}\";"},{"lineNumber":58,"author":{"gitID":"laichengyu"},"content":"        JsonObject jsonObj \u003d new JsonObject();"},{"lineNumber":59,"author":{"gitID":"laichengyu"},"content":"        jsonObj.addProperty(\"USD\", 494.3);"},{"lineNumber":60,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":61,"author":{"gitID":"laichengyu"},"content":"        assertEquals(jsonObj, FetchUtil.parseStringToJsonObj(str));"},{"lineNumber":62,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":64,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"laichengyu"},"content":"    public void parseStringToJsonObj_nullExceptionThrown() {"},{"lineNumber":66,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":67,"author":{"gitID":"laichengyu"},"content":"        // null string parameter"},{"lineNumber":68,"author":{"gitID":"laichengyu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":69,"author":{"gitID":"laichengyu"},"content":"        FetchUtil.parseStringToJsonObj(null);"},{"lineNumber":70,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":72,"author":{"gitID":"laichengyu"},"content":"    private Map.Entry\u003cString, JsonElement\u003e getEntryFromJsonObj(JsonObject jsonObj) {"},{"lineNumber":73,"author":{"gitID":"laichengyu"},"content":"        Set\u003cMap.Entry\u003cString, JsonElement\u003e\u003e entrySet \u003d jsonObj.entrySet();"},{"lineNumber":74,"author":{"gitID":"laichengyu"},"content":"        return entrySet.stream().findFirst().get();"},{"lineNumber":75,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"laichengyu"},"content":"}"}],"authorContributionMap":{"laichengyu":76}},{"path":"src/test/java/seedu/address/commons/util/UrlBuilderUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address.commons.util;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":"import org.apache.http.NameValuePair;"},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"import org.apache.http.message.BasicNameValuePair;"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":"public class UrlBuilderUtilTest {"},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":"    private static final String TEST_BASE_URL \u003d \"https://min-api.cryptocompare.com/data/pricemulti\";"},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":"    private static final List\u003cNameValuePair\u003e params \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"            new BasicNameValuePair(\"fsyms\", \"BTC,ETH\"),"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":"            new BasicNameValuePair(\"tsyms\", \"USD,EUR\")));"},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"laichengyu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":"    public void buildUrl_noExceptionThrown() {"},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":"        // valid case"},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":"        assertEquals(TEST_BASE_URL + \"?fsyms\u003dBTC%2CETH\u0026tsyms\u003dUSD%2CEUR\","},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":"                UrlBuilderUtil.buildUrl(TEST_BASE_URL, params));"},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":34,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"laichengyu"},"content":"    public void buildUrl_nullUrl_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":37,"author":{"gitID":"laichengyu"},"content":"        // null url parameter -\u003e throws NullPointerException"},{"lineNumber":38,"author":{"gitID":"laichengyu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"laichengyu"},"content":"        UrlBuilderUtil.buildUrl(null, params);"},{"lineNumber":40,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":42,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"laichengyu"},"content":"    public void buildUrl_nullParams_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":45,"author":{"gitID":"laichengyu"},"content":"        // null params parameter -\u003e throws NullPointerException"},{"lineNumber":46,"author":{"gitID":"laichengyu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"laichengyu"},"content":"        UrlBuilderUtil.buildUrl(TEST_BASE_URL, null);"},{"lineNumber":48,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":50,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"laichengyu"},"content":"    public void buildUrl_nullBoth_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":53,"author":{"gitID":"laichengyu"},"content":"        // null both parameters -\u003e throws NullPointerException"},{"lineNumber":54,"author":{"gitID":"laichengyu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitID":"laichengyu"},"content":"        UrlBuilderUtil.buildUrl(null, null);"},{"lineNumber":56,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"laichengyu"},"content":"}"}],"authorContributionMap":{"laichengyu":57}},{"path":"src/test/java/seedu/address/logic/parser/BuyCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.DECIMAL_STRING;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NUM_STRING;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_STRING;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BuyCommand;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"public class BuyCommandParserTest {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String INDEX_AS_STRING \u003d \"1\";"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String INVALID_INDEX_STRING \u003d \"0\";"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    private BuyCommandParser parser \u003d new BuyCommandParser();"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    private BuyCommand constructBuyCommand(String indexAsString, String valueAsString) throws IllegalValueException {"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        return new BuyCommand(new CommandTarget(ParserUtil.parseIndex(indexAsString)),"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"                ParserUtil.parseAmount(valueAsString));"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     * Appends strings together with a space in between each of them."},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    private String buildCommandString(String... strings) {"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        StringBuilder commandStringBuilder \u003d new StringBuilder();"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        for (String str : strings) {"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"            commandStringBuilder.append(String.format(\" %s\", str));"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        return commandStringBuilder.toString().trim();"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_allFieldsPresent_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        String commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_AMOUNT.toString(), NUM_STRING);"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        Command command \u003d constructBuyCommand(INDEX_AS_STRING, NUM_STRING);"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        System.out.println(parser.parse(commandString));"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        System.out.println(command);"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseSuccess(parser, commandString, command);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_AMOUNT.toString(), DECIMAL_STRING);"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d constructBuyCommand(INDEX_AS_STRING, DECIMAL_STRING);"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseSuccess(parser, commandString, command);"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE);"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        //missing amount prefix"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        String commandString \u003d buildCommandString(INDEX_AS_STRING, NUM_STRING);"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        //missing actual amount after prefix"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_AMOUNT.toString());"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE);"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        // invalid prefix"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        String commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_NAME.toString(), INDEX_AS_STRING);"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        // invalid value"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_NAME.toString(), STRING_ONE_STRING);"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        // empty preamble"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        commandString \u003d buildCommandString(PREFIX_NAME.toString(), NUM_STRING);"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_zeroIndex_throwsIndexOutOfBoundsException() throws Exception {"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        String commandString \u003d buildCommandString(INVALID_INDEX_STRING, PREFIX_NAME.toString(), NUM_STRING);"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        parser.parse(commandString);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":88,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/TokenStackTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static org.junit.Assert.assertNull;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.NUM;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.STRING;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NUM_TOKEN;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_TOKEN;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.WHITESPACE_TOKEN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.EmptyStackException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"public class TokenStackTest {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    private TokenStack initTokenStack(Token... tokens) {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        return new TokenStack(new ArrayList\u003cToken\u003e(Arrays.asList(tokens)));"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    public void tokenStackConstructorRemovesWhiteSpace() {"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(STRING_ONE_TOKEN, NUM_TOKEN);"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(Arrays.asList(STRING_ONE_TOKEN, NUM_TOKEN), tokenStack.getTokenList());"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN, WHITESPACE_TOKEN, NUM_TOKEN);"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(Arrays.asList(STRING_ONE_TOKEN, NUM_TOKEN), tokenStack.getTokenList());"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    public void matchAndPopTokenType_returnsTrueFalse() throws Exception {"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack;"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(STRING));"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN, NUM_TOKEN);"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(STRING));"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(NUM));"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(tokenStack.matchAndPopTokenType(NUM));"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    public void matchAndPopTokenType_throwsEmptyStackExceptionOnEmptyStack() throws Exception {"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack;"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(EmptyStackException.class);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack();"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.matchAndPopTokenType(STRING);"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    public void matchAndPopTokenType_throwsEmptyStackExceptionOnNonEmptyStack() throws Exception {"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack;"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(EmptyStackException.class);"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.matchAndPopTokenType(STRING);"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.matchAndPopTokenType(STRING);"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"    public void matchTokenType_returnsTrueFalse() throws Exception {"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack;"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchTokenType(STRING));"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN, NUM_TOKEN);"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchTokenType(STRING));"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchTokenType(STRING));"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"    public void matchTokenType_throwsEmptyStackExceptionOnEmptyStack() throws Exception {"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack;"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(EmptyStackException.class);"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack();"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.matchTokenType(STRING);"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"    public void popToken() throws Exception {"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(STRING_ONE_TOKEN, tokenStack.popToken());"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.isEmpty());"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"    public void popToken_throwsEmptyStackExceptionOnEmptyStack() throws Exception {"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(EmptyStackException.class);"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack();"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.popToken();"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"    public void peekToken() throws Exception {"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(STRING_ONE_TOKEN, tokenStack.peekToken());"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(tokenStack.isEmpty());"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"    public void peekToken_throwsEmptyStackExceptionOnEmptyStack() throws Exception {"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(EmptyStackException.class);"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack();"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.peekToken();"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"Eldon-Chung"},"content":"    public void resetStack() throws Exception {"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(STRING_ONE_TOKEN, NUM_TOKEN, STRING_ONE_TOKEN,"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"                STRING_ONE_TOKEN, NUM_TOKEN);"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(STRING));"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(NUM));"},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(STRING));"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(STRING));"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(NUM));"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.isEmpty());"},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.resetStack();"},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(STRING));"},{"lineNumber":126,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(NUM));"},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(STRING));"},{"lineNumber":128,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(STRING));"},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.matchAndPopTokenType(NUM));"},{"lineNumber":130,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.isEmpty());"},{"lineNumber":131,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"Eldon-Chung"},"content":"    public void isEmpty() throws Exception {"},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack();"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.isEmpty());"},{"lineNumber":137,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.popToken();"},{"lineNumber":139,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(tokenStack.isEmpty());"},{"lineNumber":140,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"Eldon-Chung"},"content":"    public void getLastExpectedType() throws Exception {"},{"lineNumber":144,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":145,"author":{"gitID":"Eldon-Chung"},"content":"        assertNull(tokenStack.getLastExpectedType());"},{"lineNumber":146,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.matchAndPopTokenType(STRING);"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(STRING, tokenStack.getLastExpectedType());"},{"lineNumber":148,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack \u003d initTokenStack(STRING_ONE_TOKEN, NUM_TOKEN);"},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.matchAndPopTokenType(NUM);"},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(NUM, tokenStack.getLastExpectedType());"},{"lineNumber":151,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":"    public void getLastExpectedType_returnsNullOnEmptyStack() throws Exception {"},{"lineNumber":155,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack();"},{"lineNumber":156,"author":{"gitID":"Eldon-Chung"},"content":"        assertNull(tokenStack.getLastExpectedType());"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"    public void getActualType() throws Exception {"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(STRING_ONE_TOKEN);"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(STRING, tokenStack.getActualType());"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"    public void getActualType_throwsEmptyStackException() throws Exception {"},{"lineNumber":167,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(EmptyStackException.class);"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack();"},{"lineNumber":169,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.getActualType();"},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":172,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":165,"-":7}},{"path":"src/test/java/seedu/address/logic/parser/TagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMB;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FAV;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HOT;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMB;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FAV;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_SECOND_COIN;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_THIRD_COIN;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand.EditCoinDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.EditCoinDescriptorBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class TagCommandParserTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private TagCommandParser parser \u003d new TagCommandParser();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, VALID_NAME_AMB, TagCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", TagCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMB, MESSAGE_INVALID_FORMAT);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMB, MESSAGE_INVALID_FORMAT);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Coin} being edited,"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FAV + TAG_DESC_HOT + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FAV + TAG_EMPTY + TAG_DESC_HOT, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FAV + TAG_DESC_HOT, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC + INVALID_TAG_DESC + VALID_TAG_FAV,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        Index targetIndex \u003d INDEX_SECOND_COIN;"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HOT + TAG_DESC_FAV;"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EditCoinDescriptor descriptor \u003d new EditCoinDescriptorBuilder()"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"                .withTags(VALID_TAG_HOT, VALID_TAG_FAV).build();"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"        TagCommand expectedCommand \u003d new TagCommand(new CommandTarget(targetIndex), descriptor);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        Index targetIndex \u003d INDEX_THIRD_COIN;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor descriptor \u003d new EditCoinDescriptorBuilder().withTags().build();"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        TagCommand expectedCommand \u003d new TagCommand(new CommandTarget(targetIndex), descriptor);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":24,"-":75}},{"path":"src/test/java/seedu/address/logic/parser/NotifyCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"public class NotifyCommandParserTest {"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"    private static final String VALID_INPUT \u003d \"c/TEST\";"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"    private NotifyCommandParser parser \u003d new NotifyCommandParser();"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"    public void parse_allFieldsPresent_success() throws Exception {"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"        assertParseSuccess(parser, VALID_INPUT, parser.parse(VALID_INPUT));"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":17}},{"path":"src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.AND_STRING;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.AND_TOKEN;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.EOF_TOKEN;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.EQUALS_STRING;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.EQUALS_TOKEN;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.GREATER_STRING;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.GREATER_TOKEN;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.LEFT_PAREN_STRING;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.LEFT_PAREN_TOKEN;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.LESS_STRING;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.LESS_TOKEN;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NOT_STRING;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NOT_TOKEN;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NUM_STRING;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NUM_TOKEN;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.OR_STRING;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.OR_TOKEN;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_AMOUNT_STRING;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_AMOUNT_TOKEN;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.RIGHT_PAREN_STRING;"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.RIGHT_PAREN_TOKEN;"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_STRING;"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_TOKEN;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    private final TokenType aSlash \u003d TokenType.PREFIX_AMOUNT;"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    private final TokenType pSlash \u003d TokenType.PREFIX_PRICE;"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    private final TokenType tSlash \u003d TokenType.PREFIX_TAG;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    public void tokenizeToArgumentMultimap_emptyArgsString_noValues() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString, aSlash);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentAbsent(argMultimap, aSlash);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefixTokenType} match the {@code expectedValues}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, TokenType prefixTokenType,"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"                                       String... expectedValues) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefixTokenType).get());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefixTokenType).size());"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefixTokenType).get(i));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, TokenType prefix) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"    public void tokenizeToArgumentMultimap_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"    public void tokenizeToArgumentMultimap_oneArgument() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // Preamble present"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        String argsString \u003d \"  Some preamble string a/ Argument value \";"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString, aSlash);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, aSlash, \"Argument value\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // No preamble"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString, pSlash);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"    public void tokenizeToArgumentMultimap_multipleArguments() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // Only two arguments are present"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        String argsString \u003d \"SomePreambleString t/ dashp/tValue a/aSlash value\";"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString, aSlash, tSlash, pSlash);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, aSlash, \"aSlash value\");"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, tSlash, \"dashp/tValue\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // All three arguments are present"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"        argsString \u003d \"Different Preamble String p/111 t/ dashT-Value a/aSlash value\";"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString, aSlash, tSlash, pSlash);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, aSlash, \"aSlash value\");"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, tSlash, \"dashT-Value\");"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"111\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"        /* Also covers: Reusing of the tokenizeToArgumentMultimapr multiple times */"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":"        // Reuse tokenizeToArgumentMultimap on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":130,"author":{"gitID":"Eldon-Chung"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString, aSlash, tSlash, pSlash);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentAbsent(argMultimap, aSlash);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"    public void tokenizeToArgumentMultimap_multipleArgumentsWithRepeats() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"        String argsString \u003d \"SomePreambleString t/ dashT-Value p/ p/ t/ another dashT-value a/ aSlash value t/\";"},{"lineNumber":139,"author":{"gitID":"Eldon-Chung"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString, aSlash, tSlash, pSlash);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, aSlash, \"aSlash value\");"},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, tSlash, \"dashT-Value\", \"another dashT-value\", \"\");"},{"lineNumber":143,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"\", \"\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"    public void tokenizeToArgumentMultimap_multipleArgumentsJoined() {"},{"lineNumber":148,"author":{"gitID":"Eldon-Chung"},"content":"        String argsString \u003d \"SomePreambleStringa/ aSlash joinedt/joined t/ not joinedp/joined\";"},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenizeToArgumentMultimap(argsString, aSlash, tSlash, pSlash);"},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringa/ aSlash joinedt/joined\");"},{"lineNumber":151,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentAbsent(argMultimap, aSlash);"},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"        assertArgumentPresent(argMultimap, tSlash, \"not joinedp/joined\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"    public void lexBoolType() throws Exception {"},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cToken\u003e expectedList;"},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(AND_TOKEN, EOF_TOKEN));"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(AND_STRING).getTokenList());"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(OR_TOKEN, EOF_TOKEN));"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(OR_STRING).getTokenList());"},{"lineNumber":164,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(NOT_TOKEN, EOF_TOKEN));"},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(NOT_STRING).getTokenList());"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"Eldon-Chung"},"content":"    public void lexLeftParenthesesType() throws Exception {"},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cToken\u003e expectedList;"},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(LEFT_PAREN_TOKEN, EOF_TOKEN));"},{"lineNumber":172,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(LEFT_PAREN_STRING).getTokenList());"},{"lineNumber":173,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"Eldon-Chung"},"content":"    public void lexRightParenthesesType() throws Exception {"},{"lineNumber":177,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cToken\u003e expectedList;"},{"lineNumber":178,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(RIGHT_PAREN_TOKEN, EOF_TOKEN));"},{"lineNumber":179,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(RIGHT_PAREN_STRING).getTokenList());"},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":182,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"Eldon-Chung"},"content":"    public void lexComparatorType() throws Exception {"},{"lineNumber":184,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cToken\u003e expectedList;"},{"lineNumber":185,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":186,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(GREATER_TOKEN, EOF_TOKEN));"},{"lineNumber":187,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(GREATER_STRING).getTokenList());"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(LESS_TOKEN, EOF_TOKEN));"},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(LESS_STRING).getTokenList());"},{"lineNumber":190,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(EQUALS_TOKEN, EOF_TOKEN));"},{"lineNumber":191,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(EQUALS_STRING).getTokenList());"},{"lineNumber":192,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":194,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"Eldon-Chung"},"content":"    public void lexPrefixType() throws Exception {"},{"lineNumber":196,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cToken\u003e expectedList;"},{"lineNumber":197,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":198,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(PREFIX_AMOUNT_TOKEN, EOF_TOKEN));"},{"lineNumber":199,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList,"},{"lineNumber":200,"author":{"gitID":"Eldon-Chung"},"content":"                ArgumentTokenizer.tokenizeToTokenStack(PREFIX_AMOUNT_STRING, TokenType.PREFIX_AMOUNT).getTokenList());"},{"lineNumber":201,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":203,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"Eldon-Chung"},"content":"    public void lexNumType() throws Exception {"},{"lineNumber":205,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cToken\u003e expectedList;"},{"lineNumber":206,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":207,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(NUM_TOKEN, EOF_TOKEN));"},{"lineNumber":208,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(NUM_STRING).getTokenList());"},{"lineNumber":209,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":211,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"Eldon-Chung"},"content":"    public void lexStringType() throws Exception {"},{"lineNumber":213,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cToken\u003e expectedList;"},{"lineNumber":214,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":215,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(STRING_ONE_TOKEN, EOF_TOKEN));"},{"lineNumber":216,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, ArgumentTokenizer.tokenizeToTokenStack(STRING_ONE_STRING).getTokenList());"},{"lineNumber":217,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":219,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"Eldon-Chung"},"content":"    public void lexGenericString() throws Exception {"},{"lineNumber":221,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cToken\u003e expectedList;"},{"lineNumber":222,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":223,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(PREFIX_AMOUNT_TOKEN, STRING_ONE_TOKEN, AND_TOKEN,"},{"lineNumber":224,"author":{"gitID":"Eldon-Chung"},"content":"                PREFIX_AMOUNT_TOKEN, STRING_ONE_TOKEN, EOF_TOKEN));"},{"lineNumber":225,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList,"},{"lineNumber":226,"author":{"gitID":"Eldon-Chung"},"content":"                ArgumentTokenizer.tokenizeToTokenStack(PREFIX_AMOUNT_STRING + STRING_ONE_STRING + AND_STRING"},{"lineNumber":227,"author":{"gitID":"Eldon-Chung"},"content":"                                + PREFIX_AMOUNT_STRING + STRING_ONE_STRING, TokenType.PREFIX_AMOUNT).getTokenList());"},{"lineNumber":228,"author":{"gitID":"Eldon-Chung"},"content":"        expectedList \u003d new ArrayList\u003cToken\u003e(Arrays.asList(PREFIX_AMOUNT_TOKEN, LESS_TOKEN, NUM_TOKEN,"},{"lineNumber":229,"author":{"gitID":"Eldon-Chung"},"content":"                OR_TOKEN, LEFT_PAREN_TOKEN, NOT_TOKEN, PREFIX_AMOUNT_TOKEN, GREATER_TOKEN, NUM_TOKEN,"},{"lineNumber":230,"author":{"gitID":"Eldon-Chung"},"content":"                AND_TOKEN, PREFIX_AMOUNT_TOKEN, STRING_ONE_TOKEN, RIGHT_PAREN_TOKEN, EOF_TOKEN));"},{"lineNumber":231,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList,"},{"lineNumber":232,"author":{"gitID":"Eldon-Chung"},"content":"                ArgumentTokenizer.tokenizeToTokenStack(\"a/\u003c999 OR (NOT a/\u003e999 AND a/TESTINGONE)\","},{"lineNumber":233,"author":{"gitID":"Eldon-Chung"},"content":"                        TokenType.PREFIX_AMOUNT).getTokenList());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":145,"-":91}},{"path":"src/test/java/seedu/address/logic/parser/CoinBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.TARGET_FIRST_COIN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BuyCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListNotifsCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.NotifyCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand.EditCoinDescriptor;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinUtil;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.EditCoinDescriptorBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class CoinBookParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final CoinBookParser parser \u003d new CoinBookParser();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coin \u003d new CoinBuilder().build();"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(CoinUtil.getAddCommand(coin));"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(new AddCommand(coin), command);"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        AddCommand aliasedCommand \u003d (AddCommand) parser.parseCommand(CoinUtil.getAddCommand(coin));"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(new AddCommand(coin), aliasedCommand);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parseCommand_buy() throws Exception {"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coin \u003d new CoinBuilder().build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        BuyCommand command \u003d (BuyCommand) parser.parseCommand(BuyCommand.COMMAND_WORD + \" \""},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"                + INDEX_FIRST_COIN.getOneBased() + PREFIX_AMOUNT  + \" 50.0\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(new BuyCommand(new CommandTarget(INDEX_FIRST_COIN), new Amount(\"50.0\")), command);"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d (BuyCommand) parser.parseCommand(BuyCommand.COMMAND_ALIAS + \" \""},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"                + INDEX_FIRST_COIN.getOneBased() + PREFIX_AMOUNT  + \" 50.0\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(new BuyCommand(new CommandTarget(INDEX_FIRST_COIN), new Amount(\"50.0\")), command);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(TARGET_FIRST_COIN), command);"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        DeleteCommand aliasedCommand \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_COIN.getOneBased());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(TARGET_FIRST_COIN), aliasedCommand);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parseCommand_tag() throws Exception {"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coin \u003d new CoinBuilder().build();"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor descriptor \u003d new EditCoinDescriptorBuilder(coin).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        TagCommand command \u003d (TagCommand) parser.parseCommand(TagCommand.COMMAND_WORD + \" \""},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_COIN.getOneBased() + \" \" + CoinUtil.getCoinTags(coin));"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(new TagCommand(new CommandTarget(INDEX_FIRST_COIN), descriptor), command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        TagCommand aliasedCommand \u003d (TagCommand) parser.parseCommand(TagCommand.COMMAND_ALIAS + \" \""},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_COIN.getOneBased() + \" \" + CoinUtil.getCoinTags(coin));"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(new TagCommand(new CommandTarget(INDEX_FIRST_COIN), descriptor), aliasedCommand);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseCommand_notify() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":106,"author":{"gitID":"-"},"content":"                NotifyCommand.COMMAND_WORD + \" c/TEST AND p/\u003e100\") instanceof NotifyCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":137,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parseCommand_listNotifs() throws Exception {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListNotifsCommand.COMMAND_WORD) instanceof ListNotifsCommand);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListNotifsCommand.COMMAND_ALIAS) instanceof ListNotifsCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"        ViewCommand command \u003d (ViewCommand) parser.parseCommand("},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"                ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(new ViewCommand(TARGET_FIRST_COIN), command);"},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"        ViewCommand aliasedCommand \u003d (ViewCommand) parser.parseCommand("},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"                ViewCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_COIN.getOneBased());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(new ViewCommand(TARGET_FIRST_COIN), aliasedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(\"y 1\") instanceof RedoCommand);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":169,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(parser.parseCommand(\"z 3\") instanceof UndoCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":41,"-":145}},{"path":"src/test/java/seedu/address/logic/parser/ConditionSemanticParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.DECIMAL_TOKEN;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.GREATER_TOKEN;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NUM_TOKEN;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_CODE_TOKEN;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_PRICE_TOKEN;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_TOKEN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"public class ConditionSemanticParserTest {"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private ConditionSemanticParser conditionSemanticParser;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private TokenStack tokenStack;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    private static ConditionSemanticParser initParser(Token... tokens) {"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        return new ConditionSemanticParser(new TokenStack(new ArrayList\u003cToken\u003e(Arrays.asList(tokens))));"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_returnsTrueOnValidInput() throws Exception {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSemanticParser \u003d initParser(PREFIX_PRICE_TOKEN, GREATER_TOKEN, NUM_TOKEN);"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSemanticParser.parse());"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSemanticParser \u003d initParser(PREFIX_PRICE_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSemanticParser.parse());"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSemanticParser \u003d initParser(PREFIX_CODE_TOKEN, STRING_ONE_TOKEN);"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSemanticParser.parse());"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_returnsFalseOnInvalidInput() throws Exception {"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSemanticParser \u003d initParser(PREFIX_PRICE_TOKEN, NUM_TOKEN);"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(conditionSemanticParser.parse());"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSemanticParser \u003d initParser(PREFIX_PRICE_TOKEN, GREATER_TOKEN, STRING_ONE_TOKEN);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(conditionSemanticParser.parse());"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSemanticParser \u003d initParser(PREFIX_CODE_TOKEN, STRING_ONE_TOKEN);"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSemanticParser.parse());"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":40,"-":8}},{"path":"src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.TARGET_FIRST_COIN;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"public class ViewCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1\", new ViewCommand(TARGET_FIRST_COIN));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMB;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FAV;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HOT;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMB;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOS;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FAV;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        Coin expectedCoin \u003d new CoinBuilder().withName(VALID_NAME_BOS)"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"                .withTags(VALID_TAG_FAV).build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOS"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"                + TAG_DESC_FAV, new AddCommand(expectedCoin));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseSuccess(parser, NAME_DESC_AMB + NAME_DESC_BOS"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"                + TAG_DESC_FAV, new AddCommand(expectedCoin));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        Coin expectedCoinMultipleTags \u003d new CoinBuilder().withName(VALID_NAME_BOS)"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"                .withTags(VALID_TAG_FAV, VALID_TAG_HOT).build();"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseSuccess(parser, NAME_DESC_BOS"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"                + TAG_DESC_HOT + TAG_DESC_FAV, new AddCommand(expectedCoinMultipleTags));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        Coin expectedCoin \u003d new CoinBuilder().withName(VALID_NAME_AMB)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .withTags().build();"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseSuccess(parser, NAME_DESC_AMB,"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"                new AddCommand(expectedCoin));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, VALID_NAME_BOS, expectedMessage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, VALID_NAME_BOS, expectedMessage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"                + TAG_DESC_HOT + TAG_DESC_FAV, Code.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, NAME_DESC_BOS"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FAV, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC, Code.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOS"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"                + TAG_DESC_HOT + TAG_DESC_FAV,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":30,"-":58}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.AND_TOKEN;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_0;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_1;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_2;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_3;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_4;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_5;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_6;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_7;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.EOF_TOKEN;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.LEFT_PAREN_TOKEN;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NOT_TOKEN;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NUM_TOKEN;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.OR_TOKEN;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_TAG_TOKEN;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.RIGHT_PAREN_TOKEN;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_TOKEN;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_THREE_TOKEN;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_TWO_TOKEN;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.ArrayList;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String INVALID_NAME \u003d \"B@TC\";"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String INVALID_TAG \u003d \"#fav\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String VALID_NAME \u003d \"BTC\";"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String VALID_TAG_1 \u003d \"fav\";"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String VALID_TAG_2 \u003d \"hot\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(INDEX_FIRST_COIN, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(INDEX_FIRST_COIN, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parseAmount_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        ParserUtil.parseAmount(\"1.1a\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void parseAmount_validInput_success() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(\"1.23450000\", ParserUtil.parseAmount(\"1.2345\").getValue());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(\"1.23450000\", ParserUtil.parseAmount(\"  1.2345  \").getValue());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Code expectedCode \u003d new Code(VALID_NAME);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(expectedCode, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedCode), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Code expectedCode \u003d new Code(VALID_NAME);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(expectedCode, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedCode), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":179,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author Eldon-Chung"},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":"    public void parseCommand_validArgument_returnsPredicate() throws Exception {"},{"lineNumber":182,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(PREFIX_TAG_TOKEN, STRING_ONE_TOKEN, AND_TOKEN, NOT_TOKEN,"},{"lineNumber":183,"author":{"gitID":"Eldon-Chung"},"content":"                LEFT_PAREN_TOKEN, PREFIX_TAG_TOKEN, STRING_TWO_TOKEN, OR_TOKEN, PREFIX_TAG_TOKEN,"},{"lineNumber":184,"author":{"gitID":"Eldon-Chung"},"content":"                STRING_THREE_TOKEN, RIGHT_PAREN_TOKEN, EOF_TOKEN);"},{"lineNumber":185,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d ParserUtil.parseCondition(tokenStack);"},{"lineNumber":186,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":187,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_0));"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_1));"},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_2));"},{"lineNumber":190,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_3));"},{"lineNumber":191,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_4));"},{"lineNumber":192,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_5));"},{"lineNumber":193,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_6));"},{"lineNumber":194,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_7));"},{"lineNumber":195,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":197,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"Eldon-Chung"},"content":"    public void parseCondition_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"Eldon-Chung"},"content":"        ParserUtil.parseCondition(null);"},{"lineNumber":201,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":203,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"Eldon-Chung"},"content":"    public void parseCondition_invalidArgumentSyntax_throwsParseException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":206,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(LEFT_PAREN_TOKEN, PREFIX_TAG_TOKEN, STRING_ONE_TOKEN, EOF_TOKEN);"},{"lineNumber":207,"author":{"gitID":"Eldon-Chung"},"content":"        ParserUtil.parseCondition(tokenStack);"},{"lineNumber":208,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":210,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"Eldon-Chung"},"content":"    public void parseCondition_invalidArgumentSemantics_throwsParseException() throws Exception {"},{"lineNumber":212,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":213,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d initTokenStack(LEFT_PAREN_TOKEN, PREFIX_TAG_TOKEN, NUM_TOKEN, EOF_TOKEN);"},{"lineNumber":214,"author":{"gitID":"Eldon-Chung"},"content":"        ParserUtil.parseCondition(tokenStack);"},{"lineNumber":215,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":217,"author":{"gitID":"Eldon-Chung"},"content":"    private static TokenStack initTokenStack(Token... tokens) {"},{"lineNumber":218,"author":{"gitID":"Eldon-Chung"},"content":"        return new TokenStack(new ArrayList\u003cToken\u003e(Arrays.asList(tokens)));"},{"lineNumber":219,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author"},{"lineNumber":221,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":72,"-":149}},{"path":"src/test/java/seedu/address/logic/parser/ConditionSyntaxParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"public class ConditionSyntaxParserTest {"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    * Do not use the test tokens from ParserUtil because we want to assert that"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    * the ConditionSyntaxParser ONLY uses at the TokenType of each token."},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    */"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token BINARYBOOL \u003d new Token(TokenType.BINARYBOOL, \"\");"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token UNARYBOOL \u003d new Token(TokenType.UNARYBOOL, \"\");"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token LEFTPARENTHESES \u003d new Token(TokenType.LEFTPARENTHESES, \"\");"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token RIGHTPARENTHESES \u003d new Token(TokenType.RIGHTPARENTHESES, \"\");"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token COMPARATOR \u003d new Token(TokenType.COMPARATOR, \"\");"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token PREFIXAMOUNT \u003d new Token(TokenType.PREFIX_AMOUNT, \"\");"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token NUM \u003d new Token(TokenType.NUM, \"\");"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token STRING \u003d new Token(TokenType.STRING, \"\");"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token SLASH \u003d new Token(TokenType.SLASH, \"\");"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token WHITESPACE \u003d new Token(TokenType.WHITESPACE, \"\");"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token NEWLINE \u003d new Token(TokenType.NEWLINE, \"\");"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token ELSE \u003d new Token(TokenType.ELSE, \"\");"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token EOF \u003d new Token(TokenType.EOF, \"\");"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    private ConditionSyntaxParser conditionSyntaxParser;"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    private TokenStack tokenStack;"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    private static ConditionSyntaxParser initParser(Token... tokens) {"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        return new ConditionSyntaxParser(new TokenStack(new ArrayList\u003cToken\u003e(Arrays.asList(tokens))));"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    public void parseCond() {"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, STRING, EOF);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.cond());"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, COMPARATOR, NUM, EOF);"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.cond());"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(STRING, EOF);"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(conditionSyntaxParser.cond());"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    public void term() {"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, STRING, EOF);"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.term());"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(UNARYBOOL, PREFIXAMOUNT, STRING, EOF);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.term());"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(LEFTPARENTHESES, PREFIXAMOUNT,"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"                STRING, RIGHTPARENTHESES, EOF);"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.term());"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(LEFTPARENTHESES, STRING, EOF);"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(conditionSyntaxParser.term());"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"    public void expression() {"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, STRING, EOF);"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.expression());"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(UNARYBOOL, PREFIXAMOUNT, STRING, EOF);"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.expression());"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, STRING, BINARYBOOL, PREFIXAMOUNT, STRING, EOF);"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.expression());"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, STRING, BINARYBOOL, LEFTPARENTHESES,"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"                PREFIXAMOUNT, STRING, BINARYBOOL, UNARYBOOL, PREFIXAMOUNT, STRING,"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"                RIGHTPARENTHESES, EOF);"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(conditionSyntaxParser.expression());"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, STRING, BINARYBOOL, EOF);"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(conditionSyntaxParser.expression());"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_returnsTrueOnValidInputs() {"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, STRING, PREFIXAMOUNT, EOF);"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(conditionSyntaxParser.parse());"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(PREFIXAMOUNT, STRING, BINARYBOOL, LEFTPARENTHESES,"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"                PREFIXAMOUNT, STRING, BINARYBOOL, UNARYBOOL, PREFIXAMOUNT, STRING,"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"                RIGHTPARENTHESES, RIGHTPARENTHESES, EOF);"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(conditionSyntaxParser.parse());"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(LEFTPARENTHESES, PREFIXAMOUNT, STRING, BINARYBOOL,"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"                PREFIXAMOUNT, COMPARATOR, NUM, RIGHTPARENTHESES, BINARYBOOL, PREFIXAMOUNT,"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"                COMPARATOR, NUM, EOF);"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_returnsFalseOnEmptyInput() {"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        conditionSyntaxParser \u003d initParser(EOF);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(conditionSyntaxParser.parse());"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":94,"-":3}},{"path":"src/test/java/seedu/address/logic/parser/ConditionGeneratorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.AND_TOKEN;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_0;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_1;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_2;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_3;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_4;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_5;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_6;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_7;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.DECIMAL_STRING;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.DECIMAL_TOKEN;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.EOF_TOKEN;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.GREATER_TOKEN;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.LEFT_PAREN_TOKEN;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.LESS_TOKEN;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NOT_TOKEN;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.OR_TOKEN;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_BOUGHT_TOKEN;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_CODE_TOKEN;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_HELD_TOKEN;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_MADE_TOKEN;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_PRICE_FALL_TOKEN;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_PRICE_RISE_TOKEN;"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_PRICE_TOKEN;"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_SOLD_TOKEN;"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_TAG_TOKEN;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_WORTH_FALL_TOKEN;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_WORTH_RISE_TOKEN;"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.PREFIX_WORTH_TOKEN;"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.RIGHT_PAREN_TOKEN;"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_STRING;"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_TOKEN;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_THREE_STRING;"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_THREE_TOKEN;"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_TWO_STRING;"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_TWO_TOKEN;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"import org.junit.BeforeClass;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Price;"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"public class ConditionGeneratorTest {"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Token INVALID_TAG_NAME \u003d new Token(TokenType.STRING, \"invalid-name\");"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Amount DECIMAL_OFFSET \u003d new Amount(\"1.0\");"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Price ZERO_PRICE \u003d new Price();"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Price NEW_PRICE \u003d new Price();"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"    private static Amount greaterAmount;"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"    private static Amount lesserAmount;"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"    private static Price greaterPrice;"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"    private static Price lesserPrice;"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"    @Rule"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"    @BeforeClass"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    public static void initializeTestValues() throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"        // Load the offset values to test numerical conditions"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        greaterAmount \u003d Amount.getSum(ParserUtil.parseAmount(DECIMAL_STRING), DECIMAL_OFFSET);"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        lesserAmount \u003d Amount.getDiff(ParserUtil.parseAmount(DECIMAL_STRING), DECIMAL_OFFSET);"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        greaterPrice \u003d new Price();"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        greaterPrice.setCurrent(Amount.getSum(ParserUtil.parseAmount(DECIMAL_STRING), DECIMAL_OFFSET));"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        lesserPrice \u003d new Price();"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"        lesserPrice.setCurrent(Amount.getDiff(ParserUtil.parseAmount(DECIMAL_STRING), DECIMAL_OFFSET));"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        ZERO_PRICE.setCurrent(new Amount(\"0\"));"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        NEW_PRICE.setCurrent(new Amount(\"2.0\"));"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"    public void cond_generatesAmountHeldCondition() throws Exception {"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_HELD_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withAmountBought(greaterAmount).build();"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withAmountBought(lesserAmount).build();"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"    public void cond_generatesCodeCondition() throws Exception {"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_CODE_TOKEN, STRING_ONE_TOKEN);"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withName(STRING_ONE_STRING).build();"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withName(STRING_TWO_STRING).build();"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"    public void cond_generatesDollarsBoughtCondition() throws Exception {"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_BOUGHT_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withAmountBought(greaterAmount).build();"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withAmountBought(lesserAmount).build();"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":115,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"    public void cond_generatesDollarsSoldCondition() throws Exception {"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_SOLD_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withAmountBought(greaterAmount)"},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"                .withAmountSold(greaterAmount).build();"},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withAmountBought(greaterAmount)"},{"lineNumber":126,"author":{"gitID":"Eldon-Chung"},"content":"                .withAmountSold(lesserAmount).build();"},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":128,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":130,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"    public void cond_generatesMadeCondition() throws Exception {"},{"lineNumber":134,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_MADE_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withAmountBought(greaterAmount).build();"},{"lineNumber":137,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withAmountBought(greaterAmount).build();"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":139,"author":{"gitID":"Eldon-Chung"},"content":"        // Increase the price on the pass coin to generate some profit"},{"lineNumber":140,"author":{"gitID":"Eldon-Chung"},"content":"        passCoin \u003d new Coin(passCoin, NEW_PRICE);"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"        passCoin.addTotalAmountSold(greaterAmount);"},{"lineNumber":143,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":144,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":145,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":146,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":148,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"    public void cond_generatesPriceCondition() throws Exception {"},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_PRICE_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":151,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withPrice(greaterPrice).build();"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withPrice(lesserPrice).build();"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":155,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":156,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"    public void cond_generatesTagCondition() throws Exception {"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_TAG_TOKEN, STRING_ONE_TOKEN);"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withTags(STRING_ONE_STRING).build();"},{"lineNumber":164,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withTags(STRING_TWO_STRING).build();"},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":167,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":"    public void cond_generatesWorthCondition() throws Exception {"},{"lineNumber":172,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_WORTH_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":173,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":174,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withAmountBought(greaterAmount).build();"},{"lineNumber":175,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withAmountBought(lesserAmount).build();"},{"lineNumber":176,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":177,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":178,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":179,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"Eldon-Chung"},"content":"    public void term_generatesConditionWithParentheses() throws Exception {"},{"lineNumber":183,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(LEFT_PAREN_TOKEN, PREFIX_CODE_TOKEN,"},{"lineNumber":184,"author":{"gitID":"Eldon-Chung"},"content":"                STRING_ONE_TOKEN, RIGHT_PAREN_TOKEN);"},{"lineNumber":185,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.term();"},{"lineNumber":186,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withName(STRING_ONE_STRING).build();"},{"lineNumber":187,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withName(STRING_TWO_STRING).build();"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":190,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":191,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":193,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"Eldon-Chung"},"content":"    public void term_generatesConditionWithNegation() throws Exception {"},{"lineNumber":195,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(NOT_TOKEN, PREFIX_CODE_TOKEN,"},{"lineNumber":196,"author":{"gitID":"Eldon-Chung"},"content":"                STRING_ONE_TOKEN);"},{"lineNumber":197,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.term();"},{"lineNumber":198,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin \u003d new CoinBuilder().withName(STRING_TWO_STRING).build();"},{"lineNumber":199,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withName(STRING_ONE_STRING).build();"},{"lineNumber":200,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":201,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":202,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":203,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":205,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"Eldon-Chung"},"content":"    public void expression_generationConditionWithConjunction() throws Exception {"},{"lineNumber":207,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_TAG_TOKEN, STRING_ONE_TOKEN, AND_TOKEN,"},{"lineNumber":208,"author":{"gitID":"Eldon-Chung"},"content":"                PREFIX_TAG_TOKEN, STRING_TWO_TOKEN, EOF_TOKEN);"},{"lineNumber":209,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.expression();"},{"lineNumber":210,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":211,"author":{"gitID":"Eldon-Chung"},"content":"        // Test to see if the conjunction operation commutes"},{"lineNumber":212,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin1 \u003d new CoinBuilder().withTags(STRING_ONE_STRING, STRING_TWO_STRING).build();"},{"lineNumber":213,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin2 \u003d new CoinBuilder().withTags(STRING_TWO_STRING, STRING_ONE_STRING).build();"},{"lineNumber":214,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":215,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin1 \u003d new CoinBuilder().withTags(STRING_ONE_STRING).build();"},{"lineNumber":216,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin2 \u003d new CoinBuilder().withTags(STRING_ONE_STRING, STRING_THREE_STRING).build();"},{"lineNumber":217,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin3 \u003d new CoinBuilder().withTags(STRING_TWO_STRING, STRING_THREE_STRING).build();"},{"lineNumber":218,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":219,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin1));"},{"lineNumber":220,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin2));"},{"lineNumber":221,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":222,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin1));"},{"lineNumber":223,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin2));"},{"lineNumber":224,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin3));"},{"lineNumber":225,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":227,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"Eldon-Chung"},"content":"    public void expression_generationConditionWithDisjunction() throws Exception {"},{"lineNumber":229,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_TAG_TOKEN, STRING_ONE_TOKEN, OR_TOKEN,"},{"lineNumber":230,"author":{"gitID":"Eldon-Chung"},"content":"                PREFIX_TAG_TOKEN, STRING_TWO_TOKEN, EOF_TOKEN);"},{"lineNumber":231,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.expression();"},{"lineNumber":232,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":233,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin1 \u003d new CoinBuilder().withTags(STRING_ONE_STRING, STRING_TWO_STRING).build();"},{"lineNumber":234,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin2 \u003d new CoinBuilder().withTags(STRING_TWO_STRING, STRING_ONE_STRING).build();"},{"lineNumber":235,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin3 \u003d new CoinBuilder().withTags(STRING_ONE_STRING).build();"},{"lineNumber":236,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin4 \u003d new CoinBuilder().withTags(STRING_ONE_STRING, STRING_THREE_STRING).build();"},{"lineNumber":237,"author":{"gitID":"Eldon-Chung"},"content":"        Coin passCoin5 \u003d new CoinBuilder().withTags(STRING_TWO_STRING, STRING_THREE_STRING).build();"},{"lineNumber":238,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":239,"author":{"gitID":"Eldon-Chung"},"content":"        Coin failCoin \u003d new CoinBuilder().withTags(STRING_THREE_STRING).build();"},{"lineNumber":240,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":241,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin1));"},{"lineNumber":242,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin2));"},{"lineNumber":243,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin3));"},{"lineNumber":244,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin4));"},{"lineNumber":245,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(passCoin5));"},{"lineNumber":246,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":247,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":248,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":250,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":251,"author":{"gitID":"Eldon-Chung"},"content":"    public void generate_correctOrderOfPrecedenceWithoutParentheses() throws Exception {"},{"lineNumber":252,"author":{"gitID":"Eldon-Chung"},"content":"        // Asserts the condition evaluation is done from left to right."},{"lineNumber":253,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_TAG_TOKEN, STRING_ONE_TOKEN, OR_TOKEN,"},{"lineNumber":254,"author":{"gitID":"Eldon-Chung"},"content":"                PREFIX_TAG_TOKEN, STRING_TWO_TOKEN, AND_TOKEN, PREFIX_TAG_TOKEN, STRING_THREE_TOKEN, EOF_TOKEN);"},{"lineNumber":255,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.generate();"},{"lineNumber":256,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":257,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_0));"},{"lineNumber":258,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_1));"},{"lineNumber":259,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_2));"},{"lineNumber":260,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_3));"},{"lineNumber":261,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_4));"},{"lineNumber":262,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_5));"},{"lineNumber":263,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_6));"},{"lineNumber":264,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_7));"},{"lineNumber":265,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":267,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":268,"author":{"gitID":"Eldon-Chung"},"content":"    public void generate_correctOrderOfPrecedenceWithParentheses() throws Exception {"},{"lineNumber":269,"author":{"gitID":"Eldon-Chung"},"content":"        // Asserts the conditions in parentheses are prioritized."},{"lineNumber":270,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_TAG_TOKEN, STRING_ONE_TOKEN, OR_TOKEN,"},{"lineNumber":271,"author":{"gitID":"Eldon-Chung"},"content":"                LEFT_PAREN_TOKEN, PREFIX_TAG_TOKEN, STRING_TWO_TOKEN, AND_TOKEN, PREFIX_TAG_TOKEN, STRING_THREE_TOKEN,"},{"lineNumber":272,"author":{"gitID":"Eldon-Chung"},"content":"                RIGHT_PAREN_TOKEN, EOF_TOKEN);"},{"lineNumber":273,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.generate();"},{"lineNumber":274,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":275,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_0));"},{"lineNumber":276,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_1));"},{"lineNumber":277,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(condition.test(COIN_2));"},{"lineNumber":278,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_3));"},{"lineNumber":279,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_4));"},{"lineNumber":280,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_5));"},{"lineNumber":281,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_6));"},{"lineNumber":282,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(condition.test(COIN_7));"},{"lineNumber":283,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":285,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"Eldon-Chung"},"content":"    public void getPredicateFromPrefix_throwsIllegalValueException() throws Exception {"},{"lineNumber":287,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":288,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_TAG_TOKEN, INVALID_TAG_NAME);"},{"lineNumber":289,"author":{"gitID":"Eldon-Chung"},"content":"        conditionGenerator.generate();"},{"lineNumber":290,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":292,"author":{"gitID":"ewaldhew"},"content":"    //@@author ewaldhew"},{"lineNumber":293,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":294,"author":{"gitID":"ewaldhew"},"content":"    public void cond_generatesPriceRiseCondition() throws Exception {"},{"lineNumber":295,"author":{"gitID":"ewaldhew"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_PRICE_RISE_TOKEN, LESS_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":296,"author":{"gitID":"ewaldhew"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":297,"author":{"gitID":"ewaldhew"},"content":"        Coin passCoin \u003d new CoinBuilder().withPrice(ZERO_PRICE).build();"},{"lineNumber":298,"author":{"gitID":"ewaldhew"},"content":"        Coin failCoin \u003d new CoinBuilder().withPrice(ZERO_PRICE).build();"},{"lineNumber":299,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":300,"author":{"gitID":"ewaldhew"},"content":"        passCoin \u003d new Coin(passCoin, lesserPrice);"},{"lineNumber":301,"author":{"gitID":"ewaldhew"},"content":"        failCoin \u003d new Coin(failCoin, greaterPrice);"},{"lineNumber":302,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":303,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":304,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":305,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":307,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":308,"author":{"gitID":"ewaldhew"},"content":"    public void cond_generatesWorthRiseCondition() throws Exception {"},{"lineNumber":309,"author":{"gitID":"ewaldhew"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_WORTH_RISE_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":310,"author":{"gitID":"ewaldhew"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":311,"author":{"gitID":"ewaldhew"},"content":"        Coin passCoin \u003d new CoinBuilder().build();"},{"lineNumber":312,"author":{"gitID":"ewaldhew"},"content":"        Coin failCoin \u003d new CoinBuilder().build();"},{"lineNumber":313,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":314,"author":{"gitID":"ewaldhew"},"content":"        passCoin.addTotalAmountBought(greaterAmount);"},{"lineNumber":315,"author":{"gitID":"ewaldhew"},"content":"        failCoin.addTotalAmountBought(lesserAmount);"},{"lineNumber":316,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":317,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":318,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":319,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":321,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":322,"author":{"gitID":"ewaldhew"},"content":"    public void cond_generatesPriceFallCondition() throws Exception {"},{"lineNumber":323,"author":{"gitID":"ewaldhew"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_PRICE_FALL_TOKEN, GREATER_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":324,"author":{"gitID":"ewaldhew"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":325,"author":{"gitID":"ewaldhew"},"content":"        Coin passCoin \u003d new CoinBuilder().withPrice(greaterPrice).build();"},{"lineNumber":326,"author":{"gitID":"ewaldhew"},"content":"        Coin failCoin \u003d new CoinBuilder().withPrice(lesserPrice).build();"},{"lineNumber":327,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":328,"author":{"gitID":"ewaldhew"},"content":"        passCoin \u003d new Coin(passCoin, ZERO_PRICE);"},{"lineNumber":329,"author":{"gitID":"ewaldhew"},"content":"        failCoin \u003d new Coin(failCoin, ZERO_PRICE);"},{"lineNumber":330,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":331,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":332,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":333,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":335,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":336,"author":{"gitID":"ewaldhew"},"content":"    public void cond_generatesWorthFallCondition() throws Exception {"},{"lineNumber":337,"author":{"gitID":"ewaldhew"},"content":"        ConditionGenerator conditionGenerator \u003d initGenerator(PREFIX_WORTH_FALL_TOKEN, LESS_TOKEN, DECIMAL_TOKEN);"},{"lineNumber":338,"author":{"gitID":"ewaldhew"},"content":"        Predicate\u003cCoin\u003e condition \u003d conditionGenerator.cond();"},{"lineNumber":339,"author":{"gitID":"ewaldhew"},"content":"        Coin passCoin \u003d new CoinBuilder().withAmountBought(lesserAmount).build();"},{"lineNumber":340,"author":{"gitID":"ewaldhew"},"content":"        Coin failCoin \u003d new CoinBuilder().withAmountBought(greaterAmount).build();"},{"lineNumber":341,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":342,"author":{"gitID":"ewaldhew"},"content":"        passCoin \u003d new Coin(passCoin, ZERO_PRICE);"},{"lineNumber":343,"author":{"gitID":"ewaldhew"},"content":"        failCoin \u003d new Coin(failCoin, ZERO_PRICE);"},{"lineNumber":344,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":345,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(condition.test(passCoin));"},{"lineNumber":346,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(condition.test(failCoin));"},{"lineNumber":347,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"ewaldhew"},"content":"    //@@author"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"Eldon-Chung"},"content":"    private static ConditionGenerator initGenerator(Token... tokens) {"},{"lineNumber":351,"author":{"gitID":"Eldon-Chung"},"content":"        return new ConditionGenerator(new TokenStack(new ArrayList\u003cToken\u003e(Arrays.asList(tokens))));"},{"lineNumber":352,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":354,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"ewaldhew":57,"Eldon-Chung":283,"-":14}},{"path":"src/test/java/seedu/address/logic/commands/SpawnNotificationCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.TypicalCoins.BOS;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"public class SpawnNotificationCommandTest {"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"    public void equals() throws Exception {"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"        SpawnNotificationCommand firstCommand \u003d prepareCommand(ALIS);"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"        SpawnNotificationCommand secondCommand \u003d prepareCommand(BOS);"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"        SpawnNotificationCommand firstCommandCopy \u003d prepareCommand(ALIS);"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(firstCommand.equals(1));"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"        // different coin -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"     * Returns a {@code SpawnNotificationCommand} with the parameter {@code coin}."},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"    private SpawnNotificationCommand prepareCommand(Coin coin) {"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"        SpawnNotificationCommand command \u003d new SpawnNotificationCommand(coin.toString());"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"        command.setData(new ModelManager(getTypicalCoinBook(), new UserPrefs()),"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"                new CommandHistory(), new UndoRedoStack());"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"        return command;"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":52}},{"path":"src/test/java/seedu/address/logic/RuleCheckerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.TypicalRules.getTypicalRuleBook;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.model.CoinChangedEvent;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.model.RuleBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.ui.ShowNotificationRequestEvent;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"public class RuleCheckerTest {"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    private static final RuleBook emptyRuleBook \u003d new RuleBook();"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"    private static final RuleBook testRuleBook \u003d getTypicalRuleBook();"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"    private static final Model model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    private RuleChecker ruleChecker;"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"    private CoinChangedEvent event;"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"        Coin firstCoin \u003d TestUtil.getCoin(model, INDEX_FIRST_COIN);"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"        Coin editedCoin \u003d new Coin(firstCoin);"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"        editedCoin.addTotalAmountBought(new Amount(\"10\"));"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"        event \u003d new CoinChangedEvent(INDEX_FIRST_COIN, firstCoin, editedCoin);"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"    public void handleCoinChangedEvent_emptyRules_doesNotPost() {"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"        ruleChecker \u003d new RuleChecker(emptyRuleBook);"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowNotificationRequestEvent);"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"    public void updateRuleBook_validRuleTypeMatches_postsShowNotifEvent() {"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"        ruleChecker \u003d new RuleChecker(emptyRuleBook);"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"        EventsCenter.getInstance().post(new RuleBookChangedEvent(testRuleBook));"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowNotificationRequestEvent);"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"        ShowNotificationRequestEvent snre \u003d"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"                (ShowNotificationRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"        assertEquals(snre.codeString, event.data.getCode().toString());"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"        assertEquals(snre.targetIndex, INDEX_FIRST_COIN);"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":71}},{"path":"src/test/java/seedu/address/logic/commands/CommandTargetTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOBS;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalCoins;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandTargetTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    private static final ObservableList\u003cCoin\u003e coinList \u003d new ModelManager(getTypicalCoinBook(),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            new UserPrefs()).getFilteredCoinList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        Code validCode \u003d new Code(VALID_NAME_JOBS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandTarget testTarget \u003d new CommandTarget(validCode);"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(testTarget.equals(new CommandTarget(new Code(VALID_NAME_JOBS))));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(testTarget.equals(testTarget));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(testTarget.equals(null));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(testTarget.equals(5));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // different modes -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandTarget otherTarget \u003d new CommandTarget(INDEX_FIRST_COIN);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(testTarget.equals(otherTarget));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // same mode but different values -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        otherTarget \u003d new CommandTarget(TypicalCoins.BOS.getCode());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(testTarget.equals(otherTarget));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void toIndex_validCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        CommandTarget codeTarget \u003d new CommandTarget("},{"lineNumber":57,"author":{"gitID":"-"},"content":"                coinList.get(INDEX_FIRST_COIN.getZeroBased()).getCode());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(codeTarget.toIndex(coinList).equals(INDEX_FIRST_COIN));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void toIndex_invalidCode_throwsException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(IndexOutOfBoundsException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d new CommandTarget(new Code(\"not a valid code\")).toIndex(coinList);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void toIndex_indexGreaterThanListSize_throwsException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(IndexOutOfBoundsException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index index \u003d new CommandTarget(Index.fromZeroBased(coinList.size())).toIndex(coinList);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":7,"-":66}},{"path":"src/test/java/seedu/address/logic/commands/EditCoinDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand.EditCoinDescriptor;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.EditCoinDescriptorBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"public class EditCoinDescriptorTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor descriptorWithSameValues \u003d new EditCoinDescriptor(DESC_AMY);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor editedAmy \u003d new EditCoinDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HOT).build();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":5,"-":33}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCoinAtIndex;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_SECOND_COIN;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    private Model model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToDelete \u003d model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_COIN);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_COIN_SUCCESS, coinToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getCoinBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.deleteCoin(coinToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCoinList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToDelete \u003d model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_COIN);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_COIN_SUCCESS, coinToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getCoinBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.deleteCoin(coinToDelete);"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        showNoCoin(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_COIN;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCoinBook().getCoinList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToDelete \u003d model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_COIN);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getCoinBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        // delete -\u003e first coin deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered coin list to show all coins"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        // redo -\u003e same first coin deleted again"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.deleteCoin(coinToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCoinList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"     * 1. Deletes a {@code Coin} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted coin in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"Eldon-Chung"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the coin object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameCoinDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_COIN);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getCoinBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_SECOND_COIN);"},{"lineNumber":137,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToDelete \u003d model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"        // delete -\u003e deletes second coin in unfiltered coin list / first coin in filtered coin list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered coin list to show all coins"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.deleteCoin(coinToDelete);"},{"lineNumber":146,"author":{"gitID":"Eldon-Chung"},"content":"        assertNotEquals(coinToDelete, model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"        // redo -\u003e deletes same second coin in unfiltered coin list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_COIN);"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_COIN);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_COIN);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"Eldon-Chung"},"content":"        // different coin -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new CommandTarget(index));"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"    private void showNoCoin(Model model) {"},{"lineNumber":190,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateFilteredCoinList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(model.getFilteredCoinList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":43,"-":151}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCoinAtIndex;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getCoinBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"-":41}},{"path":"src/test/java/seedu/address/logic/parser/SellCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.DECIMAL_STRING;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NUM_STRING;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_STRING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SellCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"public class SellCommandParserTest {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String INDEX_AS_STRING \u003d \"1\";"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String INVALID_INDEX_STRING \u003d \"0\";"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    private SellCommandParser parser \u003d new SellCommandParser();"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    private SellCommand constructSellCommand(String indexAsString, String valueAsString) throws IllegalValueException {"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        return new SellCommand(new CommandTarget(ParserUtil.parseIndex(indexAsString)),"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"                ParserUtil.parseAmount(valueAsString));"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     * Appends strings together with a space in between each of them."},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    private String buildCommandString(String... strings) {"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        StringBuilder commandStringBuilder \u003d new StringBuilder();"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        for (String str : strings) {"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"            commandStringBuilder.append(String.format(\" %s\", str));"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        return commandStringBuilder.toString().trim();"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_allFieldsPresent_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        String commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_AMOUNT.toString(), NUM_STRING);"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        Command command \u003d constructSellCommand(INDEX_AS_STRING, NUM_STRING);"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        System.out.println(parser.parse(commandString));"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        System.out.println(command);"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseSuccess(parser, commandString, command);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_AMOUNT.toString(), DECIMAL_STRING);"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d constructSellCommand(INDEX_AS_STRING, DECIMAL_STRING);"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseSuccess(parser, commandString, command);"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE);"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        //missing amount prefix"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        String commandString \u003d buildCommandString(INDEX_AS_STRING, NUM_STRING);"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        //missing actual amount after prefix"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_AMOUNT.toString());"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE);"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        // invalid prefix"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        String commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_NAME.toString(), INDEX_AS_STRING);"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        // invalid value"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        commandString \u003d buildCommandString(INDEX_AS_STRING, PREFIX_NAME.toString(), STRING_ONE_STRING);"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        // empty preamble"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        commandString \u003d buildCommandString(PREFIX_NAME.toString(), NUM_STRING);"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        assertParseFailure(parser, commandString, expectedMessage);"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"    public void parse_zeroIndex_throwsIndexOutOfBoundsException() throws Exception {"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        String commandString \u003d buildCommandString(INVALID_INDEX_STRING, PREFIX_NAME.toString(), NUM_STRING);"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        parser.parse(commandString);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":82,"-":14}},{"path":"src/test/java/seedu/address/logic/commands/ListNotifsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.commands.ListNotifsCommand.MESSAGE_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.ui.ShowNotifManRequestEvent;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.CommandTestUtil.ModelStub;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.testutil.TypicalRules;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"public class ListNotifsCommandTest {"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    public void execute_listnotifs_success() {"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"        ListNotifsCommand testCommand \u003d new ListNotifsCommand();"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"        testCommand.setData(new ModelStubAcceptingGetRuleList(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"        CommandResult result \u003d testCommand.execute();"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowNotifManRequestEvent);"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"    private class ModelStubAcceptingGetRuleList extends ModelStub {"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        @Override"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        public ObservableList\u003cseedu.address.model.rule.Rule\u003e getRuleList() {"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"            return TypicalRules.getTypicalRuleBook().getRuleList();"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":39}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Price;"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.DuplicateRuleException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.RuleNotFoundException;"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.EditCoinDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String VALID_NAME_AMB \u003d \"AMB\";"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String VALID_NAME_BOS \u003d \"BOS\";"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String VALID_NAME_JOBS \u003d \"JOBS\";"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String VALID_TAG_HOT \u003d \"hot\";"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String VALID_TAG_FAV \u003d \"fav\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String NAME_DESC_AMB \u003d \" \" + PREFIX_CODE + VALID_NAME_AMB;"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String NAME_DESC_BOS \u003d \" \" + PREFIX_CODE + VALID_NAME_BOS;"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String NAME_DESC_JOBS \u003d \" \" + PREFIX_CODE + VALID_NAME_JOBS;"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String TAG_DESC_FAV \u003d \" \" + PREFIX_TAG + VALID_TAG_FAV;"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String TAG_DESC_HOT \u003d \" \" + PREFIX_TAG + VALID_TAG_HOT;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_CODE + \"BTC\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hot*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final TagCommand.EditCoinDescriptor DESC_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final TagCommand.EditCoinDescriptor DESC_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        DESC_AMY \u003d new EditCoinDescriptorBuilder().withName(VALID_NAME_AMB)"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"                .withTags(VALID_TAG_FAV).build();"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        DESC_BOB \u003d new EditCoinDescriptorBuilder().withName(VALID_NAME_BOS)"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"                .withTags(VALID_TAG_HOT, VALID_TAG_FAV).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"     * - the address book and the filtered coin list in the {@code actualModel} remain unchanged"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook expectedCoinBook \u003d new CoinBook(actualModel.getCoinBook());"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoin\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCoinList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"            assertEquals(expectedCoinBook, actualModel.getCoinBook());"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredCoinList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"     * Updates {@code model}\u0027s filtered list to show only the coin at the given {@code targetIndex} in the"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"    public static void showCoinAtIndex(Model model, Index targetIndex) {"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCoinList().size());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coin \u003d model.getFilteredCoinList().get(targetIndex.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d coin.getCode().fullName.split(\"\\\\s+\");"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateFilteredCoinList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(1, model.getFilteredCoinList().size());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"     * Deletes the first coin in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"    public static void deleteFirstCoin(Model model) {"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"        Coin firstCoin \u003d model.getFilteredCoinList().get(0);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"            model.deleteCoin(firstCoin);"},{"lineNumber":126,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (CoinNotFoundException pnfe) {"},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":"            throw new AssertionError(\"Coin in filtered list must exist in model.\", pnfe);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static class ModelStub implements Model {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"Eldon-Chung"},"content":"        public void addCoin(Coin coin) throws DuplicateCoinException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyCoinBook newData) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public ReadOnlyCoinBook getCoinBook() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":"        public void deleteCoin(Coin target) throws CoinNotFoundException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"Eldon-Chung"},"content":"        public void updateCoin(Coin target, Coin editedCoin)"},{"lineNumber":177,"author":{"gitID":"Eldon-Chung"},"content":"                throws DuplicateCoinException {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"laichengyu"},"content":"        //@@author laichengyu"},{"lineNumber":182,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"laichengyu"},"content":"        public void syncAll(HashMap\u003cString, Price\u003e newPriceMetrics)"},{"lineNumber":184,"author":{"gitID":"laichengyu"},"content":"                throws DuplicateCoinException, CoinNotFoundException {"},{"lineNumber":185,"author":{"gitID":"laichengyu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":188,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"laichengyu"},"content":"        public List\u003cString\u003e getCodeList() {"},{"lineNumber":190,"author":{"gitID":"laichengyu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"laichengyu"},"content":"            return null;"},{"lineNumber":192,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"laichengyu"},"content":"        //@@author"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"Eldon-Chung"},"content":"        public ObservableList\u003cCoin\u003e getFilteredCoinList() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"Eldon-Chung"},"content":"        public void updateFilteredCoinList(Predicate\u003cCoin\u003e predicate) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public void sortCoinList(boolean isSort) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public void deleteRule(Rule target) throws RuleNotFoundException {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public void addRule(Rule rule) throws DuplicateRuleException {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        public void updateRule(Rule target, Rule editedRule) throws DuplicateRuleException, RuleNotFoundException {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        public ReadOnlyRuleBook getRuleBook() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        public ObservableList\u003cRule\u003e getRuleList() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":46,"laichengyu":13,"-":180}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCoin;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.TARGET_FIRST_COIN;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    private final Model model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(TARGET_FIRST_COIN);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(TARGET_FIRST_COIN);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        deleteFirstCoin(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":6,"-":51}},{"path":"src/test/java/seedu/address/logic/commands/ViewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCoinAtIndex;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_SECOND_COIN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_THIRD_COIN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.TARGET_FIRST_COIN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.TARGET_SECOND_COIN;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":" * Contains integration tests (interaction with the Model) for {@code ViewCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"public class ViewCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        Index lastCoinIndex \u003d Index.fromOneBased(model.getFilteredCoinList().size());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        assertExecutionSuccess(INDEX_FIRST_COIN);"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        assertExecutionSuccess(INDEX_THIRD_COIN);"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        assertExecutionSuccess(lastCoinIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCoinList().size() + 1);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        assertExecutionSuccess(INDEX_FIRST_COIN);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_COIN;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getCoinBook().getCoinList().size());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        ViewCommand selectFirstCommand \u003d new ViewCommand(TARGET_FIRST_COIN);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        ViewCommand selectSecondCommand \u003d new ViewCommand(TARGET_SECOND_COIN);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        ViewCommand selectFirstCommandCopy \u003d new ViewCommand(TARGET_FIRST_COIN);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        // different coin -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"     * Executes a {@code ViewCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"        ViewCommand viewCommand \u003d prepareCommand(index);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"            CommandResult commandResult \u003d viewCommand.execute();"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"            assertEquals(String.format(ViewCommand.MESSAGE_SELECT_COIN_SUCCESS, index.getOneBased()),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"     * Executes a {@code ViewCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"        ViewCommand viewCommand \u003d prepareCommand(index);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":"            viewCommand.execute();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns a {@code ViewCommand} with parameters {@code index}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"    private ViewCommand prepareCommand(Index index) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(new CommandTarget(index));"},{"lineNumber":140,"author":{"gitID":"Eldon-Chung"},"content":"        viewCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"        return viewCommand;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":26,"-":117}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.getAddCommandSuccessMessage;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_newCoin_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        Coin validCoin \u003d new CoinBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getCoinBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.addCoin(validCoin);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(prepareCommand(validCoin, model), model,"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"                getAddCommandSuccessMessage(validCoin), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_duplicateCoin_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Coin coinInList \u003d model.getCoinBook().getCoinList().get(0);"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(prepareCommand(coinInList, model), model, AddCommand.MESSAGE_DUPLICATE_COIN);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code coin} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    private AddCommand prepareCommand(Coin coin, Model model) {"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        AddCommand command \u003d new AddCommand(coin);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":15,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_emptyCoinBook_success() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_nonEmptyCoinBook_success() {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        Model model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCoin;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCoinAtIndex;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private final Model model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        deleteFirstCoin(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        // undo() should cause the model\u0027s filtered list to show all coins"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        // redo() should cause the model\u0027s filtered list to show all coins"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        deleteFirstCoin(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"     * Deletes the first coin in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"            Coin coinToDelete \u003d model.getFilteredCoinList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"                model.deleteCoin(coinToDelete);"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"            } catch (CoinNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"                fail(\"Impossible: coinToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":19,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_COINS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.BTCZ;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.DADI;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.ELIX;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.KEYWORD_MATCHING_BTC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import systemtests.CoinBookSystemTest;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import systemtests.ModelHelper;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"public class FindCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public void find() {"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find multiple persons in coin book, command with leading spaces and trailing spaces"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"         * -\u003e 2 persons found"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \"LI\";"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel, ALIS, ELIX); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"         * -\u003e 2 persons found"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \"L\";"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + KEYWORD_MATCHING_BTC;"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel, BTCZ);"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find multiple persons in coin book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + BTCZ.getCode() + \" OR \""},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"                + PREFIX_CODE + DADI.getCode();"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel, BTCZ, DADI);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find multiple persons in coin book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + DADI.getCode() + \" OR \""},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"                + PREFIX_CODE + BTCZ.getCode();"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find multiple persons in coin book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + DADI.getCode() + \" OR \""},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"                + PREFIX_CODE + BTCZ.getCode();"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find multiple persons in coin book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + DADI.getCode() + \" OR \""},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"                + PREFIX_CODE + BTCZ.getCode() + \" OR \" + PREFIX_CODE + \"nonmatchingcodename\";"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find same persons in coin book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(getModel().getCoinBook().getCoinList().contains(BTCZ));"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + DADI.getCode() + \" OR \""},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"                + PREFIX_CODE + BTCZ.getCode();"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel, DADI);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find person in coin book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \" daDI\";"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find person in coin book, keyword is substring of name -\u003e 1 persons found */"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \" da\";"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel, DADI);"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find person not in coin book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE  + \" NONEXISTENTCODE\";"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":115,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find tags of person in coin book -\u003e 0 persons found */"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(BTCZ.getTags());"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_TAG + tags.get(tags.size() - 1).tagName;"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel, BTCZ);"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"        showAllCoins();"},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"        selectCoin(Index.fromOneBased(1));"},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(getCoinListPanel().getHandleToSelectedCard().getName().equals(DADI.getCode().fullName));"},{"lineNumber":126,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \" DADI\";"},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel, DADI);"},{"lineNumber":128,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":130,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":131,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: find person in empty coin book -\u003e 0 persons found */"},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":"        deleteAllCoins();"},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + KEYWORD_MATCHING_BTC;"},{"lineNumber":134,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":"        ModelHelper.setFilteredList(expectedModel, DADI);"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":146,"author":{"gitID":"Eldon-Chung"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":148,"author":{"gitID":"Eldon-Chung"},"content":"     * These verifications are done by"},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":151,"author":{"gitID":"Eldon-Chung"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":155,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":156,"author":{"gitID":"Eldon-Chung"},"content":"                MESSAGE_COINS_LISTED_OVERVIEW, expectedModel.getFilteredCoinList().size());"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":137,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCoin;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.TARGET_FIRST_COIN;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.TARGET_SECOND_COIN;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    private final Model model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(TARGET_FIRST_COIN);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(TARGET_SECOND_COIN);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        deleteFirstCoin(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        deleteFirstCoin(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":6,"-":52}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.getAddCommandSuccessMessage;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTestUtil.ModelStub;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    public void constructor_nullCoin_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_coinAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        ModelStubAcceptingCoinAdded modelStub \u003d new ModelStubAcceptingCoinAdded();"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        Coin validCoin \u003d new CoinBuilder().build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        CommandResult commandResult \u003d getAddCommandForCoin(validCoin, modelStub).execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(getAddCommandSuccessMessage(validCoin), commandResult.feedbackToUser);"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(Arrays.asList(validCoin), modelStub.coinsAdded);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_duplicateCoin_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateCoinException();"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        Coin validCoin \u003d new CoinBuilder().build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_COIN);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        getAddCommandForCoin(validCoin, modelStub).execute();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        Coin alice \u003d new CoinBuilder().withName(\"Alice\").build();"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        Coin bob \u003d new CoinBuilder().withName(\"Bob\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"        // different coin -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"     * Generates a new AddCommand with the details of the given coin."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"    private AddCommand getAddCommandForCoin(Coin coin, Model model) {"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        AddCommand command \u003d new AddCommand(coin);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"     * A Model stub that always throw a DuplicateCoinException when trying to add a coin."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"    private class ModelStubThrowingDuplicateCoinException extends ModelStub {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        public void addCoin(Coin coin) throws DuplicateCoinException {"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"            throw new DuplicateCoinException();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        public ReadOnlyCoinBook getCoinBook() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new CoinBook();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"     * A Model stub that always accept the coin being added."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"    private class ModelStubAcceptingCoinAdded extends ModelStub {"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"        final ArrayList\u003cCoin\u003e coinsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"Eldon-Chung"},"content":"        public void addCoin(Coin coin) throws DuplicateCoinException {"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"            requireNonNull(coin);"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"            coinsAdded.add(coin);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public ReadOnlyCoinBook getCoinBook() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new CoinBook();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":32,"-":94}},{"path":"src/test/java/seedu/address/logic/commands/TagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCoinAtIndex;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_SECOND_COIN;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand.EditCoinDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.EditCoinDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class TagCommandTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    private Model model \u003d new ModelManager(getTypicalCoinBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Coin editedCoin \u003d new CoinBuilder(model.getFilteredCoinList().get(0)).build();"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor descriptor \u003d new EditCoinDescriptorBuilder(editedCoin).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        TagCommand tagCommand \u003d prepareCommand(INDEX_FIRST_COIN, descriptor);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_COIN_SUCCESS, editedCoin);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new CoinBook(model.getCoinBook()), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.updateCoin(model.getFilteredCoinList().get(0), editedCoin);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        TagCommand tagCommand \u003d prepareCommand(INDEX_FIRST_COIN, new EditCoinDescriptor());"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        Coin editedCoin \u003d model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased());"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_COIN_SUCCESS, editedCoin);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new CoinBook(model.getCoinBook()), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinInFilteredList \u003d model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Coin editedCoin \u003d new CoinBuilder(coinInFilteredList).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        TagCommand tagCommand \u003d prepareCommand(INDEX_FIRST_COIN,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                new EditCoinDescriptorBuilder().build());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(TagCommand.MESSAGE_EDIT_COIN_SUCCESS, editedCoin);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new CoinBook(model.getCoinBook()), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.updateCoin(model.getFilteredCoinList().get(0), editedCoin);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(tagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_invalidCoinIndexUnfilteredList_failure() {"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCoinList().size() + 1);"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor descriptor \u003d new EditCoinDescriptorBuilder().withName(VALID_NAME_BOS).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        TagCommand tagCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_invalidCoinIndexFilteredList_failure() {"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_FIRST_COIN);"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_COIN;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCoinBook().getCoinList().size());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        TagCommand tagCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"                new EditCoinDescriptorBuilder().withName(VALID_NAME_BOS).build());"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToEdit \u003d model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Coin editedCoin \u003d new CoinBuilder(coinToEdit).build();"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor descriptor \u003d new EditCoinDescriptorBuilder(editedCoin).build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        TagCommand tagCommand \u003d prepareCommand(INDEX_FIRST_COIN, descriptor);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new CoinBook(model.getCoinBook()), new UserPrefs());"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"        // edit -\u003e first coin edited"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        tagCommand.execute();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        undoRedoStack.push(tagCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered coin list to show all coins"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":"        // redo -\u003e same first coin edited again"},{"lineNumber":128,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.updateCoin(coinToEdit, editedCoin);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":137,"author":{"gitID":"Eldon-Chung"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCoinList().size() + 1);"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor descriptor \u003d new EditCoinDescriptorBuilder().withName(VALID_NAME_BOS).build();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        TagCommand tagCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(tagCommand, model, Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"     * 1. Edits a {@code Coin} from a filtered list."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited coin in the"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the coin object regardless of indexing."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameCoinEdited() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinAtIndex(model, INDEX_SECOND_COIN);"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToEdit \u003d model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Coin editedCoin \u003d new CoinBuilder(model.getFilteredCoinList()"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .get(INDEX_FIRST_COIN.getZeroBased())).withTags(\"test\").build();"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor descriptor \u003d new EditCoinDescriptorBuilder(editedCoin).build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        TagCommand tagCommand \u003d prepareCommand(INDEX_FIRST_COIN, descriptor);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new CoinBook(model.getCoinBook()), new UserPrefs());"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"        // edit -\u003e edits second coin in unfiltered coin list / first coin in filtered coin list"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        tagCommand.execute();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        undoRedoStack.push(tagCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"Eldon-Chung"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered coin list to show all coins"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.updateCoin(coinToEdit, editedCoin);"},{"lineNumber":178,"author":{"gitID":"Eldon-Chung"},"content":"        assertNotEquals(model.getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased()), coinToEdit);"},{"lineNumber":179,"author":{"gitID":"Eldon-Chung"},"content":"        // redo -\u003e edits same second coin in unfiltered coin list"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        final TagCommand standardCommand \u003d prepareCommand(INDEX_FIRST_COIN, DESC_AMY);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor copyDescriptor \u003d new EditCoinDescriptor(DESC_AMY);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        TagCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_COIN, copyDescriptor);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":206,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(standardCommand.equals(new TagCommand(new CommandTarget(INDEX_SECOND_COIN), DESC_AMY)));"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":209,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(standardCommand.equals(new TagCommand(new CommandTarget(INDEX_FIRST_COIN), DESC_BOB)));"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    private TagCommand prepareCommand(Index index, EditCoinDescriptor descriptor) {"},{"lineNumber":216,"author":{"gitID":"Eldon-Chung"},"content":"        TagCommand tagCommand \u003d new TagCommand(new CommandTarget(index), descriptor);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        tagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        return tagCommand;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":44,"-":176}},{"path":"src/test/java/seedu/address/logic/commands/SellCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TARGET;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.CoinUtil.getSellCommand;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.DECIMAL_STRING;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.NUM_STRING;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_STRING;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.KEYWORD_MATCHING_BTC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import systemtests.CoinBookSystemTest;"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"public class SellCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public void sell() throws Exception {"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        Model model \u003d getModel();"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        initializeCoinsWithAmountHeld(model);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: sell 9.99, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"         * -\u003e bought 9.00"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        Index index \u003d INDEX_FIRST_COIN;"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        String command \u003d \" \" + getSellCommand(index) + \" \";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Coin editedCoin \u003d new CoinBuilder()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .withName(model.getFilteredCoinList().get(index.getZeroBased()).getCode().toString())"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"                .withAmountSold(ParserUtil.parseAmount(NUM_STRING)).build();"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        editedCoin.addTotalAmountSold(ParserUtil.parseAmount(DECIMAL_STRING));"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, editedCoin);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: undo the last sell action -\u003e last bought coin amount is reverted to previous amount held */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: redo the last sell action -\u003e last bought coin amount held is restored */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateCoin("},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"                getModel().getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased()), editedCoin);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered coin list, edit index within bounds of coin book and coin list -\u003e edited */"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_COIN;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCoinList().size());"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d getSellCommand(index);"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToEdit \u003d getModel().getFilteredCoinList().get(index.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        editedCoin \u003d new CoinBuilder(coinToEdit).withAmountSold(ParserUtil.parseAmount(DECIMAL_STRING)).build();"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, editedCoin);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered coin list, sell index within bounds of coin book but out of bounds of coin list"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getCoinBook().getCoinList().size();"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(getSellCommand(Index.fromOneBased(invalidIndex)), MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        /* --------------------------------- Performing invalid sell operation -------------------------------------- */"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(SellCommand.COMMAND_WORD + \"  \" + PREFIX_AMOUNT + \" \" + DECIMAL_STRING,"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(SellCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased(),"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: invalid number (TESTINGONE) -\u003e rejected */"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(SellCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased() + \" \""},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"                        + PREFIX_AMOUNT + STRING_ONE_STRING,"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(SellCommand.COMMAND_WORD + \" 0 \" + PREFIX_AMOUNT + DECIMAL_STRING,"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(SellCommand.COMMAND_WORD + \" -1 \" + PREFIX_AMOUNT + DECIMAL_STRING,"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"        invalidIndex \u003d model.getFilteredCoinList().size() + 1;"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(SellCommand.COMMAND_WORD + \" \" + Integer.toString(invalidIndex) + \" \""},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"                        + PREFIX_AMOUNT + DECIMAL_STRING,"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"                MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"     * 2. Asserts that the model related components are updated to reflect the coin at index {@code toEdit} being"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"     * updated to values specified {@code editedCoin}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"     * @see SellCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Coin editedCoin,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"            expectedModel.updateCoin("},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"                    expectedModel.getFilteredCoinList().get(toEdit.getZeroBased()), editedCoin);"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"            expectedModel.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException | CoinNotFoundException e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"                    \"editedCoin is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(SellCommand.MESSAGE_SELL_COIN_SUCCESS, editedCoin), expectedSelectedCardIndex);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Coin, Index)} except that"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"     * @see SellCommandSystemTest#assertCommandSuccess(String, Index, Coin, Index)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Coin editedCoin) {"},{"lineNumber":139,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, toEdit, editedCoin, null);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":145,"author":{"gitID":"Eldon-Chung"},"content":"     * @see SellCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":187,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":200,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"Eldon-Chung"},"content":"     * Initializes the {@code coins} in {@code model} to have an initial amount bought"},{"lineNumber":202,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"Eldon-Chung"},"content":"    private void initializeCoinsWithAmountHeld(Model model) throws IllegalValueException, CoinNotFoundException {"},{"lineNumber":204,"author":{"gitID":"Eldon-Chung"},"content":"        for (Coin coin : model.getFilteredCoinList()) {"},{"lineNumber":205,"author":{"gitID":"Eldon-Chung"},"content":"            Coin newCoin \u003d new Coin(coin);"},{"lineNumber":206,"author":{"gitID":"Eldon-Chung"},"content":"            newCoin.addTotalAmountSold(ParserUtil.parseAmount(NUM_STRING));"},{"lineNumber":207,"author":{"gitID":"Eldon-Chung"},"content":"            model.updateCoin(coin, newCoin);"},{"lineNumber":208,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":108,"-":102}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_COINS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_0;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_1;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_2;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_3;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_4;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_5;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_6;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.COIN_7;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_STRING;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.TagCondition;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"public class FindCommandTest {"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    public void setupModel() {"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        this.model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_nullCondition_noPersonFound() {"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedMessage \u003d String.format(MESSAGE_COINS_LISTED_OVERVIEW, 0);"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        FindCommand command \u003d prepareCommand((coin) -\u003e false);"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    public void execute_findTags() throws DuplicateCoinException {"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        String expectedMessage \u003d String.format(MESSAGE_COINS_LISTED_OVERVIEW, 4);"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e tagCondition \u003d new TagCondition(new Tag(STRING_ONE_STRING));"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        FindCommand command \u003d prepareCommand(tagCondition);"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(COIN_0);"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(COIN_1);"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(COIN_2);"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(COIN_3);"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(COIN_4);"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(COIN_5);"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(COIN_6);"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        model.addCoin(COIN_7);"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(COIN_4, COIN_5, COIN_6, COIN_7));"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"    private FindCommand prepareCommand(Predicate\u003cCoin\u003e coinCondition) {"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        FindCommand command \u003d"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"                new FindCommand(\"\", coinCondition);"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"        return command;"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cCoin\u003e expectedList) {"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook expectedAddressBook \u003d new CoinBook(model.getCoinBook());"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedList, model.getFilteredCoinList());"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(expectedAddressBook, model.getCoinBook());"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"}"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"//@@author"}],"authorContributionMap":{"Eldon-Chung":79,"-":14}},{"path":"src/test/java/seedu/address/logic/commands/NotifyCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Assert;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.CommandTestUtil.ModelStub;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.NotificationRule;"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.exceptions.DuplicateRuleException;"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.testutil.NotificationRuleBuilder;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"public class NotifyCommandTest {"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"    @org.junit.Rule"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"    public void constructor_nullCoin_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        new NotifyCommand(null);"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"    public void execute_coinAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"        ModelStubAcceptingRuleAdded modelStub \u003d new ModelStubAcceptingRuleAdded();"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"        NotificationRule validRule \u003d new NotificationRuleBuilder().build();"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"        CommandResult commandResult \u003d getNotifyCommandForCoin(validRule, modelStub).execute();"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"        Assert.assertEquals(String.format(NotifyCommand.MESSAGE_SUCCESS, validRule), commandResult.feedbackToUser);"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"        Assert.assertEquals(Arrays.asList(validRule), modelStub.rulesAdded);"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"    public void execute_duplicateCoin_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateRuleException();"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"        NotificationRule validRule \u003d new NotificationRuleBuilder().build();"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"        thrown.expectMessage(NotifyCommand.MESSAGE_DUPLICATE_RULE);"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"        getNotifyCommandForCoin(validRule, modelStub).execute();"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"    public void equals() {"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"        NotificationRule alice \u003d new NotificationRuleBuilder().withValue(\"c/ALICE\").build();"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"        NotificationRule bob \u003d new NotificationRuleBuilder().withValue(\"c/BOB\").build();"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"        NotifyCommand addAliceCommand \u003d new NotifyCommand(alice);"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"        NotifyCommand addBobCommand \u003d new NotifyCommand(bob);"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"        // same object -\u003e returns true"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"        // same values -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"        NotifyCommand addAliceCommandCopy \u003d new NotifyCommand(alice);"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"        // different types -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":"        // null -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":79,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":80,"author":{"gitID":"ewaldhew"},"content":"        // different coin -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"ewaldhew"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":82,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":84,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"ewaldhew"},"content":"     * Generates a new NotifyCommand with the details of the given coin."},{"lineNumber":86,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"ewaldhew"},"content":"    private NotifyCommand getNotifyCommandForCoin(NotificationRule rule, Model model) {"},{"lineNumber":88,"author":{"gitID":"ewaldhew"},"content":"        NotifyCommand command \u003d new NotifyCommand(rule);"},{"lineNumber":89,"author":{"gitID":"ewaldhew"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":90,"author":{"gitID":"ewaldhew"},"content":"        return command;"},{"lineNumber":91,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":93,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"ewaldhew"},"content":"     * A Model stub that always throw a DuplicateRuleException when trying to add a rule."},{"lineNumber":95,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"ewaldhew"},"content":"    private class ModelStubThrowingDuplicateRuleException extends ModelStub {"},{"lineNumber":97,"author":{"gitID":"ewaldhew"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"ewaldhew"},"content":"        public void addRule(Rule rule) throws DuplicateRuleException {"},{"lineNumber":99,"author":{"gitID":"ewaldhew"},"content":"            throw new DuplicateRuleException();"},{"lineNumber":100,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":102,"author":{"gitID":"ewaldhew"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"ewaldhew"},"content":"        public ReadOnlyRuleBook getRuleBook() {"},{"lineNumber":104,"author":{"gitID":"ewaldhew"},"content":"            return new RuleBook();"},{"lineNumber":105,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":108,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"ewaldhew"},"content":"     * A Model stub that always accept the rule being added."},{"lineNumber":110,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"ewaldhew"},"content":"    private class ModelStubAcceptingRuleAdded extends ModelStub {"},{"lineNumber":112,"author":{"gitID":"ewaldhew"},"content":"        final ArrayList\u003cRule\u003e rulesAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":114,"author":{"gitID":"ewaldhew"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"ewaldhew"},"content":"        public void addRule(Rule rule) throws DuplicateRuleException {"},{"lineNumber":116,"author":{"gitID":"ewaldhew"},"content":"            requireNonNull(rule);"},{"lineNumber":117,"author":{"gitID":"ewaldhew"},"content":"            rulesAdded.add(rule);"},{"lineNumber":118,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":120,"author":{"gitID":"ewaldhew"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"ewaldhew"},"content":"        public ReadOnlyRuleBook getRuleBook() {"},{"lineNumber":122,"author":{"gitID":"ewaldhew"},"content":"            return new RuleBook();"},{"lineNumber":123,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":126,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":126}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedCoinTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.storage.XmlAdaptedCoin.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.BTCZ;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class XmlAdaptedCoinTest {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String INVALID_NAME \u003d \"B@TC\";"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String INVALID_TAG \u003d \"#fav\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String VALID_NAME \u003d BTCZ.getCode().toString();"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BTCZ.getTags().stream()"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public void toModelType_validCoinDetails_returnsCoin() throws Exception {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        XmlAdaptedCoin coin \u003d new XmlAdaptedCoin(BTCZ);"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(BTCZ, coin.toModelType());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        XmlAdaptedCoin coin \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new XmlAdaptedCoin(INVALID_NAME, VALID_TAGS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Code.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, coin::toModelType);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        XmlAdaptedCoin coin \u003d new XmlAdaptedCoin(null, VALID_TAGS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName());"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, coin::toModelType);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        XmlAdaptedCoin coin \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                new XmlAdaptedCoin(VALID_NAME, invalidTags);"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        Assert.assertThrows(IllegalValueException.class, coin::toModelType);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":15,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/BuyCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTestUtil.ModelStub;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class BuyCommandTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Amount VALID_AMOUNT \u003d new Amount(\"10.0\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Amount VALID_OTHER_AMOUNT \u003d new Amount(\"3.3\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void constructor_nullTarget_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        new BuyCommand(null, new Amount());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_valueAdded() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ModelStubAcceptingCoinUpdated modelStub \u003d new ModelStubAcceptingCoinUpdated();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Coin validCoin \u003d new CoinBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Coin editedCoin \u003d new Coin(validCoin);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Amount amountToBuy \u003d VALID_AMOUNT;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        modelStub.addCoin(validCoin);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        editedCoin.addTotalAmountBought(amountToBuy);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getBuyCommandForCoin(validCoin, amountToBuy, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(String.format(BuyCommand.MESSAGE_BUY_COIN_SUCCESS, editedCoin), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Coin alice \u003d new CoinBuilder().withName(\"ALC\").build();"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        Coin bob \u003d new CoinBuilder().withName(\"BOS\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        BuyCommand buyAliceCommand \u003d new BuyCommand(new CommandTarget(alice.getCode()), VALID_AMOUNT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        BuyCommand buyBobCommand \u003d new BuyCommand(new CommandTarget(bob.getCode()), VALID_AMOUNT);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(buyAliceCommand.equals(buyAliceCommand));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        BuyCommand buyAliceCommandCopy \u003d new BuyCommand(new CommandTarget(alice.getCode()), VALID_AMOUNT);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(buyAliceCommand.equals(buyAliceCommandCopy));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertFalse(buyAliceCommand.equals(1));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(buyAliceCommand.equals(null));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // different coin -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(buyAliceCommand.equals(buyBobCommand));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same coin but different value -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        buyAliceCommandCopy \u003d new BuyCommand(new CommandTarget(alice.getCode()), VALID_OTHER_AMOUNT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(buyAliceCommand.equals(buyAliceCommandCopy));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Generates a new BuyCommand with the details of the given coin."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private BuyCommand getBuyCommandForCoin(Coin coin, Amount amountToAdd, Model model) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        BuyCommand command \u003d new BuyCommand(new CommandTarget(coin.getCode()), amountToAdd);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the coin being updated."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingCoinUpdated extends ModelStub {"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        final ArrayList\u003cCoin\u003e coinsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"        public void addCoin(Coin coin) throws DuplicateCoinException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            coinsAdded.add(coin);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"        public ObservableList\u003cCoin\u003e getFilteredCoinList() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return FXCollections.observableList(coinsAdded);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public void updateCoin(Coin coin, Coin editedCoin) throws DuplicateCoinException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            requireNonNull(coin);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            coinsAdded.add(coin);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"        public void updateFilteredCoinList(Predicate\u003cCoin\u003e predicate) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public ReadOnlyCoinBook getCoinBook() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new CoinBook();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":7,"-":121}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalRules.getTypicalRuleBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CoinBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.RuleBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        XmlCoinBookStorage addressBookStorage \u003d new XmlCoinBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlRuleBookStorage ruleBookStorage \u003d new XmlRuleBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, ruleBookStorage, userPrefsStorage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":53,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":54,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"    public void coinBookReadSave() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"         * {@link XmlCoinBookStorage} class."},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlCoinBookStorageTest} class."},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook original \u003d getTypicalCoinBook();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        storageManager.saveCoinBook(original);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ReadOnlyCoinBook retrieved \u003d storageManager.readCoinBook().get();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(original, new CoinBook(retrieved));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"    public void getCoinBookFilePath() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getCoinBookFilePath());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"    public void handleCoinBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlCoinBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                                             new XmlRuleBookStorage(\"dummy\"),"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        storage.handleCoinBookChangedEvent(new CoinBookChangedEvent(new CoinBook()));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void ruleBookReadSave() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        RuleBook original \u003d getTypicalRuleBook();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        storageManager.saveRuleBook(original);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        ReadOnlyRuleBook retrieved \u003d storageManager.readRuleBook().get();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(original, new RuleBook(retrieved));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void getRuleBookFilePath() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getRuleBookFilePath());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleRuleBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that throws an exception when the save method is called"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlCoinBookStorage(\"dummy\"),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                                             new XmlRuleBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        storage.handleRuleBookChangedEvent(new RuleBookChangedEvent(new RuleBook()));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    class XmlCoinBookStorageExceptionThrowingStub extends XmlCoinBookStorage {"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public XmlCoinBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public void saveCoinBook(ReadOnlyCoinBook addressBook, String filePath) throws IOException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    class XmlRuleBookStorageExceptionThrowingStub extends XmlRuleBookStorage {"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public XmlRuleBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public void saveRuleBook(ReadOnlyRuleBook ruleBook, String filePath) throws IOException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":7,"-":139}},{"path":"src/test/java/seedu/address/storage/XmlSerializableCoinBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.TypicalCoins;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlSerializableCoinBookTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableCoinBookTest/\");"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private static final File TYPICAL_COINS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalCoinsCoinBook.xml\");"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private static final File INVALID_COIN_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidCoinCoinBook.xml\");"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagCoinBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public void toModelType_typicalCoinsFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        XmlSerializableCoinBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_COINS_FILE,"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                XmlSerializableCoinBook.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        CoinBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook typicalCoinsAddressBook \u003d TypicalCoins.getTypicalCoinBook();"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(addressBookFromFile, typicalCoinsAddressBook);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    public void toModelType_invalidCoinFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlSerializableCoinBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_COIN_FILE,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                XmlSerializableCoinBook.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlSerializableCoinBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                XmlSerializableCoinBook.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":9,"-":42}},{"path":"src/test/java/seedu/address/storage/XmlCoinBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.HORSE;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.IDT;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlCoinBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlCoinBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    public void readCoinBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        readCoinBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    private java.util.Optional\u003cReadOnlyCoinBook\u003e readCoinBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlCoinBookStorage(filePath).readCoinBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(readCoinBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        readCoinBook(\"NotXmlFormatCoinBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"    public void readCoinBook_invalidCoinCoinBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        readCoinBook(\"invalidCoinCoinBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"    public void readCoinBook_invalidAndValidCoinCoinBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"        readCoinBook(\"invalidAndValidCoinCoinBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"    public void readAndSaveCoinBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempCoinBook.xml\";"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook original \u003d getTypicalCoinBook();"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        XmlCoinBookStorage xmlCoinBookStorage \u003d new XmlCoinBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        xmlCoinBookStorage.saveCoinBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        ReadOnlyCoinBook readBack \u003d xmlCoinBookStorage.readCoinBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new CoinBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        original.addCoin(HORSE);"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"        original.removeCoin(ALIS);"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        xmlCoinBookStorage.saveCoinBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        readBack \u003d xmlCoinBookStorage.readCoinBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new CoinBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        original.addCoin(IDT);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        xmlCoinBookStorage.saveCoinBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        readBack \u003d xmlCoinBookStorage.readCoinBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new CoinBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"    public void saveCoinBook_nullCoinBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"        saveCoinBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"     * Saves {@code coinBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"    private void saveCoinBook(ReadOnlyCoinBook coinBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"            new XmlCoinBookStorage(filePath).saveCoinBook(coinBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":"    public void saveCoinBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"        saveCoinBook(new CoinBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":34,"-":91}},{"path":"src/test/java/seedu/address/logic/commands/SyncCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"import org.apache.http.NameValuePair;"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"import org.apache.http.message.BasicNameValuePair;"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.CommandTestUtil.ModelStub;"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":25,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.coin.Price;"},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":"public class SyncCommandTest {"},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":34,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"laichengyu"},"content":"    public void addAdditionalParams() {"},{"lineNumber":36,"author":{"gitID":"laichengyu"},"content":"        SyncCommand syncCommand \u003d new SyncCommand();"},{"lineNumber":37,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":38,"author":{"gitID":"laichengyu"},"content":"        List\u003cNameValuePair\u003e testParams \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"laichengyu"},"content":"        testParams.add(new BasicNameValuePair(\"fsyms\", \"BTC\"));"},{"lineNumber":40,"author":{"gitID":"laichengyu"},"content":"        testParams.add(new BasicNameValuePair(\"limit\", \"168\"));"},{"lineNumber":41,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":42,"author":{"gitID":"laichengyu"},"content":"        String type \u003d \"historical\";"},{"lineNumber":43,"author":{"gitID":"laichengyu"},"content":"        List\u003cNameValuePair\u003e params \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"laichengyu"},"content":"        params.add(new BasicNameValuePair(\"fsyms\", \"BTC\"));"},{"lineNumber":45,"author":{"gitID":"laichengyu"},"content":"        syncCommand.addAdditionalParams(params, type);"},{"lineNumber":46,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":47,"author":{"gitID":"laichengyu"},"content":"        assertEquals(testParams, params);"},{"lineNumber":48,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":50,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"laichengyu"},"content":"    public void execute_throwsDuplicateCoinException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"laichengyu"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateCoinException();"},{"lineNumber":53,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":54,"author":{"gitID":"laichengyu"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":55,"author":{"gitID":"laichengyu"},"content":"        getSyncCommand(modelStub).execute();"},{"lineNumber":56,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":58,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"laichengyu"},"content":"    public void execute_throwsCoinNotFoundException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"laichengyu"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingCoinNotFoundException();"},{"lineNumber":61,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":62,"author":{"gitID":"laichengyu"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":63,"author":{"gitID":"laichengyu"},"content":"        getSyncCommand(modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":66,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"laichengyu"},"content":"     * Generates a new SyncCommand."},{"lineNumber":68,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"laichengyu"},"content":"    private SyncCommand getSyncCommand(Model model) {"},{"lineNumber":70,"author":{"gitID":"laichengyu"},"content":"        SyncCommand command \u003d new SyncCommand();"},{"lineNumber":71,"author":{"gitID":"laichengyu"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":72,"author":{"gitID":"laichengyu"},"content":"        return command;"},{"lineNumber":73,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":75,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"laichengyu"},"content":"     * A Model stub that always throw a DuplicateCoinException when trying to execute sync."},{"lineNumber":77,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"laichengyu"},"content":"    private class ModelStubThrowingDuplicateCoinException extends ModelStub {"},{"lineNumber":79,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":80,"author":{"gitID":"laichengyu"},"content":"        public void syncAll(HashMap\u003cString, Price\u003e newPriceMetrics) throws DuplicateCoinException {"},{"lineNumber":81,"author":{"gitID":"laichengyu"},"content":"            throw new DuplicateCoinException();"},{"lineNumber":82,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":84,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":85,"author":{"gitID":"laichengyu"},"content":"        public ReadOnlyCoinBook getCoinBook() {"},{"lineNumber":86,"author":{"gitID":"laichengyu"},"content":"            return new CoinBook();"},{"lineNumber":87,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":89,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":90,"author":{"gitID":"laichengyu"},"content":"        public List\u003cString\u003e getCodeList() {"},{"lineNumber":91,"author":{"gitID":"laichengyu"},"content":"            return Arrays.asList(\"BTC\", \"ETH\", \"DOGE\");"},{"lineNumber":92,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":95,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"laichengyu"},"content":"     * A Model stub that always throw a DuplicateCoinException when trying to execute sync."},{"lineNumber":97,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"laichengyu"},"content":"    private class ModelStubThrowingCoinNotFoundException extends ModelStub {"},{"lineNumber":99,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"laichengyu"},"content":"        public void syncAll(HashMap\u003cString, Price\u003e newPriceMetrics) throws CoinNotFoundException {"},{"lineNumber":101,"author":{"gitID":"laichengyu"},"content":"            throw new CoinNotFoundException();"},{"lineNumber":102,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":104,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"laichengyu"},"content":"        public ReadOnlyCoinBook getCoinBook() {"},{"lineNumber":106,"author":{"gitID":"laichengyu"},"content":"            return new CoinBook();"},{"lineNumber":107,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":109,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"laichengyu"},"content":"        public List\u003cString\u003e getCodeList() {"},{"lineNumber":111,"author":{"gitID":"laichengyu"},"content":"            return Arrays.asList(\"BTC\", \"ETH\", \"DOGE\");"},{"lineNumber":112,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"laichengyu"},"content":"}"}],"authorContributionMap":{"laichengyu":114}},{"path":"src/test/java/seedu/address/model/UniqueCoinListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.UniqueCoinList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"public class UniqueCoinListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"        UniqueCoinList uniqueCoinList \u003d new UniqueCoinList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"        uniqueCoinList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"-":15}},{"path":"src/test/java/seedu/address/model/coin/CoinTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.coin;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotSame;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CoinTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_deepCopy() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        Coin originalCoin \u003d new CoinBuilder().build();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        Coin copiedCoin \u003d new Coin(originalCoin);"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertTrue(originalCoin.equals(copiedCoin));"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // modify values to ensure deep copy"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        copiedCoin.addTotalAmountBought(new Amount(\"12.0\"));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        copiedCoin.addTotalAmountSold(new Amount(\"9.0\"));"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertNotSame(originalCoin.getTags(), copiedCoin.getTags());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertNotEquals(originalCoin.getTotalAmountBought(), copiedCoin.getTotalAmountBought());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertNotEquals(originalCoin.getTotalAmountSold(), copiedCoin.getTotalAmountSold());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotEquals(originalCoin.getTotalDollarsBought(), copiedCoin.getTotalDollarsBought());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertNotEquals(originalCoin.getTotalDollarsSold(), copiedCoin.getTotalDollarsSold());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":29}},{"path":"src/test/java/seedu/address/model/coin/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        // different coin -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(predicate.test(new CoinBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(predicate.test(new CoinBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(predicate.test(new CoinBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(predicate.test(new CoinBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(predicate.test(new CoinBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(predicate.test(new CoinBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(predicate.test(new CoinBuilder().withName(\"Alice\").build()));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":10,"-":64}},{"path":"src/test/java/seedu/address/model/coin/CodeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class CodeTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Code(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Code(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Code.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Code.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Code.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Code.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(Code.isValidName(\"btc*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(Code.isValidName(\"btc\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(Code.isValidName(\"BTC\")); // with capital letters"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        assertTrue(Code.isValidName(\"some random coin name or misc account\")); // long names"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":5,"-":34}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.BTCZ;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalRules.CAS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalRules.GEO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.DuplicateRuleException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.RuleNotFoundException;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalRules;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public void getFilteredCoinList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        modelManager.getFilteredCoinList().remove(0);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void getRuleList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        modelManager.getRuleList().remove(0);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void manageRules() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        model.addRule(TypicalRules.ALIS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        model.deleteRule(TypicalRules.ALIS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(model.getRuleList().size(), 0);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        model.addRule(TypicalRules.ALIS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        model.updateRule(TypicalRules.ALIS, GEO);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(model.getRuleList().size(), 1);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(model.getRuleList().get(0).equals(GEO));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(RuleNotFoundException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        model.deleteRule(TypicalRules.ALIS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(DuplicateRuleException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        model.addRule(TypicalRules.ALIS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(RuleNotFoundException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        model.updateRule(TypicalRules.ALIS, CAS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(DuplicateRuleException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        model.updateRule(GEO, GEO);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook addressBook \u003d new CoinBookBuilder().withCoin(ALIS).withCoin(BTCZ).build();"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook differentCoinBook \u003d new CoinBook();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentCoinBook, userPrefs)));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"        String[] keywords \u003d ALIS.getCode().fullName.split(\"\\\\s+\");"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"        modelManager.updateFilteredCoinList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        modelManager.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        differentUserPrefs.setCoinBookName(\"differentName\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":13,"-":91}},{"path":"src/test/java/seedu/address/model/CoinBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.ALIS;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.getTypicalCoinBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CoinBookTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    private final CoinBook coinBook \u003d new CoinBook();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(Collections.emptyList(), coinBook.getCoinList());"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(Collections.emptyList(), coinBook.getTagList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        coinBook.resetData(null);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    public void resetData_withValidReadOnlyCoinBook_replacesData() {"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        CoinBook newData \u003d getTypicalCoinBook();"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        coinBook.resetData(newData);"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        assertEquals(newData, coinBook);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    public void resetData_withDuplicateCoins_throwsAssertionError() {"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        // Repeat ALIS twice"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoin\u003e newCoins \u003d Arrays.asList(ALIS, ALIS);"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALIS.getTags());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        CoinBookStub newData \u003d new CoinBookStub(newCoins, newTags);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        coinBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    public void getCoinList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        coinBook.getCoinList().remove(0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        coinBook.getTagList().remove(0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyCoinBook whose coins and tags lists can violate interface constraints."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private static class CoinBookStub implements ReadOnlyCoinBook {"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        private final ObservableList\u003cCoin\u003e coins \u003d FXCollections.observableArrayList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        CoinBookStub(Collection\u003cCoin\u003e coins, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"            this.coins.setAll(coins);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        public ObservableList\u003cCoin\u003e getCoinList() {"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"            return coins;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"laichengyu"},"content":"        //@@author laichengyu"},{"lineNumber":95,"author":{"gitID":"laichengyu"},"content":"        @Override"},{"lineNumber":96,"author":{"gitID":"laichengyu"},"content":"        public List\u003cString\u003e getCodeList() {"},{"lineNumber":97,"author":{"gitID":"laichengyu"},"content":"            return Collections.unmodifiableList(coins.stream()"},{"lineNumber":98,"author":{"gitID":"laichengyu"},"content":"                    .map(coin -\u003e coin.getCode().toString())"},{"lineNumber":99,"author":{"gitID":"laichengyu"},"content":"                    .collect(Collectors.toList()));"},{"lineNumber":100,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"laichengyu"},"content":"        //@@author"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":23,"laichengyu":8,"-":73}},{"path":"src/test/java/seedu/address/logic/commands/BuyCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TARGET;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.CoinUtil.getBuyCommand;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.DECIMAL_STRING;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.STRING_ONE_STRING;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TypicalCoins.KEYWORD_MATCHING_BTC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalTargets.INDEX_FIRST_COIN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.testutil.CoinBuilder;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"import systemtests.CoinBookSystemTest;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"public class BuyCommandSystemTest extends CoinBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public void buy() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: buy 9.99, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"         * -\u003e bought 9.00"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        Index index \u003d INDEX_FIRST_COIN;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        String command \u003d \" \" + getBuyCommand(index) + \" \";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Coin editedCoin \u003d new CoinBuilder()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .withName(model.getFilteredCoinList().get(index.getZeroBased()).getCode().toString())"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"                .withAmountBought(ParserUtil.parseAmount(DECIMAL_STRING)).build();"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, editedCoin);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: undo the last buy action -\u003e last bought coin amount is reverted to previous amount held */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: redo the last buy action -\u003e last bought coin amount held is restored */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateCoin("},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"                getModel().getFilteredCoinList().get(INDEX_FIRST_COIN.getZeroBased()), editedCoin);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered coin list, edit index within bounds of coin book and coin list -\u003e edited */"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_COIN;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCoinList().size());"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        command \u003d getBuyCommand(index);"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coinToEdit \u003d getModel().getFilteredCoinList().get(index.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        editedCoin \u003d new CoinBuilder(coinToEdit).withAmountBought(ParserUtil.parseAmount(DECIMAL_STRING)).build();"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, index, editedCoin);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: filtered coin list, buy index within bounds of coin book but out of bounds of coin list"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        showCoinsWithName(KEYWORD_MATCHING_BTC);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getCoinBook().getCoinList().size();"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(getBuyCommand(Index.fromOneBased(invalidIndex)), MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        /* --------------------------------- Performing invalid buy operation -------------------------------------- */"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(BuyCommand.COMMAND_WORD + \"  \" + PREFIX_AMOUNT + \" \" + DECIMAL_STRING,"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(BuyCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased(),"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: invalid number (TESTINGONE) -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(BuyCommand.COMMAND_WORD + \" \" + INDEX_FIRST_COIN.getOneBased() + \" \""},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"                + PREFIX_AMOUNT + STRING_ONE_STRING,"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(BuyCommand.COMMAND_WORD + \" 0 \" + PREFIX_AMOUNT + DECIMAL_STRING,"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(BuyCommand.COMMAND_WORD + \" -1 \" + PREFIX_AMOUNT + DECIMAL_STRING,"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        invalidIndex \u003d model.getFilteredCoinList().size() + 1;"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandFailure(BuyCommand.COMMAND_WORD + \" \" + Integer.toString(invalidIndex) + \" \""},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"                        + PREFIX_AMOUNT + DECIMAL_STRING,"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"                MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"     * 2. Asserts that the model related components are updated to reflect the coin at index {@code toEdit} being"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"     * updated to values specified {@code editedCoin}.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"     * @see BuyCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Coin editedCoin,"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"            expectedModel.updateCoin("},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"                    expectedModel.getFilteredCoinList().get(toEdit.getZeroBased()), editedCoin);"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"            expectedModel.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException | CoinNotFoundException e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"                    \"editedCoin is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"                String.format(BuyCommand.MESSAGE_BUY_COIN_SUCCESS, editedCoin), expectedSelectedCardIndex);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Coin, Index)} except that"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":"     * @see BuyCommandSystemTest#assertCommandSuccess(String, Index, Coin, Index)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"Eldon-Chung"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Coin editedCoin) {"},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":"        assertCommandSuccess(command, toEdit, editedCoin, null);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"     * @see BuyCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":164,"author":{"gitID":"Eldon-Chung"},"content":"        expectedModel.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":183,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"Eldon-Chung"},"content":"     * @see CoinBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":93,"-":102}},{"path":"src/test/java/seedu/address/testutil/CoinBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Price;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * A utility class to help with building Coin objects."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"XTC\";"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String DEFAULT_TAGS \u003d \"favs\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final Price DEFAULT_PRICE \u003d new Price();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final Amount DEFAULT_AMOUNT_SOLD \u003d new Amount();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final Amount DEFAULT_AMOUNT_BOUGHT \u003d new Amount();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Code code;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    private Price price;"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    private Amount amountSold;"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    private Amount amountBought;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBuilder() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        code \u003d new Code(DEFAULT_NAME);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        price \u003d DEFAULT_PRICE;"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        amountSold \u003d DEFAULT_AMOUNT_SOLD;"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        amountBought \u003d DEFAULT_AMOUNT_BOUGHT;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"     * Initializes the CoinBuilder with the data of {@code coinToCopy}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBuilder(Coin coinToCopy) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        code \u003d coinToCopy.getCode();"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        tags \u003d new HashSet\u003c\u003e(coinToCopy.getTags());"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        price \u003d coinToCopy.getPrice();"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        amountSold \u003d coinToCopy.getTotalAmountSold();"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        amountBought \u003d coinToCopy.getTotalAmountBought();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"     * Sets the {@code Name} of the {@code Coin} that we are building."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBuilder withName(String name) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.code \u003d new Code(name);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Coin} that we are building."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBuilder withTags(String ... tags) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author Eldon-Chung"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"     * Sets the {@code price} of the {@code Coin} that we are building."},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBuilder withPrice(Price price) {"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        this.price \u003d price;"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"     * Sets the {@code totalAmountSold} of the {@code Coin} that we are building."},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBuilder withAmountSold(Amount amountSold) {"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        this.amountSold \u003d amountSold;"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"     * Sets the {@code totalAmountSold} of the {@code Coin} that we are building."},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBuilder withAmountBought(Amount amountBought) {"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        this.amountBought \u003d amountBought;"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"     * @return a {@Coin} with the set code, tags, and amount sold and bought."},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    public Coin build() {"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        Coin coin \u003d new Coin(code, tags);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        coin \u003d new Coin(coin, price);"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        coin.addTotalAmountBought(amountBought);"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        coin.addTotalAmountSold(amountSold);"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        return coin;"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":59,"-":43}},{"path":"src/test/java/seedu/address/testutil/EditCoinDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand.EditCoinDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":" * A utility class to help with building EditCoinDescriptor objects."},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"public class EditCoinDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    private EditCoinDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public EditCoinDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"        descriptor \u003d new EditCoinDescriptor();"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public EditCoinDescriptorBuilder(EditCoinDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        this.descriptor \u003d new EditCoinDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns an {@code EditCoinDescriptor} with fields containing {@code coin}\u0027s details"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public EditCoinDescriptorBuilder(Coin coin) {"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        descriptor \u003d new EditCoinDescriptor();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        descriptor.setCode(coin.getCode());"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        descriptor.setTags(coin.getTags());"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"     * Sets the {@code Name} of the {@code EditCoinDescriptor} that we are building."},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    public EditCoinDescriptorBuilder withName(String name) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setCode(new Code(name));"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCoinDescriptor}"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"     * that we are building."},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    public EditCoinDescriptorBuilder withTags(String... tags) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"    public EditCoinDescriptor build() {"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        return descriptor;"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":43,"-":15}},{"path":"src/test/java/seedu/address/testutil/TypicalRules.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.DuplicateRuleException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Rule} objects to be used in tests."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TypicalRules {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Rule ALIS \u003d new NotificationRuleBuilder().withValue(\"c/ALIS\").build();"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Rule BTC \u003d new NotificationRuleBuilder().withValue(\"c/BTC\").build();"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Rule CAS \u003d new NotificationRuleBuilder().withValue(\"c/CAS\").build();"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Rule DADI \u003d new NotificationRuleBuilder().withValue(\"c/DADI\").build();"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Rule ELIX \u003d new NotificationRuleBuilder().withValue(\"c/ELIX\").build();"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Rule FIRE \u003d new NotificationRuleBuilder().withValue(\"c/FIRE\").build();"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Rule GEO \u003d new NotificationRuleBuilder().withValue(\"c/GEO\").build();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final Rule EQUAL \u003d new NotificationRuleBuilder().withValue(\"p/\u003d10\").build();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final Rule INCR \u003d new NotificationRuleBuilder().withValue(\"p/+\u003e1\").build();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private TypicalRules() {} // prevents instantiation"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code RuleBook} with all the typical rules."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static RuleBook getTypicalRuleBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        RuleBook ab \u003d new RuleBook();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        for (Rule rule : getTypicalRules()) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                ab.addRule(rule);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            } catch (DuplicateRuleException e) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static List\u003cRule\u003e getTypicalRules() {"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALIS, BTC, CAS, DADI, ELIX, FIRE, GEO));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":8,"-":40}},{"path":"src/test/java/seedu/address/storage/XmlRuleBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalRules.ALIS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalRules.EQUAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalRules.INCR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalRules.getTypicalRuleBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlRuleBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlRuleBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readRuleBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readRuleBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyRuleBook\u003e readRuleBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlRuleBookStorage(filePath).readRuleBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readRuleBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readRuleBook(\"NotXmlFormatRuleBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readRuleBook_invalidRuleRuleBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readRuleBook(\"invalidRuleRuleBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readRuleBook_invalidAndValidRuleRuleBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readRuleBook(\"invalidAndValidRuleRuleBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveRuleBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempRuleBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        RuleBook original \u003d getTypicalRuleBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlRuleBookStorage xmlRuleBookStorage \u003d new XmlRuleBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlRuleBookStorage.saveRuleBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyRuleBook readBack \u003d xmlRuleBookStorage.readRuleBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new RuleBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addRule(EQUAL);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removeRule(ALIS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlRuleBookStorage.saveRuleBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlRuleBookStorage.readRuleBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new RuleBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addRule(INCR);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlRuleBookStorage.saveRuleBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlRuleBookStorage.readRuleBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new RuleBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveRuleBook_nullRuleBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveRuleBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"     * Saves {@code coinBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveRuleBook(ReadOnlyRuleBook coinBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlRuleBookStorage(filePath).saveRuleBook(coinBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveRuleBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveRuleBook(new RuleBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":124}},{"path":"src/test/java/seedu/address/testutil/TypicalCoins.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMB;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOS;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FAV;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":" * A utility class containing a list of {@code Coin} objects to be used in tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"public class TypicalCoins {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin ALIS \u003d new CoinBuilder().withName(\"ALIS\")"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(\"favs\").build();"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin BTCZ \u003d new CoinBuilder().withName(\"BTCZ\")"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(\"common\", \"fav\").build();"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin CAS \u003d new CoinBuilder().withName(\"CAS\").build();"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin DADI \u003d new CoinBuilder().withName(\"DADI\").build();"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin ELIX \u003d new CoinBuilder().withName(\"ELIX\").build();"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin FIRE \u003d new CoinBuilder().withName(\"FIRE\").build();"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin GEO \u003d new CoinBuilder().withName(\"GEO\").build();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin HORSE \u003d new CoinBuilder().withName(\"HORSE\").build();"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin IDT \u003d new CoinBuilder().withName(\"IDT\").build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    // Manually added - Coin\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin AMB \u003d new CoinBuilder().withName(VALID_NAME_AMB)"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(VALID_TAG_FAV).build();"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin BOS \u003d new CoinBuilder().withName(VALID_NAME_BOS)"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(VALID_TAG_HOT, VALID_TAG_FAV)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String KEYWORD_MATCHING_BTC \u003d \"BT\"; // A keyword that matches MEIER"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"    private TypicalCoins() {} // prevents instantiation"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Returns an {@code CoinBook} with all the typical coins."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    public static CoinBook getTypicalCoinBook() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CoinBook ab \u003d new CoinBook();"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        for (Coin coin : getTypicalCoins()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"                ab.addCoin(coin);"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"            } catch (DuplicateCoinException e) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    public static List\u003cCoin\u003e getTypicalCoins() {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALIS, BTCZ, CAS, DADI, ELIX, FIRE, GEO));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":32,"-":32}},{"path":"src/test/java/seedu/address/testutil/CoinUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.testutil.TestUtil.DECIMAL_STRING;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BuyCommand;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.SellCommand;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" * A utility class for Coin."},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinUtil {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author Eldon-Chung"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns a sell command string for buy the {@code coin}."},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public static String getSellCommand(Index index) {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        return SellCommand.COMMAND_WORD + \" \" + index.getOneBased() + \"  \" + PREFIX_AMOUNT + \" \" + DECIMAL_STRING;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns a buy command string for buy the {@code coin}."},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public static String getBuyCommand(Index index) {"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        return BuyCommand.COMMAND_WORD + \" \" + index.getOneBased() + \"  \" + PREFIX_AMOUNT + \" \" + DECIMAL_STRING;"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns an add command string for adding the {@code coin}."},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    public static String getAddCommand(Coin coin) {"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getCoinDetails(coin);"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns an add aliased command string for adding the {@code coin}."},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"    public static String getAddAliasCommand(Coin coin) {"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getCoinDetails(coin);"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the part of command string for the given {@code coin}\u0027s details."},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    public static String getCoinDetails(Coin coin) {"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        sb.append(PREFIX_CODE + coin.getCode().fullName + \" \");"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        coin.getTags().stream().forEach("},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        );"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        return sb.toString();"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code coin}\u0027s tags."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static String getCoinTags(Coin coin) {"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        coin.getTags().stream().forEach("},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":60,"-":10}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.core.CoinSubredditList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.Token;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author Eldon-Chung"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"     * Tokens and strings for ArgumentTokenizer, Parsing and TokenStack testing."},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String AND_STRING \u003d \" AND \";"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token AND_TOKEN \u003d new Token(TokenType.BINARYBOOL, AND_STRING);"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String OR_STRING \u003d \" OR \";"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token OR_TOKEN \u003d new Token(TokenType.BINARYBOOL, OR_STRING);"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String NOT_STRING \u003d \"NOT \";"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token NOT_TOKEN \u003d new Token(TokenType.UNARYBOOL, NOT_STRING);"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String LEFT_PAREN_STRING \u003d \"(\";"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token LEFT_PAREN_TOKEN \u003d new Token(TokenType.LEFTPARENTHESES, LEFT_PAREN_STRING);"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String RIGHT_PAREN_STRING \u003d \")\";"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token RIGHT_PAREN_TOKEN \u003d new Token(TokenType.RIGHTPARENTHESES, RIGHT_PAREN_STRING);"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String GREATER_STRING \u003d \"\u003e\";"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token GREATER_TOKEN \u003d new Token(TokenType.COMPARATOR, GREATER_STRING);"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String LESS_STRING \u003d \"\u003c\";"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token LESS_TOKEN \u003d new Token(TokenType.COMPARATOR, LESS_STRING);"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String EQUALS_STRING \u003d \"\u003d\";"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token EQUALS_TOKEN \u003d new Token(TokenType.COMPARATOR, EQUALS_STRING);"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_AMOUNT_STRING \u003d \"a/\";"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_AMOUNT_TOKEN \u003d new Token(TokenType.PREFIX_AMOUNT, PREFIX_AMOUNT_STRING);"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_BOUGHT_STRING \u003d \"b/\";"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_BOUGHT_TOKEN \u003d new Token(TokenType.PREFIX_BOUGHT, PREFIX_BOUGHT_STRING);"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_CODE_STRING \u003d \"c/\";"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_CODE_TOKEN \u003d new Token(TokenType.PREFIX_CODE, PREFIX_CODE_STRING);"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_HELD_STRING \u003d \"h/\";"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_HELD_TOKEN \u003d new Token(TokenType.PREFIX_HELD, PREFIX_HELD_STRING);"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_MADE_STRING \u003d \"m/\";"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_MADE_TOKEN \u003d new Token(TokenType.PREFIX_MADE, PREFIX_MADE_STRING);"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_NAME_STRING \u003d \"n/\";"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_NAME_TOKEN \u003d new Token(TokenType.PREFIX_NAME, PREFIX_NAME_STRING);"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_PRICE_STRING \u003d \"p/\";"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_PRICE_TOKEN \u003d new Token(TokenType.PREFIX_PRICE, PREFIX_PRICE_STRING);"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_PRICE_RISE_STRING \u003d \"p/+\";"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_PRICE_RISE_TOKEN \u003d"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"            new Token(TokenType.PREFIX_PRICE_RISE, PREFIX_PRICE_RISE_STRING);"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_PRICE_FALL_STRING \u003d \"p/-\";"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_PRICE_FALL_TOKEN \u003d"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"            new Token(TokenType.PREFIX_PRICE_FALL, PREFIX_PRICE_FALL_STRING);"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_SOLD_STRING \u003d \"s/\";"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_SOLD_TOKEN \u003d new Token(TokenType.PREFIX_SOLD, PREFIX_SOLD_STRING);"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_TAG_STRING \u003d \"t/\";"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_TAG_TOKEN \u003d new Token(TokenType.PREFIX_TAG, PREFIX_TAG_STRING);"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_WORTH_STRING \u003d \"w/\";"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_WORTH_TOKEN \u003d new Token(TokenType.PREFIX_WORTH, PREFIX_WORTH_STRING);"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_WORTH_RISE_STRING \u003d \"w/+\";"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_WORTH_RISE_TOKEN \u003d"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"            new Token(TokenType.PREFIX_WORTH_RISE, PREFIX_WORTH_RISE_STRING);"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String PREFIX_WORTH_FALL_STRING \u003d \"w/-\";"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token PREFIX_WORTH_FALL_TOKEN \u003d"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"            new Token(TokenType.PREFIX_WORTH_FALL, PREFIX_WORTH_FALL_STRING);"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String NUM_STRING \u003d \"999\";"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token NUM_TOKEN \u003d new Token(TokenType.NUM, NUM_STRING);"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String DECIMAL_STRING \u003d \"9.99\";"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token DECIMAL_TOKEN \u003d new Token(TokenType.DECIMAL, DECIMAL_STRING);"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String STRING_ONE_STRING \u003d \"TESTINGONE\";"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token STRING_ONE_TOKEN \u003d new Token(TokenType.STRING, STRING_ONE_STRING);"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String STRING_TWO_STRING \u003d \"TESTINGTWO\";"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token STRING_TWO_TOKEN \u003d new Token(TokenType.STRING, STRING_TWO_STRING);"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String STRING_THREE_STRING \u003d \"TESTINGTHREE\";"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token STRING_THREE_TOKEN \u003d new Token(TokenType.STRING, STRING_THREE_STRING);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String SLASH_STRING \u003d \"/\";"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token SLASH_TOKEN \u003d new Token(TokenType.SLASH, SLASH_STRING);"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token EOF_TOKEN \u003d new Token(TokenType.EOF, \"\");"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Token WHITESPACE_TOKEN \u003d new Token(TokenType.WHITESPACE, \" \");"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"     * Tokens with all possible combinations of 3 tags, for truth table testing when evaluating composed tag conditions."},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin COIN_0 \u003d new CoinBuilder().withName(\"COIN ZERO\")"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags().build();"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin COIN_1 \u003d new CoinBuilder().withName(\"COIN ONE\")"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(STRING_THREE_STRING).build();"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin COIN_2 \u003d new CoinBuilder().withName(\"COIN TWO\")"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(STRING_TWO_STRING).build();"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin COIN_3 \u003d new CoinBuilder().withName(\"COIN THREE\")"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(STRING_TWO_STRING, STRING_THREE_STRING).build();"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin COIN_4 \u003d new CoinBuilder().withName(\"COIN FOUR\")"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(STRING_ONE_STRING).build();"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin COIN_5 \u003d new CoinBuilder().withName(\"COIN FIVE\")"},{"lineNumber":115,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(STRING_ONE_STRING, STRING_THREE_STRING).build();"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin COIN_6 \u003d new CoinBuilder().withName(\"COIN SIX\")"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(STRING_ONE_STRING, STRING_TWO_STRING).build();"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Coin COIN_7 \u003d new CoinBuilder().withName(\"COIN SEVEN\")"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":"            .withTags(STRING_ONE_STRING, STRING_TWO_STRING, STRING_THREE_STRING).build();"},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the middle index of the coin in the {@code model}\u0027s coin list."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getCoinBook().getCoinList().size() / 2);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the last index of the coin in the {@code model}\u0027s coin list."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getCoinBook().getCoinList().size());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the coin in the {@code model}\u0027s coin list at {@code index}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"Eldon-Chung"},"content":"    public static Coin getCoin(Model model, Index index) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return model.getCoinBook().getCoinList().get(index.getZeroBased());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"     * Generates a new {@code successMessage} based on the {@code coin}."},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"    public static String getAddCommandSuccessMessage(Coin coin) {"},{"lineNumber":164,"author":{"gitID":"Eldon-Chung"},"content":"        return String.format(AddCommand.MESSAGE_SUCCESS"},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":"                + (CoinSubredditList.isRecognized(coin) ? \"\" : AddCommand.MESSAGE_COIN_CODE_NOT_REGISTERED), coin);"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":117,"-":50}},{"path":"src/test/java/seedu/address/MainAppTest.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":"public class MainAppTest {"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"    public void isMainApp() {"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"        MainApp mainApp \u003d new MainApp();"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":"        assertFalse(mainApp.isTest);"},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":"}"}],"authorContributionMap":{"laichengyu":16}},{"path":"src/test/java/seedu/address/testutil/TypicalTargets.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class TypicalTargets {"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Index INDEX_FIRST_COIN \u003d Index.fromOneBased(1);"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Index INDEX_SECOND_COIN \u003d Index.fromOneBased(2);"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"    public static final Index INDEX_THIRD_COIN \u003d Index.fromOneBased(3);"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final CommandTarget TARGET_FIRST_COIN \u003d new CommandTarget(INDEX_FIRST_COIN);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final CommandTarget TARGET_SECOND_COIN \u003d new CommandTarget(INDEX_SECOND_COIN);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final CommandTarget TARGET_THIRD_COIN \u003d new CommandTarget(INDEX_THIRD_COIN);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":3,"-":14}},{"path":"src/test/java/guitests/guihandles/BrowserWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":" * A handle to the {@code BrowserWindow} of the application."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"public class BrowserWindowHandle extends StageHandle {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String HELP_WINDOW_TITLE \u003d \"Help\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String HELP_WINDOW_BROWSER_ID \u003d \"#browser\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    public BrowserWindowHandle(Stage browserWindowStage) {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"        super(browserWindowStage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns true if a help window is currently present in the application."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static boolean isWindowPresent() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(HELP_WINDOW_BROWSER_ID));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"-":30}},{"path":"src/test/java/seedu/address/testutil/CoinBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":" * A utility class to help with building Coinbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":" *     {@code CoinBook ab \u003d new CoinBookBuilder().withCoin(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    private CoinBook coinBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"        coinBook \u003d new CoinBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBookBuilder(CoinBook coinBook) {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        this.coinBook \u003d coinBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Adds a new {@code Coin} to the {@code CoinBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBookBuilder withCoin(Coin coin) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"            coinBook.addCoin(coin);"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException dpe) {"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"            throw new IllegalArgumentException(\"coin is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code CoinBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"            coinBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public CoinBook build() {"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        return coinBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":17,"-":36}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"    private final CoinListPanelHandle coinListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"        coinListPanel \u003d new CoinListPanelHandle(getChildNode(CoinListPanelHandle.COIN_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinListPanelHandle getCoinListPanel() {"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        return coinListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"-":47}},{"path":"src/test/java/guitests/guihandles/MainMenuHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Provides a handle to the main menu of the app."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MENU_BAR_ID \u003d \"#menuBar\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public MainMenuHandle(Node mainMenuNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(mainMenuNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"     * Opens the {@code BrowserWindow} using the menu bar in {@code MainWindow}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingMenu() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        clickOnMenuItemsSequentially(\"Help\", \"F1\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"     * Opens the {@code BrowserWindow} by pressing the shortcut key associated"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * with the menu bar in {@code MainWindow}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingAccelerator() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.F1);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Clicks on {@code menuItems} in order."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void clickOnMenuItemsSequentially(String... menuItems) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":2,"-":37}},{"path":"src/test/java/guitests/guihandles/NotificationsWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import guitests.GuiRobot;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import javafx.stage.Stage;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":" * A handle to the {@code NotificationsWindow} of the application."},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"public class NotificationsWindowHandle extends StageHandle {"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"    public static final String NOTIFICATIONS_WINDOW_TITLE \u003d \"Notifications\";"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"    private static final String NOTIFICATIONS_WINDOW_PANEL_ID \u003d \"#ruleListPanelPlaceholder\";"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"    public NotificationsWindowHandle(Stage stage) {"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"        super(stage);"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"     * Returns true if the window is currently present in the application."},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    public static boolean isWindowPresent() {"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"        return new GuiRobot().isWindowShown(NOTIFICATIONS_WINDOW_TITLE);"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":27}},{"path":"src/test/java/guitests/guihandles/CoinCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":" * Provides a handle to a coin card in the coin list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String CODE_FIELD_ID \u003d \"#code\";"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String AMOUNT_FIELD_ID \u003d \"#amount\";"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String PRICE_FIELD_ID \u003d \"#price\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label codeLabel;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    private final Label amountLabel;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    private final Label priceLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinCardHandle(Node cardNode) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.codeLabel \u003d getChildNode(CODE_FIELD_ID);"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        this.amountLabel \u003d getChildNode(AMOUNT_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        this.priceLabel \u003d getChildNode(PRICE_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return codeLabel.getText();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    public String getAmount() {"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        return amountLabel.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"    public String getPrice() {"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        return priceLabel.getText();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":13,"-":51}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.controlsfx.control.textfield.TextFields;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import impl.org.controlsfx.autocompletion.SuggestionProvider;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":41,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":42,"author":{"gitID":"laichengyu"},"content":"        //@@author laichengyu"},{"lineNumber":43,"author":{"gitID":"laichengyu"},"content":"        SuggestionProvider\u003cString\u003e suggestionProvider \u003d SuggestionProvider.create(CommandList.COMMAND_LIST);"},{"lineNumber":44,"author":{"gitID":"laichengyu"},"content":"        TextFields.bindAutoCompletion(commandTextField, suggestionProvider);"},{"lineNumber":45,"author":{"gitID":"laichengyu"},"content":"        //@@author"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":136,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"laichengyu":4,"-":155}},{"path":"src/main/java/seedu/address/ui/CoinCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":" * An UI component that displays information of a {@code Coin}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String FXML \u003d \"CoinListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String[] TAG_STYLE_CLASSES \u003d {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        \"red\", \"blue\", \"yellow\", \"grey\", \"burlywood\", \"plum\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    };"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CoinBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public final Coin coin;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label code;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    private Label amount;"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    private Label price;"},{"lineNumber":44,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":45,"author":{"gitID":"laichengyu"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"laichengyu"},"content":"    private ImageView icon;"},{"lineNumber":47,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinCard(Coin coin, int displayedIndex) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        this.coin \u003d coin;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        String coinCode \u003d coin.getCode().fullName;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        code.setText(coinCode);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        amount.setText(coin.getCurrentAmountHeld().toString());"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        price.setText(coin.getPrice().toString());"},{"lineNumber":58,"author":{"gitID":"laichengyu"},"content":"        //@@author laichengyu"},{"lineNumber":59,"author":{"gitID":"laichengyu"},"content":"        icon.setImage(IconUtil.getCoinIcon(coinCode));"},{"lineNumber":60,"author":{"gitID":"laichengyu"},"content":"        //@@author"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        coin.getTags().forEach(tag -\u003e newTag(tag));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Create the tag label and add it to the display list."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param tag"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void newTag(Tag tag) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Label label \u003d new Label(tag.tagName);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        label.getStyleClass().add(getLabelColor(tag));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        tags.getChildren().add(label);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Retrieve a color for the specified tag\u0027s label."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @param tag"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @return Label style as a CSS class name string."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private String getLabelColor(Tag tag) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        int choice \u003d Math.abs(tag.tagName.hashCode());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return TAG_STYLE_CLASSES[choice % TAG_STYLE_CLASSES.length];"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        if (!(other instanceof CoinCard)) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        CoinCard card \u003d (CoinCard) other;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 coin.equals(card.coin);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":16,"laichengyu":7,"-":81}},{"path":"src/main/java/seedu/address/ui/BrowserWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":" * Controller for a browser page"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"public class BrowserWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/UserGuide.html\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(BrowserWindow.class);"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Image HELP_ICON \u003d new Image(\"/images/help_icon.png\");"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Image BROWSER_ICON \u003d new Image(\"/images/address_book_32.png\");"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String HELP_TITLE \u003d \"Help\";"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String BROWSER_TITLE \u003d \"Browser\";"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String FXML \u003d \"BrowserWindow.fxml\";"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    private static final int ICON_INDEX \u003d 0;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    private WebView browser;"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"     * Creates a new BrowserWindow."},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"     * @param root Stage to use as the root of the BrowserWindow."},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    public BrowserWindow(Stage root, String url) {"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        super(FXML, root);"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        String loadUrl;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        setBrowserTopBar(url);"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        browser.getEngine().load(getBrowserUrl(url));"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"     * Creates a new BrowserWindow."},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"    public BrowserWindow(String url) {"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        this(new Stage(), url);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Shows the help window."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void show() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        getRoot().show();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"     * Sets the the top bar of the BrowserWindow based on the URL"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"     * @param url input link"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"    private void setBrowserTopBar(String url) {"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        if (url \u003d\u003d USERGUIDE_FILE_PATH) {"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"            this.getRoot().getIcons().add(ICON_INDEX, HELP_ICON);"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"            this.getRoot().setTitle(HELP_TITLE);"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        } else {"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"            this.getRoot().getIcons().add(ICON_INDEX, BROWSER_ICON);"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"            this.getRoot().setTitle(BROWSER_TITLE);"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"     * @param url input link"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"     * @return The URL link that the browser should open"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"    private String getBrowserUrl(String url) {"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        if (url \u003d\u003d USERGUIDE_FILE_PATH) {"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"            return getClass().getResource(USERGUIDE_FILE_PATH).toString();"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"        } else {"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"            return url;"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":59,"-":37}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.core.CoinSubredditList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.events.ui.CoinPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String SUBREDDIT_NOT_FOUND \u003d \"SubredditNotFound.html\";"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String USER_AGENT_STRING \u003d \"Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) \""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"            + \"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Mobile Safari/537.36\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":40,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        browser.getEngine().setUserAgent(USER_AGENT_STRING);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"     * Loads the respective {@code coin} subreddit page. Loads a default page if there is not one"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"     * @param coin specifies the subreddit page to load"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    private void loadCoinPage(Coin coin) {"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        String url;"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        if (CoinSubredditList.isRecognized(coin)) {"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"            url \u003d CoinSubredditList.getRedditUrl(coin);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        } else {"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"            url \u003d MainApp.class.getResource(FXML_FILE_FOLDER + SUBREDDIT_NOT_FOUND).toExternalForm();"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        loadPage(url);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"    private void handleCoinPanelSelectionChangedEvent(CoinPanelSelectionChangedEvent event) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        loadCoinPage(event.getNewSelection().coin);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":22,"-":63}},{"path":"src/test/java/guitests/guihandles/CoinListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.ui.CoinCard;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":" * Provides a handle for {@code CoinListPanel} containing the list of {@code CoinCard}."},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinListPanelHandle extends NodeHandle\u003cListView\u003cCoinCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COIN_LIST_VIEW_ID \u003d \"#coinListView\";"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    private Optional\u003cCoinCard\u003e lastRememberedSelectedCoinCard;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinListPanelHandle(ListView\u003cCoinCard\u003e coinListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"        super(coinListPanelNode);"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns a handle to the selected {@code CoinCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoinCard\u003e coinList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        if (coinList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"            throw new AssertionError(\"Coin list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        return new CoinCardHandle(coinList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoinCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"     * Navigates the listview to display and select the coin."},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    public void navigateToCard(Coin coin) {"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoinCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        Optional\u003cCoinCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.coin.equals(coin)).findFirst();"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"            throw new IllegalArgumentException(\"Coin does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the coin card handle of a coin associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinCardHandle getCoinCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        return getCoinCardHandle(getRootNode().getItems().get(index).coin);"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the {@code CoinCardHandle} of the specified {@code coin} in the list."},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinCardHandle getCoinCardHandle(Coin coin) {"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        Optional\u003cCoinCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"                .filter(card -\u003e card.coin.equals(coin))"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"                .map(card -\u003e new CoinCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Coin does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"     * Selects the {@code CoinCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"     * Remembers the selected {@code CoinCard} in the list."},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"    public void rememberSelectedCoinCard() {"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoinCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"            lastRememberedSelectedCoinCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"            lastRememberedSelectedCoinCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns true if the selected {@code CoinCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code rememberSelectedCoinCard()} call."},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean isSelectedCoinCardChanged() {"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoinCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"            return lastRememberedSelectedCoinCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"            return !lastRememberedSelectedCoinCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"                    || !lastRememberedSelectedCoinCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":77,"-":57}},{"path":"src/main/java/seedu/address/ui/ChartsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"import javafx.fxml.FXML;"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import javafx.scene.chart.CategoryAxis;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import javafx.scene.chart.LineChart;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"import javafx.scene.chart.NumberAxis;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"import javafx.scene.chart.XYChart.Data;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"import javafx.scene.chart.XYChart.Series;"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.ui.CoinPanelSelectionChangedEvent;"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":" * The charts panel used to display graphs"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"public class ChartsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    public static final String FXML \u003d \"ChartsPanel.fxml\";"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ChartsPanel.class);"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"    private CategoryAxis xAxis;"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    private NumberAxis yAxis;"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    private LineChart\u003cString, Double\u003e priceChart;"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"    public ChartsPanel() {"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"     * Adds a new plot to the graph via a coin price"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"     * @param xAxis"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"     * @param yAxis"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"    private void addPlot(List\u003cString\u003e xAxis, List\u003cAmount\u003e yAxis) {"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"        ArrayList\u003cDate\u003e dateList \u003d new ArrayList\u003c\u003e("},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"                xAxis.stream()"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"                .map(str -\u003e new Date(parseTimeStamp(str)))"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"        ArrayList\u003cDouble\u003e priceList \u003d new ArrayList\u003c\u003e("},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"                yAxis.stream()"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"                .map(amount -\u003e Double.valueOf(amount.toString()))"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"        addPlot(dateList, priceList);"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"     * Adds a new plot to the graph"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"    private void addPlot(ArrayList\u003cDate\u003e xAxis, ArrayList\u003cDouble\u003e yAxis) {"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"        Series\u003cString, Double\u003e dataSeries \u003d new Series\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"        populateData(dataSeries, xAxis, yAxis);"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"        priceChart.getData().add(dataSeries);"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"        priceChart.setCreateSymbols(false);"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":"        if (!xAxis.isEmpty()) {"},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":"            calibrateRange(Collections.min(yAxis), Collections.max(yAxis), 5);"},{"lineNumber":79,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":82,"author":{"gitID":"ewaldhew"},"content":"    private long parseTimeStamp(String s) {"},{"lineNumber":83,"author":{"gitID":"ewaldhew"},"content":"        return Long.valueOf(s + \"000\");"},{"lineNumber":84,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":86,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"ewaldhew"},"content":"     * Sets nice values for the chart axis scaling"},{"lineNumber":88,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"ewaldhew"},"content":"    private void calibrateRange(double min, double max, int steps) {"},{"lineNumber":90,"author":{"gitID":"ewaldhew"},"content":"        this.yAxis.setLowerBound(min);"},{"lineNumber":91,"author":{"gitID":"ewaldhew"},"content":"        this.yAxis.setUpperBound(max);"},{"lineNumber":92,"author":{"gitID":"ewaldhew"},"content":"        this.yAxis.setTickUnit((max - min) / (double) steps);"},{"lineNumber":93,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":95,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"ewaldhew"},"content":"     * Adds the data from the provided lists to the data series"},{"lineNumber":97,"author":{"gitID":"ewaldhew"},"content":"     * @param dataSeries"},{"lineNumber":98,"author":{"gitID":"ewaldhew"},"content":"     * @param xAxis"},{"lineNumber":99,"author":{"gitID":"ewaldhew"},"content":"     * @param yAxis"},{"lineNumber":100,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"ewaldhew"},"content":"    private void populateData(Series\u003cString, Double\u003e dataSeries, ArrayList\u003cDate\u003e xAxis, ArrayList\u003cDouble\u003e yAxis) {"},{"lineNumber":102,"author":{"gitID":"ewaldhew"},"content":"        assert (xAxis.size() \u003d\u003d yAxis.size());"},{"lineNumber":103,"author":{"gitID":"ewaldhew"},"content":"        for (int i \u003d 0; i \u003c xAxis.size(); i++) {"},{"lineNumber":104,"author":{"gitID":"ewaldhew"},"content":"            final String date \u003d new SimpleDateFormat(\"dd MMM, HHmm\").format(xAxis.get(i));"},{"lineNumber":105,"author":{"gitID":"ewaldhew"},"content":"            dataSeries.getData().add(new Data\u003c\u003e(date, yAxis.get(i)));"},{"lineNumber":106,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":109,"author":{"gitID":"ewaldhew"},"content":"    private void clearData() {"},{"lineNumber":110,"author":{"gitID":"ewaldhew"},"content":"        priceChart.getData().clear();"},{"lineNumber":111,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":113,"author":{"gitID":"ewaldhew"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitID":"ewaldhew"},"content":"    private void handleCoinPanelSelectionChangedEvent(CoinPanelSelectionChangedEvent event) {"},{"lineNumber":115,"author":{"gitID":"ewaldhew"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":116,"author":{"gitID":"ewaldhew"},"content":"        clearData();"},{"lineNumber":117,"author":{"gitID":"ewaldhew"},"content":"        addPlot(event.getNewSelection().coin.getPrice().getHistoricalTimeStamps(),"},{"lineNumber":118,"author":{"gitID":"ewaldhew"},"content":"                event.getNewSelection().coin.getPrice().getHistoricalPrices());"},{"lineNumber":119,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":120}},{"path":"src/main/java/seedu/address/ui/IconUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.AppUtil;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Utility class to get icons for popular coins"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class IconUtil {"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":"    public static final String ICON_BASE_FILE_PATH \u003d \"/images/coin_icons/\";"},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"    public static String getCoinFilePath(String code) {"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"        return ICON_BASE_FILE_PATH + code + \".png\";"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":"    public static Image getCoinIcon(String coinCode) {"},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":"        try {"},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":"            return AppUtil.getImage(getCoinFilePath(coinCode));"},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"            return AppUtil.getImage(getCoinFilePath(\"empty\"));"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"laichengyu":14,"-":11}},{"path":"src/main/java/seedu/address/ui/CoinListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.events.ui.CoinPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":" * Panel containing the list of coins."},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String FXML \u003d \"CoinListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CoinListPanel.class);"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    private ListView\u003cCoinCard\u003e coinListView;"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinListPanel(ObservableList\u003cCoin\u003e coinList) {"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        setConnections(coinList);"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    private void setConnections(ObservableList\u003cCoin\u003e coinList) {"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        ObservableList\u003cCoinCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"                coinList, (coin) -\u003e new CoinCard(coin, coinList.indexOf(coin) + 1));"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        coinListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        coinListView.setCellFactory(listView -\u003e new CoinListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        coinListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"                        logger.fine(\"Selection in coin list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"                        raise(new CoinPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"     * Scrolls to the {@code CoinCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"            coinListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"            coinListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code CoinCard}."},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    class CoinListViewCell extends ListCell\u003cCoinCard\u003e {"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        protected void updateItem(CoinCard coin, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"            super.updateItem(coin, empty);"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"            if (empty || coin \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"                setGraphic(coin.getRoot());"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":53,"-":35}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CoinBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.FilterChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String ITEM_COUNT_STATUS \u003d \"%d item(s) total\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String FIND_COMMAND_STATUS \u003d \"Current filter: %s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StatusBar itemCountStatus;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private StatusBar filterStatus;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public StatusBarFooter(int numItems, String saveLocation) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        setItemCountStatus(numItems);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void setItemCountStatus(int numItems) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.itemCountStatus.setText(String.format(ITEM_COUNT_STATUS, numItems)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void setFindCommandStatus(String status) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.filterStatus.setText(String.format(FIND_COMMAND_STATUS, status)));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"    public void handleCoinBookChangedEvent(CoinBookChangedEvent abce) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        setItemCountStatus(abce.data.getCoinList().size());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void handleFilterChangedEvent(FilterChangedEvent fce) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(fce, \"Setting filter info...\"));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        setFindCommandStatus(fce.status);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":2,"-":102}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.controlsfx.control.Notifications;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.geometry.Pos;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.ProgressIndicator;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.LoadingEvent;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowNotifManRequestEvent;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowNotificationRequestEvent;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Stage secondaryStage;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private ChartsPanel chartsPanel;"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"    private CoinListPanel coinListPanel;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private NotificationsWindow notificationsWindow;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private StackPane chartsPlaceholder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    private StackPane coinListPanelPlaceholder;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private VBox loadingAnimation;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        secondaryStage \u003d new Stage();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        setLoadingAnimation();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":123,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":126,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":129,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":133,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        chartsPanel \u003d new ChartsPanel();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        chartsPlaceholder.getChildren().add(chartsPanel.getRoot());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"        coinListPanel \u003d new CoinListPanel(logic.getFilteredCoinList());"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"        coinListPanelPlaceholder.getChildren().add(coinListPanel.getRoot());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFilteredCoinList().size(),"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                prefs.getCoinBookFilePath());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":175,"author":{"gitID":"laichengyu"},"content":"    private void setLoadingAnimation() {"},{"lineNumber":176,"author":{"gitID":"laichengyu"},"content":"        ProgressIndicator pi \u003d new ProgressIndicator();"},{"lineNumber":177,"author":{"gitID":"laichengyu"},"content":"        loadingAnimation \u003d new VBox(pi);"},{"lineNumber":178,"author":{"gitID":"laichengyu"},"content":"        loadingAnimation.setAlignment(Pos.CENTER);"},{"lineNumber":179,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":207,"author":{"gitID":"Eldon-Chung"},"content":"        BrowserWindow helpWindow \u003d new BrowserWindow(BrowserWindow.USERGUIDE_FILE_PATH);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinListPanel getCoinListPanel() {"},{"lineNumber":224,"author":{"gitID":"Eldon-Chung"},"content":"        return this.coinListPanel;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"ewaldhew"},"content":"    //@@author ewaldhew"},{"lineNumber":238,"author":{"gitID":"ewaldhew"},"content":"    @Subscribe"},{"lineNumber":239,"author":{"gitID":"ewaldhew"},"content":"    private void handleShowNotifManEvent(ShowNotifManRequestEvent event) {"},{"lineNumber":240,"author":{"gitID":"ewaldhew"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":241,"author":{"gitID":"ewaldhew"},"content":"        notificationsWindow \u003d new NotificationsWindow(secondaryStage, event.data);"},{"lineNumber":242,"author":{"gitID":"ewaldhew"},"content":"        notificationsWindow.show();"},{"lineNumber":243,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":245,"author":{"gitID":"ewaldhew"},"content":"    @Subscribe"},{"lineNumber":246,"author":{"gitID":"ewaldhew"},"content":"    private void handleShowNotificationEvent(ShowNotificationRequestEvent nre) {"},{"lineNumber":247,"author":{"gitID":"ewaldhew"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(nre));"},{"lineNumber":248,"author":{"gitID":"ewaldhew"},"content":"        spawnNotification(nre.toString(), nre.targetIndex, nre.codeString);"},{"lineNumber":249,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":251,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"ewaldhew"},"content":"     * Spawns a popup notification with the given message."},{"lineNumber":253,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"ewaldhew"},"content":"    private void spawnNotification(String message, Index index, String code) {"},{"lineNumber":255,"author":{"gitID":"ewaldhew"},"content":"        Notifications.create()"},{"lineNumber":256,"author":{"gitID":"ewaldhew"},"content":"                     .title(\"The following rule has triggered this notification:\")"},{"lineNumber":257,"author":{"gitID":"ewaldhew"},"content":"                     .text(String.format(\"%1$s\\nClick to jump to view %2$s\", message, code))"},{"lineNumber":258,"author":{"gitID":"ewaldhew"},"content":"                     .graphic(new ImageView(IconUtil.getCoinIcon(code)))"},{"lineNumber":259,"author":{"gitID":"ewaldhew"},"content":"                     .onAction(event -\u003e {"},{"lineNumber":260,"author":{"gitID":"ewaldhew"},"content":"                         try {"},{"lineNumber":261,"author":{"gitID":"ewaldhew"},"content":"                             logic.execute(ListCommand.COMMAND_WORD);"},{"lineNumber":262,"author":{"gitID":"ewaldhew"},"content":"                             EventsCenter.getInstance().post(new JumpToListRequestEvent(index));"},{"lineNumber":263,"author":{"gitID":"ewaldhew"},"content":"                             event.consume();"},{"lineNumber":264,"author":{"gitID":"ewaldhew"},"content":"                         } catch (Exception e) {"},{"lineNumber":265,"author":{"gitID":"ewaldhew"},"content":"                             throw new RuntimeException();"},{"lineNumber":266,"author":{"gitID":"ewaldhew"},"content":"                         }"},{"lineNumber":267,"author":{"gitID":"ewaldhew"},"content":"                     })"},{"lineNumber":268,"author":{"gitID":"ewaldhew"},"content":"                     .show();"},{"lineNumber":269,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"ewaldhew"},"content":"    //@@author"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":275,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"laichengyu"},"content":"     * Displays loading animation when isLoading is true and hides it otherwise"},{"lineNumber":277,"author":{"gitID":"laichengyu"},"content":"     * @param isLoading loading state of the application"},{"lineNumber":278,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"laichengyu"},"content":"    @FXML"},{"lineNumber":280,"author":{"gitID":"laichengyu"},"content":"    private void handleLoading(boolean isLoading) {"},{"lineNumber":281,"author":{"gitID":"laichengyu"},"content":"        toggleLoadingAnimation(isLoading);"},{"lineNumber":282,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":284,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"laichengyu"},"content":"     * Adds or remove the loading animation from {@code coinListPanelPlaceholder}"},{"lineNumber":286,"author":{"gitID":"laichengyu"},"content":"     * depending on the loading status"},{"lineNumber":287,"author":{"gitID":"laichengyu"},"content":"     * @param isLoading the loading status of the application"},{"lineNumber":288,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"laichengyu"},"content":"    private void toggleLoadingAnimation(boolean isLoading) {"},{"lineNumber":290,"author":{"gitID":"laichengyu"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":291,"author":{"gitID":"laichengyu"},"content":"            if (isLoading) {"},{"lineNumber":292,"author":{"gitID":"laichengyu"},"content":"                activateLoadingAnimation();"},{"lineNumber":293,"author":{"gitID":"laichengyu"},"content":"            } else {"},{"lineNumber":294,"author":{"gitID":"laichengyu"},"content":"                deactivateLoadingAnimation();"},{"lineNumber":295,"author":{"gitID":"laichengyu"},"content":"            }"},{"lineNumber":296,"author":{"gitID":"laichengyu"},"content":"        });"},{"lineNumber":297,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":299,"author":{"gitID":"laichengyu"},"content":"    private void activateLoadingAnimation() {"},{"lineNumber":300,"author":{"gitID":"laichengyu"},"content":"        loadingAnimation.setVisible(true);"},{"lineNumber":301,"author":{"gitID":"laichengyu"},"content":"        coinListPanelPlaceholder.getChildren().add(loadingAnimation);"},{"lineNumber":302,"author":{"gitID":"laichengyu"},"content":"        setTitle(\"Syncing...\");"},{"lineNumber":303,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":305,"author":{"gitID":"laichengyu"},"content":"    private void deactivateLoadingAnimation() {"},{"lineNumber":306,"author":{"gitID":"laichengyu"},"content":"        loadingAnimation.setVisible(false);"},{"lineNumber":307,"author":{"gitID":"laichengyu"},"content":"        coinListPanelPlaceholder.getChildren().remove(loadingAnimation);"},{"lineNumber":308,"author":{"gitID":"laichengyu"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":309,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":311,"author":{"gitID":"laichengyu"},"content":"    @Subscribe"},{"lineNumber":312,"author":{"gitID":"laichengyu"},"content":"    private void handleLoadingEvent(LoadingEvent event) {"},{"lineNumber":313,"author":{"gitID":"laichengyu"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":314,"author":{"gitID":"laichengyu"},"content":"        handleLoading(event.isLoading);"},{"lineNumber":315,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":317,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ewaldhew":34,"Eldon-Chung":8,"laichengyu":50,"-":225}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_TARGET \u003d \"The coin index or code provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_COINS_LISTED_OVERVIEW \u003d \"%1$d coins listed!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":12}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String LOG_FILE \u003d \"coinbook.log\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":129}},{"path":"src/main/java/seedu/address/ui/NotificationsWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":" * Controller for the notification manager"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"public class NotificationsWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(BrowserWindow.class);"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    private static final Image WINDOW_ICON \u003d new Image(\"/images/address_book_32.png\");"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    private static final String WINDOW_TITLE \u003d \"Notifications\";"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"    private static final String FXML \u003d \"NotificationsWindow.fxml\";"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    private RuleListPanel ruleListPanel;"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    private StackPane ruleListPanelPlaceholder;"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"    public NotificationsWindow(Stage stage, ObservableList\u003cRule\u003e data) {"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"        super(FXML, stage);"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"        // Configure the UI"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"        setTitle();"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        setWindowDefaultSize();"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"        ruleListPanel \u003d new RuleListPanel(data);"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"        ruleListPanelPlaceholder.getChildren().add(ruleListPanel.getRoot());"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"    private void setTitle() {"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"        this.getRoot().setTitle(WINDOW_TITLE);"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"     * Sets the default size."},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"    private void setWindowDefaultSize() {"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"        this.getRoot().setHeight(300);"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"        this.getRoot().setWidth(500);"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"     * Shows the notification window."},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"     * @throws IllegalStateException"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"     * \u003cul\u003e"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"     *     \u003cli\u003e"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"     *     \u003c/li\u003e"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"     *     \u003cli\u003e"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"     *     \u003c/li\u003e"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"     *     \u003cli\u003e"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"     *     \u003c/li\u003e"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"     *     \u003cli\u003e"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"     *     \u003c/li\u003e"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"     * \u003c/ul\u003e"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"    public void show() {"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"        logger.fine(\"Showing notification manager.\");"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"        getRoot().show();"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"        setWindowDefaultSize();"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":78}},{"path":"src/main/java/seedu/address/commons/core/CoinSubredditList.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.commons.util.FetchUtil.parseFileToJsonObj;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.io.InputStream;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import java.io.InputStreamReader;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import java.net.URISyntaxException;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import com.google.gson.JsonArray;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.gson.JsonElement;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.gson.JsonObject;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a list of existing coin codes that have a Subreddit."},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"//Citation included here because .json files cannot be commented on."},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"//the list of subreddits CoinCodeToSubreddit.json was partially"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"//obtained from https://github.com/kendricktan/cryptoshitposting/blob/master/data/subreddits.json"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinSubredditList {"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    private static final Map\u003cString, String\u003e COIN_CODE_TO_SUBREDDIT_MAP \u003d new HashMap\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String COIN_CODE_TO_SUBREDDIT_FILEPATH \u003d \"/coins/CoinCodeToSubreddit.json\";"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String REDDIT_URL \u003d \"https://www.reddit.com/r/\";"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String CODE_ATTRIBUTE_NAME \u003d \"code\";"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String SUBREDDIT_ATTRIBUTE_NAME \u003d \"subreddit\";"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    public static boolean isRecognized(Coin coin) {"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        return COIN_CODE_TO_SUBREDDIT_MAP.containsKey(coin.getCode().toString());"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"     * Obtains the subreddit url associated with the {@code coin}."},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"     * @param coin"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"     * @return the subreddit url associated with the {@code coin}"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    public static String getRedditUrl(Coin coin) {"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        return REDDIT_URL + COIN_CODE_TO_SUBREDDIT_MAP.get(coin.getCode().toString());"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"     * Initialises the CoinToSubredditList to store existing Coin subreddits"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws FileNotFoundException if the file missing"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    public static void initialize() throws FileNotFoundException, URISyntaxException {"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        InputStreamReader fileReader \u003d new InputStreamReader(getCoinCodeToSubredditFilepath());"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        JsonArray jsonArray \u003d parseFileToJsonObj(fileReader);"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        JsonElement codeString;"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        JsonElement subredditName;"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        for (JsonElement jsonElement : jsonArray) {"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"            JsonObject jsonObject \u003d jsonElement.getAsJsonObject();"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"            codeString \u003d jsonObject.get(CODE_ATTRIBUTE_NAME);"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"            subredditName \u003d jsonObject.get(SUBREDDIT_ATTRIBUTE_NAME);"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"            if (subredditName \u003d\u003d null || subredditName.toString().equals(\"null\")) {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"                continue;"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"            COIN_CODE_TO_SUBREDDIT_MAP.put(codeString.getAsString(), subredditName.getAsString());"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"    private static InputStream getCoinCodeToSubredditFilepath() throws URISyntaxException {"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        return MainApp.class.getResourceAsStream(COIN_CODE_TO_SUBREDDIT_FILEPATH);"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":68,"-":3}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a valid numeric double precision floating point value"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"     * e.g. empty string, \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static boolean isValidAmount(String s) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            double value \u003d Double.parseDouble(s);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return !s.matches(\".*[-+\\\\p{Alpha}].*\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":87}},{"path":"src/main/java/seedu/address/commons/util/FetchUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address.commons.util;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import static org.asynchttpclient.Dsl.asyncHttpClient;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":"import java.io.InputStreamReader;"},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":"import java.util.concurrent.Future;"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":"import org.asynchttpclient.AsyncHandler;"},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"import org.asynchttpclient.AsyncHttpClient;"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"import org.asynchttpclient.BoundRequestBuilder;"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":"import org.asynchttpclient.HttpResponseBodyPart;"},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"import org.asynchttpclient.HttpResponseStatus;"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":"import org.asynchttpclient.Response;"},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.JsonArray;"},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.JsonElement;"},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.JsonObject;"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.JsonParser;"},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":"import io.netty.handler.codec.http.HttpHeaders;"},{"lineNumber":24,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":25,"author":{"gitID":"laichengyu"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":" * Retrieves data in JSON format from a specified URL"},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":" */"},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":"public class FetchUtil {"},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":"    private static AsyncHttpClient myAsyncHttpClient \u003d asyncHttpClient();"},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"laichengyu"},"content":"     * Returns a Future object, future from the specific url asynchronously."},{"lineNumber":34,"author":{"gitID":"laichengyu"},"content":"     * The HTTP request Response can be retrieved using future.get()."},{"lineNumber":35,"author":{"gitID":"laichengyu"},"content":"     * All operations queued before future.get() are performed async and the application"},{"lineNumber":36,"author":{"gitID":"laichengyu"},"content":"     * will be thread-blocked at future.get() to wait for the return Response."},{"lineNumber":37,"author":{"gitID":"laichengyu"},"content":"     * @param url cannot be null"},{"lineNumber":38,"author":{"gitID":"laichengyu"},"content":"     * @return a Future object that can retrieve a Response which contains HTTP request data"},{"lineNumber":39,"author":{"gitID":"laichengyu"},"content":"     * in its responseBody"},{"lineNumber":40,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"laichengyu"},"content":"    public static Future\u003cResponse\u003e asyncFetch(String url) {"},{"lineNumber":42,"author":{"gitID":"laichengyu"},"content":"        //Send HTTP request asynchronously"},{"lineNumber":43,"author":{"gitID":"laichengyu"},"content":"        BoundRequestBuilder boundReqBuilder \u003d myAsyncHttpClient.prepareGet(url);"},{"lineNumber":44,"author":{"gitID":"laichengyu"},"content":"        AsyncHandler\u003cResponse\u003e asyncHandler \u003d getResponseAsyncHandler();"},{"lineNumber":45,"author":{"gitID":"laichengyu"},"content":"        return boundReqBuilder.execute(asyncHandler);"},{"lineNumber":46,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":48,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"laichengyu"},"content":"     * Creates a new async response handler"},{"lineNumber":50,"author":{"gitID":"laichengyu"},"content":"     * @return AsyncHandler for Response objects"},{"lineNumber":51,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"laichengyu"},"content":"    private static AsyncHandler\u003cResponse\u003e getResponseAsyncHandler() {"},{"lineNumber":53,"author":{"gitID":"laichengyu"},"content":"        return new AsyncHandler\u003cResponse\u003e() {"},{"lineNumber":54,"author":{"gitID":"laichengyu"},"content":"                private Response.ResponseBuilder builder \u003d new Response.ResponseBuilder();"},{"lineNumber":55,"author":{"gitID":"laichengyu"},"content":"                private Integer status;"},{"lineNumber":56,"author":{"gitID":"laichengyu"},"content":"                @Override"},{"lineNumber":57,"author":{"gitID":"laichengyu"},"content":"                public State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {"},{"lineNumber":58,"author":{"gitID":"laichengyu"},"content":"                    status \u003d responseStatus.getStatusCode();"},{"lineNumber":59,"author":{"gitID":"laichengyu"},"content":"                    builder.accumulate(responseStatus);"},{"lineNumber":60,"author":{"gitID":"laichengyu"},"content":"                    if (status !\u003d 200) {"},{"lineNumber":61,"author":{"gitID":"laichengyu"},"content":"                        return State.ABORT;"},{"lineNumber":62,"author":{"gitID":"laichengyu"},"content":"                    }"},{"lineNumber":63,"author":{"gitID":"laichengyu"},"content":"                    return State.CONTINUE;"},{"lineNumber":64,"author":{"gitID":"laichengyu"},"content":"                }"},{"lineNumber":65,"author":{"gitID":"laichengyu"},"content":"                @Override"},{"lineNumber":66,"author":{"gitID":"laichengyu"},"content":"                public State onHeadersReceived(HttpHeaders headers) throws Exception {"},{"lineNumber":67,"author":{"gitID":"laichengyu"},"content":"                    return State.CONTINUE;"},{"lineNumber":68,"author":{"gitID":"laichengyu"},"content":"                }"},{"lineNumber":69,"author":{"gitID":"laichengyu"},"content":"                @Override"},{"lineNumber":70,"author":{"gitID":"laichengyu"},"content":"                public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {"},{"lineNumber":71,"author":{"gitID":"laichengyu"},"content":"                    builder.accumulate(bodyPart);"},{"lineNumber":72,"author":{"gitID":"laichengyu"},"content":"                    return State.CONTINUE;"},{"lineNumber":73,"author":{"gitID":"laichengyu"},"content":"                }"},{"lineNumber":74,"author":{"gitID":"laichengyu"},"content":"                @Override"},{"lineNumber":75,"author":{"gitID":"laichengyu"},"content":"                public Response onCompleted() throws Exception {"},{"lineNumber":76,"author":{"gitID":"laichengyu"},"content":"                    return builder.build();"},{"lineNumber":77,"author":{"gitID":"laichengyu"},"content":"                }"},{"lineNumber":78,"author":{"gitID":"laichengyu"},"content":"                @Override"},{"lineNumber":79,"author":{"gitID":"laichengyu"},"content":"                public void onThrowable(Throwable t) {"},{"lineNumber":80,"author":{"gitID":"laichengyu"},"content":"                }"},{"lineNumber":81,"author":{"gitID":"laichengyu"},"content":"            };"},{"lineNumber":82,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":84,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"laichengyu"},"content":"     * Parses a String into a JsonObject"},{"lineNumber":86,"author":{"gitID":"laichengyu"},"content":"     * @param str cannot be null"},{"lineNumber":87,"author":{"gitID":"laichengyu"},"content":"     * @return JsonObject converted from String"},{"lineNumber":88,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"laichengyu"},"content":"    public static JsonObject parseStringToJsonObj(String str) {"},{"lineNumber":90,"author":{"gitID":"laichengyu"},"content":"        JsonObject jsonObject;"},{"lineNumber":91,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":92,"author":{"gitID":"laichengyu"},"content":"        JsonParser parser \u003d new JsonParser();"},{"lineNumber":93,"author":{"gitID":"laichengyu"},"content":"        JsonElement jsonElement \u003d parser.parse(str);"},{"lineNumber":94,"author":{"gitID":"laichengyu"},"content":"        jsonObject \u003d jsonElement.getAsJsonObject();"},{"lineNumber":95,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":96,"author":{"gitID":"laichengyu"},"content":"        return jsonObject;"},{"lineNumber":97,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":99,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"laichengyu"},"content":"     * Parses a file at {@code filepath} as an array of JsonObjects"},{"lineNumber":101,"author":{"gitID":"laichengyu"},"content":"     * @param fw cannot be null"},{"lineNumber":102,"author":{"gitID":"laichengyu"},"content":"     * @return JsonArray that is contained in the file at {@code filepath}"},{"lineNumber":103,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"laichengyu"},"content":"    public static JsonArray parseFileToJsonObj(InputStreamReader fw) throws FileNotFoundException {"},{"lineNumber":105,"author":{"gitID":"laichengyu"},"content":"        JsonObject jsonObject;"},{"lineNumber":106,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":107,"author":{"gitID":"laichengyu"},"content":"        JsonParser parser \u003d new JsonParser();"},{"lineNumber":108,"author":{"gitID":"laichengyu"},"content":"        JsonElement jsonElement \u003d parser.parse(fw);"},{"lineNumber":109,"author":{"gitID":"laichengyu"},"content":"        return jsonElement.getAsJsonArray();"},{"lineNumber":110,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"laichengyu"},"content":"}"}],"authorContributionMap":{"laichengyu":111}},{"path":"src/main/java/seedu/address/commons/util/UrlBuilderUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address.commons.util;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import java.net.MalformedURLException;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":"import java.net.URISyntaxException;"},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":"import org.apache.http.NameValuePair;"},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":"import org.apache.http.client.utils.URIBuilder;"},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":" * Builds a URL given a url and parameters"},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":" */"},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":"public class UrlBuilderUtil {"},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UrlBuilderUtil.class);"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":"     * Builds a URL given the url and params"},{"lineNumber":24,"author":{"gitID":"laichengyu"},"content":"     * @param url cannot be null"},{"lineNumber":25,"author":{"gitID":"laichengyu"},"content":"     * @param params are necessary"},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":"     * @return String URL concatenated with params"},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":"    public static String buildUrl(String url, List\u003cNameValuePair\u003e params) {"},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":"        String parameterizedUrl \u003d \"\";"},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":"            URIBuilder uri \u003d new URIBuilder(url);"},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"            uri.addParameters(params);"},{"lineNumber":33,"author":{"gitID":"laichengyu"},"content":"            parameterizedUrl \u003d uri.build().toURL().toString();"},{"lineNumber":34,"author":{"gitID":"laichengyu"},"content":"        } catch (URISyntaxException e) {"},{"lineNumber":35,"author":{"gitID":"laichengyu"},"content":"            logger.info(\"Illegal characters found in url: \" + url + \" or params: \" + params.toString());"},{"lineNumber":36,"author":{"gitID":"laichengyu"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":37,"author":{"gitID":"laichengyu"},"content":"            logger.info(\"Malformed URL: \" + url + \" provided\");"},{"lineNumber":38,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"laichengyu"},"content":"        return parameterizedUrl;"},{"lineNumber":40,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"laichengyu"},"content":"}"}],"authorContributionMap":{"laichengyu":41}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":" * Indicates a request to jump to the list of coins"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public JumpToListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":21}},{"path":"src/main/java/seedu/address/commons/events/ui/LoadingEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":" * An event to indicate that the app is loading data"},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":" */"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":"public class LoadingEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"    public final boolean isLoading;"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":"    public LoadingEvent(boolean isLoading) {"},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"        this.isLoading \u003d isLoading;"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":"}"}],"authorContributionMap":{"laichengyu":23}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowNotificationRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":" * An event requesting to spawn a pop-up notification with the given message."},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"public class ShowNotificationRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"    private static final String MESSAGE_NOTIFYING \u003d \"Notifying about: %1$s triggers %2$s\";"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"    /** The index of the coin that triggered this notification */"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"    public final Index targetIndex;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"    /** The code of the coin that triggered this notification */"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"    public final String codeString;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    private final String message;"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"    public ShowNotificationRequestEvent(String message, Index index, String codeString) {"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"        this.message \u003d message;"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"        this.codeString \u003d codeString;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"        return String.format(MESSAGE_NOTIFYING, codeString, message);"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":32}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowNotifManRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":" * An event requesting to view the notification manager."},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"public class ShowNotifManRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"    public final ObservableList\u003cRule\u003e data;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"    public ShowNotifManRequestEvent(ObservableList\u003cRule\u003e data) {"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"        this.data \u003d data;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"        return \"Show notification manager: \" + data.toString();"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":24}},{"path":"src/main/java/seedu/address/commons/events/ui/CoinPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.ui.CoinCard;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a selection change in the Coin List Panel"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"    private final CoinCard newSelection;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinPanelSelectionChangedEvent(CoinCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public CoinCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":15,"-":11}},{"path":"src/main/java/seedu/address/commons/events/model/CoinBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the CoinBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class CoinBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyCoinBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public CoinBookChangedEvent(ReadOnlyCoinBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"        return \"number of coins \" + data.getCoinList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":18}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    /** Returns an unmodifiable view of the filtered list of coins */"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    ObservableList\u003cCoin\u003e getFilteredCoinList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":3,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"                ArgumentTokenizer.tokenizeToArgumentMultimap(args, PREFIX_CODE, PREFIX_TAG);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_CODE)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"            Code code \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_CODE)).get();"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Coin coin \u003d new Coin(code, tagList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"            return new AddCommand(coin);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":8,"-":39}},{"path":"src/main/java/seedu/address/commons/events/model/CoinChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":" * Indicates some coin data in the model has changed."},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"public class CoinChangedEvent extends BaseEvent {"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"    private static final String FORMAT_STRING \u003d \"Coin changed [%1$s] -\u003e [%2$s]\";"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"    public final Index index;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"    public final Coin data;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    public CoinChangedEvent(Index index, Coin oldCoin, Coin newCoin) {"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"        requireAllNonNull(index, oldCoin, newCoin);"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"        assert(newCoin.getPrevState().equals(oldCoin));"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"        this.index \u003d index;"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"        this.data \u003d newCoin;"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        return String.format(FORMAT_STRING, data.getPrevState(), data);"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":31}},{"path":"src/main/java/seedu/address/logic/parser/TokenType.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":" * Represents the possible types a token can take, along with the regular expression it is specified by."},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"public enum TokenType {"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"    /* Boolean Logic Operators */"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"    BINARYBOOL(\" OR | AND \", \"BINARYBOOL\", \"a boolean operator\"),"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"    UNARYBOOL(\"NOT \", \"UNARYBOOL\", \"a NOT operator\"),"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"    LEFTPARENTHESES(\"\\\\(\", \"LEFTPARENTHESES\", \"a left parentheses\"),"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"    RIGHTPARENTHESES(\"\\\\)\", \"RIGHTPARENTHESES\", \"a left parentheses\"),"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"    COMPARATOR(\"\u003e|\u003d|\u003c\", \"COMPARATOR\", \"a comparator, e.g. \u003e\"),"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    /* String values */"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_CODE(\"c/\", \"CPREFIX\", \"a prefix\"),"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_NAME(\"n/\", \"NPREFIX\", \"a prefix\"),"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_TAG(\"t/\", \"TPREFIX\", \"a prefix\"),"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    /* Numerical values */"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_AMOUNT(\"a/\", \"APREFIX\", \"a prefix\"),"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    // Below used for find/notify conditions"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_BOUGHT(\"b/\", \"BPREFIX\", \"a prefix\"),"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_HELD(\"h/\", \"HPREFIX\", \"a prefix\"),"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_MADE(\"m/\", \"MPREFIX\", \"a prefix\"),"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_PRICE_RISE(\"p/\\\\+\", \"PRPREFIX\", \"a prefix\"),"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_PRICE_FALL(\"p/\\\\-\", \"PFPREFIX\", \"a prefix\"),"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_PRICE(\"p/\", \"PPREFIX\", \"a prefix\"),"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_SOLD(\"s/\", \"SPREFIX\", \"a prefix\"),"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_WORTH_RISE(\"w/\\\\+\", \"WRPREFIX\", \"a prefix\"),"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_WORTH_FALL(\"w/\\\\-\", \"WFPREFIX\", \"a prefix\"),"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    PREFIX_WORTH(\"w/\", \"WPREFIX\", \"a prefix\"),"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    /* Value components */"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    DECIMAL(\"\\\\-?[0-9]+\\\\.[0-9]+\", \"DECIMAL\", \"a decimal number\"),"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    NUM(\"\\\\-?[0-9]+\", \"NUM\", \"an integer\"),"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    STRING(\"[A-Za-z\\\\^\\\\-\\\\@\\\\./]+\", \"STRING\", \"a string\"),"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    SLASH(\"/\", \"SLASH\", \"a slash\"),"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    WHITESPACE(\"\\\\s\", \"WHITESPACE\", \"some white space\"),"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    NEWLINE(\"\\\\n\", \"NEWLINE\", \"a newline\"),"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    ELSE(\".+\", \"ELSE\", \"some unknown character\"),"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    EOF(\"[^\\\\w\\\\W]\", \"EOF\", \"some end of the argument\");"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"    final String typeName;"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    final String regex;"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    final String description;"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    TokenType(final String regex, final String typeName, final String description) {"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        this.regex \u003d regex;"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        this.typeName \u003d typeName;"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        this.description \u003d description;"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        return this.regex;"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"     * Checks if the {@code type} is a prefix type"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"     * @param type the type to be checked"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"    public static boolean isPrefixType(TokenType type) {"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        return type \u003d\u003d PREFIX_AMOUNT"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_BOUGHT"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_CODE"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_HELD"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_MADE"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_NAME"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_PRICE_RISE"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_PRICE_FALL"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_PRICE"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_SOLD"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_TAG"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_WORTH_RISE"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_WORTH_FALL"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"                || type \u003d\u003d PREFIX_WORTH;"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":78}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private final Map\u003cTokenType, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"     * @param prefixTokenType TokenType key with which the specified argument value is to be associated"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public void put(TokenType prefixTokenType, String argValue) {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefixTokenType);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        argMultimap.put(prefixTokenType, argValues);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the last value of {@code prefixTokenType}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    public Optional\u003cString\u003e getValue(TokenType prefixTokenType) {"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefixTokenType);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns all values of {@code prefixTokenType}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    public List\u003cString\u003e getAllValues(TokenType prefixTokenType) {"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        if (!argMultimap.containsKey(prefixTokenType)) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefixTokenType));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        return getValue(TokenType.STRING).orElse(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in this"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean arePrefixesPresent(TokenType... prefixes) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":13,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/TagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand.EditCoinDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class TagCommandParser implements Parser\u003cTagCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TagCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"                ArgumentTokenizer.tokenizeToArgumentMultimap(args, PREFIX_TAG);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        CommandTarget target;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"            target \u003d ParserUtil.parseTarget(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        EditCoinDescriptor editCoinDescriptor \u003d new EditCoinDescriptor();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCoinDescriptor::setTags);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        if (!editCoinDescriptor.isAnyFieldEdited()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(TagCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        return new TagCommand(target, editCoinDescriptor);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":8,"-":63}},{"path":"src/main/java/seedu/address/logic/parser/ConditionSemanticParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":" * Parses tokenized boolean logic statements to verify correctness"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"public class ConditionSemanticParser {"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"    private TokenStack tokenStack;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"    public ConditionSemanticParser(TokenStack tokenStack) {"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"        this.tokenStack \u003d tokenStack;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"        this.tokenStack.resetStack();"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    public TokenType getExpectedType() {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"        return this.tokenStack.getLastExpectedType();"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public TokenType getActualType() {"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        return this.tokenStack.getActualType();"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"     * Parses the input as a token stack semantically."},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the input is semantically valid."},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean parse() {"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        while (!tokenStack.isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"            TokenType peekType \u003d tokenStack.popToken().getType();"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"            if (TokenType.isPrefixType(peekType) \u0026\u0026 !hasCorrectParameterType(peekType)) {"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"                return false;"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        return true;"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"     * Checks to see each the prefix type is followed by the appropriate parameter types."},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"     * @param type"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the prefix type is followed by the appropriate parameter types."},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    private boolean hasCorrectParameterType(TokenType type) {"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        switch (type) {"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_HELD:"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_SOLD:"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_BOUGHT:"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_MADE:"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_PRICE:"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_PRICE_RISE:"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_PRICE_FALL:"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_WORTH:"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_WORTH_RISE:"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_WORTH_FALL:"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"            return hasNumericalParameter();"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_CODE:"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_TAG:"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"            return hasStringParameter();"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"        default:"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"     * Checks if the next two tokens are a comparator followed by a number."},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the next two tokens are a comparator followed by a number."},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"    private boolean hasNumericalParameter() {"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenStack.matchAndPopTokenType(TokenType.COMPARATOR)"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 (tokenStack.matchAndPopTokenType(TokenType.NUM)"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"                || tokenStack.matchAndPopTokenType(TokenType.DECIMAL));"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"     * Checks if the next next token is a string."},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the next token is a string."},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"    private boolean hasStringParameter() {"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenStack.matchAndPopTokenType(TokenType.STRING);"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":84}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_BOUGHT;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_HELD;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_MADE;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_PRICE;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_SOLD;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_WORTH;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    private static final TokenType[] EXPECTED_TOKEN_TYPES \u003d {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_AMOUNT,"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_BOUGHT,"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_CODE,"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_HELD,"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_MADE,"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_NAME,"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_PRICE,"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_SOLD,"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_TAG,"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        PREFIX_WORTH"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    };"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        TokenStack tokenStack \u003d ArgumentTokenizer.tokenizeToTokenStack(args, EXPECTED_TOKEN_TYPES);"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"            Predicate\u003cCoin\u003e coinCondition \u003d ParserUtil.parseCondition(tokenStack);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new FindCommand(args, coinCondition);"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":31,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/BuyCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.BuyCommand;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":" * Parses input arguments and creates a new BuyCommand object"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"public class BuyCommandParser implements Parser\u003cBuyCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"     * Parses the given {@code String} of arguments in the context of the BuyCommand"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"     * and returns an BuyCommand object for execution."},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    public BuyCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"                ArgumentTokenizer.tokenizeToArgumentMultimap(args, PREFIX_AMOUNT);"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_AMOUNT)"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"                || argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"            CommandTarget target \u003d ParserUtil.parseTarget(argMultimap.getPreamble());"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"            Amount amountToAdd \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"            return new BuyCommand(target, amountToAdd);"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":44}},{"path":"src/main/java/seedu/address/logic/RuleChecker.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.model.CoinChangedEvent;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.model.RuleBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.NotificationRule;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":" * Receives events to check against the rule book triggers."},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"public class RuleChecker {"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(RuleChecker.class);"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    private final RuleBook rules;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    public RuleChecker(ReadOnlyRuleBook rules) {"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"        this.rules \u003d new RuleBook(rules);"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"    @Subscribe"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"    public void handleRuleBookChangedEvent(RuleBookChangedEvent rbce) {"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(rbce, \"Reloading rule book...\"));"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        this.rules.resetData(rbce.data);"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    @Subscribe"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"    public void handleCoinChangedEvent(CoinChangedEvent cce) {"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"        for (Rule r : rules.getRuleList()) {"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"            r.action.setExtraData(cce.data, cce);"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"            switch (r.type) {"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"            case NOTIFICATION:"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"                assert(r instanceof NotificationRule);"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"                checkAndFire(r, cce.data);"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"                break;"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"            default:"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"                throw new RuntimeException(\"Unexpected code path!\");"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"     * Checks the trigger condition against the provided object, then"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"     * executes the command tied to it if it matches"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"     * @param rule containing condition to check with"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"     * @param data to check against"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"     * @return Whether the command was successful."},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"    private static \u003cT\u003e boolean checkAndFire(Rule\u003cT\u003e rule, T data) {"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"        if (!rule.condition.test(data)) {"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"            rule.action.execute();"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"            logger.info(String.format(Rule.MESSAGE_FIRED, rule, data));"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"        } catch (CommandException e) {"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"            logger.warning(e.getMessage());"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":77}},{"path":"src/main/java/seedu/address/logic/parser/TokenStack.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.WHITESPACE;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.EmptyStackException;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":" * Represents stack of Token objects."},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"public class TokenStack {"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    private List\u003cToken\u003e tokenList;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    private TokenType lastExpectedType;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    private int tokenHeadIndex;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public TokenStack(List\u003cToken\u003e tokenList) {"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"        tokenList.removeIf(t -\u003e t.hasType(WHITESPACE));"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"        this.tokenList \u003d tokenList;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        tokenHeadIndex \u003d 0;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"        lastExpectedType \u003d null;"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"     * Matches the type with the top token on the tokenList and pops it if they are they same."},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"     * @param type the TokenType to compare the top token with."},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the types are the same, false if either the stack is expended or they are not the same type"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean matchAndPopTokenType(TokenType type) throws EmptyStackException {"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        lastExpectedType \u003d type;"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        if (tokenHeadIndex \u003e\u003d tokenList.size()) {"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"            throw new EmptyStackException();"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        if (tokenList.get(tokenHeadIndex).getType() \u003d\u003d type) {"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"            tokenHeadIndex++;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"            return true;"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        return false;"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"     * Matches the type with the top token on the tokenList."},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"     * @param type the TokenType to compare the top token with."},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the types are the same."},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws EmptyStackException if the stack is empty"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean matchTokenType(TokenType type) throws EmptyStackException {"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        lastExpectedType \u003d type;"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        if (tokenHeadIndex \u003e\u003d tokenList.size()) {"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"            throw new EmptyStackException();"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenList.get(tokenHeadIndex).getType() \u003d\u003d type;"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"     * @return the {@code Token} at the top of the stack"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws EmptyStackException if the stack is empty"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    public Token popToken() throws EmptyStackException {"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        if (tokenHeadIndex \u003e\u003d tokenList.size()) {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"            throw new EmptyStackException();"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenList.get(tokenHeadIndex++);"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the Token at the top of the stack without removing it"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"     * @return the Token at the top of the stack"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws EmptyStackException if the stack is empty"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"    public Token peekToken() throws EmptyStackException {"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        if (tokenHeadIndex \u003e\u003d tokenList.size()) {"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"            throw new EmptyStackException();"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenList.get(tokenHeadIndex);"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"     * Resets the {@code TokenStack} to restore all the popped Tokens"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"    public void resetStack() {"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        tokenHeadIndex \u003d 0;"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean isEmpty() {"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenHeadIndex \u003d\u003d tokenList.size();"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    public List\u003cToken\u003e getTokenList() {"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenList;"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"     * @return The last TokenType that was checked."},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"    public TokenType getLastExpectedType() {"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        return lastExpectedType;"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"     * @return The TokenType of token currently on top of the stack."},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws EmptyStackException if the stack is empty."},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"    public TokenType getActualType() throws EmptyStackException {"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"        if (tokenHeadIndex \u003e\u003d tokenList.size()) {"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"            throw new EmptyStackException();"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenList.get(tokenHeadIndex).getType();"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":111}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_INVALID_NUMBER \u003d \"Argument is not a valid number.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_ARG \u003d \"Argument that is provided is not valid.\";"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_CONDITION_ARGUMENT_INVALID_SYNTAX \u003d \"%s structure of the argument is invalid:\""},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"            + \" Expected %s but instead got %s.\";"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    private static Logger logger \u003d LogsCenter.getLogger(ParserUtil.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static Code parseName(String name) throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!Code.isValidName(trimmedName)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Code.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return new Code(trimmedName);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Optional\u003cCode\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Parses a {@code String target} into a {@code CommandTarget}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Can be any of: code or index."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static CommandTarget parseTarget(String target) throws IllegalValueException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(target);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new CommandTarget(parseIndex(target));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new CommandTarget(parseName(target));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            // may still throw again, handle it at call site"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Parses {@code value} into an {@code Amount} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not number value)."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static Amount parseAmount(String value) throws IllegalValueException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String trimmedValue \u003d value.trim();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!StringUtil.isValidAmount(trimmedValue)) {"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_NUMBER);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return new Amount(trimmedValue);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"neilish3re"},"content":"    //@@author neilish3re"},{"lineNumber":139,"author":{"gitID":"neilish3re"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"neilish3re"},"content":"     * Parses sortOrder and returns it"},{"lineNumber":141,"author":{"gitID":"neilish3re"},"content":"     * Throws IllegalValueException if index that is specified is invalid"},{"lineNumber":142,"author":{"gitID":"neilish3re"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"neilish3re"},"content":"    public static boolean parseSort(String sortOrder) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"neilish3re"},"content":"        sortOrder \u003d sortOrder.trim();"},{"lineNumber":145,"author":{"gitID":"neilish3re"},"content":"        switch (sortOrder) {"},{"lineNumber":146,"author":{"gitID":"neilish3re"},"content":"        case \"\":"},{"lineNumber":147,"author":{"gitID":"neilish3re"},"content":"        case \"a\":                       //ascending alphabetical order"},{"lineNumber":148,"author":{"gitID":"neilish3re"},"content":"            return false;"},{"lineNumber":149,"author":{"gitID":"neilish3re"},"content":"        case \"z\":"},{"lineNumber":150,"author":{"gitID":"neilish3re"},"content":"            return true;                //descending alphabetical order"},{"lineNumber":151,"author":{"gitID":"neilish3re"},"content":"        default:"},{"lineNumber":152,"author":{"gitID":"neilish3re"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_ARG);"},{"lineNumber":153,"author":{"gitID":"neilish3re"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"neilish3re"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"neilish3re"},"content":"    //@@author"},{"lineNumber":156,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author Eldon-Chung"},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":"     * Parses a {@code String condition} represented by a {@code TokenStack} into a {@code Predicate\u003cCoin\u003e}."},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"     * @param argumentTokenStack a {@code TokenStack} representing the tokenized argument."},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"     * @return a predicate representing the argument"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws IllegalValueException if the given tag names or numbers as parameters are invalid"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"     *          and if the argument is either syntactically or semantically invalid."},{"lineNumber":164,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":"    public static Predicate\u003cCoin\u003e parseCondition(TokenStack argumentTokenStack)"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"            throws IllegalValueException {"},{"lineNumber":167,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(argumentTokenStack);"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"        TokenType expectedTokenType;"},{"lineNumber":169,"author":{"gitID":"Eldon-Chung"},"content":"        TokenType actualTokenType;"},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionSyntaxParser conditionSyntaxParser \u003d new ConditionSyntaxParser(argumentTokenStack);"},{"lineNumber":172,"author":{"gitID":"Eldon-Chung"},"content":"        if (!conditionSyntaxParser.parse()) {"},{"lineNumber":173,"author":{"gitID":"Eldon-Chung"},"content":"            expectedTokenType \u003d conditionSyntaxParser.getExpectedType();"},{"lineNumber":174,"author":{"gitID":"Eldon-Chung"},"content":"            actualTokenType \u003d conditionSyntaxParser.getActualType();"},{"lineNumber":175,"author":{"gitID":"Eldon-Chung"},"content":"            logger.warning(String.format(MESSAGE_CONDITION_ARGUMENT_INVALID_SYNTAX, \"Syntactic\","},{"lineNumber":176,"author":{"gitID":"Eldon-Chung"},"content":"                    expectedTokenType.description, actualTokenType.typeName));"},{"lineNumber":177,"author":{"gitID":"Eldon-Chung"},"content":"            throw new ParseException(\"command arguments invalid.\");"},{"lineNumber":178,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionSemanticParser conditionSemanticParser \u003d new ConditionSemanticParser(argumentTokenStack);"},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":"        if (!conditionSemanticParser.parse()) {"},{"lineNumber":182,"author":{"gitID":"Eldon-Chung"},"content":"            expectedTokenType \u003d conditionSemanticParser.getExpectedType();"},{"lineNumber":183,"author":{"gitID":"Eldon-Chung"},"content":"            actualTokenType \u003d conditionSemanticParser.getActualType();"},{"lineNumber":184,"author":{"gitID":"Eldon-Chung"},"content":"            logger.warning(String.format(MESSAGE_CONDITION_ARGUMENT_INVALID_SYNTAX, \"Semantic\","},{"lineNumber":185,"author":{"gitID":"Eldon-Chung"},"content":"                    expectedTokenType.description, actualTokenType.typeName));"},{"lineNumber":186,"author":{"gitID":"Eldon-Chung"},"content":"            throw new ParseException(\"command arguments invalid.\");"},{"lineNumber":187,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"        ConditionGenerator conditionGenerator \u003d new ConditionGenerator(argumentTokenStack);"},{"lineNumber":190,"author":{"gitID":"Eldon-Chung"},"content":"        return conditionGenerator.generate();"},{"lineNumber":191,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"Eldon-Chung"},"content":"    //author@@"},{"lineNumber":193,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":48,"-":127,"neilish3re":18}},{"path":"src/main/java/seedu/address/logic/parser/CoinBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BuyCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListNotifsCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.NotifyCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SellCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SyncCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CoinBookParser {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case BuyCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        case BuyCommand.COMMAND_ALIAS:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new BuyCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case SellCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"        case SellCommand.COMMAND_ALIAS:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new SellCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case TagCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case TagCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new TagCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"        case ViewCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case NotifyCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        case NotifyCommand.COMMAND_ALIAS:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new NotifyCommandParser().parse(arguments);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case ListNotifsCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case ListNotifsCommand.COMMAND_ALIAS:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new ListNotifsCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case SyncCommand.COMMAND_WORD:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case SyncCommand.COMMAND_ALIAS:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return new SyncCommand();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":16,"-":118}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":" * Parses input arguments and creates a new ViewCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"     * and returns an ViewCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            CommandTarget target \u003d ParserUtil.parseTarget(args);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            return new ViewCommand(target);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":6,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/ConditionSyntaxParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":" * Parses tokenized boolean logic statements to verify correctness"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"public class ConditionSyntaxParser {"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"    private TokenStack tokenStack;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"    public ConditionSyntaxParser(TokenStack tokenStack) {"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"        this.tokenStack \u003d tokenStack;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"        this.tokenStack.resetStack();"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    public TokenType getExpectedType() {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"        return this.tokenStack.getLastExpectedType();"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public TokenType getActualType() {"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        return this.tokenStack.getActualType();"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"     * Parses the token stack against the boolean logic grammar loaded into the tokenStack"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"     * @return correctness of the tokenStack"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean parse() {"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        return expression()"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 tokenStack.matchAndPopTokenType(TokenType.EOF);"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"     * Matches the tokenStack against the expression grammar rule"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the tokenStack was correct"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    boolean expression() {"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        if (!term()) {"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"            return false;"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        while (tokenStack.matchAndPopTokenType(TokenType.BINARYBOOL)) {"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"            if (!term()) {"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"                return false;"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        return true;"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"     * Matches the tokenStack against the term grammar rule"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the tokenStack was correct"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"    boolean term() {"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        if (tokenStack.matchAndPopTokenType(TokenType.LEFTPARENTHESES)) {"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"            if (!expression()) {"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"                return false;"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"            return tokenStack.matchAndPopTokenType(TokenType.RIGHTPARENTHESES);"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        } else if (tokenStack.matchAndPopTokenType(TokenType.UNARYBOOL)) {"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"            return term();"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        return cond();"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"     * Matches the tokenStack against the cond grammar rule"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"     * @return true if the tokenStack was correct"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"    boolean cond() {"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        if (!isPrefix()) {"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"            return false;"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.matchAndPopTokenType(TokenType.COMPARATOR);"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenStack.matchAndPopTokenType(TokenType.NUM)"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"                || tokenStack.matchAndPopTokenType(TokenType.STRING)"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"                || tokenStack.matchAndPopTokenType(TokenType.DECIMAL);"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"     * Checks if the top of the tokenStack is currently a prefix TokenType."},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"    private boolean isPrefix() {"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        if (!tokenStack.isEmpty() \u0026\u0026 TokenType.isPrefixType(tokenStack.getActualType())) {"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"            tokenStack.popToken();"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"        // If it was not a PREFIX, we do this to set the last expected type to some PREFIX type."},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"        tokenStack.matchTokenType(TokenType.PREFIX_AMOUNT);"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"        return false;"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":95}},{"path":"src/main/java/seedu/address/logic/parser/SellCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.CommandTarget;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.SellCommand;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":" * Parses input arguments and creates a new SellCommand object"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"public class SellCommandParser implements Parser\u003cSellCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"     * Parses the given {@code String} of arguments in the context of the BuyCommand"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"     * and returns an BuyCommand object for execution."},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    public SellCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"                ArgumentTokenizer.tokenizeToArgumentMultimap(args, PREFIX_AMOUNT);"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_AMOUNT)"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"                || argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"            CommandTarget target \u003d ParserUtil.parseTarget(argMultimap.getPreamble());"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"            Amount amountToSell \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"            return new SellCommand(target, amountToSell);"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SellCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":43}},{"path":"src/main/java/seedu/address/logic/parser/Token.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":" * Represents the token type that that portions of the string can be grouped into."},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"public class Token {"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"    private TokenType type;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"    private String pattern;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"    public Token(TokenType type, String pattern) {"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"        this.type \u003d type;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"        this.pattern \u003d pattern;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    public TokenType getType() {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"        return this.type;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean hasType(TokenType type) {"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        return this.type \u003d\u003d type;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    public String getPattern() {"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        return this.pattern;"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        return String.format(\"(%s,%s)\", pattern, this.type.name());"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"            return true;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        if (!(other instanceof Token)) {"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"            return false;"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        Token otherToken \u003d (Token) other;"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        return otherToken.getType().equals(this.type)"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 otherToken.getPattern().equals(this.pattern);"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":48}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":16,"author":{"gitID":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author Eldon-Chung"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private static final int STRING_BUILDER_OFFSET \u003d 1;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    private static final String CAPTURING_GROUP_REGEX_PATTERN \u003d \"|(?\u003c%s\u003e%s)\";"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    private static final TokenType[] DEFAULT_TOKEN_TYPES \u003d {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        TokenType.BINARYBOOL, TokenType.UNARYBOOL, TokenType.LEFTPARENTHESES, TokenType.RIGHTPARENTHESES,"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"        TokenType.COMPARATOR, TokenType.DECIMAL, TokenType.NUM, TokenType.STRING, TokenType.SLASH,"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"        TokenType.WHITESPACE, TokenType.NEWLINE, TokenType.ELSE"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    };"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    private static String getCapturingGroupRegexPatternFromTokenType(TokenType type) {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        return String.format(CAPTURING_GROUP_REGEX_PATTERN, type.typeName, type.regex);"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    private static String getDefaultRegexPatternString() {"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"        StringBuilder regexPatternBuffer \u003d new StringBuilder();"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"        for (TokenType defaultTokenType : DEFAULT_TOKEN_TYPES) {"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"            regexPatternBuffer.append(getCapturingGroupRegexPatternFromTokenType(defaultTokenType));"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        return regexPatternBuffer.toString();"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    private static String getPatternString(TokenType... tokenTypes) {"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        StringBuilder regexPatternBuffer \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        for (TokenType type : tokenTypes) {"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"            regexPatternBuffer.append(getCapturingGroupRegexPatternFromTokenType(type));"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        regexPatternBuffer.append(getDefaultRegexPatternString());"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        return regexPatternBuffer.substring(STRING_BUILDER_OFFSET);"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    private static Pattern buildPatternFromTokenTypes(TokenType... tokenTypes) {"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        return Pattern.compile(getPatternString(tokenTypes));"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"    private static List\u003cTokenType\u003e getTokenTypeList(TokenType... tokenTypes) {"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        ArrayList\u003cTokenType\u003e tokenTypeList \u003d new ArrayList\u003cTokenType\u003e();"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        tokenTypeList.addAll(Arrays.asList(tokenTypes));"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        tokenTypeList.addAll(Arrays.asList(DEFAULT_TOKEN_TYPES));"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenTypeList;"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"     * Lexically analyses and tokenizes a string of arguments based on the {@code TokenType} specification."},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"     * @return a list of {@code Token} based on the argument string provided in reverse order."},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"    private static List\u003cToken\u003e lex(String args, TokenType... prefixTokenTypes) {"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cTokenType\u003e typeList \u003d getTokenTypeList(prefixTokenTypes);"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cToken\u003e tokenList \u003d new ArrayList\u003cToken\u003e();"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        Pattern pattern \u003d buildPatternFromTokenTypes(prefixTokenTypes);"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        Matcher m \u003d pattern.matcher(args);"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        while (m.find()) {"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"            for (TokenType type : typeList) {"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"                if (m.group(type.typeName) \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"                    continue;"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"                }"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"                tokenList.add(new Token(type, m.group(type.typeName)));"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        // Add in an EOF type Token as a delimiter."},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"        tokenList.add(new Token(TokenType.EOF, \"\"));"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        return tokenList;"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"     * Tokenizes an argument string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"     * @param argString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"     * @param prefixTokenTypes   prefix Tokens to tokenize the arguments string with"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    public static ArgumentMultimap tokenizeToArgumentMultimap(String argString, TokenType... prefixTokenTypes) {"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cToken\u003e tokenList \u003d lex(argString, prefixTokenTypes);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cPrefixTokenPosition\u003e prefixTokenPositionList \u003d findAllTokenTypePositions(tokenList, prefixTokenTypes);"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        return mapPrefixToArguments(tokenList, prefixTokenPositionList);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"     * Tokenizes an argument string and returns a {@code List\u003cToken\u003e} object that is a list of all the tokens."},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"     * Whitespace between strings will be ignored."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"     * @param argString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"     * @param prefixTokenTypes   prefix Tokens to tokenize the arguments string with"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"     * @return           {@code List\u003cToken\u003e} object contains a list of all the tokens"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"    public static TokenStack tokenizeToTokenStack(String argString, TokenType... prefixTokenTypes) {"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"        return new TokenStack(lex(argString, prefixTokenTypes));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code argsString}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"     * @param tokenList  TokenList representing a String of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"     * @param prefixTokenPositionList Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"    private static ArgumentMultimap mapPrefixToArguments(List\u003cToken\u003e tokenList,"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"                                                     List\u003cPrefixTokenPosition\u003e prefixTokenPositionList) {"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"        ArgumentMultimap argMultiMap \u003d new ArgumentMultimap();"},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"        // Sort the prefixTokenPositionList so that the prefixes that come first in the tokenList appear first"},{"lineNumber":126,"author":{"gitID":"Eldon-Chung"},"content":"        prefixTokenPositionList.sort((prefixToken1, prefixToken2) -\u003e"},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":"                prefixToken1.getStartPosition() - prefixToken2.getStartPosition()"},{"lineNumber":128,"author":{"gitID":"Eldon-Chung"},"content":"        );"},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":130,"author":{"gitID":"Eldon-Chung"},"content":"        // Add a dummy to the end of the list, since we need to access two elements in succession each time"},{"lineNumber":131,"author":{"gitID":"Eldon-Chung"},"content":"        prefixTokenPositionList.add(new PrefixTokenPosition(TokenType.EOF, tokenList.size()));"},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"        // Extract the beginning strings for the first prefix token, if any"},{"lineNumber":134,"author":{"gitID":"Eldon-Chung"},"content":"        String preambleString \u003d extractPreambleString(tokenList, prefixTokenPositionList.get(0));"},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":"        argMultiMap.put(TokenType.STRING, preambleString);"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":137,"author":{"gitID":"Eldon-Chung"},"content":"        // Map all prefixes to their arguments"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"        for (int posListIdx \u003d 0; posListIdx \u003c prefixTokenPositionList.size() - 1; posListIdx++) {"},{"lineNumber":139,"author":{"gitID":"Eldon-Chung"},"content":"            PrefixTokenPosition currentPrefixTokenPosition \u003d prefixTokenPositionList.get(posListIdx);"},{"lineNumber":140,"author":{"gitID":"Eldon-Chung"},"content":"            PrefixTokenPosition nextPrefixTokenPosition \u003d prefixTokenPositionList.get(posListIdx + 1);"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"            String argumentString \u003d extractArgumentsToString(tokenList, currentPrefixTokenPosition,"},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"                    nextPrefixTokenPosition);"},{"lineNumber":143,"author":{"gitID":"Eldon-Chung"},"content":"            argMultiMap.put(currentPrefixTokenPosition.getTokenType(), argumentString);"},{"lineNumber":144,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"Eldon-Chung"},"content":"        return argMultiMap;"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author Eldon-Chung"},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"    private static String extractPreambleString(List\u003cToken\u003e tokenList, PrefixTokenPosition currentPrefixToken) {"},{"lineNumber":151,"author":{"gitID":"Eldon-Chung"},"content":"        return extractArgumentsToString(tokenList,"},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"                new PrefixTokenPosition(TokenType.STRING, -1),"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"                currentPrefixToken);"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":156,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixToken}."},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"     * The end position of the value is determined by {@code nextPrefixToken}."},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"    private static String extractArgumentsToString(List\u003cToken\u003e tokenList, PrefixTokenPosition currentPrefixToken,"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"                                                  PrefixTokenPosition nextPrefixToken) {"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cToken\u003e subTokenList \u003d tokenList.subList(currentPrefixToken.getStartPosition() + 1,"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"                nextPrefixToken.getStartPosition());"},{"lineNumber":164,"author":{"gitID":"Eldon-Chung"},"content":"        return listOfTokensToString(subTokenList);"},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":167,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns a String representation of a list of tokens with one space in between each token\u0027s string value."},{"lineNumber":169,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"    private static String listOfTokensToString(List\u003cToken\u003e tokenList) {"},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":172,"author":{"gitID":"Eldon-Chung"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":173,"author":{"gitID":"Eldon-Chung"},"content":"        for (Token token : tokenList) {"},{"lineNumber":174,"author":{"gitID":"Eldon-Chung"},"content":"            stringBuilder.append(String.format(\"%s\", token.getPattern()));"},{"lineNumber":175,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"Eldon-Chung"},"content":"        return stringBuilder.toString().trim();"},{"lineNumber":177,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author"},{"lineNumber":179,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":"     * Finds all zero-based prefix token positions in the given arguments string."},{"lineNumber":182,"author":{"gitID":"Eldon-Chung"},"content":"     *"},{"lineNumber":183,"author":{"gitID":"Eldon-Chung"},"content":"     * @param tokenList tokenList representing the string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":184,"author":{"gitID":"Eldon-Chung"},"content":"     * @param prefixTokenTypes  prefix TokenTypes to find in the arguments string"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"Eldon-Chung"},"content":"    private static List\u003cPrefixTokenPosition\u003e findAllTokenTypePositions(List\u003cToken\u003e tokenList,"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"                                                                       TokenType... prefixTokenTypes) {"},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cPrefixTokenPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"Eldon-Chung"},"content":"        for (TokenType prefix : prefixTokenTypes) {"},{"lineNumber":192,"author":{"gitID":"Eldon-Chung"},"content":"            positions.addAll(findTokenTypePositions(tokenList, prefix));"},{"lineNumber":193,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":195,"author":{"gitID":"Eldon-Chung"},"content":"        return positions;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"Eldon-Chung"},"content":"     * {@see findAllTokenTypePositions}"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"Eldon-Chung"},"content":"    private static List\u003cPrefixTokenPosition\u003e findTokenTypePositions(List\u003cToken\u003e tokenList, TokenType prefixTokenType) {"},{"lineNumber":202,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cPrefixTokenPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"Eldon-Chung"},"content":"        int prefixPosition \u003d findTokenTypePosition(tokenList, prefixTokenType, 0);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":206,"author":{"gitID":"Eldon-Chung"},"content":"            PrefixTokenPosition extendedTokenType \u003d new PrefixTokenPosition(prefixTokenType, prefixPosition);"},{"lineNumber":207,"author":{"gitID":"Eldon-Chung"},"content":"            positions.add(extendedTokenType);"},{"lineNumber":208,"author":{"gitID":"Eldon-Chung"},"content":"            prefixPosition \u003d findTokenTypePosition(tokenList, prefixTokenType, prefixPosition + 1);"},{"lineNumber":209,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":211,"author":{"gitID":"Eldon-Chung"},"content":"        return positions;"},{"lineNumber":212,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns the index of the first occurrence of {@code prefixTokenType} in"},{"lineNumber":216,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code tokenList} starting from index {@code fromIndex}. Returns -1 if no"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * such occurrence can be found."},{"lineNumber":218,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"Eldon-Chung"},"content":"    private static int findTokenTypePosition(List\u003cToken\u003e tokenList, TokenType prefixTokenType, int fromIndex) {"},{"lineNumber":220,"author":{"gitID":"Eldon-Chung"},"content":"        for (int index \u003d fromIndex; index \u003c tokenList.size(); index++) {"},{"lineNumber":221,"author":{"gitID":"Eldon-Chung"},"content":"            if (tokenList.get(index).hasType(prefixTokenType)) {"},{"lineNumber":222,"author":{"gitID":"Eldon-Chung"},"content":"                return index;"},{"lineNumber":223,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":224,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"Eldon-Chung"},"content":"        return -1;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"Eldon-Chung"},"content":"     * Represents a prefix token\u0027s position in an arguments string."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"Eldon-Chung"},"content":"    private static class PrefixTokenPosition {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        private int startPosition;"},{"lineNumber":233,"author":{"gitID":"Eldon-Chung"},"content":"        private final TokenType prefixTokenType;"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"Eldon-Chung"},"content":"        PrefixTokenPosition(TokenType prefixTokenType, int startPosition) {"},{"lineNumber":236,"author":{"gitID":"Eldon-Chung"},"content":"            this.prefixTokenType \u003d prefixTokenType;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        int getStartPosition() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            return this.startPosition;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"Eldon-Chung"},"content":"        TokenType getTokenType() {"},{"lineNumber":245,"author":{"gitID":"Eldon-Chung"},"content":"            return this.prefixTokenType;"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":184,"-":66}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":9,"author":{"gitID":"neilish3re"},"content":"//@@author neilish3re"},{"lineNumber":10,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":11,"author":{"gitID":"neilish3re"},"content":"/** SortCommand Parser is implemented from Parser"},{"lineNumber":12,"author":{"gitID":"neilish3re"},"content":" *"},{"lineNumber":13,"author":{"gitID":"neilish3re"},"content":" */"},{"lineNumber":14,"author":{"gitID":"neilish3re"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"neilish3re"},"content":"    /** Parses given arguments in SortCommand context and returns sortCommand object to execute"},{"lineNumber":16,"author":{"gitID":"neilish3re"},"content":"     * throws an exception(ParseException) if user input format is invalid"},{"lineNumber":17,"author":{"gitID":"neilish3re"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":19,"author":{"gitID":"neilish3re"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"neilish3re"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"neilish3re"},"content":"            boolean isSort \u003d ParserUtil.parseSort(args);"},{"lineNumber":22,"author":{"gitID":"neilish3re"},"content":"            return new SortCommand(isSort);"},{"lineNumber":23,"author":{"gitID":"neilish3re"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":24,"author":{"gitID":"neilish3re"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"neilish3re"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"neilish3re"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"neilish3re"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"neilish3re"},"content":"}"},{"lineNumber":29,"author":{"gitID":"neilish3re"},"content":""}],"authorContributionMap":{"Eldon-Chung":1,"-":7,"neilish3re":21}},{"path":"src/main/java/seedu/address/logic/parser/NotifyCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_BOUGHT;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_HELD;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_MADE;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_PRICE;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_PRICE_FALL;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_PRICE_RISE;"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_SOLD;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_WORTH;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_WORTH_FALL;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_WORTH_RISE;"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"import java.util.function.Predicate;"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.NotifyCommand;"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.NotificationRule;"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":" * Parses input arguments and creates a new NotifyCommand object"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"public class NotifyCommandParser implements Parser\u003cNotifyCommand\u003e {"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"    private static final TokenType[] EXPECTED_TOKEN_TYPES \u003d {"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_AMOUNT,"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_BOUGHT,"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_CODE,"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_HELD,"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_MADE,"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_NAME,"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_PRICE_RISE, PREFIX_PRICE_FALL, PREFIX_PRICE,"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_SOLD,"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_TAG,"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"        PREFIX_WORTH_RISE, PREFIX_WORTH_FALL, PREFIX_WORTH"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"    };"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"     * Parses the given {@code String} of arguments in the context of the NotifyCommand"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"     * and returns an NotifyCommand object for execution."},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"    public NotifyCommand parse(String args) throws ParseException {"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"            NotificationRule notifRule \u003d new NotificationRule(args);"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"            return new NotifyCommand(notifRule);"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotifyCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"     * Parses a string representation of a notification condition"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"     * @see ParserUtil#parseCondition(TokenStack)"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"    public static Predicate\u003cCoin\u003e parseNotifyCondition(String args)"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"            throws IllegalValueException {"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(args);"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"        return ParserUtil.parseCondition(ArgumentTokenizer.tokenizeToTokenStack(args, EXPECTED_TOKEN_TYPES));"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":72}},{"path":"src/main/java/seedu/address/logic/conditions/AmountChangeCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":" * Represents the predicates that evaluate two Amount objects. Is"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"public abstract class AmountChangeCondition extends AmountCondition {"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"     * Indicates whether to compare absolute or change"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"    public enum CompareMode {"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"        RISE,"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"        FALL"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    public final CompareMode compareMode;"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    public AmountChangeCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator, CompareMode compareMode) {"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"        super(amount, amountComparator);"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"        this.compareMode \u003d compareMode;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":27}},{"path":"src/main/java/seedu/address/logic/conditions/TagCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.STRING;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a predicate that evaluates to true when a {@Coin} contains the {@tag} specified."},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"public class TagCondition implements Predicate\u003cCoin\u003e {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PREFIX \u003d PREFIX_TAG;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PARAMETER_TYPE \u003d STRING;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private Tag tag;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public TagCondition(Tag tag) {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        this.tag \u003d tag;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        return coin.getTags().contains(tag);"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":31}},{"path":"src/main/java/seedu/address/logic/parser/ConditionGenerator.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.conditions.AmountChangeCondition.CompareMode;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.AmountHeldCondition;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.CodeCondition;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.conditions.CurrentPriceChangeCondition;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.CurrentPriceCondition;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.DollarsBoughtCondition;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.DollarsSoldCondition;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.MadeCondition;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.TagCondition;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.conditions.WorthChangeCondition;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.conditions.WorthCondition;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":" * Generates the predicate based ont he tokenized boolean logic statements to verify correctness."},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"public class ConditionGenerator {"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    private TokenStack tokenStack;"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public ConditionGenerator(TokenStack tokenStack) {"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        this.tokenStack \u003d tokenStack;"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"        this.tokenStack.resetStack();"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"     * @return Generates a predicate on {@code Coin} objects based on the argument represented by the token stack."},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws IllegalValueException"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"    public Predicate\u003cCoin\u003e generate() throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        return expression();"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"     * @return Generates a predicate on {@code Coin} objects based on the current EXPRESSION. (see DeveloperGuide.adoc)"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws IllegalValueException"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    Predicate\u003cCoin\u003e expression() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition \u003d term();"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"        while (tokenStack.matchTokenType(TokenType.BINARYBOOL)) {"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"            Token operatorToken \u003d tokenStack.popToken();"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"            Predicate\u003cCoin\u003e secondCondition \u003d term();"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"            switch (operatorToken.getPattern()) {"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"            case \" AND \":"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"                condition \u003d condition.and(secondCondition);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"                break;"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"            case \" OR \":"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"                condition \u003d condition.or(secondCondition);"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"                break;"},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"            default:"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"                break;"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        return condition;"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"     * @return Generates a predicate on {@code Coin} objects based on the current TERM. (see DeveloperGuide.adoc)"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws IllegalValueException"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"    Predicate\u003cCoin\u003e term() throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        Predicate\u003cCoin\u003e condition;"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"        if (tokenStack.matchAndPopTokenType(TokenType.LEFTPARENTHESES)) {"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"            condition \u003d expression();"},{"lineNumber":74,"author":{"gitID":"Eldon-Chung"},"content":"            tokenStack.matchAndPopTokenType(TokenType.RIGHTPARENTHESES);"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"            return condition;"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        } else if (tokenStack.matchAndPopTokenType(TokenType.UNARYBOOL)) {"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"            return term().negate();"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        return cond();"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"     * @return Generates a predicate on {@code Coin} objects based on the current COND. (see DeveloperGuide.adoc)"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws IllegalValueException"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"    Predicate\u003cCoin\u003e cond() throws IllegalValueException {"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        return getPredicateFromPrefix(tokenStack.popToken().getType());"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"     * @param type"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"     * @return a base predicate based on the prefix that is currently at the top of the stack."},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws IllegalValueException"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"    Predicate\u003cCoin\u003e getPredicateFromPrefix(TokenType type) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        BiPredicate\u003cAmount, Amount\u003e amountComparator;"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        Amount specifiedAmount;"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        CompareMode compareMode \u003d getCompareModeFromType(type);"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        switch (type) {"},{"lineNumber":100,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_HELD:"},{"lineNumber":101,"author":{"gitID":"Eldon-Chung"},"content":"            amountComparator \u003d getAmountComparatorFromToken(tokenStack.popToken());"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"            specifiedAmount \u003d ParserUtil.parseAmount(tokenStack.popToken().getPattern());"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"            return new AmountHeldCondition(specifiedAmount, amountComparator);"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_SOLD:"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"            amountComparator \u003d getAmountComparatorFromToken(tokenStack.popToken());"},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"            specifiedAmount \u003d ParserUtil.parseAmount(tokenStack.popToken().getPattern());"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"            return new DollarsSoldCondition(specifiedAmount, amountComparator);"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":110,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_BOUGHT:"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"            amountComparator \u003d getAmountComparatorFromToken(tokenStack.popToken());"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"            specifiedAmount \u003d ParserUtil.parseAmount(tokenStack.popToken().getPattern());"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"            return new DollarsBoughtCondition(specifiedAmount, amountComparator);"},{"lineNumber":114,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":115,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_MADE:"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"            amountComparator \u003d getAmountComparatorFromToken(tokenStack.popToken());"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"            specifiedAmount \u003d ParserUtil.parseAmount(tokenStack.popToken().getPattern());"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"            return new MadeCondition(specifiedAmount, amountComparator);"},{"lineNumber":119,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":120,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_PRICE:"},{"lineNumber":121,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_PRICE_RISE:"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_PRICE_FALL:"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"            amountComparator \u003d getAmountComparatorFromToken(tokenStack.popToken());"},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"            specifiedAmount \u003d ParserUtil.parseAmount(tokenStack.popToken().getPattern());"},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"            if (compareMode \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"Eldon-Chung"},"content":"                return new CurrentPriceCondition(specifiedAmount, amountComparator);"},{"lineNumber":127,"author":{"gitID":"Eldon-Chung"},"content":"            } else {"},{"lineNumber":128,"author":{"gitID":"Eldon-Chung"},"content":"                return new CurrentPriceChangeCondition(specifiedAmount, amountComparator, compareMode);"},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":131,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_WORTH:"},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_WORTH_RISE:"},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_WORTH_FALL:"},{"lineNumber":134,"author":{"gitID":"Eldon-Chung"},"content":"            amountComparator \u003d getAmountComparatorFromToken(tokenStack.popToken());"},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":"            specifiedAmount \u003d ParserUtil.parseAmount(tokenStack.popToken().getPattern());"},{"lineNumber":136,"author":{"gitID":"Eldon-Chung"},"content":"            if (compareMode \u003d\u003d null) {"},{"lineNumber":137,"author":{"gitID":"Eldon-Chung"},"content":"                return new WorthCondition(specifiedAmount, amountComparator);"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"            } else {"},{"lineNumber":139,"author":{"gitID":"Eldon-Chung"},"content":"                return new WorthChangeCondition(specifiedAmount, amountComparator, compareMode);"},{"lineNumber":140,"author":{"gitID":"Eldon-Chung"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_CODE:"},{"lineNumber":143,"author":{"gitID":"Eldon-Chung"},"content":"            return new CodeCondition(tokenStack.popToken().getPattern());"},{"lineNumber":144,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":145,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_TAG:"},{"lineNumber":146,"author":{"gitID":"Eldon-Chung"},"content":"            Tag tag \u003d ParserUtil.parseTag(tokenStack.popToken().getPattern());"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"            return new TagCondition(tag);"},{"lineNumber":148,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"        default:"},{"lineNumber":150,"author":{"gitID":"Eldon-Chung"},"content":"            assert false;"},{"lineNumber":151,"author":{"gitID":"Eldon-Chung"},"content":"            return null;"},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":155,"author":{"gitID":"Eldon-Chung"},"content":"    private CompareMode getCompareModeFromType(TokenType type) {"},{"lineNumber":156,"author":{"gitID":"Eldon-Chung"},"content":"        switch (type) {"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_PRICE_RISE:"},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_WORTH_RISE:"},{"lineNumber":159,"author":{"gitID":"Eldon-Chung"},"content":"            return CompareMode.RISE;"},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_PRICE_FALL:"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"        case PREFIX_WORTH_FALL:"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"            return CompareMode.FALL;"},{"lineNumber":164,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":"        default:"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"            return null;"},{"lineNumber":167,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"    private static BiPredicate\u003cAmount, Amount\u003e getAmountComparatorFromToken(Token token) {"},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":"        switch (token.getPattern()) {"},{"lineNumber":172,"author":{"gitID":"Eldon-Chung"},"content":"        case \"\u003d\":"},{"lineNumber":173,"author":{"gitID":"Eldon-Chung"},"content":"            return (amount1, amount2) -\u003e (amount1.compareTo(amount2) \u003d\u003d 0);"},{"lineNumber":174,"author":{"gitID":"Eldon-Chung"},"content":"        case \"\u003e\":"},{"lineNumber":175,"author":{"gitID":"Eldon-Chung"},"content":"            return (amount1, amount2) -\u003e (amount1.compareTo(amount2) \u003e 0);"},{"lineNumber":176,"author":{"gitID":"Eldon-Chung"},"content":"        case \"\u003c\":"},{"lineNumber":177,"author":{"gitID":"Eldon-Chung"},"content":"            return (amount1, amount2) -\u003e (amount1.compareTo(amount2) \u003c 0);"},{"lineNumber":178,"author":{"gitID":"Eldon-Chung"},"content":"        default:"},{"lineNumber":179,"author":{"gitID":"Eldon-Chung"},"content":"            return null;"},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":177,"-":5}},{"path":"src/main/java/seedu/address/logic/conditions/WorthChangeCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_WORTH;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":" * Represents a predicate that evaluates to true when the worth of a {@Coin} is either greater than or less than"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":" * (depending on the amount comparator) the amount specified."},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"public class WorthChangeCondition extends AmountChangeCondition  {"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    public static final TokenType PREFIX \u003d PREFIX_WORTH;"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    public WorthChangeCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator, CompareMode compareMode) {"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"        super(amount, amountComparator, compareMode);"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"        switch (compareMode) {"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"        case RISE:"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"            return amountComparator.test(Amount.getDiff("},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"                    coin.getDollarsWorth(), coin.getPrevState().getDollarsWorth()), amount);"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"        case FALL:"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"            return amountComparator.test(Amount.getDiff("},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"                    coin.getPrevState().getDollarsWorth(), coin.getDollarsWorth()), amount);"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        default:"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"            LogsCenter.getLogger(this.getClass()).warning(\"Invalid compare mode!\");"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":39}},{"path":"src/main/java/seedu/address/logic/conditions/MadeCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.NUM;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_MADE;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a predicate that evaluates to true when the amount made (dollar profit) of a {@Coin} is either"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" * greater than or less than (depending on the amount comparator) the amount specified."},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class MadeCondition extends AmountCondition  {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PREFIX \u003d PREFIX_MADE;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PARAMETER_TYPE \u003d NUM;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public MadeCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator) {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        super(amount, amountComparator);"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        return amountComparator.test(coin.getTotalProfit(), amount);"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":30}},{"path":"src/main/java/seedu/address/logic/conditions/CurrentPriceChangeCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.NUM;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_PRICE;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":" * Represents a predicate that evaluates to true when the price of a {@Coin} is either greater than or less than"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":" * (depending on the amount comparator) the amount specified."},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"public class CurrentPriceChangeCondition extends AmountChangeCondition {"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    public static final TokenType PREFIX \u003d PREFIX_PRICE;"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    public static final TokenType PARAMETER_TYPE \u003d NUM;"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    public CurrentPriceChangeCondition(Amount amount,"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"                                       BiPredicate\u003cAmount, Amount\u003e amountComparator,"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"                                       CompareMode compareMode) {"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"        super(amount, amountComparator, compareMode);"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"        switch (compareMode) {"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"        case RISE:"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"            return amountComparator.test(coin.getChangeFromPrev().getPrice().getCurrent(), amount);"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        case FALL:"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"            return amountComparator.test(coin.getChangeToPrev().getPrice().getCurrent(), amount);"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"        default:"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"            LogsCenter.getLogger(this.getClass()).warning(\"Invalid compare mode!\");"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":42}},{"path":"src/main/java/seedu/address/logic/conditions/AmountCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":" * Represents the predicates that evaluate two Amount objects. Is"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"public abstract class AmountCondition implements Predicate\u003cCoin\u003e {"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    protected BiPredicate\u003cAmount, Amount\u003e amountComparator;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    protected Amount amount;"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public AmountCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator) {"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"        this.amount \u003d amount;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"        this.amountComparator \u003d amountComparator;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public abstract boolean test(Coin coin);"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":24}},{"path":"src/main/java/seedu/address/logic/conditions/CurrentPriceCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.NUM;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_PRICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a predicate that evaluates to true when the price of a {@Coin} is either greater than or less than"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" * (depending on the amount comparator) the amount specified."},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class CurrentPriceCondition extends AmountCondition {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PREFIX \u003d PREFIX_PRICE;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PARAMETER_TYPE \u003d NUM;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public CurrentPriceCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator) {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        super(amount, amountComparator);"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"        return amountComparator.test(new Amount(coin.getPrice().getCurrent()), amount);"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":30,"-":1}},{"path":"src/main/java/seedu/address/logic/conditions/WorthCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_WORTH;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a predicate that evaluates to true when the worth of a {@Coin} is either greater than or less than"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * (depending on the amount comparator) the amount specified."},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"public class WorthCondition extends AmountCondition  {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PREFIX \u003d PREFIX_WORTH;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public WorthCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator) {"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        super(amount, amountComparator);"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"        return amountComparator.test(coin.getDollarsWorth(), amount);"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":28}},{"path":"src/main/java/seedu/address/logic/conditions/CodeCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.STRING;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a predicate that evaluates to true when a {@Coin} contains the {@Code} specified."},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"public class CodeCondition implements Predicate\u003cCoin\u003e {"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PREFIX \u003d PREFIX_CODE;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PARAMETER_TYPE \u003d STRING;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private String substring;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public CodeCondition(String substring) {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        this.substring \u003d substring;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        return coin.getCode().toString().toUpperCase().contains(substring.toUpperCase());"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":30}},{"path":"src/main/java/seedu/address/logic/conditions/DollarsBoughtCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.NUM;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_BOUGHT;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a predicate that evaluates to true when the amount bought of a {@Coin} is either greater than or less than"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" * (depending on the amount comparator) the amount specified."},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class DollarsBoughtCondition extends AmountCondition {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PREFIX \u003d PREFIX_BOUGHT;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PARAMETER_TYPE \u003d NUM;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public DollarsBoughtCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator) {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        super(amount, amountComparator);"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        return amountComparator.test(coin.getTotalDollarsBought(), amount);"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":30}},{"path":"src/main/java/seedu/address/logic/conditions/AmountHeldCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.NUM;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_HELD;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a predicate that evaluates to true when the amount held of a {@Coin} is either greater than or less than"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" * (depending on the amount comparator) the amount specified."},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class AmountHeldCondition extends AmountCondition {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PREFIX \u003d PREFIX_HELD;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PARAMETER_TYPE \u003d NUM;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public AmountHeldCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator) {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        super(amount, amountComparator);"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        return amountComparator.test(coin.getCurrentAmountHeld(), amount);"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":30}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" * Deletes a coin identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"            + \": Deletes the coin identified by the index number used in the last coin listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_DELETE_COIN_SUCCESS \u003d \"Deleted Coin: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final CommandTarget target;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    private Coin coinToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(CommandTarget target) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.target \u003d target;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(coinToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"            model.deleteCoin(coinToDelete);"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (CoinNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"            throw new AssertionError(\"The target coin cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_COIN_SUCCESS, coinToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoin\u003e lastShownList \u003d model.getFilteredCoinList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Index index \u003d target.toIndex(model.getFilteredCoinList());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            coinToDelete \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.target.equals(((DeleteCommand) other).target) // state check"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 Objects.equals(this.coinToDelete, ((DeleteCommand) other).coinToDelete));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":14,"-":55}},{"path":"src/main/java/seedu/address/logic/conditions/DollarsSoldCondition.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.logic.conditions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.NUM;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_SOLD;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.logic.parser.TokenType;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"//@@author Eldon-Chung"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a predicate that evaluates to true when the amount bought of a {@Coin} is either greater than or less than"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":" * (depending on the amount comparator) the amount specified."},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"public class DollarsSoldCondition extends AmountCondition  {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PREFIX \u003d PREFIX_SOLD;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static final TokenType PARAMETER_TYPE \u003d NUM;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public DollarsSoldCondition(Amount amount, BiPredicate\u003cAmount, Amount\u003e amountComparator) {"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"        super(amount, amountComparator);"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"        return amountComparator.test(coin.getTotalDollarsSold(), amount);"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":30}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":" * Selects a coin identified using it\u0027s last displayed index from the address book."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"public class ViewCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"v\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"            + \": Selects the coin identified by the index number used in the last coin listing.\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_SELECT_COIN_SUCCESS \u003d \"Selected Coin: %1$s\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandTarget target;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ViewCommand(CommandTarget target) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.target \u003d target;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            Index index \u003d target.toIndex(model.getFilteredCoinList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new JumpToListRequestEvent(index));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SELECT_COIN_SUCCESS, index.getOneBased()));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.target.equals(((ViewCommand) other).target)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":7,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.FilterChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":" * Lists all coins in the address book to the user."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all coins\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new FilterChangedEvent(\"all\"));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":5,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"y\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Coin book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new CoinBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":2,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of coins."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"     * @return summary message for coins displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"    public static String getMessageForCoinListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        return String.format(Messages.MESSAGE_COINS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.core.CoinSubredditList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":" * Adds a coin to the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a coin to the coin book. \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"            + PREFIX_CODE + \"NAME \""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"            + PREFIX_CODE + \"BTC \""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"            + PREFIX_TAG + \"fav \""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"            + PREFIX_TAG + \"fastTransfer\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New coin added: %1$s\";"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_DUPLICATE_COIN \u003d \"This coin already exists in the coin book\";"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_COIN_CODE_NOT_REGISTERED \u003d \"\\nThis coin is not currently in CoinBook\u0027s registry.\""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"            + \"\\n - View WILL not be able to fetch you Reddit posts for this coin.\""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"            + \"\\n - Sync MAY not be able to fetch the latest price. \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    private final Coin toAdd;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     * Creates an AddCommand to add the specified {@code Coin}"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"    public AddCommand(Coin coin) {"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(coin);"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"        toAdd \u003d coin;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"            model.addCoin(toAdd);"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"            return new CommandResult(getSuccessMessage());"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException e) {"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_COIN);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"    private String getSuccessMessage() {"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        return String.format(MESSAGE_SUCCESS"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"                + (CoinSubredditList.isRecognized(toAdd) ? \"\" : MESSAGE_COIN_CODE_NOT_REGISTERED), toAdd);"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":32,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"?\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/SyncCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":"import java.util.concurrent.ExecutionException;"},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":"import java.util.concurrent.Future;"},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"import org.apache.http.NameValuePair;"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":"import org.apache.http.message.BasicNameValuePair;"},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":"import org.asynchttpclient.Response;"},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.Gson;"},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.JsonElement;"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.JsonObject;"},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":"import com.google.gson.reflect.TypeToken;"},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":24,"author":{"gitID":"laichengyu"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":25,"author":{"gitID":"laichengyu"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":"import seedu.address.commons.events.ui.LoadingEvent;"},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":"import seedu.address.commons.util.FetchUtil;"},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":"import seedu.address.commons.util.UrlBuilderUtil;"},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.coin.Price;"},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":33,"author":{"gitID":"laichengyu"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":34,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":35,"author":{"gitID":"laichengyu"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"laichengyu"},"content":" * Updates all coins in the coin book with latest cryptocurrency data"},{"lineNumber":37,"author":{"gitID":"laichengyu"},"content":" */"},{"lineNumber":38,"author":{"gitID":"laichengyu"},"content":"public class SyncCommand extends Command {"},{"lineNumber":39,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":40,"author":{"gitID":"laichengyu"},"content":"    public static final String COMMAND_WORD \u003d \"sync\";"},{"lineNumber":41,"author":{"gitID":"laichengyu"},"content":"    public static final String COMMAND_ALIAS \u003d \"sy\";"},{"lineNumber":42,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":43,"author":{"gitID":"laichengyu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Synced all coins with latest cryptocurrency data\";"},{"lineNumber":44,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":45,"author":{"gitID":"laichengyu"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(SyncCommand.class);"},{"lineNumber":46,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":47,"author":{"gitID":"laichengyu"},"content":"    private static final String historicalPriceApiUrl \u003d \"https://min-api.cryptocompare.com/data/histohour\";"},{"lineNumber":48,"author":{"gitID":"laichengyu"},"content":"    private static final String cryptoCompareApiUrl \u003d \"https://min-api.cryptocompare.com/data/pricemultifull\";"},{"lineNumber":49,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":50,"author":{"gitID":"laichengyu"},"content":"    private static final String HISTORICAL \u003d \"historical\";"},{"lineNumber":51,"author":{"gitID":"laichengyu"},"content":"    private static final String CURRENT \u003d \"current\";"},{"lineNumber":52,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":53,"author":{"gitID":"laichengyu"},"content":"    private static final String CODE_PARAM \u003d \"fsym\";"},{"lineNumber":54,"author":{"gitID":"laichengyu"},"content":"    private static final String CURRENCY_PARAM \u003d \"tsym\";"},{"lineNumber":55,"author":{"gitID":"laichengyu"},"content":"    private static final String PLURALIZE \u003d \"s\";"},{"lineNumber":56,"author":{"gitID":"laichengyu"},"content":"    private static final String CURRENCY_TYPE \u003d \"USD\";"},{"lineNumber":57,"author":{"gitID":"laichengyu"},"content":"    private static final String LIMIT_PARAM \u003d \"limit\";"},{"lineNumber":58,"author":{"gitID":"laichengyu"},"content":"    private static final String HISTORICAL_DATA_HOURS_LIMIT \u003d \"168\";"},{"lineNumber":59,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":60,"author":{"gitID":"laichengyu"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"laichengyu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"laichengyu"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"laichengyu"},"content":"            String commaSeparatedCodes \u003d concatenateByComma(model.getCodeList());"},{"lineNumber":64,"author":{"gitID":"laichengyu"},"content":"            HashMap\u003cString, Price\u003e newPriceMetrics \u003d createPriceObjects(getCurrentPriceRawData(commaSeparatedCodes));"},{"lineNumber":65,"author":{"gitID":"laichengyu"},"content":"            model.syncAll(newPriceMetrics);"},{"lineNumber":66,"author":{"gitID":"laichengyu"},"content":"        } catch (DuplicateCoinException dpe) {"},{"lineNumber":67,"author":{"gitID":"laichengyu"},"content":"            throw new CommandException(\"Unexpected code path!\");"},{"lineNumber":68,"author":{"gitID":"laichengyu"},"content":"        } catch (CoinNotFoundException cnfe) {"},{"lineNumber":69,"author":{"gitID":"laichengyu"},"content":"            throw new AssertionError(\"The target coin cannot be missing\");"},{"lineNumber":70,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"laichengyu"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":72,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":74,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"laichengyu"},"content":"     * Creates and returns a {@code List\u003cNameValuePair\u003e} with at least two key-value pairs, coin symbols and currency."},{"lineNumber":76,"author":{"gitID":"laichengyu"},"content":"     * Additional parameters are optional based on the {@code type}"},{"lineNumber":77,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"laichengyu"},"content":"     * @param commaSeparatedCodes cannot be null"},{"lineNumber":79,"author":{"gitID":"laichengyu"},"content":"     * @param type                specifies type of data required"},{"lineNumber":80,"author":{"gitID":"laichengyu"},"content":"     * @return parameters for specified API call"},{"lineNumber":81,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"laichengyu"},"content":"    private List\u003cNameValuePair\u003e buildParams(String commaSeparatedCodes, String type) {"},{"lineNumber":83,"author":{"gitID":"laichengyu"},"content":"        List\u003cNameValuePair\u003e parameters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"laichengyu"},"content":"        addBasicNecessaryParams(parameters, commaSeparatedCodes, type);"},{"lineNumber":85,"author":{"gitID":"laichengyu"},"content":"        addAdditionalParams(parameters, type);"},{"lineNumber":86,"author":{"gitID":"laichengyu"},"content":"        return parameters;"},{"lineNumber":87,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":89,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"laichengyu"},"content":"     * Add the API parameters to the given list"},{"lineNumber":91,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"laichengyu"},"content":"     * @param params              List of API parameters"},{"lineNumber":93,"author":{"gitID":"laichengyu"},"content":"     * @param commaSeparatedCodes Coin codes to use"},{"lineNumber":94,"author":{"gitID":"laichengyu"},"content":"     * @param type                API type to get from"},{"lineNumber":95,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"laichengyu"},"content":"    private void addBasicNecessaryParams(List\u003cNameValuePair\u003e params, String commaSeparatedCodes, String type) {"},{"lineNumber":97,"author":{"gitID":"laichengyu"},"content":"        switch (type) {"},{"lineNumber":98,"author":{"gitID":"laichengyu"},"content":"        case HISTORICAL:"},{"lineNumber":99,"author":{"gitID":"laichengyu"},"content":"            params.add(new BasicNameValuePair(CODE_PARAM, commaSeparatedCodes));"},{"lineNumber":100,"author":{"gitID":"laichengyu"},"content":"            params.add(new BasicNameValuePair(CURRENCY_PARAM, CURRENCY_TYPE));"},{"lineNumber":101,"author":{"gitID":"laichengyu"},"content":"            break;"},{"lineNumber":102,"author":{"gitID":"laichengyu"},"content":"        case CURRENT:"},{"lineNumber":103,"author":{"gitID":"laichengyu"},"content":"            params.add(new BasicNameValuePair(CODE_PARAM + PLURALIZE, commaSeparatedCodes));"},{"lineNumber":104,"author":{"gitID":"laichengyu"},"content":"            params.add(new BasicNameValuePair(CURRENCY_PARAM + PLURALIZE, CURRENCY_TYPE));"},{"lineNumber":105,"author":{"gitID":"laichengyu"},"content":"            break;"},{"lineNumber":106,"author":{"gitID":"laichengyu"},"content":"        default:"},{"lineNumber":107,"author":{"gitID":"laichengyu"},"content":"            break;"},{"lineNumber":108,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":111,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"laichengyu"},"content":"     * Adds any additional parameters required for the API call"},{"lineNumber":113,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"laichengyu"},"content":"     * @param params cannot be null"},{"lineNumber":115,"author":{"gitID":"laichengyu"},"content":"     * @param type   specifies type of data required"},{"lineNumber":116,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"laichengyu"},"content":"    void addAdditionalParams(List\u003cNameValuePair\u003e params, String type) {"},{"lineNumber":118,"author":{"gitID":"laichengyu"},"content":"        switch (type) {"},{"lineNumber":119,"author":{"gitID":"laichengyu"},"content":"        case HISTORICAL:"},{"lineNumber":120,"author":{"gitID":"laichengyu"},"content":"            params.add(new BasicNameValuePair(LIMIT_PARAM, HISTORICAL_DATA_HOURS_LIMIT));"},{"lineNumber":121,"author":{"gitID":"laichengyu"},"content":"            break;"},{"lineNumber":122,"author":{"gitID":"laichengyu"},"content":"        default:"},{"lineNumber":123,"author":{"gitID":"laichengyu"},"content":"            //no additional parameters"},{"lineNumber":124,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":127,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"laichengyu"},"content":"     * Concatenates a list of strings into one with each string separated by a comma"},{"lineNumber":129,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"laichengyu"},"content":"     * @param list of strings to be concatenated"},{"lineNumber":131,"author":{"gitID":"laichengyu"},"content":"     * @return comma separated string"},{"lineNumber":132,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"laichengyu"},"content":"    private String concatenateByComma(List\u003cString\u003e list) {"},{"lineNumber":134,"author":{"gitID":"laichengyu"},"content":"        return String.join(\",\", list);"},{"lineNumber":135,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":137,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"laichengyu"},"content":"     * Adds parameters to the CryptoCompare API URL."},{"lineNumber":139,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":140,"author":{"gitID":"laichengyu"},"content":"     * @param params cannot be null"},{"lineNumber":141,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"laichengyu"},"content":"    private String buildApiUrl(String url, List\u003cNameValuePair\u003e params) {"},{"lineNumber":143,"author":{"gitID":"laichengyu"},"content":"        return UrlBuilderUtil.buildUrl(url, params);"},{"lineNumber":144,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":146,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"laichengyu"},"content":"     * Dispatches a {@code LoadingEvent} while waiting for the Response object from the Future object"},{"lineNumber":148,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"laichengyu"},"content":"     * @param promise that returns the desired data"},{"lineNumber":150,"author":{"gitID":"laichengyu"},"content":"     * @return Response object retrieved from the Future"},{"lineNumber":151,"author":{"gitID":"laichengyu"},"content":"     * @throws InterruptedException"},{"lineNumber":152,"author":{"gitID":"laichengyu"},"content":"     * @throws ExecutionException"},{"lineNumber":153,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"laichengyu"},"content":"    private Response waitForResponse(Future\u003cResponse\u003e promise) throws InterruptedException, ExecutionException {"},{"lineNumber":155,"author":{"gitID":"laichengyu"},"content":"        //Set loading UI"},{"lineNumber":156,"author":{"gitID":"laichengyu"},"content":"        EventsCenter.getInstance().post(new LoadingEvent(true));"},{"lineNumber":157,"author":{"gitID":"laichengyu"},"content":"        Response response \u003d promise.get();"},{"lineNumber":158,"author":{"gitID":"laichengyu"},"content":"        //Return UI to normal"},{"lineNumber":159,"author":{"gitID":"laichengyu"},"content":"        EventsCenter.getInstance().post(new LoadingEvent(false));"},{"lineNumber":160,"author":{"gitID":"laichengyu"},"content":"        return response;"},{"lineNumber":161,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":163,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"laichengyu"},"content":"     * Fetches the raw data for all codes current price."},{"lineNumber":165,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"laichengyu"},"content":"    private JsonObject getCurrentPriceRawData(String commaSeparatedCodes) {"},{"lineNumber":167,"author":{"gitID":"laichengyu"},"content":"        List\u003cNameValuePair\u003e currentPriceParams \u003d buildParams(commaSeparatedCodes, CURRENT);"},{"lineNumber":168,"author":{"gitID":"laichengyu"},"content":"        JsonElement currentPriceData \u003d getJsonObject(cryptoCompareApiUrl, currentPriceParams).get(\"RAW\");"},{"lineNumber":169,"author":{"gitID":"laichengyu"},"content":"        if (currentPriceData \u003d\u003d null) {"},{"lineNumber":170,"author":{"gitID":"laichengyu"},"content":"            return new JsonObject();"},{"lineNumber":171,"author":{"gitID":"laichengyu"},"content":"        } else {"},{"lineNumber":172,"author":{"gitID":"laichengyu"},"content":"            return currentPriceData.getAsJsonObject();"},{"lineNumber":173,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":176,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"laichengyu"},"content":"     * Gets the specified object from the given web API call"},{"lineNumber":178,"author":{"gitID":"laichengyu"},"content":"     * @param url         API URL"},{"lineNumber":179,"author":{"gitID":"laichengyu"},"content":"     * @param priceParams Parameters for API"},{"lineNumber":180,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"laichengyu"},"content":"    private JsonObject getJsonObject(String url, List\u003cNameValuePair\u003e priceParams) {"},{"lineNumber":182,"author":{"gitID":"laichengyu"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"laichengyu"},"content":"            String priceUrl \u003d buildApiUrl(url, priceParams);"},{"lineNumber":184,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":185,"author":{"gitID":"laichengyu"},"content":"            Future\u003cResponse\u003e promise \u003d FetchUtil.asyncFetch(priceUrl);"},{"lineNumber":186,"author":{"gitID":"laichengyu"},"content":"            Response response \u003d waitForResponse(promise);"},{"lineNumber":187,"author":{"gitID":"laichengyu"},"content":"            return FetchUtil.parseStringToJsonObj(response.getResponseBody());"},{"lineNumber":188,"author":{"gitID":"laichengyu"},"content":"        } catch (InterruptedException ie) {"},{"lineNumber":189,"author":{"gitID":"laichengyu"},"content":"            logger.warning(\"Thread interrupted\");"},{"lineNumber":190,"author":{"gitID":"laichengyu"},"content":"        } catch (ExecutionException ee) {"},{"lineNumber":191,"author":{"gitID":"laichengyu"},"content":"            logger.warning(\"Data fetching error\");"},{"lineNumber":192,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"laichengyu"},"content":"        return new JsonObject();"},{"lineNumber":194,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":196,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"laichengyu"},"content":"     * Creates and returns a {@code HashMap\u003cString, Price\u003e} of code and price metrics as key-value pairs."},{"lineNumber":198,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":199,"author":{"gitID":"laichengyu"},"content":"     * @param currentPriceData contains the latest prices of each of the user\u0027s coin"},{"lineNumber":200,"author":{"gitID":"laichengyu"},"content":"     * @return HashMap containing price metrics of each coin retrieval by its code"},{"lineNumber":201,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"laichengyu"},"content":"    private HashMap\u003cString, Price\u003e createPriceObjects(JsonObject currentPriceData) {"},{"lineNumber":203,"author":{"gitID":"laichengyu"},"content":"        requireAllNonNull(currentPriceData);"},{"lineNumber":204,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":205,"author":{"gitID":"laichengyu"},"content":"        HashMap\u003cString, Price\u003e priceObjs \u003d new HashMap\u003c\u003e();"},{"lineNumber":206,"author":{"gitID":"laichengyu"},"content":"        List\u003cString\u003e codes \u003d model.getCodeList();"},{"lineNumber":207,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":208,"author":{"gitID":"laichengyu"},"content":"        for (String code : codes) {"},{"lineNumber":209,"author":{"gitID":"laichengyu"},"content":"            JsonElement coinCurrentPriceMetrics \u003d currentPriceData.get(code);"},{"lineNumber":210,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":211,"author":{"gitID":"laichengyu"},"content":"            if (coinCurrentPriceMetrics \u003d\u003d null) {"},{"lineNumber":212,"author":{"gitID":"laichengyu"},"content":"                continue;"},{"lineNumber":213,"author":{"gitID":"laichengyu"},"content":"            }"},{"lineNumber":214,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":215,"author":{"gitID":"laichengyu"},"content":"            Price newPrice \u003d new Price();"},{"lineNumber":216,"author":{"gitID":"laichengyu"},"content":"            newPrice.setCurrent(new Amount(coinCurrentPriceMetrics"},{"lineNumber":217,"author":{"gitID":"laichengyu"},"content":"                    .getAsJsonObject()"},{"lineNumber":218,"author":{"gitID":"laichengyu"},"content":"                    .get(CURRENCY_TYPE)"},{"lineNumber":219,"author":{"gitID":"laichengyu"},"content":"                    .getAsJsonObject()"},{"lineNumber":220,"author":{"gitID":"laichengyu"},"content":"                    .get(\"PRICE\")"},{"lineNumber":221,"author":{"gitID":"laichengyu"},"content":"                    .getAsString()));"},{"lineNumber":222,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":223,"author":{"gitID":"ewaldhew"},"content":"            //@@author ewaldhew"},{"lineNumber":224,"author":{"gitID":"ewaldhew"},"content":"            ArrayList\u003cJsonObject\u003e historicalPriceRawData \u003d getHistoricalPriceRawData(code);"},{"lineNumber":225,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":226,"author":{"gitID":"ewaldhew"},"content":"            List\u003cAmount\u003e historicalPrices \u003d"},{"lineNumber":227,"author":{"gitID":"ewaldhew"},"content":"                    historicalPriceRawData.stream()"},{"lineNumber":228,"author":{"gitID":"ewaldhew"},"content":"                            .map(obj -\u003e new Amount(obj.get(\"close\").getAsString()))"},{"lineNumber":229,"author":{"gitID":"ewaldhew"},"content":"                            .collect(Collectors.toList());"},{"lineNumber":230,"author":{"gitID":"ewaldhew"},"content":"            List\u003cString\u003e historicalTimes \u003d"},{"lineNumber":231,"author":{"gitID":"ewaldhew"},"content":"                    historicalPriceRawData.stream()"},{"lineNumber":232,"author":{"gitID":"ewaldhew"},"content":"                            .map(obj -\u003e obj.get(\"time\").getAsString())"},{"lineNumber":233,"author":{"gitID":"ewaldhew"},"content":"                            .collect(Collectors.toList());"},{"lineNumber":234,"author":{"gitID":"ewaldhew"},"content":"            newPrice.setHistorical(historicalPrices, historicalTimes);"},{"lineNumber":235,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":236,"author":{"gitID":"ewaldhew"},"content":"            priceObjs.put(code, newPrice);"},{"lineNumber":237,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"ewaldhew"},"content":"        return priceObjs;"},{"lineNumber":239,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":241,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"ewaldhew"},"content":"     * Fetches the raw data for single code historical prices"},{"lineNumber":243,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"ewaldhew"},"content":"    private ArrayList\u003cJsonObject\u003e getHistoricalPriceRawData(String code) {"},{"lineNumber":245,"author":{"gitID":"ewaldhew"},"content":"        List\u003cNameValuePair\u003e histoPriceParams \u003d buildParams(code, HISTORICAL);"},{"lineNumber":246,"author":{"gitID":"ewaldhew"},"content":"        JsonElement histoPriceArray \u003d getJsonObject(historicalPriceApiUrl, histoPriceParams).get(\"Data\");"},{"lineNumber":247,"author":{"gitID":"ewaldhew"},"content":"        return new Gson().fromJson(histoPriceArray.toString(), new TypeToken\u003cList\u003cJsonObject\u003e\u003e(){}.getType());"},{"lineNumber":248,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":250,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":28,"laichengyu":222}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Sorts all coins in Coin List by alphabetical order and displays sorted list to user"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"neilish3re"},"content":"//@@author neilish3re"},{"lineNumber":7,"author":{"gitID":"neilish3re"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":8,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":9,"author":{"gitID":"neilish3re"},"content":"    public static final String COMMAND_WORD \u003d \"order\";"},{"lineNumber":10,"author":{"gitID":"neilish3re"},"content":"    public static final String COMMAND_ALIAS \u003d \"o\";"},{"lineNumber":11,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":12,"author":{"gitID":"neilish3re"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":13,"author":{"gitID":"neilish3re"},"content":"            + \": Displays all the coins the user has input into the Coin Book as a list\""},{"lineNumber":14,"author":{"gitID":"neilish3re"},"content":"            + \" sorted by lexicographical order of cryptocurrency coin name\\n\";"},{"lineNumber":15,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":16,"author":{"gitID":"neilish3re"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all coins lexicographically\";"},{"lineNumber":17,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":18,"author":{"gitID":"neilish3re"},"content":"    private final boolean isSort;"},{"lineNumber":19,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":20,"author":{"gitID":"neilish3re"},"content":"    public SortCommand(boolean isSort) {"},{"lineNumber":21,"author":{"gitID":"neilish3re"},"content":"        this.isSort \u003d isSort;"},{"lineNumber":22,"author":{"gitID":"neilish3re"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":24,"author":{"gitID":"neilish3re"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"neilish3re"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":26,"author":{"gitID":"neilish3re"},"content":"        model.sortCoinList(isSort);"},{"lineNumber":27,"author":{"gitID":"neilish3re"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":28,"author":{"gitID":"neilish3re"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"neilish3re"},"content":"}"},{"lineNumber":30,"author":{"gitID":"neilish3re"},"content":""}],"authorContributionMap":{"-":5,"neilish3re":25}},{"path":"src/main/java/seedu/address/logic/commands/SpawnNotificationCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.model.CoinChangedEvent;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.events.ui.ShowNotificationRequestEvent;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":" * Spawns a pop-up notification in the corner of the screen."},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"public class SpawnNotificationCommand extends ActionCommand\u003cCoin\u003e {"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"    private final String message;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"    private Coin jumpTo;"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    private Index index;"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    public SpawnNotificationCommand(String message) {"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"        this.message \u003d message;"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"    public void setExtraData(Coin data, BaseEvent event) {"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"        assert(event instanceof CoinChangedEvent);"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        jumpTo \u003d data;"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"        index \u003d ((CoinChangedEvent) event).index;"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"    public CommandResult execute() {"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"            EventsCenter.getInstance()"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"                    .post(new ShowNotificationRequestEvent(message, index, jumpTo.getCode().toString()));"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"            // Should not throw here, but do not crash anyway"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"            LogsCenter.getLogger(this.getClass()).severe(\"Encountered invalid index in rule execute.\");"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"        return new CommandResult(\"\");"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"                || (other instanceof SpawnNotificationCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 this.message.equals(((SpawnNotificationCommand) other).message)); // state check"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":51}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    private ReadOnlyCoinBook previousCoinBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    private void saveCoinBookSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"        this.previousCoinBook \u003d new CoinBook(model.getCoinBook());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Reverts the CoinBook to the state before this command"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"     * was executed and updates the filtered coin list to"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"     * show all coins."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        requireAllNonNull(model, previousCoinBook);"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        model.resetData(previousCoinBook);"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"     * Executes the command and updates the filtered coin"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"     * list to show all coins."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"        saveCoinBookSnapshot();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":13,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/NotifyCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.NotificationRule;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.exceptions.DuplicateRuleException;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":" * Adds a new notification with the specified conditions."},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"public class NotifyCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"    public static final String COMMAND_WORD \u003d \"notify\";"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"    public static final String COMMAND_ALIAS \u003d \"n\";"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new notification to be triggered \""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"            + \"upon the specified rule. Rules are provided in the following format:\\n\""},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"            + \"Parameters: TARGET OPTION/VALUE [...] \\n\""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"            + \"Example: \" + COMMAND_WORD + \" c/BTC AND p/\u003e15000\";"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Added: %1$s\";"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_DUPLICATE_RULE \u003d \"This notification rule already exists!\";"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"    private final NotificationRule rule;"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"    public NotifyCommand(NotificationRule rule) {"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(rule);"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"        this.rule \u003d rule;"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"            model.addRule(rule);"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, rule));"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"        } catch (DuplicateRuleException e) {"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RULE);"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"                || (other instanceof NotifyCommand) // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 this.rule.equals(((NotifyCommand) other).rule); // state check"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":51}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"z\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"q\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Coin Book as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":2,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_CODE;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_PRICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.FilterChangedEvent;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":" * Finds and lists all coins in address book whose name contains any of the argument keywords."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all coins specified by the conditions.\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: CONDITION \""},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_CODE + \"BTC AND \" + PREFIX_PRICE + \"\u003e50\";"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final String description;"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    private final Predicate\u003cCoin\u003e coinCondition;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author Eldon-Chung"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    public FindCommand(String description, Predicate\u003cCoin\u003e coinCondition) {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        this.description \u003d description;"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"        this.coinCondition \u003d coinCondition;"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"        /*"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"         * Note: there isn\u0027t a good way to evaluate equality."},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"         * There are ways around it, but it is not clear whether those drastic measures are needed."},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"         * So we will always return false instead."},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"        return false;"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    public CommandResult execute() {"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateFilteredCoinList(coinCondition);"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        EventsCenter.getInstance().post(new FilterChangedEvent(description));"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        return new CommandResult(getMessageForCoinListShownSummary(model.getFilteredCoinList().size()));"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    //@@author"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return description;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":35,"-":21}},{"path":"src/main/java/seedu/address/logic/CommandList.java","lines":[{"lineNumber":1,"author":{"gitID":"laichengyu"},"content":"//@@author laichengyu"},{"lineNumber":2,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":3,"author":{"gitID":"laichengyu"},"content":"package seedu.address.logic;"},{"lineNumber":4,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":5,"author":{"gitID":"laichengyu"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"laichengyu"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":8,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":9,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.BuyCommand;"},{"lineNumber":10,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":12,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":13,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":15,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":16,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.NotifyCommand;"},{"lineNumber":18,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.SellCommand;"},{"lineNumber":20,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":21,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.SyncCommand;"},{"lineNumber":22,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":23,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"laichengyu"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":25,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":" * Stores a list of all available commands"},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":" */"},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":"public class CommandList {"},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":"    public static final List\u003cString\u003e COMMAND_LIST \u003d Arrays.asList(HelpCommand.COMMAND_WORD, AddCommand.COMMAND_WORD,"},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":"            BuyCommand.COMMAND_WORD, SellCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD,"},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"            ClearCommand.COMMAND_WORD, TagCommand.COMMAND_WORD, ListCommand.COMMAND_WORD,"},{"lineNumber":33,"author":{"gitID":"laichengyu"},"content":"            FindCommand.COMMAND_WORD, ViewCommand.COMMAND_WORD, NotifyCommand.COMMAND_WORD,"},{"lineNumber":34,"author":{"gitID":"laichengyu"},"content":"            SortCommand.COMMAND_WORD, HistoryCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD,"},{"lineNumber":35,"author":{"gitID":"laichengyu"},"content":"            RedoCommand.COMMAND_WORD, SyncCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD);"},{"lineNumber":36,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":37,"author":{"gitID":"laichengyu"},"content":"}"}],"authorContributionMap":{"laichengyu":37}},{"path":"src/main/java/seedu/address/logic/commands/BuyCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":" * Adds value to an existing coin in the book."},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"public class BuyCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    public static final String COMMAND_WORD \u003d \"buy\";"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    public static final String COMMAND_ALIAS \u003d \"b\";"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add value to the coin account identified \""},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"            + \"by the index number used in the last coin listing or its code. \""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"            + \"Parameters: TARGET \""},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"            + PREFIX_AMOUNT + \"AMOUNT\\n\""},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_AMOUNT + \"50.0\";"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_BUY_COIN_SUCCESS \u003d \"Bought: %1$s\";"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_NOT_BOUGHT \u003d \"Invalid code or amount entered.\";"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"    private final CommandTarget target;"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"    private final Amount amountToAdd;"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"    private Coin coinToEdit;"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"    private Coin editedCoin;"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"     * @param target      in the filtered coin list to change"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"     * @param amountToAdd to the coin"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"    public BuyCommand(CommandTarget target, Amount amountToAdd) {"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(target);"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"        this.target \u003d target;"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"        this.amountToAdd \u003d amountToAdd;"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"            model.updateCoin(coinToEdit, editedCoin);"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"        } catch (DuplicateCoinException dpe) {"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"            throw new CommandException(\"Unexpected code path!\");"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"        } catch (CoinNotFoundException pnfe) {"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"            throw new AssertionError(\"The target coin cannot be missing\");"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"        model.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"        return new CommandResult(String.format(MESSAGE_BUY_COIN_SUCCESS, editedCoin));"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"        List\u003cCoin\u003e lastShownList \u003d model.getFilteredCoinList();"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"            Index index \u003d target.toIndex(model.getFilteredCoinList());"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"            coinToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"            editedCoin \u003d createEditedCoin(coinToEdit, amountToAdd);"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"        } catch (IndexOutOfBoundsException oobe) {"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":79,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"ewaldhew"},"content":"     * Creates and returns a {@code Coin} with the details of {@code coinToEdit}"},{"lineNumber":81,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"ewaldhew"},"content":"    private static Coin createEditedCoin(Coin coinToEdit, Amount amountToAdd) {"},{"lineNumber":83,"author":{"gitID":"ewaldhew"},"content":"        assert coinToEdit !\u003d null;"},{"lineNumber":84,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":85,"author":{"gitID":"ewaldhew"},"content":"        Coin editedCoin \u003d new Coin(coinToEdit);"},{"lineNumber":86,"author":{"gitID":"ewaldhew"},"content":"        editedCoin.addTotalAmountBought(amountToAdd);"},{"lineNumber":87,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":88,"author":{"gitID":"ewaldhew"},"content":"        return editedCoin;"},{"lineNumber":89,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":91,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitID":"ewaldhew"},"content":"        // short circuit if same object"},{"lineNumber":94,"author":{"gitID":"ewaldhew"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":95,"author":{"gitID":"ewaldhew"},"content":"            return true;"},{"lineNumber":96,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":98,"author":{"gitID":"ewaldhew"},"content":"        // instanceof handles nulls"},{"lineNumber":99,"author":{"gitID":"ewaldhew"},"content":"        if (!(other instanceof BuyCommand)) {"},{"lineNumber":100,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":101,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":103,"author":{"gitID":"ewaldhew"},"content":"        // state check"},{"lineNumber":104,"author":{"gitID":"ewaldhew"},"content":"        BuyCommand e \u003d (BuyCommand) other;"},{"lineNumber":105,"author":{"gitID":"ewaldhew"},"content":"        return target.equals(e.target)"},{"lineNumber":106,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 amountToAdd.equals(e.amountToAdd)"},{"lineNumber":107,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 Objects.equals(coinToEdit, e.coinToEdit);"},{"lineNumber":108,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":109}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.CoinBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CoinBookParser coinBookParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final RuleChecker ruleChecker;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        coinBookParser \u003d new CoinBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ruleChecker \u003d new RuleChecker(model.getRuleBook());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Command command \u003d coinBookParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"    public ObservableList\u003cCoin\u003e getFilteredCoinList() {"},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        return model.getFilteredCoinList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":3,"-":56}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CoinBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.RuleBookChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Storage extends CoinBookStorage, RuleBookStorage, UserPrefsStorage {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    String getCoinBookFilePath();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyCoinBook\u003e readCoinBook() throws DataConversionException, IOException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void saveCoinBook(ReadOnlyCoinBook addressBook) throws IOException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    String getRuleBookFilePath();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyRuleBook\u003e readRuleBook() throws DataConversionException, IOException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void saveRuleBook(ReadOnlyRuleBook addressBook) throws IOException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"     * Saves the current version of the CoinBook to the hard disk."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void handleCoinBookChangedEvent(CoinBookChangedEvent cbce);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void handleRuleBookChangedEvent(RuleBookChangedEvent rbce);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/TagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":" * Edits the details of an existing coin in the address book."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class TagCommand extends UndoableCommand {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add the specified tags to the coin identified \""},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"            + \"by the index number used in the last coin listing. \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG + \"fav\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_COIN_SUCCESS \u003d \"Tagged Coin: %1$s\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one tag must be provided.\";"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MESSAGE_DUPLICATE_COIN \u003d \"This coin already exists in the coin book.\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    private final CommandTarget target;"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"    private final EditCoinDescriptor editCoinDescriptor;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    private Coin coinToEdit;"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    private Coin editedCoin;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"     * @param target            in the filtered coin list to edit"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"     * @param editCoinDescriptor details to edit the coin with"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"    public TagCommand(CommandTarget target, EditCoinDescriptor editCoinDescriptor) {"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(target);"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(editCoinDescriptor);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        this.target \u003d target;"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        this.editCoinDescriptor \u003d new EditCoinDescriptor(editCoinDescriptor);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":"            model.updateCoin(coinToEdit, editedCoin);"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException dpe) {"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_COIN);"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (CoinNotFoundException pnfe) {"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"            throw new AssertionError(\"The target coin cannot be missing\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"        model.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_COIN_SUCCESS, editedCoin));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"            List\u003cCoin\u003e lastShownList \u003d model.getFilteredCoinList();"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"            if (target.toIndex(model.getFilteredCoinList()).getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            Index index \u003d target.toIndex(model.getFilteredCoinList());"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"            coinToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"            editedCoin \u003d createEditedCoin(coinToEdit, editCoinDescriptor);"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (IndexOutOfBoundsException oobe) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"     * Creates and returns a {@code Coin} with the details of {@code coinToEdit}"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"     * edited with {@code editCoinDescriptor}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    private static Coin createEditedCoin(Coin coinToEdit, EditCoinDescriptor editCoinDescriptor) {"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        assert coinToEdit !\u003d null;"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Code updatedCode \u003d coinToEdit.getCode();"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        Set\u003cTag\u003e updatedTags \u003d editCoinDescriptor.getTags().orElse(coinToEdit.getTags());"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return new Coin(coinToEdit, updatedCode, updatedTags);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!(other instanceof TagCommand)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        TagCommand e \u003d (TagCommand) other;"},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"        return target.equals(e.target)"},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 editCoinDescriptor.equals(e.editCoinDescriptor)"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 Objects.equals(coinToEdit, e.coinToEdit);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"Eldon-Chung"},"content":"     * Stores the details to edit the coin with. Each non-empty field value will replace the"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"     * corresponding field value of the coin."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"    public static class EditCoinDescriptor {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        private Code code;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"Eldon-Chung"},"content":"        public EditCoinDescriptor() {}"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":133,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":134,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":"        public EditCoinDescriptor(EditCoinDescriptor toCopy) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            setCode(toCopy.code);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":142,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.code, this.tags);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public void setCode(Code code) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            this.code \u003d null;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public Optional\u003cCode\u003e getCode() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(code);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":158,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":167,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":"            if (!(other instanceof EditCoinDescriptor)) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":185,"author":{"gitID":"Eldon-Chung"},"content":"            EditCoinDescriptor e \u003d (EditCoinDescriptor) other;"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return getCode().equals(e.getCode())"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"}"},{"lineNumber":192,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"Eldon-Chung":49,"-":143}},{"path":"src/main/java/seedu/address/logic/commands/CommandTarget.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":" * Represents a command target specified in one of the available modes (union type)."},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"public class CommandTarget {"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"     * All possible target representation modes"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"    private enum Mode {"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"        INDEX,"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"        CODE"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"    private final Mode mode;"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    private Index index;"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    private Code code;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    public CommandTarget(Index index) {"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"        mode \u003d Mode.INDEX;"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        this.index \u003d index;"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"    public CommandTarget(Code code) {"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"        mode \u003d Mode.CODE;"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        this.code \u003d code;"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"     * @param coinList to obtain index information from"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"     * @return"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    public Index toIndex(ObservableList\u003cCoin\u003e coinList) throws IndexOutOfBoundsException {"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"        switch (mode) {"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"        case CODE:"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"            // Also throws IndexOutOfBoundsException if code isn\u0027t found."},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"            return Index.fromZeroBased(coinList.filtered(coin -\u003e coin.getCode().equals(code)).getSourceIndex(0));"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"        case INDEX:"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"            if (index.getZeroBased() \u003e\u003d coinList.size()) {"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"            return index;"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"        default:"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"            throw new RuntimeException(\"Unexpected code path!\");"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"        // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"            return true;"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"        // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"        if (!(other instanceof CommandTarget)) {"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"        // state check"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"        CommandTarget e \u003d (CommandTarget) other;"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"        return mode.equals(e.mode)"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 ((mode \u003d\u003d Mode.INDEX \u0026\u0026 index.equals(e.index))"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"                || (mode \u003d\u003d Mode.CODE \u0026\u0026 code.equals(e.code)));"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":76}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted coin"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":61}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedCoin.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":" * JAXB-friendly version of the Coin."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"public class XmlAdaptedCoin {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Coin\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String code;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String totalAmountSold;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String totalAmountBought;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String totalDollarsSold;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private String totalDollarsBought;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"     * Constructs an XmlAdaptedCoin."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    public XmlAdaptedCoin() {}"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"     * Constructs an {@code XmlAdaptedCoin} with the given coin details."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedCoin(String code, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.code \u003d code;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.totalAmountBought \u003d \"0.0\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.totalAmountSold \u003d \"0.0\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.totalDollarsBought \u003d \"0.0\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.totalDollarsSold \u003d \"0.0\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"     * Converts a given Coin into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedCoin"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"    public XmlAdaptedCoin(Coin source) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        code \u003d source.getCode().fullName;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        totalAmountBought \u003d source.getTotalAmountBought().getValue();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        totalAmountSold \u003d source.getTotalAmountSold().getValue();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        totalDollarsBought \u003d source.getTotalDollarsBought().getValue();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        totalDollarsSold \u003d source.getTotalDollarsSold().getValue();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"     * Converts this jaxb-friendly adapted coin object into the model\u0027s Coin object."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted coin"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"    public Coin toModelType() throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        final List\u003cTag\u003e coinTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"            coinTags.add(tag.toModelType());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (this.code \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!Code.isValidName(this.code)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Code.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Code code \u003d new Code(this.code);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(coinTags);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (CollectionUtil.isAnyNull(totalAmountBought, totalAmountSold, totalDollarsBought, totalDollarsSold)) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new Coin(code, tags);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new Coin(code, tags, totalAmountBought, totalAmountSold, totalDollarsBought, totalDollarsSold);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"        if (!(other instanceof XmlAdaptedCoin)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"Eldon-Chung"},"content":"        XmlAdaptedCoin otherCoin \u003d (XmlAdaptedCoin) other;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return Objects.equals(code, otherCoin.code)"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"                \u0026\u0026 tagged.equals(otherCoin.tagged);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":19,"-":101}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CoinBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.RuleBookChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Manages storage of CoinBook data in local storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private CoinBookStorage coinBookStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private RuleBookStorage ruleBookStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public StorageManager(CoinBookStorage coinBookStorage,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                          RuleBookStorage ruleBookStorage,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.coinBookStorage \u003d coinBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.ruleBookStorage \u003d ruleBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CoinBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getCoinBookFilePath() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return coinBookStorage.getCoinBookFilePath();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyCoinBook\u003e readCoinBook() throws DataConversionException, IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return readCoinBook(coinBookStorage.getCoinBookFilePath());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyCoinBook\u003e readCoinBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return coinBookStorage.readCoinBook(filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void saveCoinBook(ReadOnlyCoinBook coinBook) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        saveCoinBook(coinBook, coinBookStorage.getCoinBookFilePath());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void saveCoinBook(ReadOnlyCoinBook coinBook, String filePath) throws IOException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        coinBookStorage.saveCoinBook(coinBook, filePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":87,"author":{"gitID":"laichengyu"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"laichengyu"},"content":"    public void backupCoinBook(ReadOnlyCoinBook coinBook) throws IOException {"},{"lineNumber":89,"author":{"gitID":"laichengyu"},"content":"        coinBookStorage.backupCoinBook(coinBook);"},{"lineNumber":90,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void handleCoinBookChangedEvent(CoinBookChangedEvent event) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            saveCoinBook(event.data);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RuleBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public String getRuleBookFilePath() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return ruleBookStorage.getRuleBookFilePath();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyRuleBook\u003e readRuleBook() throws DataConversionException, IOException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return readRuleBook(ruleBookStorage.getRuleBookFilePath());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyRuleBook\u003e readRuleBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return ruleBookStorage.readRuleBook(filePath);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void saveRuleBook(ReadOnlyRuleBook ruleBook) throws IOException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        saveRuleBook(ruleBook, ruleBookStorage.getRuleBookFilePath());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void saveRuleBook(ReadOnlyRuleBook ruleBook, String filePath) throws IOException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        ruleBookStorage.saveRuleBook(ruleBook, filePath);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void backupRuleBook(ReadOnlyRuleBook ruleBook) throws IOException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ruleBookStorage.backupRuleBook(ruleBook);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void handleRuleBookChangedEvent(RuleBookChangedEvent rbce) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(rbce, \"Local data changed, saving to file\"));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            saveRuleBook(rbce.data);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"laichengyu":6,"-":144}},{"path":"src/main/java/seedu/address/storage/XmlCoinBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access CoinBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlCoinBookStorage implements CoinBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlCoinBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String backupFilePath \u003d \"data/backup.xml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public XmlCoinBookStorage(String filePath) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getCoinBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyCoinBook\u003e readCoinBook() throws DataConversionException, IOException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return readCoinBook(filePath);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Similar to {@link #readCoinBook()}"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyCoinBook\u003e readCoinBook(String filePath) throws DataConversionException,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            logger.info(\"CoinBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlSerializableCoinBook xmlAddressBook \u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                XmlFileStorage.loadDataFromSaveFile(new File(filePath), XmlSerializableCoinBook.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void saveCoinBook(ReadOnlyCoinBook addressBook) throws IOException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        saveCoinBook(addressBook, filePath);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveCoinBook(ReadOnlyCoinBook)}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void saveCoinBook(ReadOnlyCoinBook addressBook, String filePath) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableCoinBook(addressBook));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":86,"author":{"gitID":"laichengyu"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"laichengyu"},"content":"    public void backupCoinBook(ReadOnlyCoinBook addressBook) throws IOException {"},{"lineNumber":88,"author":{"gitID":"laichengyu"},"content":"        saveCoinBook(addressBook, backupFilePath);"},{"lineNumber":89,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"laichengyu":6,"-":86}},{"path":"src/main/java/seedu/address/storage/XmlSerializableCoinBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable CoinBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"coinbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableCoinBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private List\u003cXmlAdaptedCoin\u003e coins;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"     * Creates an empty XmlSerializableCoinBook."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public XmlSerializableCoinBook() {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"        coins \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public XmlSerializableCoinBook(ReadOnlyCoinBook src) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        coins.addAll(src.getCoinList().stream().map(XmlAdaptedCoin::new).collect(Collectors.toList()));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code CoinBook} object."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"     * {@code XmlAdaptedCoin} or {@code XmlAdaptedTag}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public CoinBook toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CoinBook addressBook \u003d new CoinBook();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"        for (XmlAdaptedCoin p : coins) {"},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"            addressBook.addCoin(p.toModelType());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableCoinBook)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlSerializableCoinBook otherAb \u003d (XmlSerializableCoinBook) other;"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":"        return coins.equals(otherAb.coins) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":8,"-":65}},{"path":"src/main/java/seedu/address/storage/CoinBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a storage for {@link CoinBook}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface CoinBookStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    String getCoinBookFilePath();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns CoinBook data as a {@link ReadOnlyCoinBook}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyCoinBook\u003e readCoinBook() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @see #getCoinBookFilePath()"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyCoinBook\u003e readCoinBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyCoinBook} to the storage."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void saveCoinBook(ReadOnlyCoinBook addressBook) throws IOException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @see #saveCoinBook(ReadOnlyCoinBook)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void saveCoinBook(ReadOnlyCoinBook addressBook, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":46,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"laichengyu"},"content":"     * Saves the given {@link ReadOnlyCoinBook} to a fixed temporary location."},{"lineNumber":48,"author":{"gitID":"laichengyu"},"content":"     * @param addressBook cannot be null."},{"lineNumber":49,"author":{"gitID":"laichengyu"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":50,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"laichengyu"},"content":"    void backupCoinBook(ReadOnlyCoinBook addressBook) throws IOException;"},{"lineNumber":52,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"laichengyu":8,"-":45}},{"path":"src/main/java/seedu/address/storage/XmlSerializableRuleBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable RuleBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"rulebook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableRuleBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedRule\u003e rules;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"     * Creates an empty XmlSerializableCoinBook."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public XmlSerializableRuleBook() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        rules \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlSerializableRuleBook(ReadOnlyRuleBook src) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        rules.addAll(src.getRuleList().stream().map(XmlAdaptedRule::new).collect(Collectors.toList()));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code RuleBook} object."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedRule} or {@code XmlAdaptedTag}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public RuleBook toModelType() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        RuleBook ruleBook \u003d new RuleBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        for (XmlAdaptedRule r : rules) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            ruleBook.addRule(r.toModelType());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return ruleBook;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableRuleBook)) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlSerializableRuleBook otherAb \u003d (XmlSerializableRuleBook) other;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return rules.equals(otherAb.rules);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":65}},{"path":"src/main/java/seedu/address/model/ReadOnlyCoinBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface ReadOnlyCoinBook {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns an unmodifiable view of the coins list."},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"     * This list will not contain any duplicate coins."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    ObservableList\u003cCoin\u003e getCoinList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":"     * Returns an unmodifiable view of the codes list."},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":"     * This list will not contain any duplicate codes."},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":"    List\u003cString\u003e getCodeList();"},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"laichengyu":7,"-":23}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedRule.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.NotificationRule;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.RuleType;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":" * JAXB-friendly version of the Rule."},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"public class XmlAdaptedRule {"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Rule\u0027s %s field is missing!\";"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    private String value;"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"    private String type;"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"     * Constructs an XmlAdaptedRule."},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"    public XmlAdaptedRule() {}"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"     * Constructs an {@code XmlAdaptedRule} with the given rule details."},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"    public XmlAdaptedRule(String value, String type) {"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        this.value \u003d value;"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        this.type \u003d type;"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"     * Converts a given Rule into this class for JAXB use."},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedRule"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"    public XmlAdaptedRule(Rule source) {"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"        value \u003d source.description;"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"        type \u003d source.type.toString();"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"     * Converts this jaxb-friendly adapted rule object into the model\u0027s Rule object."},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted rule"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"    public Rule toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"        if (this.type \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"            throw new IllegalValueException("},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, RuleType.class.getSimpleName()));"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"        if (this.value \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"            throw new IllegalValueException("},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Rule.class.getSimpleName()));"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"            switch (RuleType.valueOf(type)) {"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"            case NOTIFICATION:"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"                return new NotificationRule(value);"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"            default:"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"                throw new IllegalValueException(Rule.MESSAGE_RULE_INVALID);"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"            throw new IllegalValueException(Rule.MESSAGE_RULE_INVALID);"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":81,"author":{"gitID":"ewaldhew"},"content":"        if (!(other instanceof XmlAdaptedRule)) {"},{"lineNumber":82,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":85,"author":{"gitID":"ewaldhew"},"content":"        XmlAdaptedRule otherRule \u003d (XmlAdaptedRule) other;"},{"lineNumber":86,"author":{"gitID":"ewaldhew"},"content":"        return value.equals(otherRule.value);"},{"lineNumber":87,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":88}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Code;"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code CoinBook} with sample data."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"    public static Coin[] getSampleCoins() {"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"        return new Coin[] {"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"            new Coin(new Code(\"BTC\"),"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"                getTagSet(\"fav\")),"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"            new Coin(new Code(\"ETH\"),"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"                getTagSet(\"fav\", \"popular\")),"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    public static ReadOnlyCoinBook getSampleCoinBook() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            CoinBook sampleAb \u003d new CoinBook();"},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"            for (Coin sampleCoin : getSampleCoins()) {"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"                sampleAb.addCoin(sampleCoin);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException e) {"},{"lineNumber":34,"author":{"gitID":"Eldon-Chung"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate coins\", e);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":13,"-":37}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.core.CoinSubredditList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SyncCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.CoinBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCoinBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.RuleBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.CoinBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.RuleBookStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlCoinBookStorage;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlRuleBookStorage;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, false);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public final boolean isTest;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public MainApp() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.isTest \u003d false;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public MainApp(boolean isTest) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.isTest \u003d isTest;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CoinBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        CoinBookStorage coinBookStorage \u003d new XmlCoinBookStorage(userPrefs.getCoinBookFilePath());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        RuleBookStorage ruleBookStorage \u003d new XmlRuleBookStorage(userPrefs.getRuleBookFilePath());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(coinBookStorage, ruleBookStorage, userPrefsStorage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        syncDataOnStartup();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        CoinSubredditList.initialize();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void syncDataOnStartup() throws CommandException, ParseException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (!this.isTest) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logic.execute(SyncCommand.COMMAND_WORD);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyCoinBook\u003e coinBookOptional;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        ReadOnlyCoinBook initialCoins;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            coinBookOptional \u003d storage.readCoinBook();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            if (!coinBookOptional.isPresent()) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample CoinBook\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"Eldon-Chung"},"content":"            initialCoins \u003d coinBookOptional.orElseGet(SampleDataUtil::getSampleCoinBook);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty CoinBook\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            initialCoins \u003d new CoinBook();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty CoinBook\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            initialCoins \u003d new CoinBook();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyRuleBook\u003e ruleBookOptional;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        ReadOnlyRuleBook initialRules;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            ruleBookOptional \u003d storage.readRuleBook();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            if (!ruleBookOptional.isPresent()) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with an empty rule book\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            initialRules \u003d ruleBookOptional.orElseGet(RuleBook::new);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty rule book\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            initialRules \u003d new RuleBook();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty rule book\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            initialRules \u003d new RuleBook();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return new ModelManager(initialCoins, initialRules, userPrefs);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":179,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":207,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty CoinBook\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        logger.info(\"Starting CoinBook \" + MainApp.VERSION);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":236,"author":{"gitID":"Eldon-Chung"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Coin Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":5,"-":251}},{"path":"src/main/java/seedu/address/model/rule/NotificationRule.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.model.rule;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.SpawnNotificationCommand;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.parser.NotifyCommandParser;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":" * Represents a rule trigger for spawning notifications."},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":" * The target object type is Coins."},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"public class NotificationRule extends Rule\u003cCoin\u003e {"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"    private static final ActionParser\u003cCoin\u003e parseAction \u003d SpawnNotificationCommand::new;"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"    private static final ConditionParser\u003cCoin\u003e parseCondition \u003d NotifyCommandParser::parseNotifyCondition;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"    public NotificationRule(String value) {"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"        super(value, RuleType.NOTIFICATION, parseAction, parseCondition);"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":21}},{"path":"src/main/java/seedu/address/logic/commands/SellCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.logic.parser.TokenType.PREFIX_AMOUNT;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COINS;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Amount;"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":" * Removes value from an existing coin in the book."},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"public class SellCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"    public static final String COMMAND_WORD \u003d \"sell\";"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes value from the coin account identified \""},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"            + \"by the index number used in the last coin listing or its code. \""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"            + \"Parameters: TARGET \""},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"            + PREFIX_AMOUNT + \"AMOUNT\\n\""},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_AMOUNT + \"50.0\";"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_SELL_COIN_SUCCESS \u003d \"Sold: %1$s\";"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"    private final CommandTarget target;"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"    private final Amount amountToSell;"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    private Coin coinToEdit;"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"    private Coin editedCoin;"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"     * @param target of the coin in the filtered coin list to change"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"     * @param amountToSell of the coin"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"    public SellCommand(CommandTarget target, Amount amountToSell) {"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(target);"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"        this.target \u003d target;"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"        this.amountToSell \u003d amountToSell;"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"            model.updateCoin(coinToEdit, editedCoin);"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"        } catch (DuplicateCoinException dpe) {"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"            throw new CommandException(\"Unexpected code path!\");"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"        } catch (CoinNotFoundException pnfe) {"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"            throw new AssertionError(\"The target coin cannot be missing\");"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"        model.updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"        return new CommandResult(String.format(MESSAGE_SELL_COIN_SUCCESS, editedCoin));"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"        List\u003cCoin\u003e lastShownList \u003d model.getFilteredCoinList();"},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"            Index index \u003d target.toIndex(model.getFilteredCoinList());"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"            coinToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"            editedCoin \u003d createEditedCoin(coinToEdit, amountToSell);"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"        } catch (IndexOutOfBoundsException oobe) {"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_TARGET);"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"ewaldhew"},"content":"     * Creates and returns a {@code Coin} with the details of {@code coinToEdit}"},{"lineNumber":80,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"ewaldhew"},"content":"    private static Coin createEditedCoin(Coin coinToEdit, Amount amountToSell) {"},{"lineNumber":82,"author":{"gitID":"ewaldhew"},"content":"        assert coinToEdit !\u003d null;"},{"lineNumber":83,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":84,"author":{"gitID":"ewaldhew"},"content":"        Coin editedCoin \u003d new Coin(coinToEdit);"},{"lineNumber":85,"author":{"gitID":"ewaldhew"},"content":"        editedCoin.addTotalAmountSold(amountToSell);"},{"lineNumber":86,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":87,"author":{"gitID":"ewaldhew"},"content":"        return editedCoin;"},{"lineNumber":88,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":90,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitID":"ewaldhew"},"content":"        // short circuit if same object"},{"lineNumber":93,"author":{"gitID":"ewaldhew"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":94,"author":{"gitID":"ewaldhew"},"content":"            return true;"},{"lineNumber":95,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":97,"author":{"gitID":"ewaldhew"},"content":"        // instanceof handles nulls"},{"lineNumber":98,"author":{"gitID":"ewaldhew"},"content":"        if (!(other instanceof SellCommand)) {"},{"lineNumber":99,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":100,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":102,"author":{"gitID":"ewaldhew"},"content":"        // state check"},{"lineNumber":103,"author":{"gitID":"ewaldhew"},"content":"        SellCommand e \u003d (SellCommand) other;"},{"lineNumber":104,"author":{"gitID":"ewaldhew"},"content":"        return target.equals(e.target)"},{"lineNumber":105,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 amountToSell.equals(e.amountToSell)"},{"lineNumber":106,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 Objects.equals(coinToEdit, e.coinToEdit);"},{"lineNumber":107,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":108}},{"path":"src/main/java/seedu/address/model/RuleBook.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.UniqueRuleList;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.exceptions.DuplicateRuleException;"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.exceptions.RuleNotFoundException;"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":" * Stores a list of rules that can be used for notifications, etc."},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"public class RuleBook implements ReadOnlyRuleBook {"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    private final UniqueRuleList rules;"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    public RuleBook() {"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"        rules \u003d new UniqueRuleList();"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    public RuleBook(ReadOnlyRuleBook toBeCopied) {"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"        rules \u003d new UniqueRuleList();"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"        resetData(toBeCopied);"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"    //// list overwrite operations"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"    public void setRules(List\u003cRule\u003e rules) throws DuplicateRuleException {"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        this.rules.setRules(rules);"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"     * Resets the existing data of this {@code RuleBook} with {@code newData}."},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    public void resetData(ReadOnlyRuleBook newData) {"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(newData);"},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"        List\u003cRule\u003e ruleList \u003d newData.getRuleList();"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"            setRules(ruleList);"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"        } catch (DuplicateRuleException e) {"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"            throw new AssertionError(\"RuleBooks should not have duplicate rules\");"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"    //// rule-level operations"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"     * Adds a rule to the address book."},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"     * @throws DuplicateRuleException if an equivalent rule already exists."},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"    public void addRule(Rule rule) throws DuplicateRuleException {"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"        rules.add(rule);"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"     * Replaces the given rule {@code target} in the list with {@code editedRule}."},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"     * @throws DuplicateRuleException if updating the rule\u0027s details causes the rule to be equivalent to"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":"     *      another existing rule in the list."},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"     * @throws RuleNotFoundException if {@code target} could not be found in the list."},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"    public void updateRule(Rule target, Rule editedRule)"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"            throws DuplicateRuleException, RuleNotFoundException {"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"        requireNonNull(editedRule);"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"        rules.setRule(target, editedRule);"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":"     * Removes {@code key} from this {@code RuleBook}."},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":"     * @throws RuleNotFoundException if the {@code key} is not in this {@code RuleBook}."},{"lineNumber":79,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"ewaldhew"},"content":"    public boolean removeRule(Rule key) throws RuleNotFoundException {"},{"lineNumber":81,"author":{"gitID":"ewaldhew"},"content":"        if (rules.remove(key)) {"},{"lineNumber":82,"author":{"gitID":"ewaldhew"},"content":"            return true;"},{"lineNumber":83,"author":{"gitID":"ewaldhew"},"content":"        } else {"},{"lineNumber":84,"author":{"gitID":"ewaldhew"},"content":"            throw new RuleNotFoundException();"},{"lineNumber":85,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":88,"author":{"gitID":"ewaldhew"},"content":"    //// util methods"},{"lineNumber":89,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":90,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"ewaldhew"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitID":"ewaldhew"},"content":"        return rules.asObservableList().size() + \" rules registered\";"},{"lineNumber":93,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":95,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"ewaldhew"},"content":"    public ObservableList\u003cRule\u003e getRuleList() {"},{"lineNumber":97,"author":{"gitID":"ewaldhew"},"content":"        return rules.asObservableList();"},{"lineNumber":98,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":100,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"ewaldhew"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"ewaldhew"},"content":"                || (other instanceof RuleBook // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 this.rules.equals(((RuleBook) other).rules));"},{"lineNumber":105,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":107,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"ewaldhew"},"content":"    public int hashCode() {"},{"lineNumber":109,"author":{"gitID":"ewaldhew"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":110,"author":{"gitID":"ewaldhew"},"content":"        return Objects.hash(rules);"},{"lineNumber":111,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":113,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":113}},{"path":"src/main/java/seedu/address/model/rule/RuleType.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.model.rule;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":" * Enumerates the possible types of rules in the RuleBook"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"public enum RuleType {"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":"    NOTIFICATION"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":9}},{"path":"src/main/java/seedu/address/model/rule/exceptions/DuplicateRuleException.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.model.rule.exceptions;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":" * Signals that the operation will result in duplicate Rule objects."},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"public class DuplicateRuleException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"    public DuplicateRuleException() {"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"        super(\"Operation would result in duplicate rule\");"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":13}},{"path":"src/main/java/seedu/address/model/rule/Rule.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.model.rule;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.logic.commands.ActionCommand;"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":" * Represents a Rule in the rule book."},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"public class Rule\u003cT\u003e {"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_RULE_INVALID \u003d \"Rule description is invalid\";"},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    public static final String MESSAGE_FIRED \u003d \"[Rule Match] %1$s \u003c\u003d\u003d\u003e %2$s\";"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":"    private static final String RULE_FORMAT_STRING \u003d \"[%1$s]%2$s\";"},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Rule.class);"},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    public final RuleType type;"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"    public final String description;"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":"    public final ActionCommand\u003cT\u003e action;"},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"    public final Predicate\u003cT\u003e condition;"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"    protected Rule(String description, RuleType type,"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"                   ActionParser\u003cT\u003e actionParser,"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"                   ConditionParser\u003cT\u003e conditionParser) {"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"        requireAllNonNull(description, type, actionParser, conditionParser);"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":"        this.description \u003d description;"},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"        this.type \u003d type;"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"        this.action \u003d actionParser.parse(description);"},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"        this.condition \u003d validateAndCreateCondition(description, conditionParser);"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":"     * Uses the given parser to validate the condition string and create the condition object."},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"    private static \u003cT\u003e Predicate\u003cT\u003e validateAndCreateCondition(String conditionArgs, ConditionParser\u003cT\u003e parser) {"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"            return parser.parse(conditionArgs);"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"            throw new IllegalArgumentException(MESSAGE_RULE_INVALID);"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"        return super.hashCode();"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":"        return String.format(RULE_FORMAT_STRING, type, description);"},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"            return true;"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"        if (!(other instanceof Rule)) {"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"        Rule otherRule \u003d (Rule) other;"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"        return otherRule.description.equals(this.description)"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 otherRule.action.equals(this.action);"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":"     * Represents a function type used to generate the action for this rule."},{"lineNumber":79,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"ewaldhew"},"content":"    @FunctionalInterface"},{"lineNumber":81,"author":{"gitID":"ewaldhew"},"content":"    protected interface ActionParser\u003cT\u003e {"},{"lineNumber":82,"author":{"gitID":"ewaldhew"},"content":"        ActionCommand\u003cT\u003e parse(String args);"},{"lineNumber":83,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":85,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"ewaldhew"},"content":"     * Represents a function type used to generate the trigger condition for this rule."},{"lineNumber":87,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"ewaldhew"},"content":"    @FunctionalInterface"},{"lineNumber":89,"author":{"gitID":"ewaldhew"},"content":"    protected interface ConditionParser\u003cT\u003e {"},{"lineNumber":90,"author":{"gitID":"ewaldhew"},"content":"        Predicate\u003cT\u003e parse(String args) throws IllegalValueException;"},{"lineNumber":91,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":93,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":93}},{"path":"src/main/java/seedu/address/model/coin/Price.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a Coin\u0027s price in the address book."},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"public class Price {"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private Amount currentPrice;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private List\u003cAmount\u003e historicalPrices;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e historicalTimeStamps;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"     * Constructs a {@code Price}."},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"    public Price() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        this.currentPrice \u003d new Amount(\"1.0\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.historicalPrices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.historicalTimeStamps \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":24,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":25,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"laichengyu"},"content":"     * Constructs a {@code Price} with given value."},{"lineNumber":27,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"laichengyu"},"content":"    public Price(Price toCopy) {"},{"lineNumber":29,"author":{"gitID":"laichengyu"},"content":"        this.currentPrice \u003d toCopy.currentPrice;"},{"lineNumber":30,"author":{"gitID":"laichengyu"},"content":"        this.historicalPrices \u003d toCopy.historicalPrices;"},{"lineNumber":31,"author":{"gitID":"laichengyu"},"content":"        this.historicalTimeStamps \u003d toCopy.historicalTimeStamps;"},{"lineNumber":32,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Amount getCurrent() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return currentPrice;"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setCurrent(Amount currentPrice) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.currentPrice \u003d currentPrice;"},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"    //@@author ewaldhew"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"    public void setHistorical(List\u003cAmount\u003e prices, List\u003cString\u003e timestamps) {"},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"        historicalPrices \u003d prices;"},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"        historicalTimeStamps \u003d timestamps;"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"    public Price getChangeFrom(Price initial) {"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":"        Price result \u003d new Price();"},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":"        result.currentPrice \u003d Amount.getDiff(currentPrice, initial.currentPrice);"},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"        return result;"},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"    public List\u003cAmount\u003e getHistoricalPrices() {"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"        return historicalPrices;"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"    public List\u003cString\u003e getHistoricalTimeStamps() {"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"        return historicalTimeStamps;"},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"                || (other instanceof Price // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.currentPrice.equals(((Price) other).currentPrice)); // state check"},{"lineNumber":70,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"    public String toString() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return \"USD \" + this.currentPrice.toString();"},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"ewaldhew":21,"Eldon-Chung":24,"laichengyu":10,"-":22}},{"path":"src/main/java/seedu/address/model/coin/Amount.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.model.coin;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import java.math.BigDecimal;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import java.math.RoundingMode;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":" * Represents the amount of the coin held in the address book."},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"public class Amount implements Comparable\u003cAmount\u003e {"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"    private static final String[] MAGNITUDE_CHAR \u003d { \"\", \"K\", \"M\", \"B\", \"T\", \"Q\", \"P\", \"S\", \"H\" };"},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"    private static final String MESSAGE_TOO_BIG \u003d \"This value can\u0027t be displayed as it is too big, \""},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"            + \"total amount far exceeds circulating supply!\\n\""},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":"            + \"Unfortunately, CoinBook cannot yet handle unorthodox usage [Coming in v2.0]\";"},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"    private static final String DISPLAY_TOO_BIG \u003d \"Err (see log)\";"},{"lineNumber":19,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":20,"author":{"gitID":"ewaldhew"},"content":"    private BigDecimal value;"},{"lineNumber":21,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":22,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"ewaldhew"},"content":"     * Constructs an {@code Amount}."},{"lineNumber":24,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ewaldhew"},"content":"    public Amount() {"},{"lineNumber":26,"author":{"gitID":"ewaldhew"},"content":"        this.value \u003d new BigDecimal(0);"},{"lineNumber":27,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":29,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"ewaldhew"},"content":"     * Constructs an {@code Amount} with given value."},{"lineNumber":31,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ewaldhew"},"content":"    public Amount(Amount amount) {"},{"lineNumber":33,"author":{"gitID":"ewaldhew"},"content":"        this.value \u003d amount.value;"},{"lineNumber":34,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":36,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"ewaldhew"},"content":"     * Constructs an {@code Amount} with given value."},{"lineNumber":38,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"ewaldhew"},"content":"    public Amount(String value) {"},{"lineNumber":40,"author":{"gitID":"ewaldhew"},"content":"        this.value \u003d new BigDecimal(value).setScale(8, RoundingMode.UP);"},{"lineNumber":41,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":43,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"ewaldhew"},"content":"     * Constructs an {@code Amount} with given value."},{"lineNumber":45,"author":{"gitID":"ewaldhew"},"content":"     * For internal use only."},{"lineNumber":46,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"ewaldhew"},"content":"    private Amount(BigDecimal value) {"},{"lineNumber":48,"author":{"gitID":"ewaldhew"},"content":"        this.value \u003d value;"},{"lineNumber":49,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":51,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":52,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"ewaldhew"},"content":"     * Adds two amounts together and returns a new object."},{"lineNumber":54,"author":{"gitID":"ewaldhew"},"content":"     * @return the sum of the two arguments"},{"lineNumber":55,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"ewaldhew"},"content":"    public static Amount getSum(Amount first, Amount second) {"},{"lineNumber":57,"author":{"gitID":"ewaldhew"},"content":"        return new Amount(first.value.add(second.value));"},{"lineNumber":58,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":60,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"ewaldhew"},"content":"     * Subtracts second from first and returns a new object."},{"lineNumber":62,"author":{"gitID":"ewaldhew"},"content":"     * @return the difference of the two arguments"},{"lineNumber":63,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"ewaldhew"},"content":"    public static Amount getDiff(Amount first, Amount second) {"},{"lineNumber":65,"author":{"gitID":"ewaldhew"},"content":"        return new Amount(first.value.subtract(second.value));"},{"lineNumber":66,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":68,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"ewaldhew"},"content":"     * Multiplus two amounts together and returns a new object."},{"lineNumber":70,"author":{"gitID":"ewaldhew"},"content":"     * @return the product of the two arguments"},{"lineNumber":71,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"ewaldhew"},"content":"    public static Amount getMult(Amount first, Amount second) {"},{"lineNumber":73,"author":{"gitID":"ewaldhew"},"content":"        return new Amount(first.value.multiply(second.value));"},{"lineNumber":74,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":76,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"ewaldhew"},"content":"     * Adds addAmount to the current value."},{"lineNumber":78,"author":{"gitID":"ewaldhew"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"ewaldhew"},"content":"     * @param addAmount amount to be added."},{"lineNumber":80,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"ewaldhew"},"content":"    public void addValue(Amount addAmount) {"},{"lineNumber":82,"author":{"gitID":"ewaldhew"},"content":"        value \u003d value.add(addAmount.value);"},{"lineNumber":83,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":85,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"ewaldhew"},"content":"     * Gets the string representation of the full value."},{"lineNumber":87,"author":{"gitID":"ewaldhew"},"content":"     * Use {@code toString} instead for display purposes."},{"lineNumber":88,"author":{"gitID":"ewaldhew"},"content":"     * @see Amount#toString"},{"lineNumber":89,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"ewaldhew"},"content":"    public String getValue() {"},{"lineNumber":91,"author":{"gitID":"ewaldhew"},"content":"        return value.toString();"},{"lineNumber":92,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":94,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"ewaldhew"},"content":"    public boolean equals(Object other) {"},{"lineNumber":96,"author":{"gitID":"ewaldhew"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":97,"author":{"gitID":"ewaldhew"},"content":"                || (other instanceof Amount // instanceof handles nulls"},{"lineNumber":98,"author":{"gitID":"ewaldhew"},"content":"                \u0026\u0026 this.value.compareTo(((Amount) other).value) \u003d\u003d 0); // state check"},{"lineNumber":99,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":101,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"ewaldhew"},"content":"     * Gets the display string of the value. Displays up to 4 d.p."},{"lineNumber":103,"author":{"gitID":"ewaldhew"},"content":"     * @return"},{"lineNumber":104,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"ewaldhew"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitID":"ewaldhew"},"content":"        // Calculate the magnitude, which is the nearest lower multiple of three, of digits"},{"lineNumber":108,"author":{"gitID":"ewaldhew"},"content":"        final int magnitude \u003d value.compareTo(BigDecimal.ZERO) \u003d\u003d 0"},{"lineNumber":109,"author":{"gitID":"ewaldhew"},"content":"                              ? 0"},{"lineNumber":110,"author":{"gitID":"ewaldhew"},"content":"                              : (value.precision() - value.scale()) / 3;"},{"lineNumber":111,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":112,"author":{"gitID":"ewaldhew"},"content":"        if (0 \u003c magnitude \u0026\u0026 magnitude \u003c 2) {"},{"lineNumber":113,"author":{"gitID":"ewaldhew"},"content":"            return value.setScale(4, RoundingMode.UP).toPlainString();"},{"lineNumber":114,"author":{"gitID":"ewaldhew"},"content":"        } else if (magnitude \u003c MAGNITUDE_CHAR.length) {"},{"lineNumber":115,"author":{"gitID":"ewaldhew"},"content":"            // Shift the decimal point to keep the string printed at 7 digits max"},{"lineNumber":116,"author":{"gitID":"ewaldhew"},"content":"            return value.movePointLeft(magnitude * 3)"},{"lineNumber":117,"author":{"gitID":"ewaldhew"},"content":"                    .setScale(4, RoundingMode.UP)"},{"lineNumber":118,"author":{"gitID":"ewaldhew"},"content":"                    .toPlainString()"},{"lineNumber":119,"author":{"gitID":"ewaldhew"},"content":"                    + MAGNITUDE_CHAR[magnitude];"},{"lineNumber":120,"author":{"gitID":"ewaldhew"},"content":"        } else {"},{"lineNumber":121,"author":{"gitID":"ewaldhew"},"content":"            // We don\u0027t handle absurd cases specially for now"},{"lineNumber":122,"author":{"gitID":"ewaldhew"},"content":"            LogsCenter.getLogger(Amount.class).warning(MESSAGE_TOO_BIG);"},{"lineNumber":123,"author":{"gitID":"ewaldhew"},"content":"            return DISPLAY_TOO_BIG;"},{"lineNumber":124,"author":{"gitID":"ewaldhew"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":126,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":128,"author":{"gitID":"ewaldhew"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"ewaldhew"},"content":"    public int compareTo(Amount other) {"},{"lineNumber":130,"author":{"gitID":"ewaldhew"},"content":"        return value.compareTo(other.value);"},{"lineNumber":131,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":132}},{"path":"src/main/java/seedu/address/model/coin/exceptions/DuplicateCoinException.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin.exceptions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":" * Signals that the operation will result in duplicate Coin objects."},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"public class DuplicateCoinException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":"    public DuplicateCoinException() {"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"        super(\"Operation would result in duplicate coins\");"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":11,"-":1}},{"path":"src/main/java/seedu/address/model/coin/exceptions/CoinNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin.exceptions;"},{"lineNumber":2,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":3,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Eldon-Chung"},"content":" * Signals that the operation is unable to find the specified coin."},{"lineNumber":5,"author":{"gitID":"Eldon-Chung"},"content":" */"},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"public class CoinNotFoundException extends Exception {}"}],"authorContributionMap":{"Eldon-Chung":6}},{"path":"src/main/java/seedu/address/storage/XmlRuleBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyRuleBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access RuleBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlRuleBookStorage implements RuleBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlRuleBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String backupFilePath \u003d \"data/backup.xml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public XmlRuleBookStorage(String filePath) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getRuleBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyRuleBook\u003e readRuleBook() throws DataConversionException, IOException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return readRuleBook(filePath);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Similar to {@link #readRuleBook()}"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyRuleBook\u003e readRuleBook(String filePath) throws DataConversionException,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"        File coinBookFile \u003d new File(filePath);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"        if (!coinBookFile.exists()) {"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"            logger.info(\"RuleBook file \"  + coinBookFile + \" not found\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"        XmlSerializableRuleBook xmlCoinBook \u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                XmlFileStorage.loadDataFromSaveFile(new File(filePath), XmlSerializableRuleBook.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"            return Optional.of(xmlCoinBook.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"            logger.info(\"Illegal values found in \" + coinBookFile + \": \" + ive.getMessage());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":"    public void saveRuleBook(ReadOnlyRuleBook coinBook) throws IOException {"},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        saveRuleBook(coinBook, filePath);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveRuleBook(ReadOnlyRuleBook)}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void saveRuleBook(ReadOnlyRuleBook ruleBook, String filePath) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(ruleBook);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableRuleBook(ruleBook));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"    public void backupRuleBook(ReadOnlyRuleBook coinBook) throws IOException {"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"        saveRuleBook(coinBook, backupFilePath);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":10,"-":80}},{"path":"src/main/java/seedu/address/model/ReadOnlyRuleBook.java","lines":[{"lineNumber":1,"author":{"gitID":"ewaldhew"},"content":"//@@author ewaldhew"},{"lineNumber":2,"author":{"gitID":"ewaldhew"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":4,"author":{"gitID":"ewaldhew"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"ewaldhew"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":6,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":7,"author":{"gitID":"ewaldhew"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ewaldhew"},"content":" * Unmodifiable view of a rule book"},{"lineNumber":9,"author":{"gitID":"ewaldhew"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ewaldhew"},"content":"public interface ReadOnlyRuleBook {"},{"lineNumber":11,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":12,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"ewaldhew"},"content":"     * Returns an unmodifiable view of the rules list."},{"lineNumber":14,"author":{"gitID":"ewaldhew"},"content":"     * This list will not contain any duplicate rules."},{"lineNumber":15,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"ewaldhew"},"content":"    ObservableList\u003cRule\u003e getRuleList();"},{"lineNumber":17,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":18,"author":{"gitID":"ewaldhew"},"content":"}"}],"authorContributionMap":{"ewaldhew":18}},{"path":"src/main/java/seedu/address/model/coin/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Eldon-Chung"},"content":" * Tests that a {@code Coin}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cCoin\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean test(Coin coin) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(coin.getCode().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":4,"-":27}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":1,"-":53}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CoinBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.RuleBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Price;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.DuplicateRuleException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.RuleNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final RuleBook ruleBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final CoinBook coinBook;"},{"lineNumber":35,"author":{"gitID":"Eldon-Chung"},"content":"    private final FilteredList\u003cCoin\u003e filteredCoins;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given coinBook and userPrefs."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * For backwards compatibility."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyCoinBook coinBook, UserPrefs userPrefs) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireAllNonNull(coinBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with coin book: \" + coinBook"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                + \" empty rules, and user prefs \" + userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.coinBook \u003d new CoinBook(coinBook);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.ruleBook \u003d new RuleBook();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        filteredCoins \u003d new FilteredList\u003c\u003e(this.coinBook.getCoinList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given coinBook and userPrefs."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyCoinBook coinBook, ReadOnlyRuleBook ruleBook, UserPrefs userPrefs) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireAllNonNull(coinBook, ruleBook, userPrefs);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with coin book: \" + coinBook"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                + \" rules: \" + ruleBook"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + \" and user prefs \" + userPrefs);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.coinBook \u003d new CoinBook(coinBook);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.ruleBook \u003d new RuleBook(ruleBook);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        filteredCoins \u003d new FilteredList\u003c\u003e(this.coinBook.getCoinList());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this(new CoinBook(), new RuleBook(), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyCoinBook newData) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        coinBook.resetData(newData);"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"        indicateCoinBookChanged();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public ReadOnlyCoinBook getCoinBook() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return coinBook;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"    private void indicateCoinBookChanged() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        raise(new CoinBookChangedEvent(coinBook));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"Eldon-Chung"},"content":"    public synchronized void deleteCoin(Coin target) throws CoinNotFoundException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        coinBook.removeCoin(target);"},{"lineNumber":92,"author":{"gitID":"Eldon-Chung"},"content":"        indicateCoinBookChanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"    public synchronized void addCoin(Coin coin) throws DuplicateCoinException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        coinBook.addCoin(coin);"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        updateFilteredCoinList(PREDICATE_SHOW_ALL_COINS);"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        indicateCoinBookChanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"Eldon-Chung"},"content":"    public void updateCoin(Coin target, Coin editedCoin)"},{"lineNumber":104,"author":{"gitID":"Eldon-Chung"},"content":"            throws DuplicateCoinException, CoinNotFoundException {"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"        requireAllNonNull(target, editedCoin);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        coinBook.updateCoin(target, editedCoin);"},{"lineNumber":108,"author":{"gitID":"Eldon-Chung"},"content":"        indicateCoinBookChanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"neilish3re"},"content":"    //@@author neilish3re"},{"lineNumber":111,"author":{"gitID":"neilish3re"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"neilish3re"},"content":"    public void sortCoinList(boolean isSort) {"},{"lineNumber":113,"author":{"gitID":"neilish3re"},"content":"        coinBook.sortCoinBook(isSort);"},{"lineNumber":114,"author":{"gitID":"neilish3re"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":116,"author":{"gitID":"neilish3re"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":119,"author":{"gitID":"laichengyu"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"laichengyu"},"content":"    public void syncAll(HashMap\u003cString, Price\u003e newPriceMetrics)"},{"lineNumber":121,"author":{"gitID":"laichengyu"},"content":"            throws DuplicateCoinException, CoinNotFoundException {"},{"lineNumber":122,"author":{"gitID":"laichengyu"},"content":"        requireNonNull(newPriceMetrics);"},{"lineNumber":123,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":124,"author":{"gitID":"laichengyu"},"content":"        coinBook.syncAll(newPriceMetrics);"},{"lineNumber":125,"author":{"gitID":"laichengyu"},"content":"        indicateCoinBookChanged();"},{"lineNumber":126,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":128,"author":{"gitID":"laichengyu"},"content":"    /** Returns an unmodifiable view of the code list */"},{"lineNumber":129,"author":{"gitID":"laichengyu"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"laichengyu"},"content":"    public List\u003cString\u003e getCodeList() {"},{"lineNumber":131,"author":{"gitID":"laichengyu"},"content":"        return coinBook.getCodeList();"},{"lineNumber":132,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Coin List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns an unmodifiable view of the list of {@code Coin} backed by the internal list of"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * {@code coinBook}"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"Eldon-Chung"},"content":"    public ObservableList\u003cCoin\u003e getFilteredCoinList() {"},{"lineNumber":143,"author":{"gitID":"Eldon-Chung"},"content":"        return FXCollections.unmodifiableObservableList(filteredCoins);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"Eldon-Chung"},"content":"    public void updateFilteredCoinList(Predicate\u003cCoin\u003e predicate) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":149,"author":{"gitID":"Eldon-Chung"},"content":"        filteredCoins.setPredicate(predicate);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"content":"    //@@author"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Rule Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public ReadOnlyRuleBook getRuleBook() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return ruleBook;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void indicateRuleBookChanged() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        raise(new RuleBookChangedEvent(ruleBook));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public synchronized void addRule(Rule rule) throws DuplicateRuleException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        ruleBook.addRule(rule);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        indicateRuleBookChanged();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void updateRule(Rule target, Rule editedRule)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            throws DuplicateRuleException, RuleNotFoundException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedRule);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        ruleBook.updateRule(target, editedRule);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        indicateRuleBookChanged();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public synchronized void deleteRule(Rule target) throws RuleNotFoundException {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        ruleBook.removeRule(target);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        indicateRuleBookChanged();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public ObservableList\u003cRule\u003e getRuleList() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(ruleBook.getRuleList());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return coinBook.equals(other.coinBook)"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredCoins.equals(other.filteredCoins)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                \u0026\u0026 ruleBook.equals(other.ruleBook);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Eldon-Chung":21,"laichengyu":16,"-":166,"neilish3re":7}},{"path":"src/main/java/seedu/address/model/coin/Code.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.commons.core.CoinSubredditList;"},{"lineNumber":7,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents a Coin\u0027s currency code in the book."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class Code {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"            \"Coin names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Code(String name) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns true if a given string is a valid coin name."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"    public static boolean isRecognizedName(Coin test) {"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        return CoinSubredditList.isRecognized(test);"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean contains(String substring) {"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"        return fullName.contains(substring);"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                || (other instanceof Code // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Code) other).fullName)); // state check"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":12,"-":55}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Price;"},{"lineNumber":10,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":11,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.DuplicateRuleException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.rule.exceptions.RuleNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    Predicate\u003cCoin\u003e PREDICATE_SHOW_ALL_COINS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyCoinBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the CoinBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyCoinBook getCoinBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    /** Deletes the given coin. */"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    void deleteCoin(Coin target) throws CoinNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    /** Adds the given coin */"},{"lineNumber":33,"author":{"gitID":"Eldon-Chung"},"content":"    void addCoin(Coin coin) throws DuplicateCoinException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Eldon-Chung"},"content":"     * Replaces the given coin {@code target} with {@code editedCoin}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws DuplicateCoinException if updating the coin\u0027s details causes the coin to be equivalent to"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"     *      another existing coin in the list."},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws CoinNotFoundException if {@code target} could not be found in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    void updateCoin(Coin target, Coin editedCoin)"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"            throws DuplicateCoinException, CoinNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    /** Returns an unmodifiable view of the filtered coin list */"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"    ObservableList\u003cCoin\u003e getFilteredCoinList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":49,"author":{"gitID":"laichengyu"},"content":"    /** Returns an unmodifiable view of the code list */"},{"lineNumber":50,"author":{"gitID":"laichengyu"},"content":"    List\u003cString\u003e getCodeList();"},{"lineNumber":51,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":52,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"laichengyu"},"content":"      * Syncs all coin data"},{"lineNumber":54,"author":{"gitID":"laichengyu"},"content":"      */"},{"lineNumber":55,"author":{"gitID":"laichengyu"},"content":"    void syncAll(HashMap\u003cString, Price\u003e newPriceMetrics)"},{"lineNumber":56,"author":{"gitID":"laichengyu"},"content":"            throws DuplicateCoinException, CoinNotFoundException;"},{"lineNumber":57,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"     * Updates the filter of the filtered coin list to filter by the given {@code predicate}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"    void updateFilteredCoinList(Predicate\u003cCoin\u003e predicate);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"neilish3re"},"content":"    //@@author neilish3re"},{"lineNumber":66,"author":{"gitID":"neilish3re"},"content":"    void sortCoinList(boolean isSort);"},{"lineNumber":67,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":68,"author":{"gitID":"neilish3re"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /** Deletes the given rule. */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    void deleteRule(Rule target) throws RuleNotFoundException;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /** Adds the given rule */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    void addRule(Rule rule) throws DuplicateRuleException;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Replaces the given rule {@code target} with {@code editedRule}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws DuplicateRuleException if updating the rule\u0027s details causes the rule to be equivalent to"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *      another existing rule in the list."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws RuleNotFoundException if {@code target} could not be found in the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    void updateRule(Rule target, Rule editedRule)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throws DuplicateRuleException, RuleNotFoundException;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /** Returns the rule book */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    ReadOnlyRuleBook getRuleBook();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the rule list */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    ObservableList\u003cRule\u003e getRuleList();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":18,"laichengyu":10,"-":60,"neilish3re":4}},{"path":"src/main/java/seedu/address/model/coin/Coin.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Eldon-Chung"},"content":" * Represents a Coin in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":"public class Coin {"},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Code code;"},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"    private final Amount totalAmountSold;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"    private final Amount totalAmountBought;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Amount totalDollarsSold;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Amount totalDollarsBought;"},{"lineNumber":24,"author":{"gitID":"Eldon-Chung"},"content":"    private final Price price;"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Coin prevState;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public Coin(Code code, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireAllNonNull(code, tags);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.code \u003d code;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"        this.price \u003d new Price();"},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"        this.totalAmountSold \u003d new Amount();"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"        this.totalAmountBought \u003d new Amount();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.totalDollarsSold \u003d new Amount();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.totalDollarsBought \u003d new Amount();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"     * Every field must be present and not null."},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Coin(Code code, Set\u003cTag\u003e tags, String aBought, String aSold, String dBought, String dSold) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireAllNonNull(code, tags, aBought, aSold, dBought, dSold);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.code \u003d code;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"        this.price \u003d new Price();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.totalAmountSold \u003d new Amount(aSold);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.totalAmountBought \u003d new Amount(aBought);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.totalDollarsSold \u003d new Amount(dSold);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.totalDollarsBought \u003d new Amount(dBought);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"Eldon-Chung"},"content":"     * Every field must be present and not null."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Only used internally to generate diff coin"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private Coin(Code code, Set\u003cTag\u003e tags, Price price, Amount aBought, Amount aSold, Amount dBought, Amount dSold) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        requireAllNonNull(code, tags, aBought, aSold, dBought, dSold);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.code \u003d code;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.price \u003d price;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.totalAmountSold \u003d aSold;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.totalAmountBought \u003d aBought;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.totalDollarsSold \u003d dSold;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.totalDollarsBought \u003d dBought;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Copy constructor for coins."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Sets previous state to copied coin."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public Coin(Coin toCopy) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireAllNonNull(toCopy);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.code \u003d toCopy.code;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(toCopy.getTags());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.price \u003d toCopy.price;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.totalAmountSold \u003d new Amount(toCopy.getTotalAmountSold());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.totalAmountBought \u003d new Amount(toCopy.getTotalAmountBought());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.totalDollarsSold \u003d new Amount(toCopy.getTotalDollarsSold());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.totalDollarsBought \u003d new Amount(toCopy.getTotalDollarsBought());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        prevState \u003d toCopy;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":94,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"laichengyu"},"content":"     * Copy constructor with price update."},{"lineNumber":96,"author":{"gitID":"laichengyu"},"content":"     * Sets previous state to copied coin."},{"lineNumber":97,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"laichengyu"},"content":"    public Coin(Coin toCopy, Price newPrice) {"},{"lineNumber":99,"author":{"gitID":"laichengyu"},"content":"        requireAllNonNull(toCopy);"},{"lineNumber":100,"author":{"gitID":"laichengyu"},"content":"        this.code \u003d toCopy.code;"},{"lineNumber":101,"author":{"gitID":"laichengyu"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":102,"author":{"gitID":"laichengyu"},"content":"        this.tags \u003d new UniqueTagList(toCopy.getTags());"},{"lineNumber":103,"author":{"gitID":"laichengyu"},"content":"        this.price \u003d new Price(newPrice);"},{"lineNumber":104,"author":{"gitID":"laichengyu"},"content":"        this.totalAmountSold \u003d new Amount(toCopy.getTotalAmountSold());"},{"lineNumber":105,"author":{"gitID":"laichengyu"},"content":"        this.totalAmountBought \u003d new Amount(toCopy.getTotalAmountBought());"},{"lineNumber":106,"author":{"gitID":"laichengyu"},"content":"        this.totalDollarsSold \u003d new Amount(toCopy.getTotalDollarsSold());"},{"lineNumber":107,"author":{"gitID":"laichengyu"},"content":"        this.totalDollarsBought \u003d new Amount(toCopy.getTotalDollarsBought());"},{"lineNumber":108,"author":{"gitID":"laichengyu"},"content":"        prevState \u003d toCopy;"},{"lineNumber":109,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Copy constructor with update."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Sets previous state to copied coin."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public Coin(Coin toCopy, Code code, Set\u003cTag\u003e tags) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        requireAllNonNull(toCopy, code, tags);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        this.code \u003d code;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        this.price \u003d toCopy.price;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        this.totalAmountSold \u003d new Amount(toCopy.getTotalAmountSold());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        this.totalAmountBought \u003d new Amount(toCopy.getTotalAmountBought());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        this.totalDollarsSold \u003d new Amount(toCopy.getTotalDollarsSold());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        this.totalDollarsBought \u003d new Amount(toCopy.getTotalDollarsBought());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        prevState \u003d toCopy;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Gets the previous state of this coin"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public Coin getPrevState() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return prevState;"},{"lineNumber":134,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public Code getCode() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return code;"},{"lineNumber":138,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":140,"author":{"gitID":"Eldon-Chung"},"content":"    public Price getPrice() {"},{"lineNumber":141,"author":{"gitID":"Eldon-Chung"},"content":"        return price;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"Eldon-Chung"},"content":"    public Amount getTotalAmountSold() {"},{"lineNumber":153,"author":{"gitID":"Eldon-Chung"},"content":"        return totalAmountSold;"},{"lineNumber":154,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Updates the total amount sold of this coin in units held and return gained"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * @param addAmount"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"Eldon-Chung"},"content":"    public void addTotalAmountSold(Amount addAmount) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // Bounds check, not to sell more than being held"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        if (addAmount.compareTo(getCurrentAmountHeld()) \u003e 0) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            addAmount \u003d getCurrentAmountHeld();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"Eldon-Chung"},"content":"        this.totalAmountSold.addValue(addAmount);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        this.totalDollarsSold.addValue(Amount.getMult(addAmount, price.getCurrent()));"},{"lineNumber":167,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":169,"author":{"gitID":"Eldon-Chung"},"content":"    public Amount getTotalAmountBought() {"},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"        return totalAmountBought;"},{"lineNumber":171,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Updates the total amount bought of this coin in units held and capital invested"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * @param addAmount"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"Eldon-Chung"},"content":"    public void addTotalAmountBought(Amount addAmount) {"},{"lineNumber":178,"author":{"gitID":"Eldon-Chung"},"content":"        this.totalAmountBought.addValue(addAmount);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        this.totalDollarsBought.addValue(Amount.getMult(addAmount, price.getCurrent()));"},{"lineNumber":180,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":182,"author":{"gitID":"Eldon-Chung"},"content":"    public Amount getCurrentAmountHeld() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return Amount.getDiff(totalAmountBought, totalAmountSold);"},{"lineNumber":184,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":186,"author":{"gitID":"Eldon-Chung"},"content":"    public Amount getTotalProfit() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return Amount.getDiff(totalDollarsSold, totalDollarsBought);"},{"lineNumber":188,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":190,"author":{"gitID":"Eldon-Chung"},"content":"    public Amount getDollarsWorth() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return Amount.getMult(price.getCurrent(), getCurrentAmountHeld());"},{"lineNumber":192,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public Amount getTotalDollarsSold() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return totalDollarsSold;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public Amount getTotalDollarsBought() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        return totalDollarsBought;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"ewaldhew"},"content":"    //@@author ewaldhew"},{"lineNumber":203,"author":{"gitID":"ewaldhew"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"ewaldhew"},"content":"     * Gets the difference between two coins and makes a new coin record with that change."},{"lineNumber":205,"author":{"gitID":"ewaldhew"},"content":"     * @return (final minus initial) as a coin, where the final coin is this"},{"lineNumber":206,"author":{"gitID":"ewaldhew"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"ewaldhew"},"content":"    public Coin getChangeFrom(Coin initialCoin) {"},{"lineNumber":208,"author":{"gitID":"ewaldhew"},"content":"        assert(initialCoin.code.equals(this.code));"},{"lineNumber":209,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":210,"author":{"gitID":"ewaldhew"},"content":"        return new Coin(initialCoin.code,"},{"lineNumber":211,"author":{"gitID":"ewaldhew"},"content":"                initialCoin.getTags(),"},{"lineNumber":212,"author":{"gitID":"ewaldhew"},"content":"                price.getChangeFrom(initialCoin.price),"},{"lineNumber":213,"author":{"gitID":"ewaldhew"},"content":"                Amount.getDiff(this.totalAmountBought, initialCoin.totalAmountBought),"},{"lineNumber":214,"author":{"gitID":"ewaldhew"},"content":"                Amount.getDiff(this.totalAmountSold, initialCoin.totalAmountSold),"},{"lineNumber":215,"author":{"gitID":"ewaldhew"},"content":"                Amount.getDiff(this.totalDollarsBought, initialCoin.totalDollarsBought),"},{"lineNumber":216,"author":{"gitID":"ewaldhew"},"content":"                Amount.getDiff(this.totalDollarsSold, initialCoin.totalDollarsSold));"},{"lineNumber":217,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":219,"author":{"gitID":"ewaldhew"},"content":"    public Coin getChangeFromPrev() {"},{"lineNumber":220,"author":{"gitID":"ewaldhew"},"content":"        return getChangeFrom(prevState);"},{"lineNumber":221,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"ewaldhew"},"content":""},{"lineNumber":223,"author":{"gitID":"ewaldhew"},"content":"    public Coin getChangeToPrev() {"},{"lineNumber":224,"author":{"gitID":"ewaldhew"},"content":"        return prevState.getChangeFrom(this);"},{"lineNumber":225,"author":{"gitID":"ewaldhew"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"ewaldhew"},"content":"    //@@author"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"Eldon-Chung"},"content":"        if (!(other instanceof Coin)) {"},{"lineNumber":235,"author":{"gitID":"Eldon-Chung"},"content":"            return false;"},{"lineNumber":236,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":238,"author":{"gitID":"Eldon-Chung"},"content":"        Coin otherCoin \u003d (Coin) other;"},{"lineNumber":239,"author":{"gitID":"Eldon-Chung"},"content":"        return otherCoin.getCode().equals(this.getCode());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        return Objects.hash(code, tags, getCurrentAmountHeld(), price);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        builder.append(getCode())"},{"lineNumber":252,"author":{"gitID":"Eldon-Chung"},"content":"                .append(\" Amount: \")"},{"lineNumber":253,"author":{"gitID":"Eldon-Chung"},"content":"                .append(getCurrentAmountHeld())"},{"lineNumber":254,"author":{"gitID":"Eldon-Chung"},"content":"                .append(\" Price: \")"},{"lineNumber":255,"author":{"gitID":"Eldon-Chung"},"content":"                .append(getPrice())"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"Eldon-Chung"},"content":"}"}],"authorContributionMap":{"ewaldhew":25,"Eldon-Chung":64,"laichengyu":18,"-":153}},{"path":"src/main/java/seedu/address/model/coin/UniqueCoinList.java","lines":[{"lineNumber":1,"author":{"gitID":"Eldon-Chung"},"content":"package seedu.address.model.coin;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Eldon-Chung"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":15,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":16,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":17,"author":{"gitID":"Eldon-Chung"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":" * A list of coins that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"Eldon-Chung"},"content":" *"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":" *"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":" * @see Coin#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"Eldon-Chung"},"content":"public class UniqueCoinList implements Iterable\u003cCoin\u003e {"},{"lineNumber":26,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":27,"author":{"gitID":"Eldon-Chung"},"content":"    private final ObservableList\u003cCoin\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":29,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Eldon-Chung"},"content":"     * Returns true if the list contains an equivalent coin as the given argument."},{"lineNumber":31,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean contains(Coin toCheck) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Eldon-Chung"},"content":"     * Adds a coin to the list."},{"lineNumber":39,"author":{"gitID":"Eldon-Chung"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws DuplicateCoinException if the coin to add is a duplicate of an existing coin in the list."},{"lineNumber":41,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Eldon-Chung"},"content":"    public void add(Coin toAdd) throws DuplicateCoinException {"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"Eldon-Chung"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"Eldon-Chung"},"content":"            throw new DuplicateCoinException();"},{"lineNumber":46,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Eldon-Chung"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":50,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Eldon-Chung"},"content":"     * Replaces the coin {@code target} in the list with {@code editedCoin}."},{"lineNumber":52,"author":{"gitID":"Eldon-Chung"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws DuplicateCoinException if the replacement is equivalent to another existing coin in the list."},{"lineNumber":54,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws CoinNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Index setCoin(Coin target, Coin editedCoin)"},{"lineNumber":57,"author":{"gitID":"Eldon-Chung"},"content":"            throws DuplicateCoinException, CoinNotFoundException {"},{"lineNumber":58,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(editedCoin);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"Eldon-Chung"},"content":"            throw new CoinNotFoundException();"},{"lineNumber":63,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":65,"author":{"gitID":"Eldon-Chung"},"content":"        if (!target.equals(editedCoin) \u0026\u0026 internalList.contains(editedCoin)) {"},{"lineNumber":66,"author":{"gitID":"Eldon-Chung"},"content":"            throw new DuplicateCoinException();"},{"lineNumber":67,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":69,"author":{"gitID":"Eldon-Chung"},"content":"        internalList.set(index, editedCoin);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return Index.fromZeroBased(index);"},{"lineNumber":72,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Eldon-Chung"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Eldon-Chung"},"content":"     * Removes the equivalent coin from the list."},{"lineNumber":77,"author":{"gitID":"Eldon-Chung"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws CoinNotFoundException if no such coin could be found in the list."},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean remove(Coin toRemove) throws CoinNotFoundException {"},{"lineNumber":81,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(toRemove);"},{"lineNumber":82,"author":{"gitID":"Eldon-Chung"},"content":"        final boolean coinFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":83,"author":{"gitID":"Eldon-Chung"},"content":"        if (!coinFoundAndDeleted) {"},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"            throw new CoinNotFoundException();"},{"lineNumber":85,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Eldon-Chung"},"content":"        return coinFoundAndDeleted;"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":""},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"    public void setCoins(UniqueCoinList replacement) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Eldon-Chung"},"content":"    public void setCoins(List\u003cCoin\u003e coins) throws DuplicateCoinException {"},{"lineNumber":94,"author":{"gitID":"Eldon-Chung"},"content":"        requireAllNonNull(coins);"},{"lineNumber":95,"author":{"gitID":"Eldon-Chung"},"content":"        final UniqueCoinList replacement \u003d new UniqueCoinList();"},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        for (final Coin coin : coins) {"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"            replacement.add(coin);"},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"Eldon-Chung"},"content":"        setCoins(replacement);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"    public ObservableList\u003cCoin\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"neilish3re"},"content":"    //@@author neilish3re"},{"lineNumber":110,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":111,"author":{"gitID":"neilish3re"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"neilish3re"},"content":"     * Sorts the coins using compareTo"},{"lineNumber":113,"author":{"gitID":"neilish3re"},"content":"     * @param isSort"},{"lineNumber":114,"author":{"gitID":"neilish3re"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"neilish3re"},"content":"    public void sort(boolean isSort) {"},{"lineNumber":116,"author":{"gitID":"neilish3re"},"content":"        if (isSort) {"},{"lineNumber":117,"author":{"gitID":"neilish3re"},"content":"            internalList.sort((coin1, coin2) -\u003e (coin2.getCode().fullName.compareTo(coin1.getCode().fullName)));"},{"lineNumber":118,"author":{"gitID":"neilish3re"},"content":"        } else {"},{"lineNumber":119,"author":{"gitID":"neilish3re"},"content":"            internalList.sort((coin1, coin2) -\u003e (coin1.getCode().fullName.compareTo(coin2.getCode().fullName)));"},{"lineNumber":120,"author":{"gitID":"neilish3re"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"neilish3re"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"neilish3re"},"content":"    //@@author"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"Eldon-Chung"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"Eldon-Chung"},"content":"    public Iterator\u003cCoin\u003e iterator() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":132,"author":{"gitID":"Eldon-Chung"},"content":"                || (other instanceof UniqueCoinList // instanceof handles nulls"},{"lineNumber":133,"author":{"gitID":"Eldon-Chung"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueCoinList) other).internalList));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":76,"-":50,"neilish3re":14}},{"path":"src/main/java/seedu/address/model/CoinBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CoinChangedEvent;"},{"lineNumber":18,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.Coin;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.coin.Price;"},{"lineNumber":20,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.UniqueCoinList;"},{"lineNumber":21,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.CoinNotFoundException;"},{"lineNumber":22,"author":{"gitID":"Eldon-Chung"},"content":"import seedu.address.model.coin.exceptions.DuplicateCoinException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class CoinBook implements ReadOnlyCoinBook {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Eldon-Chung"},"content":"    private final UniqueCoinList coins;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":43,"author":{"gitID":"Eldon-Chung"},"content":"        coins \u003d new UniqueCoinList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public CoinBook() {}"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Creates an CoinBook using the Coins and Tags in the {@code toBeCopied}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public CoinBook(ReadOnlyCoinBook toBeCopied) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Eldon-Chung"},"content":"    public void setCoins(List\u003cCoin\u003e coins) throws DuplicateCoinException {"},{"lineNumber":60,"author":{"gitID":"Eldon-Chung"},"content":"        this.coins.setCoins(coins);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code CoinBook} with {@code newData}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyCoinBook newData) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":73,"author":{"gitID":"Eldon-Chung"},"content":"        List\u003cCoin\u003e syncedCoinList \u003d newData.getCoinList().stream()"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"Eldon-Chung"},"content":"            setCoins(syncedCoinList);"},{"lineNumber":79,"author":{"gitID":"Eldon-Chung"},"content":"        } catch (DuplicateCoinException e) {"},{"lineNumber":80,"author":{"gitID":"Eldon-Chung"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate coins\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Eldon-Chung"},"content":"    //// coin-level operations"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"Eldon-Chung"},"content":"     * Adds a coin to the address book."},{"lineNumber":88,"author":{"gitID":"Eldon-Chung"},"content":"     * Also checks the new coin\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":89,"author":{"gitID":"Eldon-Chung"},"content":"     * and updates the Tag objects in the coin to point to those in {@link #tags}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws DuplicateCoinException if an equivalent coin already exists."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void addCoin(Coin c) throws DuplicateCoinException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Coin coin \u003d syncWithMasterTagList(c);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":96,"author":{"gitID":"Eldon-Chung"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any coin"},{"lineNumber":97,"author":{"gitID":"Eldon-Chung"},"content":"        // in the coin list."},{"lineNumber":98,"author":{"gitID":"Eldon-Chung"},"content":"        coins.add(coin);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Eldon-Chung"},"content":"     * Replaces the given coin {@code target} in the list with {@code editedCoin}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * {@code CoinBook}\u0027s tag list will be updated with the tags of {@code editedCoin}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws DuplicateCoinException if updating the coin\u0027s details causes the coin to be equivalent to"},{"lineNumber":106,"author":{"gitID":"Eldon-Chung"},"content":"     *      another existing coin in the list."},{"lineNumber":107,"author":{"gitID":"Eldon-Chung"},"content":"     * @throws CoinNotFoundException if {@code target} could not be found in the list."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"Eldon-Chung"},"content":"     * @see #syncWithMasterTagList(Coin)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"Eldon-Chung"},"content":"    public void updateCoin(Coin target, Coin editedCoin)"},{"lineNumber":112,"author":{"gitID":"Eldon-Chung"},"content":"            throws DuplicateCoinException, CoinNotFoundException {"},{"lineNumber":113,"author":{"gitID":"Eldon-Chung"},"content":"        requireNonNull(editedCoin);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"Eldon-Chung"},"content":"        Coin syncedEditedCoin \u003d syncWithMasterTagList(editedCoin);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":117,"author":{"gitID":"Eldon-Chung"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any coin"},{"lineNumber":118,"author":{"gitID":"Eldon-Chung"},"content":"        // in the coin list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Index replacedIndex \u003d coins.setCoin(target, syncedEditedCoin);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new CoinChangedEvent(replacedIndex, target, editedCoin));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"neilish3re"},"content":"    //@@author neilish3re"},{"lineNumber":123,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":124,"author":{"gitID":"neilish3re"},"content":"    public void sortCoinBook(boolean isSort) {"},{"lineNumber":125,"author":{"gitID":"neilish3re"},"content":"        coins.sort(isSort);"},{"lineNumber":126,"author":{"gitID":"neilish3re"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"neilish3re"},"content":"    //@@ author"},{"lineNumber":128,"author":{"gitID":"neilish3re"},"content":""},{"lineNumber":129,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":130,"author":{"gitID":"laichengyu"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"laichengyu"},"content":"     * Replaces every coin in the list that has a price change in {@code newData} with {@code updatedCoin}."},{"lineNumber":132,"author":{"gitID":"laichengyu"},"content":"     * {@code CoinBook}\u0027s tag list will be updated with the tags of {@code updatedCoin}."},{"lineNumber":133,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":134,"author":{"gitID":"laichengyu"},"content":"     * @throws DuplicateCoinException if updating the coin\u0027s details causes the coin to be equivalent to"},{"lineNumber":135,"author":{"gitID":"laichengyu"},"content":"     *      another existing coin in the list."},{"lineNumber":136,"author":{"gitID":"laichengyu"},"content":"     * @throws CoinNotFoundException if {@code coin} could not be found in the list."},{"lineNumber":137,"author":{"gitID":"laichengyu"},"content":"     *"},{"lineNumber":138,"author":{"gitID":"laichengyu"},"content":"     * @see #syncWithMasterTagList(Coin)"},{"lineNumber":139,"author":{"gitID":"laichengyu"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"laichengyu"},"content":"    public void syncAll(HashMap\u003cString, Price\u003e newPriceMetrics)"},{"lineNumber":141,"author":{"gitID":"laichengyu"},"content":"            throws DuplicateCoinException, CoinNotFoundException {"},{"lineNumber":142,"author":{"gitID":"laichengyu"},"content":"        requireNonNull(newPriceMetrics);"},{"lineNumber":143,"author":{"gitID":"laichengyu"},"content":""},{"lineNumber":144,"author":{"gitID":"laichengyu"},"content":"        for (Coin coin : coins) {"},{"lineNumber":145,"author":{"gitID":"laichengyu"},"content":"            String code \u003d coin.getCode().toString();"},{"lineNumber":146,"author":{"gitID":"laichengyu"},"content":"            Price newPrice \u003d newPriceMetrics.get(code);"},{"lineNumber":147,"author":{"gitID":"laichengyu"},"content":"            if (newPrice \u003d\u003d null) {"},{"lineNumber":148,"author":{"gitID":"laichengyu"},"content":"                continue;"},{"lineNumber":149,"author":{"gitID":"laichengyu"},"content":"            }"},{"lineNumber":150,"author":{"gitID":"laichengyu"},"content":"            Coin updatedCoin \u003d new Coin(coin, newPrice);"},{"lineNumber":151,"author":{"gitID":"laichengyu"},"content":"            updateCoin(coin, updatedCoin);"},{"lineNumber":152,"author":{"gitID":"laichengyu"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"Eldon-Chung"},"content":"     *  Updates the master tag list to include tags in {@code coin} that are not in the list."},{"lineNumber":158,"author":{"gitID":"Eldon-Chung"},"content":"     *  @return a copy of this {@code coin} such that every tag in this coin points to a Tag object in the master"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"Eldon-Chung"},"content":"    private Coin syncWithMasterTagList(Coin coin) {"},{"lineNumber":162,"author":{"gitID":"Eldon-Chung"},"content":"        final UniqueTagList coinTags \u003d new UniqueTagList(coin.getTags());"},{"lineNumber":163,"author":{"gitID":"Eldon-Chung"},"content":"        tags.mergeFrom(coinTags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":166,"author":{"gitID":"Eldon-Chung"},"content":"        // used for checking coin tag references"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"Eldon-Chung"},"content":"        // Rebuild the list of coin tags to point to the relevant tags in the master tag list."},{"lineNumber":171,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":172,"author":{"gitID":"Eldon-Chung"},"content":"        coinTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":173,"author":{"gitID":"Eldon-Chung"},"content":"        return new Coin("},{"lineNumber":174,"author":{"gitID":"-"},"content":"                coin, coin.getCode(), correctTagReferences);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code CoinBook}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * @throws CoinNotFoundException if the {@code key} is not in this {@code CoinBook}."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"Eldon-Chung"},"content":"    public boolean removeCoin(Coin key) throws CoinNotFoundException {"},{"lineNumber":182,"author":{"gitID":"Eldon-Chung"},"content":"        if (coins.remove(key)) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":185,"author":{"gitID":"Eldon-Chung"},"content":"            throw new CoinNotFoundException();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":199,"author":{"gitID":"Eldon-Chung"},"content":"        return coins.asObservableList().size() + \" coins, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":204,"author":{"gitID":"Eldon-Chung"},"content":"    public ObservableList\u003cCoin\u003e getCoinList() {"},{"lineNumber":205,"author":{"gitID":"Eldon-Chung"},"content":"        return coins.asObservableList();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"laichengyu"},"content":"    //@@author laichengyu"},{"lineNumber":214,"author":{"gitID":"laichengyu"},"content":"    @Override"},{"lineNumber":215,"author":{"gitID":"laichengyu"},"content":"    public List\u003cString\u003e getCodeList() {"},{"lineNumber":216,"author":{"gitID":"laichengyu"},"content":"        return Collections.unmodifiableList(coins.asObservableList().stream()"},{"lineNumber":217,"author":{"gitID":"laichengyu"},"content":"                .map(coin -\u003e coin.getCode().toString())"},{"lineNumber":218,"author":{"gitID":"laichengyu"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":219,"author":{"gitID":"laichengyu"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"laichengyu"},"content":"    //@@author"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                || (other instanceof CoinBook // instanceof handles nulls"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.coins.equals(((CoinBook) other).coins)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((CoinBook) other).tags));"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":233,"author":{"gitID":"Eldon-Chung"},"content":"        return Objects.hash(coins, tags);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Eldon-Chung":47,"laichengyu":34,"-":147,"neilish3re":7}}]
