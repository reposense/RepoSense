var resultJson = [{"path":"docs/team/victortardieu.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Victor Tardieu - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: Catalogue"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"* This is a desktop Catalogue application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitID":"-"},"content":"* It is a Java application intended for librarians, students and guests using the library."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":"* *Major enhancement*: Added the ability to clear all the accounts of list of accounts"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"** What it does: Allows the user (logged in as a librarian) to clear in one click all the created accounts."},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"** Justification: This feature improves the product significantly because a user can quickly and efficiently remove all the accounts. It helps save time."},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":"** Highlights: This enhancement requires an in-depth analysis of logic and storage in order to access the latter and apply a reset function with the logic component.This enhancement required an in-depth analysis of logic and storage in order to access the latter and apply a reset function with the logic component."},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"** Credits: N/A"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"* *Minor enhancement*: Added an autocomplete function."},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"** What it does: After pressing TAB, it will add the prefixes for the required function."},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"** Justification: This feature significantly improve the product since it allows the user to type even faster and to remind him what to write for the function."},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"** Highlights: This enhancement is related to the Logic and UI component since the autocomplete function is in Logic but it prints out in UI. It requires to take time to understand how Logic and UI interacts."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* *Code contributed*: https://github.com/CS2103JAN2018-T16-B1/main/blob/master/collated/functional/victortardieu.md[Functional] | https://github.com/CS2103JAN2018-T16-B1/main/blob/master/collated/test/victortardieu.md[Test]"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"** Enhancements to existing features: +"},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"UI enhancement --\u003e Tag colors: Assign a new color each time a new tag is created so that the tags have different colors. +"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"Test enhancement --\u003e Created the data files for the tests of the account functions"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"** Documentation: +"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"Fixed the issues in User Guide from in-class testing session (see issues from bot). +"},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"Added in User Guide the new functions (AddAccount, ClearAccount, DeleteAccount, Borrow, Return, Reserve, Logout) +"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"Wrote the User Stories, Use cases"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":"** Community: +"},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":"Assigned issues to different team members after testing session"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":"** Others:"},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":"Created the first book system."},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"** Quick Start Section"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":"Modify it to explain the new user interface. Write sentence for every section of the UI."},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":"Create the new user interface picture."},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"** Logout"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":"Add the following information (format, example, tips, notes) on how to use this function."},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"** AddAccount"},{"lineNumber":65,"author":{"gitID":"victortardieu"},"content":"Add the following information (format, example, tips, notes) on how to use this function."},{"lineNumber":66,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"** DeleteAccount"},{"lineNumber":68,"author":{"gitID":"victortardieu"},"content":"Add the following information (format, example, tips, notes) on how to use this function."},{"lineNumber":69,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":70,"author":{"gitID":"victortardieu"},"content":"** ClearAccount"},{"lineNumber":71,"author":{"gitID":"victortardieu"},"content":"Add the following information (format, example, tips, notes) on how to use this function."},{"lineNumber":72,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":73,"author":{"gitID":"victortardieu"},"content":"** Borrow"},{"lineNumber":74,"author":{"gitID":"victortardieu"},"content":"Add the following information (format, example, tips, notes) on how to use this function."},{"lineNumber":75,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":76,"author":{"gitID":"victortardieu"},"content":"** Return"},{"lineNumber":77,"author":{"gitID":"victortardieu"},"content":"Add the following information (format, example, tips, notes) on how to use this function."},{"lineNumber":78,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":79,"author":{"gitID":"victortardieu"},"content":"** Renew"},{"lineNumber":80,"author":{"gitID":"victortardieu"},"content":"Add the following information (format, example, tips, notes) on how to use this function."},{"lineNumber":81,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":82,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":87,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"victortardieu"},"content":"**Introduction"},{"lineNumber":91,"author":{"gitID":"victortardieu"},"content":"include::../DeveloperGuide.adoc[tag\u003ddevguideintroduction]"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"victortardieu"},"content":"** UI component"},{"lineNumber":94,"author":{"gitID":"victortardieu"},"content":"Modify the UI diagram to make it about our project."},{"lineNumber":95,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":96,"author":{"gitID":"victortardieu"},"content":"** Appendix B"},{"lineNumber":97,"author":{"gitID":"victortardieu"},"content":"Change the scope of the project"},{"lineNumber":98,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":99,"author":{"gitID":"victortardieu"},"content":"** Appendix C"},{"lineNumber":100,"author":{"gitID":"victortardieu"},"content":"Write the user stories"},{"lineNumber":101,"author":{"gitID":"victortardieu"},"content":"Rank them by user and then by importance (*** first and * last)"},{"lineNumber":102,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":103,"author":{"gitID":"victortardieu"},"content":"** Appendix D"},{"lineNumber":104,"author":{"gitID":"victortardieu"},"content":"Write Use Cases for ClearCommand, ClearAccountCommand, HistoryCommand"},{"lineNumber":105,"author":{"gitID":"victortardieu"},"content":"include::../DeveloperGuide.adoc[tag\u003dusecaseclearaclearhistory]"},{"lineNumber":106,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":107,"author":{"gitID":"victortardieu"},"content":"** Appendix H"},{"lineNumber":108,"author":{"gitID":"victortardieu"},"content":"Write instructions for manual testing for ClearCommand, ClearAccountCommand, HistoryCommand"},{"lineNumber":109,"author":{"gitID":"victortardieu"},"content":"include::../DeveloperGuide.adoc[tag\u003dmanualtestclearaclearhistory]"},{"lineNumber":110,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: PowerPointLabs"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"---"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"_{Optionally, you may include other projects in your portfolio.}_"}],"authorContributionMap":{"victortardieu":67,"-":49}},{"path":"docs/team/wongkhiayi.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Wong Khia Yi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: Catalogue"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"* This is a desktop Catalogue application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitID":"-"},"content":"* It is a Java application intended for librarians, students and guests using the library."},{"lineNumber":13,"author":{"gitID":"-"},"content":"* We started the project based on an AddressBook sample application(https://github.com/nus-cs2103-AY1718S2/addressbook-level4) that is around 10KLoC."},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major enhancement*: Added the model for catalogue for books and its relevant tests in command, model, system and xml."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** What it does: Allows the app to store books."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Justification: This makes the program relevant to our project and rejects invalid inputs to keep the Catalogue clean."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Highlights: This enhancement is related to all components of the program including the data files and tests, it required a careful analysis of the whole system before it is implemented."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* *Minor enhancement*: Updated message outputs and sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Code contributed*: https://github.com/CS2103JAN2018-T16-B1/main/blob/master/collated/functional/khiayi.md[Functional] | https://github.com/CS2103JAN2018-T16-B1/main/blob/master/collated/test/khiayi.md[Test]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Project management: set up Travis and Coverall in team repo."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Documentation: Updated documentation of my enhancements"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":35,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"// tag::add[]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"[[Add]]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a book: `add`"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Format: `add n/TITLE a/AUTHOR i/ISBN av/AVAIL  [t/TAG]...`"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"A book can have any number of tags (including 0)"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"****"},{"lineNumber":49,"author":{"gitID":"-"},"content":"* All of the fields must be provided."},{"lineNumber":50,"author":{"gitID":"-"},"content":"* The provided field must be valid."},{"lineNumber":51,"author":{"gitID":"-"},"content":"** TITLE must be alphanumeric."},{"lineNumber":52,"author":{"gitID":"-"},"content":"** AUTHOR must be alphanumeric."},{"lineNumber":53,"author":{"gitID":"-"},"content":"** ISBN must contain 13 numbers and be unique."},{"lineNumber":54,"author":{"gitID":"-"},"content":"** AVAIL must be `Available`, `Borrowed` or `Reserved`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"****"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"* `add t/Animal Farm a/George Orwell i/9780736692427 av/Borrowed`"},{"lineNumber":60,"author":{"gitID":"-"},"content":"* `add t/Breaking Dawn tag/fiction av/Borrowed a/Stephenie Meyer i/9780316067928 tag/young adults`"},{"lineNumber":61,"author":{"gitID":"-"},"content":"// end::add[]"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"// tag::edit[]"},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a book : `edit`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Edits an existing book in the catalogue. +"},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"Format: `edit INDEX t/TITLE a/AUTHOR i/ISBN av/AVAIL tag/TAG...` +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"****"},{"lineNumber":71,"author":{"gitID":"-"},"content":"* Edits the book at the specified `INDEX`. The index refers to the index number shown in the last book listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":72,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":73,"author":{"gitID":"-"},"content":"* The provided field must be valid. (Refer to \u003c\u003cAdd\u003e\u003e)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":75,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the book will be removed i.e adding of tags is not cumulative."},{"lineNumber":76,"author":{"gitID":"-"},"content":"* You can remove all the book\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":77,"author":{"gitID":"-"},"content":"****"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"* `edit 1 i/9780736692426 av/Available` +"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Edits the isbn number and availability author of the 1st book to be `9780736692426` and `Available` respectively."},{"lineNumber":83,"author":{"gitID":"victortardieu"},"content":"* `edit 2 t/Breaking Dawn tag/` +"},{"lineNumber":84,"author":{"gitID":"-"},"content":"Edits the title of the 2nd book to be `Breaking Dawn` and clears all existing tags."},{"lineNumber":85,"author":{"gitID":"-"},"content":"// end::edit[]"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"//tag::help[]"},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"Format: `help` +"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Format: kbd:[F1] +"},{"lineNumber":93,"author":{"gitID":"-"},"content":"Privilege Level: 0(Guest)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"//end::help[]"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"// tag::select[]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a book : `select`"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Selects the book identified by the index number used in the last book listing. +"},{"lineNumber":100,"author":{"gitID":"-"},"content":"Format: `select INDEX` +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"Privilege Level: 0(Guest)"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"****"},{"lineNumber":104,"author":{"gitID":"-"},"content":"* Selects the book and loads the Goodreads webpage of the book at the specified `INDEX` with internet connection."},{"lineNumber":105,"author":{"gitID":"-"},"content":"* Selects the book and display error message specified `INDEX` without internet connection."},{"lineNumber":106,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":107,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":108,"author":{"gitID":"-"},"content":"****"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":114,"author":{"gitID":"-"},"content":"Selects the 2nd book in the catalogue."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `find Breaking` +"},{"lineNumber":116,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Selects the 1st book in the results of the `find` command."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":120,"author":{"gitID":"victortardieu"},"content":"Press TAB after writing `select` to use the auto-complete function."},{"lineNumber":121,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":122,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":123,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* `select` --\u003e (press TAB) --\u003e `select 1`"},{"lineNumber":125,"author":{"gitID":"-"},"content":"// end::select[]"},{"lineNumber":126,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"// tag::commandsummary[]"},{"lineNumber":128,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"30%, 20%,\u003c50%\",options\u003d\"header\",]"},{"lineNumber":131,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":132,"author":{"gitID":"-"},"content":"|Privileges |Command |Format"},{"lineNumber":133,"author":{"gitID":"-"},"content":"|All |*Help* |`help`"},{"lineNumber":134,"author":{"gitID":"-"},"content":"|All |*Find Book* |`find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":135,"author":{"gitID":"-"},"content":" e.g. `find Animal Dawn`"},{"lineNumber":136,"author":{"gitID":"-"},"content":"|All |*List Book* |`list`"},{"lineNumber":137,"author":{"gitID":"-"},"content":"|All |*Select Book* |`select INDEX` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":" e.g.`select 2`"},{"lineNumber":139,"author":{"gitID":"-"},"content":"|Librarian |*Add Book* |`add t/TITLE a/AUTHOR i/ISBN av/AVAIL [tag/TAG]...` +"},{"lineNumber":140,"author":{"gitID":"-"},"content":" e.g. `add n/Animal Farm a/George Orwell i/9780736692427 av/Borrowed t/political t/satire`"},{"lineNumber":141,"author":{"gitID":"-"},"content":"|Librarian |*Delete Book* |`delete INDEX` +"},{"lineNumber":142,"author":{"gitID":"-"},"content":" e.g. `delete 3`"},{"lineNumber":143,"author":{"gitID":"-"},"content":"|Librarian |*Edit Book* |`edit INDEX [n/TITLE] [a/AUTHOR] [i/ISBN] [av/AVAIL] [t/TAG]...` +"},{"lineNumber":144,"author":{"gitID":"-"},"content":" e.g. `edit 2 n/Animal Farm e/Available`"},{"lineNumber":145,"author":{"gitID":"-"},"content":"|Librarian |*Borrow Book* |`borrow INDEX` +"},{"lineNumber":146,"author":{"gitID":"-"},"content":"  e.g. `borrow 1`"},{"lineNumber":147,"author":{"gitID":"-"},"content":"|Librarian |*Return Book* |`return INDEX` +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"  e.g. `return 2`"},{"lineNumber":149,"author":{"gitID":"-"},"content":"|Librarian |*Reserve Book* |`reserve INDEX` +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"  e.g. `reserve 2`"},{"lineNumber":151,"author":{"gitID":"-"},"content":"|Librarian |*Clear Catalogue* |`clear`"},{"lineNumber":152,"author":{"gitID":"-"},"content":"|Librarian |*Add Account* |`addAccount n/NAME u/USERNAME p/PASSWORD m/MATRICNUMBER l/PRIVILEGE LEVEL` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":" e.g. `addAccount n/Jack Morgan u/jacky p/jack123 m/A0123456J l/1`"},{"lineNumber":154,"author":{"gitID":"-"},"content":"|Librarian |*Delete Account* |`deleteAccount USERNAME` +"},{"lineNumber":155,"author":{"gitID":"-"},"content":" e.g. `deleteAccount tiongley`"},{"lineNumber":156,"author":{"gitID":"-"},"content":"|Librarian |*Clear Account List* |`cleara`"},{"lineNumber":157,"author":{"gitID":"-"},"content":"|Librarian |*History* |`history`"},{"lineNumber":158,"author":{"gitID":"-"},"content":"|Librarian |*Undo* |`undo`"},{"lineNumber":159,"author":{"gitID":"-"},"content":"|Librarian |*Redo* |`redo`"},{"lineNumber":160,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":161,"author":{"gitID":"-"},"content":"// end::commandsummary[]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":166,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":167,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":168,"author":{"gitID":"-"},"content":"//tag::model"},{"lineNumber":169,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":179,"author":{"gitID":"-"},"content":"* stores the Catalogue data."},{"lineNumber":180,"author":{"gitID":"-"},"content":"* stores the AccountList data"},{"lineNumber":181,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* maintains the privilege level"},{"lineNumber":183,"author":{"gitID":"-"},"content":"* handles authentication"},{"lineNumber":184,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":185,"author":{"gitID":"-"},"content":"//end::model"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"// tag::usecaseAddEditHelpSelect[]"},{"lineNumber":188,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add book"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"1.  User requests to add book with TITLE, AUTHOR, ISBN, AVAIL, [TAGS]"},{"lineNumber":193,"author":{"gitID":"-"},"content":"2.  Catalogue adds book"},{"lineNumber":194,"author":{"gitID":"-"},"content":"3.  Catalogue list books"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":197,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"* 1a. The TITLE or AUTHOR or ISBN or AVAIL is not valid or ISBN is not unique."},{"lineNumber":200,"author":{"gitID":"-"},"content":"+"},{"lineNumber":201,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":202,"author":{"gitID":"-"},"content":"** 1a1. Catalogue shows an error message."},{"lineNumber":203,"author":{"gitID":"-"},"content":"+"},{"lineNumber":204,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit book"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"1.  User requests to list books"},{"lineNumber":212,"author":{"gitID":"-"},"content":"2.  Catalogue shows a list of books"},{"lineNumber":213,"author":{"gitID":"-"},"content":"3.  User requests to edit a specific book in the list with [TITLE], [AUTHOR], [ISBN], [AVAIL], [TAGS]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"4.  Catalogue edit book"},{"lineNumber":215,"author":{"gitID":"-"},"content":"5.  Catalogue list books"},{"lineNumber":216,"author":{"gitID":"-"},"content":"+"},{"lineNumber":217,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":220,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"* 2a. The list is empty"},{"lineNumber":223,"author":{"gitID":"-"},"content":"+"},{"lineNumber":224,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":225,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":226,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid or the [TITLE], [AUTHOR], [ISBN], [AVAIL], [TAGS] is invalid"},{"lineNumber":227,"author":{"gitID":"-"},"content":"+"},{"lineNumber":228,"author":{"gitID":"-"},"content":"** 3a1. Catalogue shows an error message."},{"lineNumber":229,"author":{"gitID":"-"},"content":"+"},{"lineNumber":230,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Help"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"1.  User requests to help"},{"lineNumber":238,"author":{"gitID":"-"},"content":"2.  Help window pops out"},{"lineNumber":239,"author":{"gitID":"-"},"content":"+"},{"lineNumber":240,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Select"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"1.  User requests to list books"},{"lineNumber":248,"author":{"gitID":"-"},"content":"2.  Catalogue shows a list of books"},{"lineNumber":249,"author":{"gitID":"-"},"content":"3.  User requests to select books with index"},{"lineNumber":250,"author":{"gitID":"-"},"content":"4.  Catalogue shows Goodreads search of the selected book."},{"lineNumber":251,"author":{"gitID":"-"},"content":"+"},{"lineNumber":252,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":255,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"* 2a. The list is empty"},{"lineNumber":258,"author":{"gitID":"-"},"content":"+"},{"lineNumber":259,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":260,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":261,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid"},{"lineNumber":262,"author":{"gitID":"-"},"content":"+"},{"lineNumber":263,"author":{"gitID":"-"},"content":"** 3a1. Catalogue shows an error message."},{"lineNumber":264,"author":{"gitID":"-"},"content":"+"},{"lineNumber":265,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":266,"author":{"gitID":"-"},"content":"* 4a. There is no internet access."},{"lineNumber":267,"author":{"gitID":"-"},"content":"+"},{"lineNumber":268,"author":{"gitID":"-"},"content":"** 4a1. Catalogue shows an error message."},{"lineNumber":269,"author":{"gitID":"-"},"content":"+"},{"lineNumber":270,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"// end::usecaseAddEditHelpSelect[]"},{"lineNumber":274,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"// tag::manualtestAddEditHelpSelect[]"},{"lineNumber":276,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a book"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":". Adding a book"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":".. Prerequisites: Log in using the `log in` command."},{"lineNumber":281,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepnes i/9781476785592 av/Borrowed` +"},{"lineNumber":282,"author":{"gitID":"-"},"content":"   Expected: Book is added to the list at last index. Details of the added book shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":283,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepnes i/9781476785592 av/Borrowed` again +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"   Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":285,"author":{"gitID":"-"},"content":".. Test case: `add t/Yo$ a/Caroline Kepnes i/0000000000001 av/Borrowed` again +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"   Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":287,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepne$ i/0000000000002 av/Borrowed` again +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"   Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":289,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepnes i/000000000000a av/Borrowed` again +"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":291,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepnes i/0000000000004 av/not sure` again +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"   Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":293,"author":{"gitID":"-"},"content":".. Other incorrect add commands to try: `add`, `add t/`"},{"lineNumber":294,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a book"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":". Editing a book while all books are listed"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":301,"author":{"gitID":"-"},"content":".. Test case: `edit 1 t/Animal` +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"   Expected: Title of first book is edit in the list. Details of the edited book shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":303,"author":{"gitID":"-"},"content":".. Test case: `delete 0 t/Animal` +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"   Expected: No book is edited. Error details shown in the status message. Status bar remains the same."},{"lineNumber":305,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `edit t/Animal`, `edit x t/Animal` (where x is larger than the list size) +"},{"lineNumber":306,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Help"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":". Display Help window"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":".. Test case: `help` +"},{"lineNumber":313,"author":{"gitID":"-"},"content":"   Expected: Help window pops out. Action shown in the status message. Status bar remains the same."},{"lineNumber":314,"author":{"gitID":"-"},"content":".. Test case: \u0027F1\u0027 +"},{"lineNumber":315,"author":{"gitID":"-"},"content":"   Expected: Help window pops out. Action shown in the status message. Status bar remains the same."},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a book"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":". Selecting a book while all books are listed"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":322,"author":{"gitID":"-"},"content":".. Test case: `select 1` (With internet) +"},{"lineNumber":323,"author":{"gitID":"-"},"content":"   Expected: First book is selected from the list. Action shown in the status message. Goodreads webpage of the book is loaded in the information section. Timestamp in the status bar is updated."},{"lineNumber":324,"author":{"gitID":"-"},"content":".. Test case: `select 1` (Without internet) +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"   Expected: First book is selected from the list. Action shown in the status message. Error message shown in information system. Timestamp in the status bar is updated."},{"lineNumber":326,"author":{"gitID":"-"},"content":".. Test case: `select 0` +"},{"lineNumber":327,"author":{"gitID":"-"},"content":"   Expected: No book is selected. Error details shown in the status message. Status bar remains the same."},{"lineNumber":328,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `select`, `select x` (where x is larger than the list size) +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":330,"author":{"gitID":"-"},"content":"// end::manualtestAddEditHelpSelect[]"}],"authorContributionMap":{"khiayi":1,"victortardieu":9,"-":320}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Catalogue - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T16-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team CS2103JAN2018-T16-B1`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"// tag::defaultaccount[]"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"\u003d\u003d Default Account"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"```"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"Username: admin"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"Password: admin"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"```"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"You can login the default account with this command: \u0027login admin admin\u0027"},{"lineNumber":25,"author":{"gitID":"-"},"content":"// end::defaultaccount[]"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"Catalogue is for *NUS students* who prefer to use a desktop app for finding, borrowing and returning english books at"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"the Central Library +"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":"Catalogue is for *NUS librarian* who prefer to use a desktop app for managing books, students accounts and loans at"},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"the Central Library. +"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"More importantly, Catalogue is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still"},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":" having the benefits of a Graphical User Interface (GUI). +"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"If you can type fast, Catalogue can get your contact management tasks done faster than traditional GUI apps. +"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"This guide will help you and give you an overview of the different features of Catalogue. +"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy! +"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":42,"author":{"gitID":"-"},"content":"+"},{"lineNumber":43,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Download the latest `catalogue.jar` link:{repoURL}/releases[here]."},{"lineNumber":48,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Catalogue."},{"lineNumber":49,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":50,"author":{"gitID":"-"},"content":"+"},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"image::UserInterfaceFinal.png[width\u003d\"790\"]"},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"1 - Command box: type the commands in this section +"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":"2 - Result Display: Show the result of what you typed above +"},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"3 - Book List: List of all the books in the Central Library +"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":"4 – Information Section: when you click on a book, the webpage on goodreads will open and display additional"},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"information +"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":60,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":61,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"* *`list`* : lists all books"},{"lineNumber":64,"author":{"gitID":"-"},"content":"* **`add`**`t/Animal Farm a/George Orwell i/9780736692427 av/Borrowed` : adds a book titled `Animal Farm` to the Catalogue."},{"lineNumber":65,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd book shown in the current list"},{"lineNumber":66,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":74,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"victortardieu"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add t/TITLE`, `TITLE` is a parameter which can be used as `add n/Animal Farm`."},{"lineNumber":77,"author":{"gitID":"victortardieu"},"content":"* Items in square brackets are optional e.g `t/TITLE [tag/TAG]` can be used as `t/Animal Farm tag/satire` or as `t/Animal Farm`."},{"lineNumber":78,"author":{"gitID":"victortardieu"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[tag/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `tag/satire`, `tag/satire tag/political` etc."},{"lineNumber":79,"author":{"gitID":"victortardieu"},"content":"* Parameters can be in any order e.g. if the command specifies `t/TITLE i/ISBN`, `i/ISBN t/TITLE` is also acceptable."},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitID":"-"},"content":"// tag::loginout[]"},{"lineNumber":82,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Login as Student/Librarian : `Login`"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Format: `login [username] [password]` +"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Privilege Level: 0(Guest) +"},{"lineNumber":86,"author":{"gitID":"-"},"content":"Privilege Level: 1 (Student) +"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Privilege Level: 2 (Librarian or Administrator)"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"Default administrator account: +"},{"lineNumber":90,"author":{"gitID":"victortardieu"},"content":"Username: admin +"},{"lineNumber":91,"author":{"gitID":"victortardieu"},"content":"Password: admin"},{"lineNumber":92,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"Login with different accounts: +"},{"lineNumber":94,"author":{"gitID":"-"},"content":"1. Add account using \"addAccount\" command +"},{"lineNumber":95,"author":{"gitID":"-"},"content":"2. Use the username and password that you entered for the above account +"},{"lineNumber":96,"author":{"gitID":"-"},"content":"e.g. addAccount n/Victor Tardieu m/ A1234567N u/e12345 p/secretpassword l/1"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"Access based on different privilege levels: +"},{"lineNumber":99,"author":{"gitID":"-"},"content":"1. At privilege level of \"guest\", you can only browse the catalogue of library books inside. +"},{"lineNumber":100,"author":{"gitID":"-"},"content":"2. At privilege level of \"student\", you can browse the catalogue, borrow a book, return a book and reserve a book that you want. +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"3. At privilege level of \"librarian\", you can browse, change the status of a borrower\u0027s borrowing status, add/delete/edit new books in the catalogue, and add/delete the accounts in the database."},{"lineNumber":102,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":103,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"Different accounts might have different privilege levels. A command can only be executed when the privilege level of the current user is greater or equal to the command\u0027s required level. The default admin account can be logged in with \u0027login admin admin\u0027."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d\u003d Logout from Student/Librarian : `Logout`"},{"lineNumber":108,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":109,"author":{"gitID":"victortardieu"},"content":"Format: `logout` +"},{"lineNumber":110,"author":{"gitID":"victortardieu"},"content":"Privilege Level: +"},{"lineNumber":111,"author":{"gitID":"victortardieu"},"content":"From 2(Librarian) you are going back to 0(Guest) +"},{"lineNumber":112,"author":{"gitID":"victortardieu"},"content":"From 1(Student) you are going back to 0(Guest) +"},{"lineNumber":113,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":114,"author":{"gitID":"victortardieu"},"content":"[NOTE]"},{"lineNumber":115,"author":{"gitID":"victortardieu"},"content":"Remember that when one logs out from your account, some commands (such as add a book for a librarian) won’t be available anymore. To be able to do them again, one will have to login again with his unique credentials."},{"lineNumber":116,"author":{"gitID":"-"},"content":"// end::loginout[]"},{"lineNumber":117,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"//tag::help[]"},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"Format: `help` +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"Format: kbd:[F1] +"},{"lineNumber":123,"author":{"gitID":"-"},"content":"Privilege Level: 0(Guest)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"//end::help[]"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"// tag::add[]"},{"lineNumber":127,"author":{"gitID":"-"},"content":"[[Add]]"},{"lineNumber":128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a book: `add`"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"Format: `add n/TITLE a/AUTHOR i/ISBN av/AVAIL  [t/TAG]...`"},{"lineNumber":132,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"A book can have any number of tags (including 0)"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"****"},{"lineNumber":138,"author":{"gitID":"-"},"content":"* All of the fields must be provided."},{"lineNumber":139,"author":{"gitID":"-"},"content":"* The provided field must be valid."},{"lineNumber":140,"author":{"gitID":"-"},"content":"** TITLE must be alphanumeric."},{"lineNumber":141,"author":{"gitID":"-"},"content":"** AUTHOR must be alphanumeric."},{"lineNumber":142,"author":{"gitID":"-"},"content":"** ISBN must contain 13 numbers and be unique."},{"lineNumber":143,"author":{"gitID":"-"},"content":"** AVAIL must be `Available`, `Borrowed` or `Reserved`."},{"lineNumber":144,"author":{"gitID":"-"},"content":"****"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":147,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `add t/Animal Farm a/George Orwell i/9780736692427 av/Borrowed`"},{"lineNumber":149,"author":{"gitID":"-"},"content":"* `add t/Breaking Dawn tag/fiction av/Borrowed a/Stephenie Meyer i/9780316067928 tag/young adults`"},{"lineNumber":150,"author":{"gitID":"-"},"content":"// end::add[]"},{"lineNumber":151,"author":{"gitID":"victortardieu"},"content":"[TIP]"},{"lineNumber":152,"author":{"gitID":"victortardieu"},"content":"Press TAB after writing `add` to use the auto-complete function."},{"lineNumber":153,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":154,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":155,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":156,"author":{"gitID":"victortardieu"},"content":"* `add` --\u003e (press TAB) --\u003e `add t/ a/ i/ av/ tag/ `"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all books : `list`"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"Shows a list of all books in the catalogue. +"},{"lineNumber":162,"author":{"gitID":"-"},"content":"Format: `list` +"},{"lineNumber":163,"author":{"gitID":"-"},"content":"Privilege Level: 0(Guest)"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"// tag::edit[]"},{"lineNumber":166,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a book : `edit`"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"Edits an existing book in the catalogue. +"},{"lineNumber":169,"author":{"gitID":"victortardieu"},"content":"Format: `edit INDEX t/TITLE a/AUTHOR i/ISBN av/AVAIL tag/TAG...` +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"****"},{"lineNumber":173,"author":{"gitID":"-"},"content":"* Edits the book at the specified `INDEX`. The index refers to the index number shown in the last book listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":174,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":175,"author":{"gitID":"-"},"content":"* The provided field must be valid. (Refer to \u003c\u003cAdd\u003e\u003e)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":177,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the book will be removed i.e adding of tags is not cumulative."},{"lineNumber":178,"author":{"gitID":"-"},"content":"* You can remove all the book\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":179,"author":{"gitID":"-"},"content":"****"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"* `edit 1 i/9780736692426 av/Available` +"},{"lineNumber":184,"author":{"gitID":"-"},"content":"Edits the isbn number and availability author of the 1st book to be `9780736692426` and `Available` respectively."},{"lineNumber":185,"author":{"gitID":"victortardieu"},"content":"* `edit 2 t/Breaking Dawn tag/` +"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Edits the title of the 2nd book to be `Breaking Dawn` and clears all existing tags."},{"lineNumber":187,"author":{"gitID":"-"},"content":"// end::edit[]"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":190,"author":{"gitID":"victortardieu"},"content":"Press TAB after writing `edit` to use the auto-complete function."},{"lineNumber":191,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":192,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":193,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":194,"author":{"gitID":"victortardieu"},"content":"* `edit` --\u003e (press TAB) --\u003e `edit 1 t/ a/ i/ av/ tag/ `"},{"lineNumber":195,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating books by title: `find`"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"Finds books whose titles contain any of the given keywords. +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":" Privilege Level: 0(Guest)"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"****"},{"lineNumber":205,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `girl` will match `Girl`"},{"lineNumber":206,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Dawn Girl` will match `Girl Dawn`"},{"lineNumber":207,"author":{"gitID":"-"},"content":"* Only the title is searched."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `gir` will not match `Girl`"},{"lineNumber":209,"author":{"gitID":"-"},"content":"* Books matching at least one keyword will be returned (i.e. `OR` search). e.g. `Farm Dawn` will return `Animal Farm`, `Breaking Dawn`"},{"lineNumber":210,"author":{"gitID":"-"},"content":"****"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"* `find Animal` +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"Returns `Animal Farm`"},{"lineNumber":216,"author":{"gitID":"victortardieu"},"content":"* `find Animal Breaking California` +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"Returns any book having titles `Animal`, `Breaking`, or `California`"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"// tag::delete[]"},{"lineNumber":220,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a book : `delete`"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"Deletes the specified book from the catalogue. +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"Format: `delete INDEX` +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"****"},{"lineNumber":228,"author":{"gitID":"-"},"content":"* Deletes the book at the specified `INDEX`."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":231,"author":{"gitID":"-"},"content":"****"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"Deletes the 2nd book in the catalogue."},{"lineNumber":238,"author":{"gitID":"-"},"content":"* `find Breaking` +"},{"lineNumber":239,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"Deletes the 1st book in the results of the `find` command."},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":243,"author":{"gitID":"victortardieu"},"content":"Press TAB after writing `delete` to use the auto-complete function."},{"lineNumber":244,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":245,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":246,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":247,"author":{"gitID":"victortardieu"},"content":"* `delete` --\u003e (press TAB) --\u003e `delete 1`"},{"lineNumber":248,"author":{"gitID":"-"},"content":"// end::delete[]"},{"lineNumber":249,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"// tag::select[]"},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a book : `select`"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"Selects the book identified by the index number used in the last book listing. +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"Format: `select INDEX` +"},{"lineNumber":255,"author":{"gitID":"-"},"content":"Privilege Level: 0(Guest)"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"****"},{"lineNumber":258,"author":{"gitID":"-"},"content":"* Selects the book and loads the Goodreads webpage of the book at the specified `INDEX` with internet connection."},{"lineNumber":259,"author":{"gitID":"-"},"content":"* Selects the book and display error message specified `INDEX` without internet connection."},{"lineNumber":260,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":261,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":262,"author":{"gitID":"-"},"content":"****"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":268,"author":{"gitID":"-"},"content":"Selects the 2nd book in the catalogue."},{"lineNumber":269,"author":{"gitID":"-"},"content":"* `find Breaking` +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"Selects the 1st book in the results of the `find` command."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"Format: `history` +"},{"lineNumber":277,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":280,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":281,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":282,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":285,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"Restores the catalogue to the state before the previous _undoable_ command was executed. +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"Format: `undo` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":292,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":293,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the catalogue\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":294,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":299,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":300,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":303,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":305,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":308,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":310,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":315,"author":{"gitID":"-"},"content":"Format: `redo` +"},{"lineNumber":316,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":322,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":330,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":331,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":333,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":334,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d\u003d Clearing all books : `clear`"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"victortardieu"},"content":"Clears all books from the catalogue. +"},{"lineNumber":340,"author":{"gitID":"-"},"content":"Format: `clear` +"},{"lineNumber":341,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"// tag::Borrow[]"},{"lineNumber":344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Borrow a book: `borrow`"},{"lineNumber":345,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":346,"author":{"gitID":"victortardieu"},"content":"Borrow the specified book from the catalogue. +"},{"lineNumber":347,"author":{"gitID":"victortardieu"},"content":"Format: `borrow INDEX` +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":349,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":350,"author":{"gitID":"victortardieu"},"content":"****"},{"lineNumber":351,"author":{"gitID":"victortardieu"},"content":"* Borrow the book at the specified `INDEX`."},{"lineNumber":352,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":353,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":354,"author":{"gitID":"-"},"content":"****"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":359,"author":{"gitID":"victortardieu"},"content":"`borrow 2` +"},{"lineNumber":360,"author":{"gitID":"victortardieu"},"content":"Borrow the 2nd book in the catalogue."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"victortardieu"},"content":"[TIP]"},{"lineNumber":363,"author":{"gitID":"victortardieu"},"content":"Press TAB after writing `borrow` to use the auto-complete function."},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":366,"author":{"gitID":"-"},"content":"* `borrow` -\u003e (press TAB) -\u003e `borrow 1`"},{"lineNumber":367,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Return a book : `return`"},{"lineNumber":369,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":370,"author":{"gitID":"victortardieu"},"content":"Return a specified book to the catalogue +"},{"lineNumber":371,"author":{"gitID":"victortardieu"},"content":"Format: `return INDEX` +"},{"lineNumber":372,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":373,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":374,"author":{"gitID":"victortardieu"},"content":"[NOTE]"},{"lineNumber":375,"author":{"gitID":"victortardieu"},"content":"Can only return book that has been borrowed"},{"lineNumber":376,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":377,"author":{"gitID":"victortardieu"},"content":"****"},{"lineNumber":378,"author":{"gitID":"victortardieu"},"content":"* Return the book at the specified `INDEX`."},{"lineNumber":379,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":380,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":381,"author":{"gitID":"-"},"content":"****"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"victortardieu"},"content":"[TIP]"},{"lineNumber":384,"author":{"gitID":"victortardieu"},"content":"Press TAB after writing `return` to use the auto-complete function."},{"lineNumber":385,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":386,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":387,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"* `return` -\u003e (press TAB) -\u003e `return 1`"},{"lineNumber":389,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Reserve a book : `reserve`"},{"lineNumber":391,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":392,"author":{"gitID":"victortardieu"},"content":"Renew a specific book from the Catalogue +"},{"lineNumber":393,"author":{"gitID":"-"},"content":"Format: `list` +"},{"lineNumber":394,"author":{"gitID":"-"},"content":"`reserve INDEX` +"},{"lineNumber":395,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":396,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":397,"author":{"gitID":"victortardieu"},"content":"[NOTE]"},{"lineNumber":398,"author":{"gitID":"-"},"content":"Can only reserve book that has been borrowed"},{"lineNumber":399,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":400,"author":{"gitID":"victortardieu"},"content":"****"},{"lineNumber":401,"author":{"gitID":"-"},"content":"* Reserve the book at the specified `INDEX`."},{"lineNumber":402,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":403,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":404,"author":{"gitID":"-"},"content":"****"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"victortardieu"},"content":"[TIP]"},{"lineNumber":407,"author":{"gitID":"victortardieu"},"content":"Press TAB after writing `reserve` to use the auto-complete function."},{"lineNumber":408,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":409,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":410,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":412,"author":{"gitID":"-"},"content":"`reserve` -\u003e (press TAB) -\u003e `reserve 1`"},{"lineNumber":413,"author":{"gitID":"-"},"content":"// end::Borrow[]"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"victortardieu"},"content":"// tag::cleara[]"},{"lineNumber":416,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d\u003d Clearing all accounts : `cleara`"},{"lineNumber":417,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":418,"author":{"gitID":"victortardieu"},"content":"Clears all accounts from AccountList. +"},{"lineNumber":419,"author":{"gitID":"-"},"content":"Format: `clear` +"},{"lineNumber":420,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"victortardieu"},"content":"****"},{"lineNumber":423,"author":{"gitID":"victortardieu"},"content":"* Removes all the accounts from the list of accounts"},{"lineNumber":424,"author":{"gitID":"victortardieu"},"content":"* Adds the default administrator account: admin admin"},{"lineNumber":425,"author":{"gitID":"victortardieu"},"content":"****"},{"lineNumber":426,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":427,"author":{"gitID":"victortardieu"},"content":"[NOTE]"},{"lineNumber":428,"author":{"gitID":"victortardieu"},"content":"When an librarian clears the list of accounts, it is automatically logged out."},{"lineNumber":429,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":430,"author":{"gitID":"victortardieu"},"content":"Example:"},{"lineNumber":431,"author":{"gitID":"victortardieu"},"content":"* `list` +"},{"lineNumber":432,"author":{"gitID":"victortardieu"},"content":"`cleara` +"},{"lineNumber":433,"author":{"gitID":"victortardieu"},"content":"All accounts removed from the list of accounts"},{"lineNumber":434,"author":{"gitID":"victortardieu"},"content":"// end::cleara[]"},{"lineNumber":435,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"// tag::addaccount[]"},{"lineNumber":437,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add an account : `addAccount`"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"victortardieu"},"content":"Add a given account to the list of accounts +"},{"lineNumber":440,"author":{"gitID":"-"},"content":"Format: `addAccount n/NAME u/USERNAME p/PASSWORD m/MATRICNUMBER l/PRIVILEGE LEVEL` +"},{"lineNumber":441,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":444,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":445,"author":{"gitID":"victortardieu"},"content":"* `addAccount n/Jack Morgan u/jacky p/jack123 m/A0123456J l/1`"},{"lineNumber":446,"author":{"gitID":"victortardieu"},"content":"* `addAccount n/Tom Madison u/tommy p/tom123 m/A1234567T  l/2`"},{"lineNumber":447,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":448,"author":{"gitID":"victortardieu"},"content":"[TIP]"},{"lineNumber":449,"author":{"gitID":"-"},"content":"Press TAB after writing `addAccount` to use the auto-complete function."},{"lineNumber":450,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":451,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":452,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"* `addAccount` --\u003e (press TAB) --\u003e `addAccount n/ m/ u/ p/ l/ `"},{"lineNumber":454,"author":{"gitID":"-"},"content":"// end::addaccount[]"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"// tag::deleteaccount[]"},{"lineNumber":457,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an account : `deleteAccount`"},{"lineNumber":458,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":459,"author":{"gitID":"victortardieu"},"content":"Deletes the specified account from the list of accounts. +"},{"lineNumber":460,"author":{"gitID":"victortardieu"},"content":"Format: `delete USERNAME` +"},{"lineNumber":461,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"****"},{"lineNumber":464,"author":{"gitID":"victortardieu"},"content":"* Deletes the account with the specified `USERNAME`."},{"lineNumber":465,"author":{"gitID":"-"},"content":"* The USERNAME must be a from a created account in the list of accounts"},{"lineNumber":466,"author":{"gitID":"-"},"content":"****"},{"lineNumber":467,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":468,"author":{"gitID":"victortardieu"},"content":"Examples:"},{"lineNumber":469,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"* `delete jackmorgan` +"},{"lineNumber":471,"author":{"gitID":"-"},"content":"Deletes account linked to Jack Morgan."},{"lineNumber":472,"author":{"gitID":"-"},"content":"* `delete tommy` +"},{"lineNumber":473,"author":{"gitID":"-"},"content":"Deletes the account linked to Tommy."},{"lineNumber":474,"author":{"gitID":"-"},"content":"// end::deleteaccount[]"},{"lineNumber":475,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":479,"author":{"gitID":"-"},"content":"Format: `exit` +"},{"lineNumber":480,"author":{"gitID":"-"},"content":"Privilege Level: 2(Librarian)"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"Catalogue data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":485,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":488,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":491,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":496,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Catalogue folder."},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"// tag::commandsummary[]"},{"lineNumber":499,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"30%, 20%,\u003c50%\",options\u003d\"header\",]"},{"lineNumber":502,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":503,"author":{"gitID":"-"},"content":"|Privileges |Command |Format"},{"lineNumber":504,"author":{"gitID":"-"},"content":"|All |*Help* |`help`"},{"lineNumber":505,"author":{"gitID":"-"},"content":"|All |*Find Book* |`find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":506,"author":{"gitID":"-"},"content":" e.g. `find Animal Dawn`"},{"lineNumber":507,"author":{"gitID":"-"},"content":"|All |*List Book* |`list`"},{"lineNumber":508,"author":{"gitID":"-"},"content":"|All |*Select Book* |`select INDEX` +"},{"lineNumber":509,"author":{"gitID":"-"},"content":" e.g.`select 2`"},{"lineNumber":510,"author":{"gitID":"-"},"content":"|Librarian |*Add Book* |`add t/TITLE a/AUTHOR i/ISBN av/AVAIL [tag/TAG]...` +"},{"lineNumber":511,"author":{"gitID":"-"},"content":" e.g. `add n/Animal Farm a/George Orwell i/9780736692427 av/Borrowed t/political t/satire`"},{"lineNumber":512,"author":{"gitID":"-"},"content":"|Librarian |*Delete Book* |`delete INDEX` +"},{"lineNumber":513,"author":{"gitID":"-"},"content":" e.g. `delete 3`"},{"lineNumber":514,"author":{"gitID":"-"},"content":"|Librarian |*Edit Book* |`edit INDEX [n/TITLE] [a/AUTHOR] [i/ISBN] [av/AVAIL] [t/TAG]...` +"},{"lineNumber":515,"author":{"gitID":"-"},"content":" e.g. `edit 2 n/Animal Farm e/Available`"},{"lineNumber":516,"author":{"gitID":"-"},"content":"|Librarian |*Borrow Book* |`borrow INDEX` +"},{"lineNumber":517,"author":{"gitID":"-"},"content":"  e.g. `borrow 1`"},{"lineNumber":518,"author":{"gitID":"-"},"content":"|Librarian |*Return Book* |`return INDEX` +"},{"lineNumber":519,"author":{"gitID":"-"},"content":"  e.g. `return 2`"},{"lineNumber":520,"author":{"gitID":"-"},"content":"|Librarian |*Reserve Book* |`reserve INDEX` +"},{"lineNumber":521,"author":{"gitID":"-"},"content":"  e.g. `reserve 2`"},{"lineNumber":522,"author":{"gitID":"-"},"content":"|Librarian |*Clear Catalogue* |`clear`"},{"lineNumber":523,"author":{"gitID":"-"},"content":"|Librarian |*Add Account* |`addAccount n/NAME u/USERNAME p/PASSWORD m/MATRICNUMBER l/PRIVILEGE LEVEL` +"},{"lineNumber":524,"author":{"gitID":"-"},"content":" e.g. `addAccount n/Jack Morgan u/jacky p/jack123 m/A0123456J l/1`"},{"lineNumber":525,"author":{"gitID":"-"},"content":"|Librarian |*Delete Account* |`deleteAccount USERNAME` +"},{"lineNumber":526,"author":{"gitID":"-"},"content":" e.g. `deleteAccount tiongley`"},{"lineNumber":527,"author":{"gitID":"-"},"content":"|Librarian |*Clear Account List* |`cleara`"},{"lineNumber":528,"author":{"gitID":"-"},"content":"|Librarian |*History* |`history`"},{"lineNumber":529,"author":{"gitID":"-"},"content":"|Librarian |*Undo* |`undo`"},{"lineNumber":530,"author":{"gitID":"-"},"content":"|Librarian |*Redo* |`redo`"},{"lineNumber":531,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":532,"author":{"gitID":"-"},"content":"// end::commandsummary[]"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"victortardieu"},"content":""}],"authorContributionMap":{"QiuHaohao":6,"victortardieu":135,"-":393}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_XVI;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_YOU;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVAIL_DESC_XVI;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVAIL_DESC_YOU;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AVAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_XVI;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_YOU;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DYSTOPIA;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FICTION;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_XVI;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_YOU;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_XVI;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_YOU;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVAIL_XVI;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVAIL_YOU;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_XVI;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_YOU;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DYSTOPIA;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_XVI;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_YOU;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.ANIMAL;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.CALIFORNIA;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.HOLES;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.INVISIBLE;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_GIRL;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.XVI;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.YOU;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.BookUtil;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"//import seedu.address.logic.commands.Command;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends CatalogueSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        //Log in first"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        executeCommand(\"login admin admin\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"        //@@author khiayi"},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book without tags to a non-empty catalogue, command with leading spaces and trailing spaces"},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":"         * -\u003e added"},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":"        Book toAdd \u003d XVI;"},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + TITLE_DESC_XVI + \"  \" + \"   \" + AUTHOR_DESC_XVI"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":"            + \" \" + ISBN_DESC_XVI + \" \""},{"lineNumber":76,"author":{"gitID":"khiayi"},"content":"            + AVAIL_DESC_XVI + \"   \" + TAG_DESC_DYSTOPIA + \" \";"},{"lineNumber":77,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":78,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":79,"author":{"gitID":"khiayi"},"content":"        /* Case: undo adding XVI to the list -\u003e XVI deleted */"},{"lineNumber":80,"author":{"gitID":"khiayi"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"khiayi"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":84,"author":{"gitID":"khiayi"},"content":"        /* Case: redo adding XVI to the list -\u003e XVI added again */"},{"lineNumber":85,"author":{"gitID":"khiayi"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"khiayi"},"content":"        model.addBook(toAdd);"},{"lineNumber":87,"author":{"gitID":"khiayi"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":90,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book with all fields same as another book in the catalogue except name -\u003e not added */"},{"lineNumber":91,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d new BookBuilder().withTitle(VALID_TITLE_YOU).withAuthor(VALID_AUTHOR_XVI)"},{"lineNumber":92,"author":{"gitID":"khiayi"},"content":"            .withIsbn(VALID_ISBN_XVI).withAvail(VALID_AVAIL_XVI)"},{"lineNumber":93,"author":{"gitID":"khiayi"},"content":"            .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":94,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_YOU + AUTHOR_DESC_XVI + ISBN_DESC_XVI + AVAIL_DESC_XVI"},{"lineNumber":95,"author":{"gitID":"khiayi"},"content":"            + TAG_DESC_DYSTOPIA;"},{"lineNumber":96,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":98,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book with all fields same as another book in the catalogue except isbn -\u003e added */"},{"lineNumber":99,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d new BookBuilder().withTitle(VALID_TITLE_XVI).withAuthor(VALID_AUTHOR_XVI)"},{"lineNumber":100,"author":{"gitID":"khiayi"},"content":"            .withIsbn(VALID_ISBN_YOU).withAvail(VALID_AVAIL_XVI)"},{"lineNumber":101,"author":{"gitID":"khiayi"},"content":"            .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":102,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_XVI + ISBN_DESC_YOU + AVAIL_DESC_XVI"},{"lineNumber":103,"author":{"gitID":"khiayi"},"content":"            + TAG_DESC_DYSTOPIA;"},{"lineNumber":104,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":106,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book with all fields same as another book in the catalogue except name and ISBN -\u003e added */"},{"lineNumber":107,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d new BookBuilder().withTitle(VALID_TITLE_YOU).withAuthor(VALID_AUTHOR_XVI)"},{"lineNumber":108,"author":{"gitID":"khiayi"},"content":"            .withIsbn(\"1111111111111\").withAvail(VALID_AVAIL_XVI)"},{"lineNumber":109,"author":{"gitID":"khiayi"},"content":"            .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":110,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_YOU + AUTHOR_DESC_XVI + \" \" + PREFIX_ISBN + \"1111111111111\""},{"lineNumber":111,"author":{"gitID":"khiayi"},"content":"            + AVAIL_DESC_XVI + TAG_DESC_DYSTOPIA;"},{"lineNumber":112,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":113,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":114,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book with all fields same as another book in the catalogue except avail -\u003e not added */"},{"lineNumber":115,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d new BookBuilder().withTitle(VALID_TITLE_XVI).withAuthor(VALID_AUTHOR_XVI)"},{"lineNumber":116,"author":{"gitID":"khiayi"},"content":"            .withIsbn(VALID_ISBN_XVI).withAvail(VALID_AVAIL_YOU)"},{"lineNumber":117,"author":{"gitID":"khiayi"},"content":"            .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":118,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_XVI + ISBN_DESC_XVI + AVAIL_DESC_YOU"},{"lineNumber":119,"author":{"gitID":"khiayi"},"content":"            + TAG_DESC_DYSTOPIA;"},{"lineNumber":120,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, toAdd);"},{"lineNumber":121,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":122,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book with all fields same as another book in the catalogue except avail and ISBN -\u003e added */"},{"lineNumber":123,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d new BookBuilder().withTitle(VALID_TITLE_XVI).withAuthor(VALID_AUTHOR_XVI)"},{"lineNumber":124,"author":{"gitID":"khiayi"},"content":"            .withIsbn(\"2222222222222\").withAvail(VALID_AVAIL_YOU)"},{"lineNumber":125,"author":{"gitID":"khiayi"},"content":"            .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":126,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_XVI + \" \" + PREFIX_ISBN + \"2222222222222\""},{"lineNumber":127,"author":{"gitID":"khiayi"},"content":"            + AVAIL_DESC_YOU + TAG_DESC_DYSTOPIA;"},{"lineNumber":128,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":129,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":130,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book with all fields same as another book in the catalogue except author -\u003e added */"},{"lineNumber":131,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d new BookBuilder().withTitle(VALID_TITLE_XVI).withAuthor(VALID_AUTHOR_YOU)"},{"lineNumber":132,"author":{"gitID":"khiayi"},"content":"            .withIsbn(VALID_ISBN_XVI).withAvail(VALID_AVAIL_XVI)"},{"lineNumber":133,"author":{"gitID":"khiayi"},"content":"            .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":134,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_YOU + ISBN_DESC_XVI + AVAIL_DESC_XVI"},{"lineNumber":135,"author":{"gitID":"khiayi"},"content":"            + TAG_DESC_DYSTOPIA;"},{"lineNumber":136,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, toAdd);"},{"lineNumber":137,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":138,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book with all fields same as another book in the catalogue except author and ISBN -\u003e added */"},{"lineNumber":139,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d new BookBuilder().withTitle(VALID_TITLE_XVI).withAuthor(VALID_AUTHOR_YOU)"},{"lineNumber":140,"author":{"gitID":"khiayi"},"content":"            .withIsbn(\"3333333333333\").withAvail(VALID_AVAIL_XVI)"},{"lineNumber":141,"author":{"gitID":"khiayi"},"content":"            .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":142,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_YOU + \" \" + PREFIX_ISBN + \"3333333333333\""},{"lineNumber":143,"author":{"gitID":"khiayi"},"content":"            + AVAIL_DESC_XVI + TAG_DESC_DYSTOPIA;"},{"lineNumber":144,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":145,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":146,"author":{"gitID":"khiayi"},"content":"        /* Case: add to empty catalogue -\u003e added */"},{"lineNumber":147,"author":{"gitID":"khiayi"},"content":"        deleteAllBooks();"},{"lineNumber":148,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(ANIMAL);"},{"lineNumber":149,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":150,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book with tags, command with parameters in random order -\u003e added */"},{"lineNumber":151,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d YOU;"},{"lineNumber":152,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + AUTHOR_DESC_YOU + ISBN_DESC_YOU + TITLE_DESC_YOU"},{"lineNumber":153,"author":{"gitID":"khiayi"},"content":"            + TAG_DESC_FICTION + AVAIL_DESC_YOU;"},{"lineNumber":154,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":155,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":156,"author":{"gitID":"khiayi"},"content":"        /* Case: add a book, missing tags -\u003e added */"},{"lineNumber":157,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(HOLES);"},{"lineNumber":158,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":159,"author":{"gitID":"khiayi"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":160,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":161,"author":{"gitID":"khiayi"},"content":"        /* Case: filters the book list before adding -\u003e added */"},{"lineNumber":162,"author":{"gitID":"khiayi"},"content":"        showBooksWithTitle(KEYWORD_MATCHING_GIRL);"},{"lineNumber":163,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(INVISIBLE);"},{"lineNumber":164,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":165,"author":{"gitID":"khiayi"},"content":"        /* ------------------------ Perform add operation while a book card is selected --------------------------- */"},{"lineNumber":166,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":167,"author":{"gitID":"khiayi"},"content":"        /* Case: selects first card in the book list, add a book -\u003e added, card selection remains unchanged */"},{"lineNumber":168,"author":{"gitID":"khiayi"},"content":"        selectBook(Index.fromOneBased(1));"},{"lineNumber":169,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(CALIFORNIA);"},{"lineNumber":170,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":171,"author":{"gitID":"khiayi"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":172,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":173,"author":{"gitID":"khiayi"},"content":"        /* Case: add a duplicate book -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"khiayi"},"content":"        command \u003d BookUtil.getAddCommand(HOLES);"},{"lineNumber":175,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":176,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":177,"author":{"gitID":"khiayi"},"content":"        /* Case: add a duplicate book except with different tags -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"khiayi"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalBooks#ANIMAL"},{"lineNumber":179,"author":{"gitID":"khiayi"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":180,"author":{"gitID":"khiayi"},"content":"        // Catalogue#addBook(Book)"},{"lineNumber":181,"author":{"gitID":"khiayi"},"content":"        command \u003d BookUtil.getAddCommand(HOLES) + \" \" + PREFIX_TAG.getPrefix() + \"unlabelled\";"},{"lineNumber":182,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":183,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":184,"author":{"gitID":"khiayi"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + AUTHOR_DESC_XVI + ISBN_DESC_XVI + AVAIL_DESC_XVI;"},{"lineNumber":186,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":187,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":188,"author":{"gitID":"khiayi"},"content":"        /* Case: missing isbn -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_XVI + AVAIL_DESC_XVI;"},{"lineNumber":190,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":191,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":192,"author":{"gitID":"khiayi"},"content":"        /* Case: missing avail -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_XVI + ISBN_DESC_XVI;"},{"lineNumber":194,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":195,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":196,"author":{"gitID":"khiayi"},"content":"        /* Case: missing author -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + ISBN_DESC_XVI + AVAIL_DESC_XVI;"},{"lineNumber":198,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":199,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":200,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"khiayi"},"content":"        command \u003d \"adds \" + BookUtil.getBookDetails(toAdd);"},{"lineNumber":202,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":203,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":204,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_TITLE_DESC + AUTHOR_DESC_XVI + ISBN_DESC_XVI + AVAIL_DESC_XVI;"},{"lineNumber":206,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":208,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid isbn -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_XVI + INVALID_ISBN_DESC + AVAIL_DESC_XVI;"},{"lineNumber":210,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, Isbn.MESSAGE_ISBN_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":212,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid avail -\u003e rejected */"},{"lineNumber":213,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_XVI + ISBN_DESC_XVI + INVALID_AVAIL_DESC;"},{"lineNumber":214,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, Avail.MESSAGE_AVAIL_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":216,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid author -\u003e rejected */"},{"lineNumber":217,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + INVALID_AUTHOR_DESC + ISBN_DESC_XVI + AVAIL_DESC_XVI;"},{"lineNumber":218,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, Author.MESSAGE_AUTHOR_CONSTRAINTS);"},{"lineNumber":219,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":220,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":221,"author":{"gitID":"khiayi"},"content":"        command \u003d AddCommand.COMMAND_WORD + TITLE_DESC_XVI + AUTHOR_DESC_XVI + ISBN_DESC_XVI + AVAIL_DESC_XVI"},{"lineNumber":222,"author":{"gitID":"khiayi"},"content":"            + INVALID_TAG_DESC;"},{"lineNumber":223,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":225,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":226,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"khiayi"},"content":"    //@@author"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code BookListPanel} equal to the corresponding components in"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Book toAdd) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertCommandSuccess(BookUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Book)}. Executes {@code command}"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Book)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Book toAdd) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            expectedModel.addBook(toAdd);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } catch (DuplicateBookException dpe) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Book)} except asserts that"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code BookListPanel} equal to the corresponding components in"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Book)"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code BookListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * {@code CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, Book toAdd) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_DUPLICATE_BOOK, toAdd);"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"khiayi":161,"-":149}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_BREAKING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends CatalogueSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //Log in first"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        executeCommand(\"login admin admin\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: delete the first book in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_BOOK.getOneBased() + \"       \";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Book deletedBook \u003d removeBook(expectedModel, INDEX_FIRST_BOOK);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /* Case: delete the last book in the list -\u003e deleted */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index lastBookIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastBookIndex);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last book in the list -\u003e last book restored */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last book in the list -\u003e last book deleted again */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        removeBook(modelBeforeDeletingLast, lastBookIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: delete the middle book in the list -\u003e deleted */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Index middleBookIndex \u003d getMidIndex(getModel());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middleBookIndex);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":64,"author":{"gitID":"khiayi"},"content":"        //@@author khiayi"},{"lineNumber":65,"author":{"gitID":"khiayi"},"content":"        /* Case: filtered book list, delete index within bounds of catalogue and book list -\u003e deleted */"},{"lineNumber":66,"author":{"gitID":"khiayi"},"content":"        showBooksWithTitle(KEYWORD_MATCHING_BREAKING);"},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"        Index index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredBookList().size());"},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(index);"},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":"        /* Case: filtered book list, delete index within bounds of catalogue but out of bounds of book list"},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":"         * -\u003e rejected"},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":"         */"},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"        showBooksWithTitle(KEYWORD_MATCHING_BREAKING);"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":"        int invalidIndex \u003d getModel().getCatalogue().getBookList().size();"},{"lineNumber":76,"author":{"gitID":"khiayi"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":77,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitID":"khiayi"},"content":"        //@@author"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a book card is selected ------------------------ */"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: delete the selected book -\u003e book list panel selects the book before the deleted book */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAllBooks();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        selectBook(selectedIndex);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        deletedBook \u003d removeBook(expectedModel, selectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":104,"author":{"gitID":"-"},"content":"            getModel().getCatalogue().getBookList().size() + 1);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Removes the {@code Book} at the specified {@code index} in {@code model}\u0027s catalogue."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @return the removed book"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private Book removeBook(Model model, Index index) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Book targetBook \u003d getBook(model, index);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            model.deleteBook(targetBook);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetBook is retrieved from model.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return targetBook;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Deletes the book at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Book deletedBook \u003d removeBook(expectedModel, toDelete);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":145,"author":{"gitID":"-"},"content":"            DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * {@code CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * {@code CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"khiayi":15,"-":193}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.CALIFORNIA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.DELIRIUM;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.GONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_GIRL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends CatalogueSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        //@@author QiuHaohao"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        executeCommand(\"login admin admin\");"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        //@@author khiayi"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        /* Case: find multiple books in catalogue, command with leading spaces and trailing spaces"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"         * -\u003e 2 books found"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"         */"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_GIRL + \"   \";"},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel, CALIFORNIA, GONE); // Two titles contains \"Girl\""},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":"        /* Case: repeat previous find command where book list is displaying the books we are finding"},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":"         * -\u003e 2 books found"},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":"         */"},{"lineNumber":43,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_GIRL;"},{"lineNumber":44,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":47,"author":{"gitID":"khiayi"},"content":"        /* Case: find book where book list is not displaying the book we are finding -\u003e 1 book found */"},{"lineNumber":48,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" California\";"},{"lineNumber":49,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel, CALIFORNIA);"},{"lineNumber":50,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":53,"author":{"gitID":"khiayi"},"content":"        /* Case: find multiple books in catalogue, 2 keywords -\u003e 2 books found */"},{"lineNumber":54,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" California Gone\";"},{"lineNumber":55,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel, CALIFORNIA, GONE);"},{"lineNumber":56,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":59,"author":{"gitID":"khiayi"},"content":"        /* Case: find multiple books in catalogue, 2 keywords in reversed order -\u003e 2 books found */"},{"lineNumber":60,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Gone California\";"},{"lineNumber":61,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":62,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":63,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":64,"author":{"gitID":"khiayi"},"content":"        /* Case: find multiple books in catalogue, 2 keywords with 1 repeat -\u003e 2 books found */"},{"lineNumber":65,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Gone California Gone\";"},{"lineNumber":66,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":"        /* Case: find multiple books in catalogue, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":"         * -\u003e 2 books found"},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Gone California NonMatchingKeyWord\";"},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":"        //@@author"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"khiayi"},"content":"        //@@author khiayi"},{"lineNumber":86,"author":{"gitID":"khiayi"},"content":"        /* Case: find same books in catalogue after deleting 1 of them -\u003e 1 book found */"},{"lineNumber":87,"author":{"gitID":"khiayi"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":88,"author":{"gitID":"khiayi"},"content":"        assertFalse(getModel().getCatalogue().getBookList().contains(CALIFORNIA));"},{"lineNumber":89,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_GIRL;"},{"lineNumber":90,"author":{"gitID":"khiayi"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":91,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel, GONE);"},{"lineNumber":92,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":93,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":94,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":95,"author":{"gitID":"khiayi"},"content":"        /* Case: find book in catalogue, keyword is same as name but of different case -\u003e 1 book found */"},{"lineNumber":96,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" GoNe GiRl\";"},{"lineNumber":97,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":98,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":99,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":100,"author":{"gitID":"khiayi"},"content":"        /* Case: find book in catalogue, keyword is substring of name -\u003e 0 books found */"},{"lineNumber":101,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Gon\";"},{"lineNumber":102,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":103,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":106,"author":{"gitID":"khiayi"},"content":"        /* Case: find book in catalogue, name is substring of keyword -\u003e 0 books found */"},{"lineNumber":107,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Oliver\";"},{"lineNumber":108,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":109,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":110,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":111,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":112,"author":{"gitID":"khiayi"},"content":"        /* Case: find book not in catalogue -\u003e 0 books found */"},{"lineNumber":113,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":114,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":117,"author":{"gitID":"khiayi"},"content":"        /* Case: find book in catalogue, keyword is substring of author -\u003e 0 books found */"},{"lineNumber":118,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Lau\";"},{"lineNumber":119,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":120,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":123,"author":{"gitID":"khiayi"},"content":"        /* Case: find book in catalogue, author is substring of keyword -\u003e 0 books found */"},{"lineNumber":124,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Lauren\";"},{"lineNumber":125,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":126,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":129,"author":{"gitID":"khiayi"},"content":"        /* Case: find book not in catalogue, author not in catalogue -\u003e 0 books found */"},{"lineNumber":130,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":131,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":132,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":133,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":134,"author":{"gitID":"khiayi"},"content":"        /* Case: find isbn number of book in catalogue -\u003e 0 books found */"},{"lineNumber":135,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DELIRIUM.getIsbn().value;"},{"lineNumber":136,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":139,"author":{"gitID":"khiayi"},"content":"        /* Case: find availability of book in catalogue -\u003e 0 books found */"},{"lineNumber":140,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DELIRIUM.getAvail().value;"},{"lineNumber":141,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":143,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":144,"author":{"gitID":"khiayi"},"content":"        /* Case: find tags of book in catalogue -\u003e 0 books found */"},{"lineNumber":145,"author":{"gitID":"khiayi"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DELIRIUM.getTags());"},{"lineNumber":146,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":147,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":148,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":149,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":150,"author":{"gitID":"khiayi"},"content":"        /* Case: find while a book is selected -\u003e selected card deselected */"},{"lineNumber":151,"author":{"gitID":"khiayi"},"content":"        showAllBooks();"},{"lineNumber":152,"author":{"gitID":"khiayi"},"content":"        selectBook(Index.fromOneBased(1));"},{"lineNumber":153,"author":{"gitID":"khiayi"},"content":"        assertFalse(getBookListPanel().getHandleToSelectedCard().getTitle().equals(DELIRIUM.getTitle().fullTitle));"},{"lineNumber":154,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Delirium\";"},{"lineNumber":155,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel, DELIRIUM);"},{"lineNumber":156,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":157,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":158,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":159,"author":{"gitID":"khiayi"},"content":"        /* Case: find book in empty catalogue -\u003e 0 books found */"},{"lineNumber":160,"author":{"gitID":"khiayi"},"content":"        deleteAllBooks();"},{"lineNumber":161,"author":{"gitID":"khiayi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_GIRL;"},{"lineNumber":162,"author":{"gitID":"khiayi"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":163,"author":{"gitID":"khiayi"},"content":"        ModelHelper.setFilteredList(expectedModel, DELIRIUM);"},{"lineNumber":164,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":165,"author":{"gitID":"khiayi"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":166,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":167,"author":{"gitID":"khiayi"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"khiayi"},"content":"        command \u003d \"FiNd Delirium\";"},{"lineNumber":169,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":170,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"khiayi"},"content":"    //@@author"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_BOOKS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":186,"author":{"gitID":"-"},"content":"            MESSAGE_BOOKS_LISTED_OVERVIEW, expectedModel.getFilteredBookList().size());"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * {@code CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"QiuHaohao":2,"khiayi":133,"-":78}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_XVI;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_YOU;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVAIL_DESC_XVI;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVAIL_DESC_YOU;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AVAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_XVI;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_YOU;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DYSTOPIA;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FICTION;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_XVI;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_YOU;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_YOU;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVAIL_YOU;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_YOU;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DYSTOPIA;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FICTION;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_YOU;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_GIRL;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.XVI;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalBooks.YOU;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.BookUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends CatalogueSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        executeCommand(\"login admin admin\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"khiayi"},"content":"        //@@author khiayi"},{"lineNumber":60,"author":{"gitID":"khiayi"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":62,"author":{"gitID":"khiayi"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":63,"author":{"gitID":"khiayi"},"content":"         * -\u003e edited"},{"lineNumber":64,"author":{"gitID":"khiayi"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"khiayi"},"content":"        Index index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":66,"author":{"gitID":"khiayi"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + TITLE_DESC_YOU + \"  \""},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"            + ISBN_DESC_YOU + \" \" + AVAIL_DESC_YOU + \"  \" + AUTHOR_DESC_YOU + \" \" + TAG_DESC_FICTION + \" \";"},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":"        Book editedBook \u003d new BookBuilder().withTitle(VALID_TITLE_YOU).withIsbn(VALID_ISBN_YOU)"},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":"            .withAvail(VALID_AVAIL_YOU).withAuthor(VALID_AUTHOR_YOU).withTags(VALID_TAG_FICTION).build();"},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":"        /* Case: undo editing the last book in the list -\u003e last book restored */"},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":76,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":77,"author":{"gitID":"khiayi"},"content":"        /* Case: redo editing the last book in the list -\u003e last book edited again */"},{"lineNumber":78,"author":{"gitID":"khiayi"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"khiayi"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"khiayi"},"content":"        model.updateBook("},{"lineNumber":81,"author":{"gitID":"khiayi"},"content":"            getModel().getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()), editedBook);"},{"lineNumber":82,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":84,"author":{"gitID":"khiayi"},"content":"        /* Case: edit a book with new values same as existing values -\u003e edited */"},{"lineNumber":85,"author":{"gitID":"khiayi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_YOU + ISBN_DESC_YOU"},{"lineNumber":86,"author":{"gitID":"khiayi"},"content":"            + AVAIL_DESC_YOU + AUTHOR_DESC_YOU + TAG_DESC_FICTION;"},{"lineNumber":87,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, index, YOU);"},{"lineNumber":88,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":89,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":90,"author":{"gitID":"khiayi"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":91,"author":{"gitID":"khiayi"},"content":"        index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":92,"author":{"gitID":"khiayi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_DYSTOPIA;"},{"lineNumber":93,"author":{"gitID":"khiayi"},"content":"        Book bookToEdit \u003d getModel().getFilteredBookList().get(index.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"khiayi"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":95,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":96,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":97,"author":{"gitID":"khiayi"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":98,"author":{"gitID":"khiayi"},"content":"        index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":99,"author":{"gitID":"khiayi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":100,"author":{"gitID":"khiayi"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withTags().build();"},{"lineNumber":101,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":102,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":103,"author":{"gitID":"khiayi"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":104,"author":{"gitID":"khiayi"},"content":"        /* Case: filtered book list, edit index within bounds of catalogue and book list -\u003e edited */"},{"lineNumber":105,"author":{"gitID":"khiayi"},"content":"        showBooksWithTitle(KEYWORD_MATCHING_GIRL);"},{"lineNumber":106,"author":{"gitID":"khiayi"},"content":"        index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":107,"author":{"gitID":"khiayi"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredBookList().size());"},{"lineNumber":108,"author":{"gitID":"khiayi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + TITLE_DESC_YOU;"},{"lineNumber":109,"author":{"gitID":"khiayi"},"content":"        bookToEdit \u003d getModel().getFilteredBookList().get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"khiayi"},"content":"        editedBook \u003d new BookBuilder(bookToEdit).withTitle(VALID_TITLE_YOU).build();"},{"lineNumber":111,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, index, editedBook);"},{"lineNumber":112,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":113,"author":{"gitID":"khiayi"},"content":"        /* Case: filtered book list, edit index within bounds of catalogue but out of bounds of book list"},{"lineNumber":114,"author":{"gitID":"khiayi"},"content":"         * -\u003e rejected"},{"lineNumber":115,"author":{"gitID":"khiayi"},"content":"         */"},{"lineNumber":116,"author":{"gitID":"khiayi"},"content":"        showBooksWithTitle(KEYWORD_MATCHING_GIRL);"},{"lineNumber":117,"author":{"gitID":"khiayi"},"content":"        int invalidIndex \u003d getModel().getCatalogue().getBookList().size();"},{"lineNumber":118,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + TITLE_DESC_YOU,"},{"lineNumber":119,"author":{"gitID":"khiayi"},"content":"            Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":120,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":121,"author":{"gitID":"khiayi"},"content":"        /* --------------------- Performing edit operation while a book card is selected -------------------------- */"},{"lineNumber":122,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":123,"author":{"gitID":"khiayi"},"content":"        /* Case: selects first card in the book list, edit a book -\u003e edited, card selection remains unchanged but"},{"lineNumber":124,"author":{"gitID":"khiayi"},"content":"         * browser url changes"},{"lineNumber":125,"author":{"gitID":"khiayi"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"khiayi"},"content":"        showAllBooks();"},{"lineNumber":127,"author":{"gitID":"khiayi"},"content":"        index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":128,"author":{"gitID":"khiayi"},"content":"        selectBook(index);"},{"lineNumber":129,"author":{"gitID":"khiayi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_XVI + ISBN_DESC_XVI"},{"lineNumber":130,"author":{"gitID":"khiayi"},"content":"            + AVAIL_DESC_XVI + AUTHOR_DESC_XVI + TAG_DESC_DYSTOPIA;"},{"lineNumber":131,"author":{"gitID":"khiayi"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":132,"author":{"gitID":"khiayi"},"content":"        // browser\u0027s url is updated to reflect the new book\u0027s name"},{"lineNumber":133,"author":{"gitID":"khiayi"},"content":"        assertCommandSuccess(command, index, XVI, index);"},{"lineNumber":134,"author":{"gitID":"khiayi"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":135,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":136,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + TITLE_DESC_YOU,"},{"lineNumber":138,"author":{"gitID":"khiayi"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":140,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + TITLE_DESC_YOU,"},{"lineNumber":142,"author":{"gitID":"khiayi"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":144,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"khiayi"},"content":"        invalidIndex \u003d getModel().getFilteredBookList().size() + 1;"},{"lineNumber":146,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + TITLE_DESC_YOU,"},{"lineNumber":147,"author":{"gitID":"khiayi"},"content":"            Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":149,"author":{"gitID":"khiayi"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + TITLE_DESC_YOU,"},{"lineNumber":151,"author":{"gitID":"khiayi"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":153,"author":{"gitID":"khiayi"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased(),"},{"lineNumber":155,"author":{"gitID":"khiayi"},"content":"            EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":156,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":157,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + INVALID_TITLE_DESC,"},{"lineNumber":159,"author":{"gitID":"khiayi"},"content":"            Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":161,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid isbn -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + INVALID_ISBN_DESC,"},{"lineNumber":163,"author":{"gitID":"khiayi"},"content":"            Isbn.MESSAGE_ISBN_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":165,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid avail -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + INVALID_AVAIL_DESC,"},{"lineNumber":167,"author":{"gitID":"khiayi"},"content":"            Avail.MESSAGE_AVAIL_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":169,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + INVALID_AUTHOR_DESC,"},{"lineNumber":171,"author":{"gitID":"khiayi"},"content":"            Author.MESSAGE_AUTHOR_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":173,"author":{"gitID":"khiayi"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":175,"author":{"gitID":"khiayi"},"content":"            Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":177,"author":{"gitID":"khiayi"},"content":"        /* Case: edit a book with new values same as another book\u0027s values -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"khiayi"},"content":"        executeCommand(BookUtil.getAddCommand(YOU));"},{"lineNumber":179,"author":{"gitID":"khiayi"},"content":"        assertTrue(getModel().getCatalogue().getBookList().contains(YOU));"},{"lineNumber":180,"author":{"gitID":"khiayi"},"content":"        index \u003d INDEX_FIRST_BOOK;"},{"lineNumber":181,"author":{"gitID":"khiayi"},"content":"        assertFalse(getModel().getFilteredBookList().get(index.getZeroBased()).equals(YOU));"},{"lineNumber":182,"author":{"gitID":"khiayi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_YOU + ISBN_DESC_YOU"},{"lineNumber":183,"author":{"gitID":"khiayi"},"content":"            + AVAIL_DESC_YOU + AUTHOR_DESC_YOU + TAG_DESC_DYSTOPIA + TAG_DESC_FICTION;"},{"lineNumber":184,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":185,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":186,"author":{"gitID":"khiayi"},"content":"        /* Case: edit a book with new values same as another book\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"khiayi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_YOU + ISBN_DESC_YOU"},{"lineNumber":188,"author":{"gitID":"khiayi"},"content":"            + AVAIL_DESC_YOU + AUTHOR_DESC_YOU + TAG_DESC_FICTION;"},{"lineNumber":189,"author":{"gitID":"khiayi"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":190,"author":{"gitID":"khiayi"},"content":"        //@@author"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Book, Index)} except that"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Book, Index)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Book editedBook) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedBook, null);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the book at index {@code toEdit} being"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedBook}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Book editedBook,"},{"lineNumber":214,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedModel.updateBook("},{"lineNumber":218,"author":{"gitID":"-"},"content":"                expectedModel.getFilteredBookList().get(toEdit.getZeroBased()), editedBook);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        } catch (DuplicateBookException | BookNotFoundException e) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":222,"author":{"gitID":"-"},"content":"                \"editedBook is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook), expectedSelectedCardIndex);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * {@code CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":255,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * {@code CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * @see CatalogueSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"khiayi":132,"-":157}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Catalogue - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T16-B1/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team CS2103JAN2018-T16-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"// tag::devguideintroduction[]"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"Catalogue is a desktop application that allows book and account management for the Library. +"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"This developer guide has been written to help any possible contributor to improve the application in the future. +"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"It is also very useful to understand how the different features work and how to run tests on them. +"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"Finally, it will explain you how the idea for Catalogue came."},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"// end::devguideintroduction[]"},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":40,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":49,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":69,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-T16-B1/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-T16-B1/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your bookal fork."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":93,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":100,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"// tag::Design[]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":109,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":114,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:https://github.com/CS2103JAN2018-T16-B1/main/tree/master/docs/diagrams[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/tree/master/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":119,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":129,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":141,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"image::SDforDeleteBook.png[width\u003d\"800\"]"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `CatalogueChangedEvent` when the Catalogue data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"image::SDforDeleteBookEventHandling.png[width\u003d\"800\"]"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":160,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":163,"author":{"gitID":"-"},"content":"// end::Design[]"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":170,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/tree/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/tree/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/tree/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":185,"author":{"gitID":"-"},"content":"// tag::logicComponent[]"},{"lineNumber":186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":189,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":190,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":196,"author":{"gitID":"-"},"content":"link:{repoURL}/tree/master/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":".  `Logic` uses the `CatalogueParser` class to parse the user command."},{"lineNumber":199,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":200,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a book) and/or raise events."},{"lineNumber":201,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":206,"author":{"gitID":"-"},"content":"image::DeleteBookSdforLogic.png[width\u003d\"800\"]"},{"lineNumber":207,"author":{"gitID":"-"},"content":"// end::logicComponent[]"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"//tag::model"},{"lineNumber":210,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":211,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":214,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":221,"author":{"gitID":"-"},"content":"* stores the Catalogue data."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* stores the AccountList data"},{"lineNumber":223,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":224,"author":{"gitID":"-"},"content":"* maintains the privilege level"},{"lineNumber":225,"author":{"gitID":"-"},"content":"* handles authentication"},{"lineNumber":226,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":227,"author":{"gitID":"-"},"content":"//end::model"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":230,"author":{"gitID":"-"},"content":"// tag::storagepic[]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":234,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"// end::storagepic[]"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/tree/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":242,"author":{"gitID":"-"},"content":"* can save the Catalogue data in xml format and read it back."},{"lineNumber":243,"author":{"gitID":"-"},"content":"* can save the AccountList data in binary format and read it back"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.address.book.commons` package."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Undo/Redo"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the catalogue (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the catalogue before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":268,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":269,"author":{"gitID":"-"},"content":"----"},{"lineNumber":270,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"},{"lineNumber":276,"author":{"gitID":"-"},"content":"----"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":279,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":280,"author":{"gitID":"-"},"content":"----"},{"lineNumber":281,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"},{"lineNumber":296,"author":{"gitID":"-"},"content":"----"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th book in the catalogue. The current state of the catalogue is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new book."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":309,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"The user now decides that adding the book was a mistake, and decides to undo that action using `undo`."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the catalogue to the state before the `add` command executed."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":318,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the catalogue to the state after the command is executed)."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":327,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Login/Logout"},{"lineNumber":342,"author":{"gitID":"-"},"content":"The authentication mechanism is managed by Model and Logic, where Model maintains a privilege level and Logic checks the required privilege is satisfied every time a command is run."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":351,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":353,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire catalogue."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":360,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":361,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the catalogue (`add`, `clear`, `edit`)."},{"lineNumber":368,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":370,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":371,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":372,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the catalogue book and not the view."},{"lineNumber":373,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":381,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":382,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":383,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":384,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Account Functions"},{"lineNumber":387,"author":{"gitID":"-"},"content":"// tag::addaccount[]"},{"lineNumber":388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Add Account"},{"lineNumber":389,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":390,"author":{"gitID":"-"},"content":"1. The addAccount function helps to add new accounts with different privileges into the database. It includes the accounts with privilege level 1 for students and privilege level 2 for administrators or librarians."},{"lineNumber":391,"author":{"gitID":"-"},"content":"2. Only accounts with privilege level 2 (administrators and librarians) can access the addAccount function."},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Future Implementation"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"1. The addAccount function will be able to add accounts based on an excel sheet that is provided instead of having to manually add the accounts one by one. +"},{"lineNumber":396,"author":{"gitID":"-"},"content":"2. The addAccount function will be provided to the students such that they can create their own account as long as they have a registered matriculation number in the system without having a administrator privilege level."},{"lineNumber":397,"author":{"gitID":"-"},"content":"3. An edit account function will be created to allow borrowers/users to edit their own passwords if necessary instead of having to go through the librarian to delete and add a new account with a different password."},{"lineNumber":398,"author":{"gitID":"-"},"content":"// end::addaccount[]"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"// tag::deleteaccount[]"},{"lineNumber":401,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Delete Account"},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":403,"author":{"gitID":"-"},"content":"1. The deleteAccount function helps to delete accounts in the existing account database."},{"lineNumber":404,"author":{"gitID":"-"},"content":"2. Only accounts with privilege level 2 (administrators and librarians) can access the deleteAccount function."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Future Implementation"},{"lineNumber":407,"author":{"gitID":"-"},"content":"1. When the list account function is set up, the administrators will be able to use the addAccount function by clicking on the the shown list to delete the accounts in large scales."},{"lineNumber":408,"author":{"gitID":"-"},"content":"2. The deleteAccount function will be able to delete the account by range of date created so that students that are registered into the school library can be deleted in bulk based on their matriculation and graduation date information."},{"lineNumber":409,"author":{"gitID":"-"},"content":"// end::deleteaccount[]"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":416,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":427,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":428,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":433,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":434,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":435,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":438,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":447,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":452,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":465,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":466,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":467,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":470,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":480,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":485,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":492,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":505,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":506,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":507,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":508,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":509,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":510,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":511,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":512,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":513,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":517,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":520,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":537,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/blob/master/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":544,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":545,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":546,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Catalogue depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":551,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":552,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Features Proposed"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"Unallocated:"},{"lineNumber":557,"author":{"gitID":"-"},"content":".  Renew Command"},{"lineNumber":558,"author":{"gitID":"-"},"content":".. Allows students to renew borrowed books."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"Chan Tiong Ley:"},{"lineNumber":561,"author":{"gitID":"-"},"content":".  bookLogs command"},{"lineNumber":562,"author":{"gitID":"-"},"content":".. Shows the past history of the book."},{"lineNumber":563,"author":{"gitID":"-"},"content":".  userLogs command"},{"lineNumber":564,"author":{"gitID":"-"},"content":".. Shows the past activities of the user."},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"Lucas Le:"},{"lineNumber":567,"author":{"gitID":"-"},"content":".  Auto-complete UI"},{"lineNumber":568,"author":{"gitID":"-"},"content":".. Helps users with completing command lines inputs."},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"Qiu Hao Ze:"},{"lineNumber":571,"author":{"gitID":"-"},"content":".  Login Command"},{"lineNumber":572,"author":{"gitID":"-"},"content":".. Create levels of privileges for different target groups. i.e. Guests, Students, Librarians"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"Victor Tardieu:"},{"lineNumber":575,"author":{"gitID":"-"},"content":".  Book Class with bookList"},{"lineNumber":576,"author":{"gitID":"-"},"content":".. Creates book objects."},{"lineNumber":577,"author":{"gitID":"victortardieu"},"content":".  Clear Account Command"},{"lineNumber":578,"author":{"gitID":"-"},"content":".. List the books in the catalogue in order."},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"Wong Khia Yi:"},{"lineNumber":581,"author":{"gitID":"-"},"content":".  Borrow Command"},{"lineNumber":582,"author":{"gitID":"-"},"content":".. Allows students to borrow books."},{"lineNumber":583,"author":{"gitID":"-"},"content":".  Reserve Command"},{"lineNumber":584,"author":{"gitID":"-"},"content":".. Allows students to reserve books."},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d\u003d Future Features"},{"lineNumber":587,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":588,"author":{"gitID":"victortardieu"},"content":"* Borrow and reserve feature will implement an association class called loan and reserve respectively. This association class would include the details of the user borrowing the book and the due date. This will allow the librarian to access the details of the user borrowing the book and its due date."},{"lineNumber":589,"author":{"gitID":"victortardieu"},"content":"* Function to see the number of books that a student has borrowed"},{"lineNumber":590,"author":{"gitID":"victortardieu"},"content":"* Implement a calendar so that the student can be reminded when the book is due."},{"lineNumber":591,"author":{"gitID":"victortardieu"},"content":"* System to send a fine to the student account when a book is overdue"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":594,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"victortardieu"},"content":"* has a need to manage a significant number of books"},{"lineNumber":600,"author":{"gitID":"victortardieu"},"content":"* has a need to manage a significant number of student and librarian accounts"},{"lineNumber":601,"author":{"gitID":"victortardieu"},"content":"* NUS Librarians"},{"lineNumber":602,"author":{"gitID":"victortardieu"},"content":"* NUS Students"},{"lineNumber":603,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":604,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":605,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":606,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"victortardieu"},"content":"*Value proposition*: Fast and efficient book and accounts management application."},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":611,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":612,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":615,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":616,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":617,"author":{"gitID":"-"},"content":"|`* * *` |As a librarian |I want to add a new book title into the database |So that I can constantly update the database for borrowers"},{"lineNumber":618,"author":{"gitID":"-"},"content":"|`* * *` |As a librarian |I want to delete a book title from the database |So that I can constantly update the database for borrowers"},{"lineNumber":619,"author":{"gitID":"-"},"content":"|`* * *` |As a librarian |I want to find a book title in the database |So that I can see the status of the book"},{"lineNumber":620,"author":{"gitID":"victortardieu"},"content":"|`* * *` |As a librarian |I want to add accounts to the system |So that more students can read and use books"},{"lineNumber":621,"author":{"gitID":"victortardieu"},"content":"|`* * *` |As a librarian |I want to delete accounts from the system |So I don\u0027t keep unused accounts"},{"lineNumber":622,"author":{"gitID":"victortardieu"},"content":"|`* * *` |As a librarian |I want to edit a book of the library |So I can correct a mistake in its information"},{"lineNumber":623,"author":{"gitID":"victortardieu"},"content":"|`* *` |As a librarian |I want to confirmation in notification before deleting a book |So that I will not accidentally delete the wrong book title"},{"lineNumber":624,"author":{"gitID":"-"},"content":"|`* * `|As a librarian |I want to view the history of borrowed books from each borrower |So that I can keep track of books availability"},{"lineNumber":625,"author":{"gitID":"victortardieu"},"content":"|`* *` |As a librian |I want to list all the accounts |So I can visually see all the student information"},{"lineNumber":626,"author":{"gitID":"victortardieu"},"content":"|`* * *` |As a student |I want to borrow a book from the library |So I can increase my knowledge"},{"lineNumber":627,"author":{"gitID":"victortardieu"},"content":"|`* * *` |As a student |I want to return a book to the library |So I can discover new subjects"},{"lineNumber":628,"author":{"gitID":"-"},"content":"|`* * *` |As a student |I want to find a book title in the database by it\u0027s title |So I can facilitate my search process"},{"lineNumber":629,"author":{"gitID":"-"},"content":"|`* * *` |As a student |I want to check for the availability of the book |So that I can know it\u0027 loan status"},{"lineNumber":630,"author":{"gitID":"-"},"content":"|`* * *` |As a student |I want to loan a book  |So that I can use the book for higher learning"},{"lineNumber":631,"author":{"gitID":"victortardieu"},"content":"|`* * *` |As a student |I want to reserve a book currently being loaned |So that I will be able to loan the book as soon as it is available"},{"lineNumber":632,"author":{"gitID":"-"},"content":"|`* *` |As a student |I want to renew existing loaned book |So that I have more time to finish the book"},{"lineNumber":633,"author":{"gitID":"victortardieu"},"content":"|`* *` |As a student |I want to find a book title in the database by it\u0027s tag |So that I can facilitate my search process"},{"lineNumber":634,"author":{"gitID":"victortardieu"},"content":"|`* *` |As a student |I want to receive notification when my current book is due soon |So that I will not miss the due date"},{"lineNumber":635,"author":{"gitID":"victortardieu"},"content":"|`*` |As a student |I want to know which book is mandatory for which course |So that I can study in the best conditions"},{"lineNumber":636,"author":{"gitID":"victortardieu"},"content":"|`*` |As a student |I want to be able to ask for a hint with my password |So that I don\u0027t forget it"},{"lineNumber":637,"author":{"gitID":"victortardieu"},"content":"|`*` |As a student |I want to be able to change the dark theme to my preference |So that I can fully personalize my account"},{"lineNumber":638,"author":{"gitID":"-"},"content":"|`* * *` |As a guest |I want to find a book title in the database |So that I can see the status of the book"},{"lineNumber":639,"author":{"gitID":"-"},"content":"|`* * *` |As a guest |I want to check for the availability of the book |So that I can see it\u0027s loan status"},{"lineNumber":640,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Catalogue` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete book"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"1.  User requests to list books"},{"lineNumber":654,"author":{"gitID":"-"},"content":"2.  Catalogue shows a list of books"},{"lineNumber":655,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific book in the list"},{"lineNumber":656,"author":{"gitID":"-"},"content":"4.  Catalogue deletes the book"},{"lineNumber":657,"author":{"gitID":"-"},"content":"5.  Catalogue lists remaining books"},{"lineNumber":658,"author":{"gitID":"-"},"content":"+"},{"lineNumber":659,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":664,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":665,"author":{"gitID":"-"},"content":"+"},{"lineNumber":666,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":669,"author":{"gitID":"-"},"content":"+"},{"lineNumber":670,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":671,"author":{"gitID":"-"},"content":"** 3a1. Catalogue shows an error message."},{"lineNumber":672,"author":{"gitID":"-"},"content":"+"},{"lineNumber":673,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"// tag::usecaseloginoutlistfind[]"},{"lineNumber":676,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Login/Logout"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"1.  User logs in with credentials"},{"lineNumber":682,"author":{"gitID":"-"},"content":"2.  Catalogue authenticates with the credentials entered"},{"lineNumber":683,"author":{"gitID":"-"},"content":"3.  Catalogue shows successful login message"},{"lineNumber":684,"author":{"gitID":"-"},"content":"4.  User issues commands with privilege"},{"lineNumber":685,"author":{"gitID":"-"},"content":"5.  Catalogue checks the privilege of the user against the command issued"},{"lineNumber":686,"author":{"gitID":"-"},"content":"6.  Catalogue executes the command"},{"lineNumber":687,"author":{"gitID":"-"},"content":"+"},{"lineNumber":688,"author":{"gitID":"-"},"content":"Step 4-6 are repeated until the user finishes using the application"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"7.  User issues logout command"},{"lineNumber":691,"author":{"gitID":"-"},"content":"8.  Catalogue change the current account to guest"},{"lineNumber":692,"author":{"gitID":"-"},"content":"+"},{"lineNumber":693,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":698,"author":{"gitID":"-"},"content":"* 2a. The credentials entered does not match any record in the AccountList"},{"lineNumber":699,"author":{"gitID":"-"},"content":"+"},{"lineNumber":700,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":701,"author":{"gitID":"-"},"content":"** 2a1. Catalogue shows an error message."},{"lineNumber":702,"author":{"gitID":"-"},"content":"+"},{"lineNumber":703,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"* 4a. The privilege level of the account logged in is lower than the required level of the command"},{"lineNumber":706,"author":{"gitID":"-"},"content":"+"},{"lineNumber":707,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":708,"author":{"gitID":"-"},"content":"** 4a1. Catalogue shows an error message."},{"lineNumber":709,"author":{"gitID":"-"},"content":"+"},{"lineNumber":710,"author":{"gitID":"-"},"content":"Use case resumes at step 4 or step 7."},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":713,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: List Book"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"1.  User requests to list all books"},{"lineNumber":718,"author":{"gitID":"-"},"content":"2.  Catalogue shows a list of all books in the book list"},{"lineNumber":719,"author":{"gitID":"-"},"content":"+"},{"lineNumber":720,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":725,"author":{"gitID":"-"},"content":"* 2a. The list is empty"},{"lineNumber":726,"author":{"gitID":"-"},"content":"+"},{"lineNumber":727,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":730,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find Book"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"1.  User requests to find books with some keywords"},{"lineNumber":735,"author":{"gitID":"-"},"content":"2.  Catalogue shows a list of books with at least one keyword in the title"},{"lineNumber":736,"author":{"gitID":"-"},"content":"+"},{"lineNumber":737,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":742,"author":{"gitID":"-"},"content":"* 2a. The list is empty"},{"lineNumber":743,"author":{"gitID":"-"},"content":"+"},{"lineNumber":744,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":747,"author":{"gitID":"-"},"content":"// end::usecaseloginoutlistfind[]"},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":750,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add Account"},{"lineNumber":751,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"1.  Administrator requests to add a new student or admin account into the database."},{"lineNumber":754,"author":{"gitID":"-"},"content":"2.  A new account of specified privilege level(student 1 OR admin 2) is created. +"},{"lineNumber":755,"author":{"gitID":"-"},"content":"3.  The added account will be unique to other accounts based on the username only. If there is another account in the database that already has the same username, the command display box will throw back an error to indicate that the account cannot be added."},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"+"},{"lineNumber":758,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":763,"author":{"gitID":"-"},"content":"* 2a. The account is added into the database."},{"lineNumber":764,"author":{"gitID":"-"},"content":"+"},{"lineNumber":765,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":768,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete Account"},{"lineNumber":769,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"1.  Administrator requests to delete an existing account from the database."},{"lineNumber":772,"author":{"gitID":"-"},"content":"2.  The account will be deleted if the username that is required to be deleted exists in the database. If not, the account will not be deleted and command display will show that the desired account cannot be deleted."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"+"},{"lineNumber":775,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":780,"author":{"gitID":"-"},"content":"* 2a. The account is deleted from the database."},{"lineNumber":781,"author":{"gitID":"-"},"content":"+"},{"lineNumber":782,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":785,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Exit"},{"lineNumber":786,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"1.  User requests to exit the programme."},{"lineNumber":789,"author":{"gitID":"-"},"content":"2.  The programme will be cancelled when given the command regardless of whichever privilege level."},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"+"},{"lineNumber":792,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":797,"author":{"gitID":"-"},"content":"* 2a. The programme is cancelled."},{"lineNumber":798,"author":{"gitID":"-"},"content":"+"},{"lineNumber":799,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Undo"},{"lineNumber":803,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"1.  Administrator requests to undo the last command executed in the system."},{"lineNumber":806,"author":{"gitID":"-"},"content":"2.  Only commands that change the state of the book catalogue or the account database can be undone."},{"lineNumber":807,"author":{"gitID":"-"},"content":"+"},{"lineNumber":808,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":813,"author":{"gitID":"-"},"content":"* 2a. The previous executed command is undone."},{"lineNumber":814,"author":{"gitID":"-"},"content":"+"},{"lineNumber":815,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":818,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Redo"},{"lineNumber":819,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"1.  Administrator requests to redo the last command that has been undone in the system."},{"lineNumber":822,"author":{"gitID":"-"},"content":"2.  Only commands that have been undone can be redone."},{"lineNumber":823,"author":{"gitID":"-"},"content":"+"},{"lineNumber":824,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":827,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"* 2a. The previous executed command is redone."},{"lineNumber":830,"author":{"gitID":"-"},"content":"+"},{"lineNumber":831,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":834,"author":{"gitID":"-"},"content":"// tag::usecaseAddEditHelpSelect[]"},{"lineNumber":835,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add book"},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"1.  User requests to add book with TITLE, AUTHOR, ISBN, AVAIL, [TAGS]"},{"lineNumber":840,"author":{"gitID":"-"},"content":"2.  Catalogue adds book"},{"lineNumber":841,"author":{"gitID":"-"},"content":"3.  Catalogue list books"},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":844,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"* 1a. The TITLE or AUTHOR or ISBN or AVAIL is not valid or ISBN is not unique."},{"lineNumber":847,"author":{"gitID":"-"},"content":"+"},{"lineNumber":848,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":849,"author":{"gitID":"-"},"content":"** 1a1. Catalogue shows an error message."},{"lineNumber":850,"author":{"gitID":"-"},"content":"+"},{"lineNumber":851,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":854,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit book"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"1.  User requests to list books"},{"lineNumber":859,"author":{"gitID":"-"},"content":"2.  Catalogue shows a list of books"},{"lineNumber":860,"author":{"gitID":"-"},"content":"3.  User requests to edit a specific book in the list with [TITLE], [AUTHOR], [ISBN], [AVAIL], [TAGS]"},{"lineNumber":861,"author":{"gitID":"-"},"content":"4.  Catalogue edit book"},{"lineNumber":862,"author":{"gitID":"-"},"content":"5.  Catalogue list books"},{"lineNumber":863,"author":{"gitID":"-"},"content":"+"},{"lineNumber":864,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":867,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"* 2a. The list is empty"},{"lineNumber":870,"author":{"gitID":"-"},"content":"+"},{"lineNumber":871,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":872,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":873,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid or the [TITLE], [AUTHOR], [ISBN], [AVAIL], [TAGS] is invalid"},{"lineNumber":874,"author":{"gitID":"-"},"content":"+"},{"lineNumber":875,"author":{"gitID":"-"},"content":"** 3a1. Catalogue shows an error message."},{"lineNumber":876,"author":{"gitID":"-"},"content":"+"},{"lineNumber":877,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":880,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Help"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"1.  User requests to help"},{"lineNumber":885,"author":{"gitID":"-"},"content":"2.  Help window pops out"},{"lineNumber":886,"author":{"gitID":"-"},"content":"+"},{"lineNumber":887,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":890,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Select"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"1.  User requests to list books"},{"lineNumber":895,"author":{"gitID":"-"},"content":"2.  Catalogue shows a list of books"},{"lineNumber":896,"author":{"gitID":"-"},"content":"3.  User requests to select books with index"},{"lineNumber":897,"author":{"gitID":"-"},"content":"4.  Catalogue shows Goodreads search of the selected book."},{"lineNumber":898,"author":{"gitID":"-"},"content":"+"},{"lineNumber":899,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":902,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"* 2a. The list is empty"},{"lineNumber":905,"author":{"gitID":"-"},"content":"+"},{"lineNumber":906,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":907,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":908,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid"},{"lineNumber":909,"author":{"gitID":"-"},"content":"+"},{"lineNumber":910,"author":{"gitID":"-"},"content":"** 3a1. Catalogue shows an error message."},{"lineNumber":911,"author":{"gitID":"-"},"content":"+"},{"lineNumber":912,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":913,"author":{"gitID":"-"},"content":"* 4a. There is no internet access."},{"lineNumber":914,"author":{"gitID":"-"},"content":"+"},{"lineNumber":915,"author":{"gitID":"-"},"content":"** 4a1. Catalogue shows an error message."},{"lineNumber":916,"author":{"gitID":"-"},"content":"+"},{"lineNumber":917,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":920,"author":{"gitID":"-"},"content":"// end::usecaseAddEditHelpSelect[]"},{"lineNumber":921,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Borrow book"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"1. User login an account with librarian privilege"},{"lineNumber":927,"author":{"gitID":"-"},"content":"2. User requests to list books"},{"lineNumber":928,"author":{"gitID":"-"},"content":"3. User requests to borrow a specific book in the list"},{"lineNumber":929,"author":{"gitID":"-"},"content":"4. List will book with \u0027Borrowed\u0027 availability"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":934,"author":{"gitID":"-"},"content":"* 2a. The book is already borrowed or reserved"},{"lineNumber":935,"author":{"gitID":"-"},"content":"+"},{"lineNumber":936,"author":{"gitID":"-"},"content":"Catalogue shows an error message."},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":939,"author":{"gitID":"-"},"content":"+"},{"lineNumber":940,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":941,"author":{"gitID":"-"},"content":"** 3a1. Catalogue shows an error message."},{"lineNumber":942,"author":{"gitID":"-"},"content":"+"},{"lineNumber":943,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":946,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Return book"},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"1. User login an account with librarian privilege"},{"lineNumber":951,"author":{"gitID":"-"},"content":"2. User requests to list books"},{"lineNumber":952,"author":{"gitID":"-"},"content":"3. User requests to return a specific book in the list"},{"lineNumber":953,"author":{"gitID":"-"},"content":"4. List will book with \u0027Available\u0027 availability"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":958,"author":{"gitID":"-"},"content":"* 2a. The book is already available"},{"lineNumber":959,"author":{"gitID":"-"},"content":"+"},{"lineNumber":960,"author":{"gitID":"-"},"content":"Catalogue shows an error message."},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":963,"author":{"gitID":"-"},"content":"+"},{"lineNumber":964,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":965,"author":{"gitID":"-"},"content":"** 3a1. Catalogue shows an error message."},{"lineNumber":966,"author":{"gitID":"-"},"content":"+"},{"lineNumber":967,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":970,"author":{"gitID":"-"},"content":"\u003d\u003d Use case: Reserve book"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"1. User login an account with librarian privilege"},{"lineNumber":975,"author":{"gitID":"-"},"content":"2. User requests to list books"},{"lineNumber":976,"author":{"gitID":"-"},"content":"3. User requests to reserve a specific book in the list"},{"lineNumber":977,"author":{"gitID":"-"},"content":"4. List will book with \u0027Reserved\u0027 availability"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":982,"author":{"gitID":"-"},"content":"* 2a. The book is available"},{"lineNumber":983,"author":{"gitID":"-"},"content":"+"},{"lineNumber":984,"author":{"gitID":"-"},"content":"Catalogue shows an error message."},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":987,"author":{"gitID":"-"},"content":"+"},{"lineNumber":988,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":989,"author":{"gitID":"-"},"content":"** 3a1. Catalogue shows an error message."},{"lineNumber":990,"author":{"gitID":"-"},"content":"+"},{"lineNumber":991,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"victortardieu"},"content":"// tag::usecaseclearaclearhistory[]"},{"lineNumber":994,"author":{"gitID":"victortardieu"},"content":"[discrete]"},{"lineNumber":995,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Clear accounts"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"1.  User logs in with credentials"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"2.  Catalogue authenticates with the credentials entered"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"3.  Catalogue shows successful login message"},{"lineNumber":1002,"author":{"gitID":"victortardieu"},"content":"4.  Librarian types `cleara` in the command box"},{"lineNumber":1003,"author":{"gitID":"victortardieu"},"content":"5.  Catalogue checks the privilege of the user against the privilege level associated with `cleara`"},{"lineNumber":1004,"author":{"gitID":"victortardieu"},"content":"6.  If successful, Catalogue clears all the accounts from the list of accounts, logs out the current user and add the default admin user."},{"lineNumber":1005,"author":{"gitID":"victortardieu"},"content":"+"},{"lineNumber":1006,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1007,"author":{"gitID":"victortardieu"},"content":"*Extensions*"},{"lineNumber":1008,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1009,"author":{"gitID":"victortardieu"},"content":"[none]"},{"lineNumber":1010,"author":{"gitID":"victortardieu"},"content":"* 6a. The list of accounts is empty"},{"lineNumber":1011,"author":{"gitID":"victortardieu"},"content":"+"},{"lineNumber":1012,"author":{"gitID":"victortardieu"},"content":"Use case ends."},{"lineNumber":1013,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1014,"author":{"gitID":"victortardieu"},"content":"[discrete]"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Clear books"},{"lineNumber":1016,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1017,"author":{"gitID":"victortardieu"},"content":"*MSS*"},{"lineNumber":1018,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1019,"author":{"gitID":"victortardieu"},"content":"1.  Librarian logs in with credentials"},{"lineNumber":1020,"author":{"gitID":"victortardieu"},"content":"2.  Catalogue shows successful login message"},{"lineNumber":1021,"author":{"gitID":"victortardieu"},"content":"3.  Librarian types `clear` in the command box to clear Catalogue"},{"lineNumber":1022,"author":{"gitID":"victortardieu"},"content":"4.  Catalogue clears all the books from Catalogue"},{"lineNumber":1023,"author":{"gitID":"victortardieu"},"content":"+"},{"lineNumber":1024,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1025,"author":{"gitID":"victortardieu"},"content":"*Extensions*"},{"lineNumber":1026,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1027,"author":{"gitID":"victortardieu"},"content":"[none]"},{"lineNumber":1028,"author":{"gitID":"victortardieu"},"content":"* 4a. Catalogue is empty"},{"lineNumber":1029,"author":{"gitID":"victortardieu"},"content":"+"},{"lineNumber":1030,"author":{"gitID":"victortardieu"},"content":"Use case ends."},{"lineNumber":1031,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1032,"author":{"gitID":"victortardieu"},"content":"[discrete]"},{"lineNumber":1033,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d\u003d Use case: History Command"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"1.  User logs in with credentials"},{"lineNumber":1038,"author":{"gitID":"victortardieu"},"content":"2.  Catalogue shows successful login message"},{"lineNumber":1039,"author":{"gitID":"victortardieu"},"content":"3.  Librarian types `history` in the command box to see the history of entered commands"},{"lineNumber":1040,"author":{"gitID":"victortardieu"},"content":"4.  The application shows the previously entered commands, most recent first"},{"lineNumber":1041,"author":{"gitID":"victortardieu"},"content":"+"},{"lineNumber":1042,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1043,"author":{"gitID":"victortardieu"},"content":"*Extensions*"},{"lineNumber":1044,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1045,"author":{"gitID":"victortardieu"},"content":"[none]"},{"lineNumber":1046,"author":{"gitID":"victortardieu"},"content":"* 5a. No commands have been entered as for now"},{"lineNumber":1047,"author":{"gitID":"victortardieu"},"content":"+"},{"lineNumber":1048,"author":{"gitID":"victortardieu"},"content":"Use case ends."},{"lineNumber":1049,"author":{"gitID":"victortardieu"},"content":"// end::usecaseclearaclearhistory[]"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1056,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 books without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1057,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1071,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1083,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1089,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"// tag::manualtestloginoutlistfind[]"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Login"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":".  Initial login"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":".. Prerequisites: The account-password combination `wrong acount` is not in the AccountList"},{"lineNumber":1098,"author":{"gitID":"-"},"content":".. Test case: `login admin admin` +"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"   Expected: The user is logged in as an librarian. The user will be privileged to execute any command."},{"lineNumber":1100,"author":{"gitID":"-"},"content":".. Test case: `login wrong account` +"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"   Expected: An error message will be shown. The user is not logged in."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logout"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":".  Logout after logged in"},{"lineNumber":1106,"author":{"gitID":"-"},"content":".. Prerequisites: The current account logged in is a student or a librarian"},{"lineNumber":1107,"author":{"gitID":"-"},"content":".. Test case: `logout` +"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"   Expected: The user is logged out. The current account will become guest account."},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":".  Logout without logging in"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":".. Prerequisites: The current account logged in is a guest"},{"lineNumber":1113,"author":{"gitID":"-"},"content":".. Test case: `logout` +"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"   Expected: An error message will be shown. The user will stay as a guest."},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d List"},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":".   List all books"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"..  Prerequisites: There is at least one book in the book list."},{"lineNumber":1120,"author":{"gitID":"-"},"content":"..  Test case: `list` +"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"    Expected: A list of all books will be shown."},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":".   List all books when the book list is empty"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"..  Prerequisites: There is no book in the book list."},{"lineNumber":1125,"author":{"gitID":"-"},"content":"..  Test case: `list` +"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"    Expected: An empty list will be shown."},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Find"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":".   Find books with the keyword in title"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"..  Prerequisites: The book list contains default sample data."},{"lineNumber":1132,"author":{"gitID":"-"},"content":"..  Test case: `find animal` +"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"    Expected: The book \u0027Animal Farm\u0027 will be shown."},{"lineNumber":1134,"author":{"gitID":"-"},"content":"..  Test case: `find animal girl` +"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"    Expected: The book \u0027Animal Farm\u0027 and \u0027California Girl\u0027 will be shown."},{"lineNumber":1136,"author":{"gitID":"-"},"content":"..  Test case: `find catalog` +"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"    Expected: An empty list will be shown."},{"lineNumber":1138,"author":{"gitID":"-"},"content":"// end::manualtestloginoutlistfind[]"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a book"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":". Deleting a book while all books are listed"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":1146,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"   Expected: First book is deleted from the list. Details of the deleted book shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1148,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"   Expected: No book is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1150,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"// tag::manualtestAddEditHelpSelect[]"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a book"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":". Adding a book"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":".. Prerequisites: Log in using the `log in` command."},{"lineNumber":1159,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepnes i/9781476785592 av/Borrowed` +"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"   Expected: Book is added to the list at last index. Details of the added book shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1161,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepnes i/9781476785592 av/Borrowed` again +"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"   Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1163,"author":{"gitID":"-"},"content":".. Test case: `add t/Yo$ a/Caroline Kepnes i/0000000000001 av/Borrowed` again +"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"   Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1165,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepne$ i/0000000000002 av/Borrowed` again +"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"   Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1167,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepnes i/000000000000a av/Borrowed` again +"},{"lineNumber":1168,"author":{"gitID":"-"},"content":"    Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1169,"author":{"gitID":"-"},"content":".. Test case: `add t/You a/Caroline Kepnes i/0000000000004 av/not sure` again +"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"   Expected: No book is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1171,"author":{"gitID":"-"},"content":".. Other incorrect add commands to try: `add`, `add t/`"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a book"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":". Editing a book while all books are listed"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":1179,"author":{"gitID":"-"},"content":".. Test case: `edit 1 t/Animal` +"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"   Expected: Title of first book is edit in the list. Details of the edited book shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1181,"author":{"gitID":"-"},"content":".. Test case: `delete 0 t/Animal` +"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"   Expected: No book is edited. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1183,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `edit t/Animal`, `edit x t/Animal` (where x is larger than the list size) +"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Help"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":". Display Help window"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":".. Test case: `help` +"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"   Expected: Help window pops out. Action shown in the status message. Status bar remains the same."},{"lineNumber":1192,"author":{"gitID":"-"},"content":".. Test case: \u0027F1\u0027 +"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"   Expected: Help window pops out. Action shown in the status message. Status bar remains the same."},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a book"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":". Selecting a book while all books are listed"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":1200,"author":{"gitID":"-"},"content":".. Test case: `select 1` (With internet) +"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"   Expected: First book is selected from the list. Action shown in the status message. Goodreads webpage of the book is loaded in the information section. Timestamp in the status bar is updated."},{"lineNumber":1202,"author":{"gitID":"-"},"content":".. Test case: `select 1` (Without internet) +"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"   Expected: First book is selected from the list. Action shown in the status message. Error message shown in information system. Timestamp in the status bar is updated."},{"lineNumber":1204,"author":{"gitID":"-"},"content":".. Test case: `select 0` +"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"   Expected: No book is selected. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1206,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `select`, `select x` (where x is larger than the list size) +"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1208,"author":{"gitID":"-"},"content":"// end::manualtestAddEditHelpSelect[]"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an account"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":". Adding an account"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":".. Prerequisites: The account with that specific username must not be added in the first place or else the account cannot be added."},{"lineNumber":1215,"author":{"gitID":"-"},"content":".. Test case: `addAccount n/Tiong Ley u/tiongley p/tiongley123 m/A0123456B l/1` +"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"   Expected: Account with usename \"tiongley\" is added to the account database. Timestamp in the status bar is updated."},{"lineNumber":1217,"author":{"gitID":"-"},"content":".. Test case: `addAccount n/Johnny Marconi u/tiongley p/tiongley123 m/A0123456C l/1` +"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"   Expected: No account is added. Error details shown in the status message. An error of \"This account already exists in the system\" will be shown."},{"lineNumber":1219,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `addAcCount`, `addAccount 1` , `addAccount tiongley` +"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an account"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":". Deleting an account"},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":".. Prerequisites: The account with that specific username must already exist in the first place or else the account cannot be deleted."},{"lineNumber":1227,"author":{"gitID":"-"},"content":".. Test case: `deleteAccount tiongley` +"},{"lineNumber":1228,"author":{"gitID":"-"},"content":"   Expected: Account with usename \"tiongley\" is deleted from the account database. Timestamp in the status bar is updated."},{"lineNumber":1229,"author":{"gitID":"-"},"content":".. Test case: `deleteAccount` +"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"   Expected: No account is deleted. Error details shown in the status message. An error of \"Account does not exist\" will be shown."},{"lineNumber":1231,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `deleteAcCount tiongley`, `deleteAccount  `  +"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exit"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":". Exiting the programme"},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"-"},"content":".. Prerequisites: The application programme must be opened."},{"lineNumber":1240,"author":{"gitID":"-"},"content":".. Test case: `exit` +"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"   Expected: The application programme will close."},{"lineNumber":1242,"author":{"gitID":"-"},"content":".. Test case: `exit 123` +"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"   Expected: The application will close."},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":". Undo the previous command"},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":".. Prerequisites: An undoable command (such as add, delete, edit) must have been executed before using the \u0027undo\u0027 command."},{"lineNumber":1250,"author":{"gitID":"-"},"content":".. Test case: `deleteAccount tiongley` followed by `undo`"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"   Expected: Account with usename \"tiongley\" will be added back to the account database. Timestamp in the status bar is updated."},{"lineNumber":1252,"author":{"gitID":"-"},"content":".. Test case: (Given that no command was executed before this) `undo` +"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"   Expected: Nothing happens. Error details shown in the status message. An error of \"No more commands to undo!\" will be shown."},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redo"},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"-"},"content":". Redo the previous command that has been undone"},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":".. Prerequisites: An undoable command (such as add, delete, edit) must have been undone by the \"undo\" command before using the \u0027redo\u0027 command."},{"lineNumber":1261,"author":{"gitID":"-"},"content":".. Test case: `deleteAccount tiongley` followed by `undo` followed by `redo`"},{"lineNumber":1262,"author":{"gitID":"-"},"content":"   Expected: Account with username \"tiongley\" will be deleted from the account database. Timestamp in the status bar is updated."},{"lineNumber":1263,"author":{"gitID":"-"},"content":".. Test case: (Given that no undoable command was undone before this) `redo` +"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"   Expected: Nothing happens. Error details shown in the status message. An error of \"No more commands to redo!\" will be shown."},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Borrowing a book"},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":". Borrowing a book while all books are listed"},{"lineNumber":1269,"author":{"gitID":"-"},"content":""},{"lineNumber":1270,"author":{"gitID":"-"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":1271,"author":{"gitID":"-"},"content":".. Test case: `borrow 1` +"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"   Expected: First book will be borrowed from the list, given that it is available. Details of the borrowed book will be shown in the status message."},{"lineNumber":1273,"author":{"gitID":"-"},"content":".. Test case: `borrow 0` +"},{"lineNumber":1274,"author":{"gitID":"-"},"content":"   Expected: No book is borrowed. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1275,"author":{"gitID":"-"},"content":"  .. Other incorrect borrow commands to try: `borrow`, `borrow x`(where x is larger than list size or not an integer), `borrow [valid index]`(where the book is not available)"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"  Expected: Similar to previous."},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Returning a book"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":". Returning a book while all books are listed"},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":1283,"author":{"gitID":"-"},"content":".. Test case: `return 1` +"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"   Expected: First book will be returned from the list, given that it is borrowed or reserved. Details of the returned book will be shown in the status message."},{"lineNumber":1285,"author":{"gitID":"-"},"content":".. Test case: `return 0` +"},{"lineNumber":1286,"author":{"gitID":"-"},"content":"   Expected: No book is returned. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1287,"author":{"gitID":"-"},"content":"  .. Other incorrect return commands to try: `return`, `return x`(where x is larger than list size or not an integer), `return [valid index]`(where the book is available)"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"  Expected: Similar to previous."},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Reserving a book"},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":". Reserving a book while all books are listed"},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":".. Prerequisites: List all books using the `list` command. Multiple books in the list."},{"lineNumber":1295,"author":{"gitID":"-"},"content":".. Test case: `reserve 1` +"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"   Expected: First book will be reserved from the list, given that it is borrowed. Details of the reserved book will be shown in the status message."},{"lineNumber":1297,"author":{"gitID":"-"},"content":".. Test case: `reserve 0` +"},{"lineNumber":1298,"author":{"gitID":"-"},"content":"   Expected: No book is reserved. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1299,"author":{"gitID":"-"},"content":"  .. Other incorrect reserve commands to try: `reserve`, `reserve x`(where x is larger than list size or not an integer), `reserve [valid index]`(where the book is not borrowed)"},{"lineNumber":1300,"author":{"gitID":"-"},"content":"  Expected: Similar to previous."},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"victortardieu"},"content":"// tag::manualtestclearaclearhistory[]"},{"lineNumber":1303,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d\u003d Clearing the list of accounts"},{"lineNumber":1304,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1305,"author":{"gitID":"victortardieu"},"content":". Clear all accounts"},{"lineNumber":1306,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1307,"author":{"gitID":"victortardieu"},"content":".. Prerequisites: There is at least one account in the list of accounts"},{"lineNumber":1308,"author":{"gitID":"victortardieu"},"content":".. Test Case: `cleara` +"},{"lineNumber":1309,"author":{"gitID":"victortardieu"},"content":"   Expected: All the accounts present in the list of accounts are erased. The message \"AccountList has been cleared, and you are logged out!\" is displayed in the result display."},{"lineNumber":1310,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1311,"author":{"gitID":"victortardieu"},"content":". Clear all accounts from empty list"},{"lineNumber":1312,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1313,"author":{"gitID":"victortardieu"},"content":".. Prerequisites: No accounts have been entered in the list of accounts"},{"lineNumber":1314,"author":{"gitID":"victortardieu"},"content":".. Test Case: `cleara` +"},{"lineNumber":1315,"author":{"gitID":"victortardieu"},"content":"   Expected: The empty list of account will be replaced by another empty list of accounts. The message \"AccountList has been cleared, and you are logged out!\" is displayed in the result display."},{"lineNumber":1316,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1317,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d\u003d Clearing Catalogue"},{"lineNumber":1318,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1319,"author":{"gitID":"victortardieu"},"content":". Clear all books from Catalogue"},{"lineNumber":1320,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1321,"author":{"gitID":"victortardieu"},"content":".. Prerequisites: There is at least one book in Catalogue"},{"lineNumber":1322,"author":{"gitID":"victortardieu"},"content":".. Test Case: `clear` +"},{"lineNumber":1323,"author":{"gitID":"victortardieu"},"content":"   Expected: All the books present in Catalogue are erased. The message \"Catalogue has been cleared!\" is displayed in the result display."},{"lineNumber":1324,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1325,"author":{"gitID":"victortardieu"},"content":". Clear all books from empty Catalogue"},{"lineNumber":1326,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1327,"author":{"gitID":"victortardieu"},"content":".. Prerequisites: No book have been entered in Catalogue"},{"lineNumber":1328,"author":{"gitID":"victortardieu"},"content":".. Test Case: `clear` +"},{"lineNumber":1329,"author":{"gitID":"victortardieu"},"content":"   Expected: The empty Catalogue will be replaced by another empty Catalogue. The message \"Catalogue has been cleared!\" is displayed in the result display."},{"lineNumber":1330,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1331,"author":{"gitID":"victortardieu"},"content":"\u003d\u003d\u003d Getting the history of entered commands"},{"lineNumber":1332,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1333,"author":{"gitID":"victortardieu"},"content":". Get the history"},{"lineNumber":1334,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1335,"author":{"gitID":"victortardieu"},"content":".. Prerequisites: At least one command has been entered"},{"lineNumber":1336,"author":{"gitID":"victortardieu"},"content":".. Test Case: `history` +"},{"lineNumber":1337,"author":{"gitID":"victortardieu"},"content":"   Expected: All the commands previously entered are shown from earliest to oldest. The message \"Entered commands (from most recent to earliest) is displayed in the result display."},{"lineNumber":1338,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1339,"author":{"gitID":"victortardieu"},"content":". Get the history without any entered commands"},{"lineNumber":1340,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":1341,"author":{"gitID":"victortardieu"},"content":".. Prerequisites: No commands have been typed in"},{"lineNumber":1342,"author":{"gitID":"victortardieu"},"content":".. Test Case: `history` +"},{"lineNumber":1343,"author":{"gitID":"victortardieu"},"content":"   Expected: No commands are shown. The message \"You have not yet entered any commands.\" is displayed in the result display."},{"lineNumber":1344,"author":{"gitID":"victortardieu"},"content":"// end::manualtestclearaclearhistory[]"}],"authorContributionMap":{"khiayi":1,"victortardieu":122,"-":1221}},{"path":"src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"public class LoginCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"    private LoginCommandParser parser \u003d new LoginCommandParser();"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        LoginCommand expectedFindCommand \u003d"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"            new LoginCommand(\"admin\", \"admin\");"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"        assertParseSuccess(parser, \"admin admin\", expectedFindCommand);"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        assertParseSuccess(parser, \" \\n admin \\n \\t admin  \\t\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":30}},{"path":"src/test/java/seedu/address/logic/parser/DeleteAccountCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.commands.DeleteAccountCommand;"},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":" */"},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":"public class DeleteAccountCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"    private DeleteAccountCommandParser parser \u003d new DeleteAccountCommandParser();"},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAccountCommand"},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":"                .MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":29,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":29}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_XVI;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_YOU;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVAIL_DESC_XVI;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AVAIL_DESC_YOU;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AVAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ISBN_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_XVI;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ISBN_DESC_YOU;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DYSTOPIA;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FICTION;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_XVI;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_XVI;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_YOU;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVAIL_XVI;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVAIL_YOU;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_XVI;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_YOU;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DYSTOPIA;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FICTION;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_XVI;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditBookDescriptor;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditBookDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_TITLE_XVI, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + TITLE_DESC_XVI, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + TITLE_DESC_XVI, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"victortardieu"},"content":"        assertParseFailure(parser, \"1 z/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_TITLE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_AUTHOR_DESC, Author.MESSAGE_AUTHOR_CONSTRAINTS); // invalid author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ISBN_DESC, Isbn.MESSAGE_ISBN_CONSTRAINTS); // invalid isbn"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_AVAIL_DESC, Avail.MESSAGE_AVAIL_CONSTRAINTS); // invalid avail"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid isbn followed by valid avail"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ISBN_DESC + AVAIL_DESC_XVI, Isbn.MESSAGE_ISBN_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // valid isbn followed by invalid isbn. The test case for invalid isbn followed by valid isbn"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + ISBN_DESC_YOU + INVALID_ISBN_DESC, Isbn.MESSAGE_ISBN_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Book} being edited,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_DYSTOPIA + TAG_DESC_FICTION + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_DYSTOPIA + TAG_EMPTY + TAG_DESC_FICTION, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_DYSTOPIA + TAG_DESC_FICTION, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + VALID_AUTHOR_XVI"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                + INVALID_AVAIL_DESC + VALID_ISBN_XVI,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_BOOK;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_XVI + AUTHOR_DESC_XVI"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            + ISBN_DESC_YOU + TAG_DESC_FICTION"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            + AVAIL_DESC_XVI + TAG_DESC_DYSTOPIA;"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_TITLE_XVI)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            .withAuthor(VALID_AUTHOR_XVI)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            .withIsbn(VALID_ISBN_YOU).withAvail(VALID_AVAIL_XVI)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_FICTION, VALID_TAG_DYSTOPIA).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_BOOK;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + ISBN_DESC_YOU + AVAIL_DESC_XVI;"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_YOU)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            .withAvail(VALID_AVAIL_XVI).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_BOOK;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_XVI;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_TITLE_XVI).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // isbn"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ISBN_DESC_XVI;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_XVI).build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // avail"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + AVAIL_DESC_XVI;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditBookDescriptorBuilder().withAvail(VALID_AVAIL_XVI).build();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_XVI;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_XVI).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_DYSTOPIA;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditBookDescriptorBuilder().withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_BOOK;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_XVI + ISBN_DESC_XVI + AVAIL_DESC_XVI"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            + TAG_DESC_DYSTOPIA + AUTHOR_DESC_XVI + ISBN_DESC_XVI"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            + AVAIL_DESC_XVI + TAG_DESC_DYSTOPIA + AUTHOR_DESC_YOU"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            + ISBN_DESC_YOU + AVAIL_DESC_YOU + TAG_DESC_FICTION;"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder()"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            .withAuthor(VALID_AUTHOR_YOU).withIsbn(VALID_ISBN_YOU)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            .withAvail(VALID_AVAIL_YOU).withTags(VALID_TAG_DYSTOPIA, VALID_TAG_FICTION)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_BOOK;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_ISBN_DESC + ISBN_DESC_YOU;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withIsbn(VALID_ISBN_YOU).build();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_YOU + AVAIL_DESC_YOU + INVALID_ISBN_DESC"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            + ISBN_DESC_YOU;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_YOU)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            .withIsbn(VALID_ISBN_YOU).withAvail(VALID_AVAIL_YOU)"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_BOOK;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTags().build();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"victortardieu":1,"-":216}},{"path":"src/test/java/seedu/address/logic/parser/BorrowCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.commands.BorrowCommand;"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":" * outside of the BorrowCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":" * same path through the BorrowCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"public class BorrowCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":"    private BorrowCommandParser parser \u003d new BorrowCommandParser();"},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":"    public void parse_validArgs_returnsBorrowCommand() {"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":"        assertParseSuccess(parser, \"1\", new BorrowCommand(INDEX_FIRST_BOOK));"},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, BorrowCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"LeKhangTai"},"content":"}"}],"authorContributionMap":{"-":1,"LeKhangTai":32}},{"path":"src/test/java/seedu/address/logic/commands/LoginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"public class LoginCommandTest {"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        LoginCommand loginStudentCommand \u003d new LoginCommand(\"student\", \"student\");"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"        LoginCommand loginAdminCommand \u003d new LoginCommand(\"admin\", \"admin\");"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(loginStudentCommand.equals(loginStudentCommand));"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"        LoginCommand loginStudentCommandCopy \u003d new LoginCommand(\"student\", \"student\");"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(loginStudentCommand.equals(loginStudentCommandCopy));"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(loginStudentCommand.equals(1));"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(loginStudentCommand.equals(null));"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"        // different person -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(loginStudentCommand.equals(loginAdminCommand));"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"    public void constructor_nullUsername_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"        new LoginCommand(null, \"admin\");"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"    public void constructor_nullPassword_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"        new LoginCommand(\"admin\", null);"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"    public void execute_loginAsStudent_loginSuccessful() throws Exception {"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"        Account student \u003d Account.createDefaultStudentAccount();"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"        model.addAccount(student);"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"        LoginCommand studentLogin \u003d new LoginCommand(\"student\", \"student\");"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"        studentLogin.setData(model, null, null);"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"        CommandResult commandResult \u003d studentLogin.execute();"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":"        assertEquals(LoginCommand.MESSAGE_LOGGED_IN_AS_STUTENT, commandResult.feedbackToUser);"},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"        assertEquals(model.getPrivilegeLevel(), Model.PRIVILEGE_LEVEL_STUDENT);"},{"lineNumber":66,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":68,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"QiuHaohao"},"content":"    public void execute_loginAsLibrarian_loginSuccessful() {"},{"lineNumber":70,"author":{"gitID":"QiuHaohao"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":71,"author":{"gitID":"QiuHaohao"},"content":"        LoginCommand studentLogin \u003d new LoginCommand(\"admin\", \"admin\");"},{"lineNumber":72,"author":{"gitID":"QiuHaohao"},"content":"        studentLogin.setData(model, null, null);"},{"lineNumber":73,"author":{"gitID":"QiuHaohao"},"content":"        CommandResult commandResult \u003d studentLogin.execute();"},{"lineNumber":74,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":75,"author":{"gitID":"QiuHaohao"},"content":"        assertEquals(LoginCommand.MESSAGE_LOGGED_IN_AS_LIBRARIAN, commandResult.feedbackToUser);"},{"lineNumber":76,"author":{"gitID":"QiuHaohao"},"content":"        assertEquals(model.getPrivilegeLevel(), Model.PRIVILEGE_LEVEL_LIBRARIAN);"},{"lineNumber":77,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":78}},{"path":"src/test/java/seedu/address/logic/parser/ReserveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.commands.ReserveCommand;"},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":" * outside of the BorrowCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":" * same path through the BorrowCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":" */"},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":"public class ReserveCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"    private ReserveCommandParser parser \u003d new ReserveCommandParser();"},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReserveCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":27}},{"path":"src/test/java/seedu/address/logic/parser/ReturnCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.commands.ReturnCommand;"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":" * outside of the BorrowCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":" * same path through the BorrowCommand, and therefore we test only one of them."},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"public class ReturnCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"    private ReturnCommandParser parser \u003d new ReturnCommandParser();"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"    public void parse_validArgs_returnsReturnCommand() {"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":"        assertParseSuccess(parser, \"1\", new ReturnCommand(INDEX_FIRST_BOOK));"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReturnCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":"}"}],"authorContributionMap":{"-":1,"LeKhangTai":30}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Catalogue;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.book.TitleContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditBookDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_TITLE_XVI \u003d \"XVI\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_TITLE_YOU \u003d \"You\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_ISBN_XVI \u003d \"9780142417713\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_ISBN_YOU \u003d \"9781476785592\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_AVAIL_XVI \u003d \"Available\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_AVAIL_YOU \u003d \"Borrowed\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_AUTHOR_XVI \u003d \"Julia Karr\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_AUTHOR_YOU \u003d \"Caroline Kepnes\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_DYSTOPIA \u003d \"dystopia\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FICTION \u003d \"fiction\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String TITLE_DESC_XVI \u003d \" \" + PREFIX_TITLE + VALID_TITLE_XVI;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String TITLE_DESC_YOU \u003d \" \" + PREFIX_TITLE + VALID_TITLE_YOU;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String ISBN_DESC_XVI \u003d \" \" + PREFIX_ISBN + VALID_ISBN_XVI;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String ISBN_DESC_YOU \u003d \" \" + PREFIX_ISBN + VALID_ISBN_YOU;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String AVAIL_DESC_XVI \u003d \" \" + PREFIX_AVAIL + VALID_AVAIL_XVI;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String AVAIL_DESC_YOU \u003d \" \" + PREFIX_AVAIL + VALID_AVAIL_YOU;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String AUTHOR_DESC_XVI \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_XVI;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String AUTHOR_DESC_YOU \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_YOU;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_DYSTOPIA \u003d \" \" + PREFIX_TAG + VALID_TAG_DYSTOPIA;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FICTION \u003d \" \" + PREFIX_TAG + VALID_TAG_FICTION;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in titles"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String INVALID_AUTHOR_DESC \u003d \" \" + PREFIX_AUTHOR + \"^\"; // ^ not allowed for author"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String INVALID_ISBN_DESC \u003d \" \" + PREFIX_ISBN + \"978031606792a\"; // \u0027a\u0027 not allowed in isbns"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String INVALID_AVAIL_DESC \u003d \" \" + PREFIX_AVAIL + \"not sure\"; // must be as stated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditBookDescriptor DESC_XVI;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditBookDescriptor DESC_YOU;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        DESC_XVI \u003d new EditBookDescriptorBuilder().withName(VALID_TITLE_XVI).withAuthor(VALID_AUTHOR_XVI)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withIsbn(VALID_ISBN_XVI).withAvail(VALID_AVAIL_XVI)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        DESC_YOU \u003d new EditBookDescriptorBuilder().withName(VALID_TITLE_YOU).withAuthor(VALID_AUTHOR_YOU)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withIsbn(VALID_ISBN_YOU).withAvail(VALID_AVAIL_YOU)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_FICTION).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"victortardieu"},"content":"     * @param command"},{"lineNumber":95,"author":{"gitID":"victortardieu"},"content":"     * @param actualList"},{"lineNumber":96,"author":{"gitID":"victortardieu"},"content":"     * @param expectedMessage"},{"lineNumber":97,"author":{"gitID":"victortardieu"},"content":"     * @param expectedList"},{"lineNumber":98,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"victortardieu"},"content":"    public static void assertCommandSuccess(Command command, UniqueAccountList actualList, String expectedMessage,"},{"lineNumber":100,"author":{"gitID":"victortardieu"},"content":"                                            UniqueAccountList expectedList) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":104,"author":{"gitID":"victortardieu"},"content":"            assertEquals(expectedList, actualList);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * - the catalogue and the filtered book list in the {@code actualModel} remain unchanged"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Catalogue expectedCatalogue \u003d new Catalogue(actualModel.getCatalogue());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookList());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertEquals(expectedCatalogue, actualModel.getCatalogue());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredBookList());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s catalogue."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static void showBookAtIndex(Model model, Index targetIndex) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d book.getTitle().fullTitle.split(\"\\\\s+\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        model.updateFilteredBookList(new TitleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredBookList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Deletes the first book in {@code model}\u0027s filtered list from {@code model}\u0027s catalogue."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static void deleteFirstBook(Model model) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Book firstBook \u003d model.getFilteredBookList().get(0);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            model.deleteBook(firstBook);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Book in filtered list must exist in model.\", pnfe);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"victortardieu":10,"-":165}},{"path":"src/test/java/seedu/address/logic/commands/AddAccountCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalAccounts;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":"import seedu.address.testutil.AccountBuilder;"},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":"public class AddAccountCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":"        model \u003d getTypicalAccountList();"},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":28,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"chantiongley"},"content":"    public void execute_newAccount_success() throws Exception {"},{"lineNumber":30,"author":{"gitID":"chantiongley"},"content":"        Account validAccount \u003d new AccountBuilder().build();"},{"lineNumber":31,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":32,"author":{"gitID":"chantiongley"},"content":"        Model expectedModel \u003d new ModelManager(model.getCatalogue(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"chantiongley"},"content":"        expectedModel.addAccount(validAccount);"},{"lineNumber":34,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":35,"author":{"gitID":"chantiongley"},"content":"        assertCommandSuccess(prepareCommand(validAccount, model), model,"},{"lineNumber":36,"author":{"gitID":"chantiongley"},"content":"            String.format(AddAccountCommand.MESSAGE_SUCCESS, validAccount), expectedModel);"},{"lineNumber":37,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":39,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"chantiongley"},"content":"    public void execute_duplicateAccount_throwsCommandException() {"},{"lineNumber":41,"author":{"gitID":"chantiongley"},"content":"        Account accountInList \u003d getTypicalAccounts().get(0);"},{"lineNumber":42,"author":{"gitID":"chantiongley"},"content":"        assertCommandFailure(prepareCommand(accountInList, model), model, AddAccountCommand.MESSAGE_DUPLICATE_ACCOUNT);"},{"lineNumber":43,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":45,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"chantiongley"},"content":"     * Generates a new {@code AddAccountCommand} which upon execution, adds {@code account} into the {@code model}."},{"lineNumber":47,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"chantiongley"},"content":"    private AddAccountCommand prepareCommand(Account account, Model model) {"},{"lineNumber":49,"author":{"gitID":"chantiongley"},"content":"        AddAccountCommand command \u003d new AddAccountCommand(account);"},{"lineNumber":50,"author":{"gitID":"chantiongley"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":51,"author":{"gitID":"chantiongley"},"content":"        return command;"},{"lineNumber":52,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":53}},{"path":"src/test/java/seedu/address/logic/commands/ClearAccountCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":"public class ClearAccountCommandTest {"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":"    public void execute_empty_accountList() throws DuplicateAccountException {"},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearAccountCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"    public void execute_nonEmptyAccountList_success() throws DuplicateAccountException {"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"        model \u003d getTypicalAccountList();"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearAccountCommand.MESSAGE_SUCCESS,"},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"            model);"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"    private ClearAccountCommand prepareCommand(Model model) throws DuplicateAccountException {"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"        ClearAccountCommand command \u003d new ClearAccountCommand();"},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"}"}],"authorContributionMap":{"victortardieu":30,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Catalogue;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCatalogue;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Credential;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor_nullBook_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelStubAcceptingBookAdded modelStub \u003d new ModelStubAcceptingBookAdded();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Book validBook \u003d new BookBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForBook(validBook, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBook), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validBook), modelStub.booksAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_duplicateBook_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateBookException();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Book validBook \u003d new BookBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getAddCommandForBook(validBook, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Book animal \u003d new BookBuilder().withTitle(\"Animal Farm\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Book bob \u003d new BookBuilder().withTitle(\"Bob\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAnimalCommand \u003d new AddCommand(animal);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(addAnimalCommand.equals(addAnimalCommand));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand addAnimalCommandCopy \u003d new AddCommand(animal);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAnimalCommand.equals(addAnimalCommandCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAnimalCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAnimalCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different book -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAnimalCommand.equals(addBobCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given book."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForBook(Book book, Model model) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(book);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public void addBook(Book book) throws DuplicateBookException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyCatalogue newData) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"victortardieu"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"victortardieu"},"content":"        public void resetAccount(UniqueAccountList newData) {"},{"lineNumber":115,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":116,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public ReadOnlyCatalogue getCatalogue() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public void deleteBook(Book target) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public void updateBook(Book target, Book editedBook) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public void returnBook(Book target, Book returnedBook) throws BookNotFoundException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public void borrowBook(Book target, Book borrowedBook) throws BookNotFoundException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public void reserveBook(Book target, Book reservedBook) throws BookNotFoundException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public ObservableList\u003cBook\u003e getFilteredBookList() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public UniqueAccountList getAccountList() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public PrivilegeLevel authenticate(Credential c) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void logout() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public void addAccount(Account account) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public void deleteAccount(Account account) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        public void updateAccount(Account account, Account editedAccount) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicateBookException when trying to add a book."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicateBookException extends ModelStub {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public void addBook(Book book) throws DuplicateBookException {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            throw new DuplicateBookException();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public ReadOnlyCatalogue getCatalogue() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return new Catalogue();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the book being added."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingBookAdded extends ModelStub {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        final ArrayList\u003cBook\u003e booksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public void addBook(Book book) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            requireNonNull(book);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            booksAdded.add(book);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public ReadOnlyCatalogue getCatalogue() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            return new Catalogue();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"victortardieu":6,"-":222}},{"path":"src/test/java/seedu/address/logic/commands/LogoutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"//import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"//import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"//import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"//import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"public class LogoutCommandTest {"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"        LogoutCommand logoutCommand1 \u003d new LogoutCommand();"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"        LogoutCommand logoutCommand2 \u003d new LogoutCommand();"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(logoutCommand1.equals(logoutCommand1));"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(logoutCommand1.equals(logoutCommand2));"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        // different types -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(logoutCommand1.equals(1));"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(logoutCommand1.equals(null));"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":34}},{"path":"src/test/java/seedu/address/logic/commands/DeleteAccountCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":"import static seedu.address.testutil.TypicalAccounts.HARRY;"},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":"import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalCatalogue;"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"public class DeleteAccountCommandTest {"},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"    private Model model \u003d new ModelManager(getTypicalCatalogue(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"    public void execute_foundUsername_success() throws Exception {"},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"        Model actualModel \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"        actualModel \u003d getTypicalAccountList();"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"        expectedModel \u003d getTypicalAccountList();"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":"        expectedModel.deleteAccount(HARRY);"},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"        assertCommandSuccess(prepareCommand(\"harry123\", actualModel), actualModel,"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"                String.format(DeleteAccountCommand.MESSAGE_DELETE_ACCOUNT_SUCCESS, HARRY), expectedModel);"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"    public void execute_usernameNotFound_failure()  throws Exception {"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"        model \u003d getTypicalAccountList();"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"        assertCommandFailure(prepareCommand(\"harry1234\", model), model,"},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"                \"Account does not exist\");"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"     * Returns a {@code DeleteAccountCommand} with the parameter {@code username}."},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":"    private DeleteAccountCommand prepareCommand(String username, Model model) {"},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"        DeleteAccountCommand deleteAccountCommand \u003d new DeleteAccountCommand(username);"},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":"        deleteAccountCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"        return deleteAccountCommand;"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":"}"}],"authorContributionMap":{"victortardieu":52}},{"path":"src/test/java/seedu/address/logic/commands/AddAccountCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.Catalogue;"},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.ReadOnlyCatalogue;"},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Credential;"},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":28,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":29,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":30,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":31,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":32,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":33,"author":{"gitID":"chantiongley"},"content":"import seedu.address.testutil.AccountBuilder;"},{"lineNumber":34,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":35,"author":{"gitID":"chantiongley"},"content":"public class AddAccountCommandTest {"},{"lineNumber":36,"author":{"gitID":"chantiongley"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"chantiongley"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":39,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"chantiongley"},"content":"    public void constructor_nullAccount_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"chantiongley"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"chantiongley"},"content":"        new AddAccountCommand(null);"},{"lineNumber":43,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":45,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"chantiongley"},"content":"    public void execute_accountAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"chantiongley"},"content":"        ModelStubAcceptingAccountAdded modelStub \u003d new ModelStubAcceptingAccountAdded();"},{"lineNumber":48,"author":{"gitID":"chantiongley"},"content":"        Account validAccount \u003d new AccountBuilder().build();"},{"lineNumber":49,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":50,"author":{"gitID":"chantiongley"},"content":"        CommandResult commandResult \u003d getAddCommandForAccount(validAccount, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":52,"author":{"gitID":"chantiongley"},"content":"        assertEquals(String.format(AddAccountCommand.MESSAGE_SUCCESS, validAccount), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"chantiongley"},"content":"        assertEquals(Arrays.asList(validAccount), modelStub.accountsAdded);"},{"lineNumber":54,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":56,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"chantiongley"},"content":"    public void execute_duplicateAccount_throwsCommandException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"chantiongley"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAccountException();"},{"lineNumber":59,"author":{"gitID":"chantiongley"},"content":"        Account validAccount \u003d new AccountBuilder().build();"},{"lineNumber":60,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":61,"author":{"gitID":"chantiongley"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"chantiongley"},"content":"        thrown.expectMessage(AddAccountCommand.MESSAGE_DUPLICATE_ACCOUNT);"},{"lineNumber":63,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":64,"author":{"gitID":"chantiongley"},"content":"        getAddCommandForAccount(validAccount, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":67,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"chantiongley"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"chantiongley"},"content":"        Account alice \u003d new AccountBuilder().withName(\"Alice\").build();"},{"lineNumber":70,"author":{"gitID":"chantiongley"},"content":"        Account bob \u003d new AccountBuilder().withName(\"Bob\").build();"},{"lineNumber":71,"author":{"gitID":"chantiongley"},"content":"        AddAccountCommand addAliceCommand \u003d new AddAccountCommand(alice);"},{"lineNumber":72,"author":{"gitID":"chantiongley"},"content":"        AddAccountCommand addBobCommand \u003d new AddAccountCommand(bob);"},{"lineNumber":73,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":74,"author":{"gitID":"chantiongley"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"chantiongley"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":76,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":77,"author":{"gitID":"chantiongley"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"chantiongley"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":80,"author":{"gitID":"chantiongley"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"chantiongley"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":83,"author":{"gitID":"chantiongley"},"content":"        // different account -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"chantiongley"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":87,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"chantiongley"},"content":"     * Generates a new AddAccountCommand with the details of the given account."},{"lineNumber":89,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"chantiongley"},"content":"    private AddAccountCommand getAddCommandForAccount(Account account, Model model) {"},{"lineNumber":91,"author":{"gitID":"chantiongley"},"content":"        AddAccountCommand command \u003d new AddAccountCommand(account);"},{"lineNumber":92,"author":{"gitID":"chantiongley"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"chantiongley"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":96,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"chantiongley"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"chantiongley"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"chantiongley"},"content":"        public void addBook(Book book) throws DuplicateBookException {"},{"lineNumber":102,"author":{"gitID":"chantiongley"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":105,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"chantiongley"},"content":"        public void resetData(ReadOnlyCatalogue newData) {"},{"lineNumber":107,"author":{"gitID":"chantiongley"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":110,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"chantiongley"},"content":"        public void resetAccount(UniqueAccountList newData) {"},{"lineNumber":112,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":113,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":115,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"chantiongley"},"content":"        public ReadOnlyCatalogue getCatalogue() {"},{"lineNumber":117,"author":{"gitID":"chantiongley"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"chantiongley"},"content":"            return null;"},{"lineNumber":119,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":121,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"chantiongley"},"content":"        public void deleteBook(Book target) {"},{"lineNumber":123,"author":{"gitID":"chantiongley"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":126,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"chantiongley"},"content":"        public void updateBook(Book target, Book editedBook) {"},{"lineNumber":128,"author":{"gitID":"chantiongley"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":131,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"chantiongley"},"content":"        public void returnBook(Book target, Book returnedBook) throws BookNotFoundException {"},{"lineNumber":133,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":135,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"chantiongley"},"content":"        public void borrowBook(Book target, Book borrowedBook) throws BookNotFoundException {"},{"lineNumber":137,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":138,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":140,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"chantiongley"},"content":"        public void reserveBook(Book target, Book reservedBook) throws BookNotFoundException {"},{"lineNumber":142,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":143,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":145,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"chantiongley"},"content":"        public ObservableList\u003cBook\u003e getFilteredBookList() {"},{"lineNumber":147,"author":{"gitID":"chantiongley"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"chantiongley"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":151,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"chantiongley"},"content":"        public UniqueAccountList getAccountList() {"},{"lineNumber":153,"author":{"gitID":"chantiongley"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"chantiongley"},"content":"            return null;"},{"lineNumber":155,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":157,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"chantiongley"},"content":"        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"},{"lineNumber":159,"author":{"gitID":"chantiongley"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":162,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"chantiongley"},"content":"        public PrivilegeLevel authenticate(Credential c) {"},{"lineNumber":164,"author":{"gitID":"chantiongley"},"content":"            return Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":165,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":167,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"chantiongley"},"content":"        public void logout() {"},{"lineNumber":169,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":170,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":172,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"chantiongley"},"content":"        public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":174,"author":{"gitID":"chantiongley"},"content":"            return Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":175,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":177,"author":{"gitID":"chantiongley"},"content":"        public void addAccount(Account account) throws DuplicateAccountException {"},{"lineNumber":178,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":179,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":181,"author":{"gitID":"chantiongley"},"content":"        public void deleteAccount(Account account) {"},{"lineNumber":182,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":183,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":185,"author":{"gitID":"chantiongley"},"content":"        public void updateAccount(Account account, Account editedAccount) {"},{"lineNumber":186,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":187,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":190,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"chantiongley"},"content":"     * A Model stub that always throw a DuplicateAccountException when trying to add a account."},{"lineNumber":192,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"chantiongley"},"content":"    private class ModelStubThrowingDuplicateAccountException extends ModelStub {"},{"lineNumber":194,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"chantiongley"},"content":"        public void addAccount(Account account) throws DuplicateAccountException {"},{"lineNumber":196,"author":{"gitID":"chantiongley"},"content":"            throw new DuplicateAccountException();"},{"lineNumber":197,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":199,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":201,"author":{"gitID":"chantiongley"},"content":"        public ReadOnlyCatalogue getCatalogue() {"},{"lineNumber":202,"author":{"gitID":"chantiongley"},"content":"            return new Catalogue();"},{"lineNumber":203,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":206,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"chantiongley"},"content":"     * A Model stub that always accept the account being added."},{"lineNumber":208,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"chantiongley"},"content":"    private class ModelStubAcceptingAccountAdded extends ModelStub {"},{"lineNumber":210,"author":{"gitID":"chantiongley"},"content":"        final ArrayList\u003cAccount\u003e accountsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":211,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":212,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"chantiongley"},"content":"        public void addAccount(Account account) {"},{"lineNumber":214,"author":{"gitID":"chantiongley"},"content":"            requireNonNull(account);"},{"lineNumber":215,"author":{"gitID":"chantiongley"},"content":"            accountsAdded.add(account);"},{"lineNumber":216,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":218,"author":{"gitID":"chantiongley"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"chantiongley"},"content":"        public ReadOnlyCatalogue getCatalogue() {"},{"lineNumber":220,"author":{"gitID":"chantiongley"},"content":"            return new Catalogue();"},{"lineNumber":221,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":224,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":224}},{"path":"src/test/java/seedu/address/logic/commands/ReserveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.model.book.Avail.RESERVED;"},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalCatalogue;"},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIFTH_BOOK;"},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_BOOK;"},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":31,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":32,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":33,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":34,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":35,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":37,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":38,"author":{"gitID":"chantiongley"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"chantiongley"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":40,"author":{"gitID":"chantiongley"},"content":" * {@code reserveCommand}."},{"lineNumber":41,"author":{"gitID":"chantiongley"},"content":" */"},{"lineNumber":42,"author":{"gitID":"chantiongley"},"content":"public class ReserveCommandTest {"},{"lineNumber":43,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":44,"author":{"gitID":"chantiongley"},"content":"    private Model model \u003d new ModelManager(getTypicalCatalogue(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":46,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"chantiongley"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"chantiongley"},"content":"        Book bookToReserve \u003d model.getFilteredBookList().get(INDEX_FOURTH_BOOK.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"chantiongley"},"content":"        Book reservedBook \u003d createReservedBook(bookToReserve);"},{"lineNumber":50,"author":{"gitID":"chantiongley"},"content":"        ReserveCommand reserveCommand \u003d prepareCommand(INDEX_FOURTH_BOOK);"},{"lineNumber":51,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":52,"author":{"gitID":"chantiongley"},"content":"        String expectedMessage \u003d String.format(reserveCommand.MESSAGE_RESERVE_BOOK_SUCCESS, bookToReserve);"},{"lineNumber":53,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":54,"author":{"gitID":"chantiongley"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getCatalogue(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"chantiongley"},"content":"        expectedModel.reserveBook(bookToReserve, reservedBook);"},{"lineNumber":56,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":57,"author":{"gitID":"chantiongley"},"content":"        assertCommandSuccess(reserveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":58,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":60,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"chantiongley"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":62,"author":{"gitID":"chantiongley"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"},{"lineNumber":63,"author":{"gitID":"chantiongley"},"content":"        ReserveCommand reserveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":64,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":65,"author":{"gitID":"chantiongley"},"content":"        assertCommandFailure(reserveCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":68,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"chantiongley"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":70,"author":{"gitID":"chantiongley"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":71,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":72,"author":{"gitID":"chantiongley"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"},{"lineNumber":73,"author":{"gitID":"chantiongley"},"content":"        // ensures that outOfBoundIndex is still in bounds of catalogue list"},{"lineNumber":74,"author":{"gitID":"chantiongley"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCatalogue().getBookList().size());"},{"lineNumber":75,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":76,"author":{"gitID":"chantiongley"},"content":"        ReserveCommand reserveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":77,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":78,"author":{"gitID":"chantiongley"},"content":"        assertCommandFailure(reserveCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":81,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"chantiongley"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":83,"author":{"gitID":"chantiongley"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":84,"author":{"gitID":"chantiongley"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":85,"author":{"gitID":"chantiongley"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":86,"author":{"gitID":"chantiongley"},"content":"        Book bookToReserve \u003d model.getFilteredBookList().get(INDEX_FIFTH_BOOK.getZeroBased());"},{"lineNumber":87,"author":{"gitID":"chantiongley"},"content":"        Book reservedBook \u003d createReservedBook(bookToReserve);"},{"lineNumber":88,"author":{"gitID":"chantiongley"},"content":"        ReserveCommand reserveCommand \u003d prepareCommand(INDEX_FIFTH_BOOK);"},{"lineNumber":89,"author":{"gitID":"chantiongley"},"content":"        Model expectedModel \u003d new ModelManager(model.getCatalogue(), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":91,"author":{"gitID":"chantiongley"},"content":"        // reserve -\u003e first book reserve"},{"lineNumber":92,"author":{"gitID":"chantiongley"},"content":"        reserveCommand.execute();"},{"lineNumber":93,"author":{"gitID":"chantiongley"},"content":"        undoRedoStack.push(reserveCommand);"},{"lineNumber":94,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":95,"author":{"gitID":"chantiongley"},"content":"        // undo -\u003e reverts catalogue back to previous state and filtered book list to show all books"},{"lineNumber":96,"author":{"gitID":"chantiongley"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":97,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":98,"author":{"gitID":"chantiongley"},"content":"        // redo -\u003e same first book reserved again"},{"lineNumber":99,"author":{"gitID":"chantiongley"},"content":"        expectedModel.returnBook(bookToReserve, reservedBook);"},{"lineNumber":100,"author":{"gitID":"chantiongley"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":101,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":103,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"chantiongley"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":105,"author":{"gitID":"chantiongley"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":106,"author":{"gitID":"chantiongley"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":107,"author":{"gitID":"chantiongley"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":108,"author":{"gitID":"chantiongley"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"},{"lineNumber":109,"author":{"gitID":"chantiongley"},"content":"        ReserveCommand reserveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":110,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":111,"author":{"gitID":"chantiongley"},"content":"        // execution failed -\u003e reserveCommand not pushed into undoRedoStack"},{"lineNumber":112,"author":{"gitID":"chantiongley"},"content":"        assertCommandFailure(reserveCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":114,"author":{"gitID":"chantiongley"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":115,"author":{"gitID":"chantiongley"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":116,"author":{"gitID":"chantiongley"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":117,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":119,"author":{"gitID":"chantiongley"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"chantiongley"},"content":"    public void equals() throws Exception {"},{"lineNumber":121,"author":{"gitID":"chantiongley"},"content":"        ReserveCommand reserveFirstCommand \u003d prepareCommand(INDEX_THIRD_BOOK);"},{"lineNumber":122,"author":{"gitID":"chantiongley"},"content":"        ReserveCommand reserveSecondCommand \u003d prepareCommand(INDEX_FOURTH_BOOK);"},{"lineNumber":123,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":124,"author":{"gitID":"chantiongley"},"content":"        // same object -\u003e returns true"},{"lineNumber":125,"author":{"gitID":"chantiongley"},"content":"        assertTrue(reserveFirstCommand.equals(reserveFirstCommand));"},{"lineNumber":126,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":127,"author":{"gitID":"chantiongley"},"content":"        // different types -\u003e returns false"},{"lineNumber":128,"author":{"gitID":"chantiongley"},"content":"        assertFalse(reserveFirstCommand.equals(1));"},{"lineNumber":129,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":130,"author":{"gitID":"chantiongley"},"content":"        // null -\u003e returns false"},{"lineNumber":131,"author":{"gitID":"chantiongley"},"content":"        assertFalse(reserveFirstCommand.equals(null));"},{"lineNumber":132,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":133,"author":{"gitID":"chantiongley"},"content":"        // different book -\u003e returns false"},{"lineNumber":134,"author":{"gitID":"chantiongley"},"content":"        assertFalse(reserveFirstCommand.equals(reserveSecondCommand));"},{"lineNumber":135,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":137,"author":{"gitID":"chantiongley"},"content":"    private ReserveCommand prepareCommand(Index index) {"},{"lineNumber":138,"author":{"gitID":"chantiongley"},"content":"        ReserveCommand reserveCommand \u003d new ReserveCommand(index);"},{"lineNumber":139,"author":{"gitID":"chantiongley"},"content":"        reserveCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"chantiongley"},"content":"        return reserveCommand;"},{"lineNumber":141,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":143,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"chantiongley"},"content":"     * @param bookToReserve"},{"lineNumber":145,"author":{"gitID":"chantiongley"},"content":"     * @return duplicated book with Reserved Availability"},{"lineNumber":146,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"chantiongley"},"content":"    public Book createReservedBook(Book bookToReserve) {"},{"lineNumber":148,"author":{"gitID":"chantiongley"},"content":"        assert bookToReserve !\u003d null;"},{"lineNumber":149,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":150,"author":{"gitID":"chantiongley"},"content":"        Title updatedTitle \u003d bookToReserve.getTitle();"},{"lineNumber":151,"author":{"gitID":"chantiongley"},"content":"        Isbn updatedIsbn \u003d bookToReserve.getIsbn();"},{"lineNumber":152,"author":{"gitID":"chantiongley"},"content":"        Avail updatedAvail \u003d new Avail(RESERVED);"},{"lineNumber":153,"author":{"gitID":"chantiongley"},"content":"        Author updatedAuthor \u003d bookToReserve.getAuthor();"},{"lineNumber":154,"author":{"gitID":"chantiongley"},"content":"        Set\u003cTag\u003e updatedTags \u003d bookToReserve.getTags();"},{"lineNumber":155,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":156,"author":{"gitID":"chantiongley"},"content":"        return new Book(updatedTitle, updatedAuthor, updatedIsbn, updatedAvail, updatedTags);"},{"lineNumber":157,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":159,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":159}},{"path":"src/test/java/seedu/address/model/book/AvailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AvailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Avail(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAvail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAvail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Avail(invalidAvail));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":"    //@@author khiayi"},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"    public void isValidAvail() {"},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"        // null avail"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Avail.isValidAvail(null));"},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"        // blank avail"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        assertFalse(Avail.isValidAvail(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        assertFalse(Avail.isValidAvail(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"        // valid avail"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"        assertTrue(Avail.isValidAvail(\"Reserved\"));  // Reserved"},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"        assertTrue(Avail.isValidAvail(\"Borrowed\"));  // Borrowed"},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"        assertTrue(Avail.isValidAvail(\"Available\"));  // Available"},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":"}"}],"authorContributionMap":{"khiayi":16,"-":22}},{"path":"src/test/java/seedu/address/model/book/AuthorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AuthorTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Author(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAuthor_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAuthor \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Author(invalidAuthor));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":"    //@@author khiayi"},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"    public void isValidAuthor() {"},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"        // null name"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Author.isValidAuthor(null));"},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"        // invalid name"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        assertFalse(Author.isValidAuthor(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        assertFalse(Author.isValidAuthor(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"        assertFalse(Author.isValidAuthor(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"        assertFalse(Author.isValidAuthor(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"        // valid name"},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"        assertTrue(Author.isValidAuthor(\"peter jack\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"        assertTrue(Author.isValidAuthor(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":"        assertTrue(Author.isValidAuthor(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":"        assertTrue(Author.isValidAuthor(\"Capital Tan\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":"        assertTrue(Author.isValidAuthor(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":"}"}],"authorContributionMap":{"khiayi":20,"-":22}},{"path":"src/test/java/seedu/address/model/book/TitleContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.BookBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TitleContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        TitleContainsKeywordsPredicate firstPredicateCopy;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        firstPredicateCopy \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different book -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":"    //@@author khiayi"},{"lineNumber":43,"author":{"gitID":"khiayi"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"khiayi"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":45,"author":{"gitID":"khiayi"},"content":"        // One keyword"},{"lineNumber":46,"author":{"gitID":"khiayi"},"content":"        TitleContainsKeywordsPredicate predicate;"},{"lineNumber":47,"author":{"gitID":"khiayi"},"content":"        predicate \u003d new TitleContainsKeywordsPredicate(Collections.singletonList(\"Animal\"));"},{"lineNumber":48,"author":{"gitID":"khiayi"},"content":"        assertTrue(predicate.test(new BookBuilder().withTitle(\"Animal Breaking\").build()));"},{"lineNumber":49,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":50,"author":{"gitID":"khiayi"},"content":"        // Multiple keywords"},{"lineNumber":51,"author":{"gitID":"khiayi"},"content":"        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Animal\", \"Breaking\"));"},{"lineNumber":52,"author":{"gitID":"khiayi"},"content":"        assertTrue(predicate.test(new BookBuilder().withTitle(\"Animal Breaking\").build()));"},{"lineNumber":53,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":54,"author":{"gitID":"khiayi"},"content":"        // Only one matching keyword"},{"lineNumber":55,"author":{"gitID":"khiayi"},"content":"        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Breaking\", \"Carol\"));"},{"lineNumber":56,"author":{"gitID":"khiayi"},"content":"        assertTrue(predicate.test(new BookBuilder().withTitle(\"Animal Carol\").build()));"},{"lineNumber":57,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":58,"author":{"gitID":"khiayi"},"content":"        // Mixed-case keywords"},{"lineNumber":59,"author":{"gitID":"khiayi"},"content":"        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"aNimal\", \"bREAKING\"));"},{"lineNumber":60,"author":{"gitID":"khiayi"},"content":"        assertTrue(predicate.test(new BookBuilder().withTitle(\"Animal Breaking\").build()));"},{"lineNumber":61,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":63,"author":{"gitID":"khiayi"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"khiayi"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":65,"author":{"gitID":"khiayi"},"content":"        // Zero keywords"},{"lineNumber":66,"author":{"gitID":"khiayi"},"content":"        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"        assertFalse(predicate.test(new BookBuilder().withTitle(\"Animal\").build()));"},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":"        // Non-matching keyword"},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":"        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":"        assertFalse(predicate.test(new BookBuilder().withTitle(\"Animal Breaking\").build()));"},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":"        // Keywords match isbn, avail and address, but does not match name"},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"9780736692427\", \"Borrowed\", \"Main\", \"Street\"));"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":"        assertFalse(predicate.test(new BookBuilder().withTitle(\"Animal\").withIsbn(\"9780736692427\")"},{"lineNumber":76,"author":{"gitID":"khiayi"},"content":"            .withAvail(\"Borrowed\").withAuthor(\"Main Street\").build()));"},{"lineNumber":77,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"khiayi"},"content":"}"}],"authorContributionMap":{"khiayi":37,"-":41}},{"path":"src/test/java/seedu/address/model/book/IsbnTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class IsbnTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Isbn(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidIsbn_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidIsbn \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Isbn(invalidIsbn));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":"    //@@author khiayi"},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"    public void isValidIsbn() {"},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"        // null isbn"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Isbn.isValidIsbn(null));"},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"        // invalid isbn numbers"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        assertFalse(Isbn.isValidIsbn(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        assertFalse(Isbn.isValidIsbn(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"        assertFalse(Isbn.isValidIsbn(\"91\")); // less than 13 numbers"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"        assertFalse(Isbn.isValidIsbn(\"phone\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"        assertFalse(Isbn.isValidIsbn(\"978073669242a\")); // alphabets within digits"},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"        assertFalse(Isbn.isValidIsbn(\"9780736 692427\")); // spaces within digits"},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"        assertFalse(Isbn.isValidIsbn(\"97807366924271\")); // more than 13 numbers"},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":"        // valid isbn numbers"},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":"        assertTrue(Isbn.isValidIsbn(\"9780736692427\")); // 13 isbn numbers"},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":"}"}],"authorContributionMap":{"khiayi":19,"-":22}},{"path":"src/test/java/seedu/address/model/book/TitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class TitleTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidTitle_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidTitle \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":"    //@@author khiayi"},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"    public void isValidTitle() {"},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"        // null name"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"        // invalid name"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        assertFalse(Title.isValidTitle(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        assertFalse(Title.isValidTitle(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"        assertFalse(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"        // valid name"},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":"        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":"        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":"        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":"}"}],"authorContributionMap":{"khiayi":20,"-":22}},{"path":"src/test/java/seedu/address/logic/commands/ReturnCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.model.book.Avail.AVAILABLE;"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalCatalogue;"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":32,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":34,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":35,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":36,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":37,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":38,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"LeKhangTai"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":40,"author":{"gitID":"LeKhangTai"},"content":" * {@code ReturnCommand}."},{"lineNumber":41,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":42,"author":{"gitID":"LeKhangTai"},"content":"public class ReturnCommandTest {"},{"lineNumber":43,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":44,"author":{"gitID":"LeKhangTai"},"content":"    private Model model \u003d new ModelManager(getTypicalCatalogue(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":46,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"LeKhangTai"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"LeKhangTai"},"content":"        Book bookToReturn \u003d model.getFilteredBookList().get(INDEX_THIRD_BOOK.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"LeKhangTai"},"content":"        Book returnedBook \u003d createReturnedBook(bookToReturn);"},{"lineNumber":50,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnCommand \u003d prepareCommand(INDEX_THIRD_BOOK);"},{"lineNumber":51,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":52,"author":{"gitID":"LeKhangTai"},"content":"        String expectedMessage \u003d String.format(ReturnCommand.MESSAGE_RETURN_BOOK_SUCCESS, bookToReturn);"},{"lineNumber":53,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":54,"author":{"gitID":"LeKhangTai"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getCatalogue(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"LeKhangTai"},"content":"        expectedModel.returnBook(bookToReturn, returnedBook);"},{"lineNumber":56,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":57,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandSuccess(returnCommand, model, expectedMessage, expectedModel);"},{"lineNumber":58,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":60,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"LeKhangTai"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":62,"author":{"gitID":"LeKhangTai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"},{"lineNumber":63,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":64,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":65,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(returnCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":68,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"LeKhangTai"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":70,"author":{"gitID":"LeKhangTai"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":71,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":72,"author":{"gitID":"LeKhangTai"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"},{"lineNumber":73,"author":{"gitID":"LeKhangTai"},"content":"        // ensures that outOfBoundIndex is still in bounds of catalogue list"},{"lineNumber":74,"author":{"gitID":"LeKhangTai"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCatalogue().getBookList().size());"},{"lineNumber":75,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":76,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":77,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":78,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(returnCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":81,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"LeKhangTai"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":83,"author":{"gitID":"LeKhangTai"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":84,"author":{"gitID":"LeKhangTai"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":85,"author":{"gitID":"LeKhangTai"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":86,"author":{"gitID":"LeKhangTai"},"content":"        Book bookToReturn \u003d model.getFilteredBookList().get(INDEX_THIRD_BOOK.getZeroBased());"},{"lineNumber":87,"author":{"gitID":"LeKhangTai"},"content":"        Book returnedBook \u003d createReturnedBook(bookToReturn);"},{"lineNumber":88,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnCommand \u003d prepareCommand(INDEX_THIRD_BOOK);"},{"lineNumber":89,"author":{"gitID":"LeKhangTai"},"content":"        Model expectedModel \u003d new ModelManager(model.getCatalogue(), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":91,"author":{"gitID":"LeKhangTai"},"content":"        // return -\u003e first book return"},{"lineNumber":92,"author":{"gitID":"LeKhangTai"},"content":"        returnCommand.execute();"},{"lineNumber":93,"author":{"gitID":"LeKhangTai"},"content":"        undoRedoStack.push(returnCommand);"},{"lineNumber":94,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":95,"author":{"gitID":"LeKhangTai"},"content":"        // undo -\u003e reverts catalogue back to previous state and filtered book list to show all books"},{"lineNumber":96,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":97,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":98,"author":{"gitID":"LeKhangTai"},"content":"        // redo -\u003e same first book deleted again"},{"lineNumber":99,"author":{"gitID":"LeKhangTai"},"content":"        expectedModel.returnBook(bookToReturn, returnedBook);"},{"lineNumber":100,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":101,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":103,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"LeKhangTai"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":105,"author":{"gitID":"LeKhangTai"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":106,"author":{"gitID":"LeKhangTai"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":107,"author":{"gitID":"LeKhangTai"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":108,"author":{"gitID":"LeKhangTai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"},{"lineNumber":109,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":110,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":111,"author":{"gitID":"LeKhangTai"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":112,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(returnCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":114,"author":{"gitID":"LeKhangTai"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":115,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":116,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":117,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":119,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"LeKhangTai"},"content":"    public void equals() throws Exception {"},{"lineNumber":121,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnFirstCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":122,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnSecondCommand \u003d prepareCommand(INDEX_SECOND_BOOK);"},{"lineNumber":123,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":124,"author":{"gitID":"LeKhangTai"},"content":"        // same object -\u003e returns true"},{"lineNumber":125,"author":{"gitID":"LeKhangTai"},"content":"        assertTrue(returnFirstCommand.equals(returnFirstCommand));"},{"lineNumber":126,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":127,"author":{"gitID":"LeKhangTai"},"content":"        // same values -\u003e returns true"},{"lineNumber":128,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":129,"author":{"gitID":"LeKhangTai"},"content":"        assertTrue(returnFirstCommand.equals(returnFirstCommandCopy));"},{"lineNumber":130,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":131,"author":{"gitID":"LeKhangTai"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":132,"author":{"gitID":"LeKhangTai"},"content":"        returnFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":133,"author":{"gitID":"LeKhangTai"},"content":"        assertFalse(returnFirstCommand.equals(returnFirstCommandCopy));"},{"lineNumber":134,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":135,"author":{"gitID":"LeKhangTai"},"content":"        // different types -\u003e returns false"},{"lineNumber":136,"author":{"gitID":"LeKhangTai"},"content":"        assertFalse(returnFirstCommand.equals(1));"},{"lineNumber":137,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":138,"author":{"gitID":"LeKhangTai"},"content":"        // null -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"LeKhangTai"},"content":"        assertFalse(returnFirstCommand.equals(null));"},{"lineNumber":140,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":141,"author":{"gitID":"LeKhangTai"},"content":"        // different book -\u003e returns false"},{"lineNumber":142,"author":{"gitID":"LeKhangTai"},"content":"        assertFalse(returnFirstCommand.equals(returnSecondCommand));"},{"lineNumber":143,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":145,"author":{"gitID":"LeKhangTai"},"content":"    private ReturnCommand prepareCommand(Index index) {"},{"lineNumber":146,"author":{"gitID":"LeKhangTai"},"content":"        ReturnCommand returnCommand \u003d new ReturnCommand(index);"},{"lineNumber":147,"author":{"gitID":"LeKhangTai"},"content":"        returnCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":148,"author":{"gitID":"LeKhangTai"},"content":"        return returnCommand;"},{"lineNumber":149,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":151,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"LeKhangTai"},"content":"     *Creates a duplicate book with a changed availability"},{"lineNumber":153,"author":{"gitID":"LeKhangTai"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":156,"author":{"gitID":"LeKhangTai"},"content":"    public Book createReturnedBook(Book bookToBorrow) {"},{"lineNumber":157,"author":{"gitID":"LeKhangTai"},"content":"        assert bookToBorrow !\u003d null;"},{"lineNumber":158,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":159,"author":{"gitID":"LeKhangTai"},"content":"        Title updatedTitle \u003d bookToBorrow.getTitle();"},{"lineNumber":160,"author":{"gitID":"LeKhangTai"},"content":"        Isbn updatedIsbn \u003d bookToBorrow.getIsbn();"},{"lineNumber":161,"author":{"gitID":"LeKhangTai"},"content":"        Avail updatedAvail \u003d new Avail(AVAILABLE);"},{"lineNumber":162,"author":{"gitID":"LeKhangTai"},"content":"        Author updatedAuthor \u003d bookToBorrow.getAuthor();"},{"lineNumber":163,"author":{"gitID":"LeKhangTai"},"content":"        Set\u003cTag\u003e updatedTags \u003d bookToBorrow.getTags();"},{"lineNumber":164,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":165,"author":{"gitID":"LeKhangTai"},"content":"        return new Book(updatedTitle, updatedAuthor, updatedIsbn, updatedAvail, updatedTags);"},{"lineNumber":166,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":168,"author":{"gitID":"LeKhangTai"},"content":"}"}],"authorContributionMap":{"-":1,"LeKhangTai":167}},{"path":"src/test/java/seedu/address/model/account/UsernameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"public class UsernameTest {"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Username(null));"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"    public void isValidUsername() {"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"        // null pointer"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"        //invalid"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Username.isValidUsername(\"\")); // empty string"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Username.isValidUsername(\"123\")); // too short"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Username.isValidUsername(\"abc\")); // too short"},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Username.isValidUsername(\"!!!\")); // too short and non-word characters"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Username.isValidUsername(\"!!!!!!\")); // non-word characters"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Username.isValidUsername(\"abcasj!\")); // too short and non-word characters"},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Username.isValidUsername(\"\"));"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"        //valid"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Username.isValidUsername(\"abcde\"));"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Username.isValidUsername(\"banana\"));"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Username.isValidUsername(\"addressbook\"));"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Username.isValidUsername(\"abcde123\"));"},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Username.isValidUsername(\"FHAIgasjd123987514\"));"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Username.isValidUsername(\"123123123123\"));"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":"    public void getUsername() {"},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":"        String usernameString \u003d \"username\";"},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"        Username p \u003d new Username(usernameString);"},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":"        assertEquals(usernameString, p.getUsername());"},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":"    public void equals() {"},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"        Username p1 \u003d new Username(\"username1\");"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":"        Username p1copy \u003d new Username(\"username1\");"},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"        Username p2 \u003d new Username(\"username2\");"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"        //equal with itself"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":"        assertTrue(p1.equals(p1));"},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":"        //equal with an other object with same state"},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"        assertTrue(p1.equals(p1copy));"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":"        //not equal with null"},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"        assertFalse(p1.equals(null));"},{"lineNumber":65,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":66,"author":{"gitID":"victortardieu"},"content":"        //not equal with other type"},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"        assertFalse(p1.equals(1));"},{"lineNumber":68,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":69,"author":{"gitID":"victortardieu"},"content":"        //not equal with same type with different state"},{"lineNumber":70,"author":{"gitID":"victortardieu"},"content":"        assertFalse(p1.equals(p2));"},{"lineNumber":71,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"victortardieu"},"content":"}"}],"authorContributionMap":{"victortardieu":72}},{"path":"src/test/java/seedu/address/model/account/UniqueAccountListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"public class UniqueAccountListTest {"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"    public void add() throws DuplicateAccountException {"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"        UniqueAccountList accountList \u003d new UniqueAccountList();"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"        Name name \u003d new Name(\"Ryan\");"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"        Credential credential \u003d new Credential(\"student\", \"student2\");"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber matricNumber \u003d new MatricNumber(\"A0123256X\");"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel privilegeLevel \u003d new PrivilegeLevel(1);"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"        Account student2 \u003d new Account(name, credential, matricNumber, privilegeLevel);"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"        Account student \u003d Account.createDefaultStudentAccount();"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        Account admin \u003d Account.createDefaultAdminAccount();"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"        accountList.add(student);"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"        accountList.add(admin);"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(DuplicateAccountException.class, ()"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"            -\u003e accountList.add(student2));"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"    public void searchByUsername() throws DuplicateAccountException {"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"        UniqueAccountList accountList \u003d new UniqueAccountList();"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"        Account student \u003d Account.createDefaultStudentAccount();"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"        Account admin \u003d Account.createDefaultAdminAccount();"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"        accountList.add(student);"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"        accountList.add(admin);"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"        assertEquals(accountList.searchByUsername(new Username(\"student\")), student);"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":43}},{"path":"src/test/java/seedu/address/model/account/MatricNumberTest.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"public class MatricNumberTest {"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"    public void isValidMatricNumber() {"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"        // null pointer"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e MatricNumber.isValidMatricNumber(null));"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"        //invalid"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"\")); // empty string"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"123\"));"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"abc\"));"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"!!!\"));"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"!!!!!!\"));"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"A1234567XX!\"));"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"A123456723X!\"));"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"1234567XX!\"));"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        //valid"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"A1234567Z\"));"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"A9992567B\"));"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"    public void getMatricNumber() {"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"        String matricNumberString \u003d \"A1234567Z\";"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber m \u003d new MatricNumber(matricNumberString);"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"        assertEquals(matricNumberString, m.getMatricNumber());"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"    public void equals() {"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber p1 \u003d new MatricNumber(\"A1234567Z\");"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber p1copy \u003d new MatricNumber(\"A1234567Z\");"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber p2 \u003d new MatricNumber(\"A9992567B\");"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"        //equal with itself"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(p1.equals(p1));"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"        //equal with an other object with same state"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(p1.equals(p1copy));"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with null"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(p1.equals(null));"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with other type"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(p1.equals(1));"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with same type with different state"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(p1.equals(p2));"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":62}},{"path":"src/test/java/seedu/address/model/account/AccountTest.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"public class AccountTest {"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, ()"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"            -\u003e new Account(null, null, null, null));"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, ()"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"            -\u003e new Account(new Name(\"dummy\"), null, null, null));"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, ()"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"            -\u003e new Account(null, new Credential(\"dummy\", \"dummy\"), null, null));"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, ()"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"            -\u003e new Account(null, null, new MatricNumber(\"A1231231A\"), null));"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, ()"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"            -\u003e new Account(null, null, null, new PrivilegeLevel(0)));"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    public void credentialMatchesTest() {"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        Credential studentCredential \u003d new Credential(\"student\", \"student\");"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        Credential adminCredential \u003d new Credential(\"admin\", \"admin\");"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"        Account studentAccount \u003d Account.createDefaultStudentAccount();"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        Account adminAccount \u003d Account.createDefaultAdminAccount();"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(studentAccount.credentialMatches(studentCredential));"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(adminAccount.credentialMatches(adminCredential));"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(studentAccount.credentialMatches(adminCredential));"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(adminAccount.credentialMatches(studentCredential));"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"    public void equalsTest() {"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"        Account studentAccount \u003d Account.createDefaultStudentAccount();"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"        Account studentAccountCopy \u003d Account.createDefaultStudentAccount();"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"        Account adminAccount \u003d Account.createDefaultAdminAccount();"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(studentAccount.equals(studentAccount));"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(studentAccount.equals(studentAccountCopy));"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(studentAccount.equals(adminAccount));"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(studentAccount.equals(null));"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(studentAccount.equals(0));"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"    public void usernameMatches() {"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"        Name name \u003d new Name(\"Ryan\");"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"        Credential credential \u003d new Credential(\"student\", \"student2\");"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber matricNumber \u003d new MatricNumber(\"A0123256X\");"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel privilegeLevel \u003d new PrivilegeLevel(1);"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"        Account student2 \u003d new Account(name, credential, matricNumber, privilegeLevel);"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"        Account student \u003d Account.createDefaultStudentAccount();"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"        Account admin \u003d Account.createDefaultAdminAccount();"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(student2.usernameMatches(student));"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(student2.usernameMatches(admin));"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":64}},{"path":"src/test/java/seedu/address/model/account/PasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"public class PasswordTest {"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Password(null));"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"    public void isValidPassword() {"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"        // null pointer"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"        //invalid"},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Password.isValidPassword(\"\")); // empty string"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Password.isValidPassword(\"123\")); // too short"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Password.isValidPassword(\"abc\")); // too short"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Password.isValidPassword(\"!!!\")); // too short and non-word characters"},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Password.isValidPassword(\"!!!!!!\")); // non-word characters"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Password.isValidPassword(\"abcasj!\")); // too short and non-word characters"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":"        assertFalse(Password.isValidPassword(\"\"));"},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"        //valid"},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Password.isValidPassword(\"abcde\"));"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Password.isValidPassword(\"banana\"));"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Password.isValidPassword(\"addressbook\"));"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Password.isValidPassword(\"abcde123\"));"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Password.isValidPassword(\"FHAIgasjd123987514\"));"},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"        assertTrue(Password.isValidPassword(\"123123123123\"));"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":"    public void getPassword() {"},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":"        String passwordString \u003d \"password\";"},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"        Password p \u003d new Password(passwordString);"},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":"        assertEquals(passwordString, p.getPassword());"},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":"    public void equals() {"},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"        Password p1 \u003d new Password(\"password1\");"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":"        Password p1copy \u003d new Password(\"password1\");"},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"        Password p2 \u003d new Password(\"password2\");"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"        //equal with itself"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":"        assertTrue(p1.equals(p1));"},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":"        //equal with an other object with same state"},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"        assertTrue(p1.equals(p1copy));"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":"        //not equal with null"},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"        assertFalse(p1.equals(null));"},{"lineNumber":65,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":66,"author":{"gitID":"victortardieu"},"content":"        //not equal with other type"},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"        assertFalse(p1.equals(1));"},{"lineNumber":68,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":69,"author":{"gitID":"victortardieu"},"content":"        //not equal with same type with different state"},{"lineNumber":70,"author":{"gitID":"victortardieu"},"content":"        assertFalse(p1.equals(p2));"},{"lineNumber":71,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"victortardieu"},"content":"}"}],"authorContributionMap":{"victortardieu":72}},{"path":"src/test/java/seedu/address/model/account/CredentialTest.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"//import javax.jws.soap.SOAPBinding;"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"public class CredentialTest {"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Credential(null, null));"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Credential(\"username\", null));"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Credential(null, \"password\"));"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"    public void getPassword_and_getUsername() {"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"        String passwordString \u003d \"password\";"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"        Password p \u003d new Password(passwordString);"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        String usernameString \u003d \"username\";"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        Username u \u003d new Username(usernameString);"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"        Credential c \u003d new Credential(usernameString, passwordString);"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        assertEquals(c.getPassword(), p);"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        assertEquals(c.getUsername(), u);"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"        String u1 \u003d \"username1\";"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"        String u1copy \u003d \"username1\";"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"        String u2 \u003d \"username2\";"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"        String p1 \u003d \"password1\";"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"        String p1copy \u003d \"password1\";"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"        String p2 \u003d \"password2\";"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"        Credential c1 \u003d new Credential(u1, p1);"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"        Credential c1copy \u003d new Credential(u1copy, p1copy);"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"        Credential c2 \u003d new Credential(u2, p2);"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"        //equal with itself"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(c1.equals(c1));"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"        //equal with an other object with same state"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(c1.equals(c1copy));"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with null"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(c1.equals(null));"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with other type"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(c1.equals(1));"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with same type with different state"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(c1.equals(c2));"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":"    public void usernameEquals() {"},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"        String u1 \u003d \"username1\";"},{"lineNumber":66,"author":{"gitID":"QiuHaohao"},"content":"        String u2 \u003d \"username2\";"},{"lineNumber":67,"author":{"gitID":"QiuHaohao"},"content":"        String p1 \u003d \"password1\";"},{"lineNumber":68,"author":{"gitID":"QiuHaohao"},"content":"        Credential u1p1 \u003d new Credential(u1, p1);"},{"lineNumber":69,"author":{"gitID":"QiuHaohao"},"content":"        Credential u1p2 \u003d new Credential(u1, p1);"},{"lineNumber":70,"author":{"gitID":"QiuHaohao"},"content":"        Credential u2p1 \u003d new Credential(u2, p1);"},{"lineNumber":71,"author":{"gitID":"QiuHaohao"},"content":"        Username username1 \u003d u1p1.getUsername();"},{"lineNumber":72,"author":{"gitID":"QiuHaohao"},"content":"        Username username2 \u003d u2p1.getUsername();"},{"lineNumber":73,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":74,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(u1p1.usernameEquals(username1));"},{"lineNumber":75,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(u1p2.usernameEquals(username1));"},{"lineNumber":76,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(u1p1.usernameEquals(username2));"},{"lineNumber":77,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":78}},{"path":"src/test/java/seedu/address/model/account/PrivilegeLevelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"public class PrivilegeLevelTest {"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"    public void constructor_invalidPrivilegeLevel_throwsIllegalArgumentException() {"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"        final int invalidPrivilegeLevel1 \u003d 3;"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"        final int invalidPrivilegeLevel2 \u003d -1;"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PrivilegeLevel(invalidPrivilegeLevel1));"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PrivilegeLevel(invalidPrivilegeLevel2));"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"    public void isValidPrivilegeLevel_test() {"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(PrivilegeLevel.isValidPrivilegeLevel(0));"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(PrivilegeLevel.isValidPrivilegeLevel(1));"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(PrivilegeLevel.isValidPrivilegeLevel(2));"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(PrivilegeLevel.isValidPrivilegeLevel(3));"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(PrivilegeLevel.isValidPrivilegeLevel(-1));"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel p0 \u003d new PrivilegeLevel(0);"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel p0copy \u003d new PrivilegeLevel(0);"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel p1 \u003d new PrivilegeLevel(1);"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel p2 \u003d new PrivilegeLevel(2);"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"        //equal with itself"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(p1.equals(p1));"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"        //equal with an other object with same state"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(p0.equals(p0copy));"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with null"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(p1.equals(null));"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with other type"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(p1.equals(1));"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"        //not equal with same type with different state"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"        assertFalse(p1.equals(p2));"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"    public void compareTo() {"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel p0 \u003d new PrivilegeLevel(0);"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel p1 \u003d new PrivilegeLevel(1);"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel p2 \u003d new PrivilegeLevel(2);"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(p0.compareTo(p1) \u003c 0);"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(p1.compareTo(p2) \u003c 0);"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(p1.compareTo(p0) \u003e 0);"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"        assertTrue(p1.compareTo(p1) \u003d\u003d 0);"},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":65}},{"path":"src/test/java/seedu/address/logic/commands/BorrowCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.model.book.Avail.BORROWED;"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalBooks.getTypicalCatalogue;"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":32,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":34,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":35,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":36,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":37,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":38,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"LeKhangTai"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":40,"author":{"gitID":"LeKhangTai"},"content":" * {@code BorrowCommand}."},{"lineNumber":41,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":42,"author":{"gitID":"LeKhangTai"},"content":"public class BorrowCommandTest {"},{"lineNumber":43,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":44,"author":{"gitID":"LeKhangTai"},"content":"    private Model model \u003d new ModelManager(getTypicalCatalogue(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":46,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"LeKhangTai"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"LeKhangTai"},"content":"        Book bookToBorrow \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"LeKhangTai"},"content":"        Book borrowedBook \u003d createBorrowedBook(bookToBorrow);"},{"lineNumber":50,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":51,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":52,"author":{"gitID":"LeKhangTai"},"content":"        String expectedMessage \u003d String.format(BorrowCommand.MESSAGE_BORROW_BOOK_SUCCESS, bookToBorrow);"},{"lineNumber":53,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":54,"author":{"gitID":"LeKhangTai"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getCatalogue(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"LeKhangTai"},"content":"        expectedModel.borrowBook(bookToBorrow, borrowedBook);"},{"lineNumber":56,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":57,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandSuccess(borrowCommand, model, expectedMessage, expectedModel);"},{"lineNumber":58,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":60,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"LeKhangTai"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":62,"author":{"gitID":"LeKhangTai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"},{"lineNumber":63,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":64,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":65,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(borrowCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":68,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"LeKhangTai"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":70,"author":{"gitID":"LeKhangTai"},"content":"        showBookAtIndex(model, INDEX_FIRST_BOOK);"},{"lineNumber":71,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":72,"author":{"gitID":"LeKhangTai"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"},{"lineNumber":73,"author":{"gitID":"LeKhangTai"},"content":"        // ensures that outOfBoundIndex is still in bounds of catalogue list"},{"lineNumber":74,"author":{"gitID":"LeKhangTai"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCatalogue().getBookList().size());"},{"lineNumber":75,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":76,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":77,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":78,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(borrowCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":81,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"LeKhangTai"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":83,"author":{"gitID":"LeKhangTai"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":84,"author":{"gitID":"LeKhangTai"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":85,"author":{"gitID":"LeKhangTai"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":86,"author":{"gitID":"LeKhangTai"},"content":"        Book bookToBorrow \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":87,"author":{"gitID":"LeKhangTai"},"content":"        Book borrowedBook \u003d createBorrowedBook(bookToBorrow);"},{"lineNumber":88,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":89,"author":{"gitID":"LeKhangTai"},"content":"        Model expectedModel \u003d new ModelManager(model.getCatalogue(), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":91,"author":{"gitID":"LeKhangTai"},"content":"        // borrow -\u003e first book borrow"},{"lineNumber":92,"author":{"gitID":"LeKhangTai"},"content":"        borrowCommand.execute();"},{"lineNumber":93,"author":{"gitID":"LeKhangTai"},"content":"        undoRedoStack.push(borrowCommand);"},{"lineNumber":94,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":95,"author":{"gitID":"LeKhangTai"},"content":"        // undo -\u003e reverts catalogue back to previous state and filtered book list to show all books"},{"lineNumber":96,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":97,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":98,"author":{"gitID":"LeKhangTai"},"content":"        // redo -\u003e same first book deleted again"},{"lineNumber":99,"author":{"gitID":"LeKhangTai"},"content":"        expectedModel.borrowBook(bookToBorrow, borrowedBook);"},{"lineNumber":100,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":101,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":103,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"LeKhangTai"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":105,"author":{"gitID":"LeKhangTai"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":106,"author":{"gitID":"LeKhangTai"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":107,"author":{"gitID":"LeKhangTai"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":108,"author":{"gitID":"LeKhangTai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"},{"lineNumber":109,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":110,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":111,"author":{"gitID":"LeKhangTai"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":112,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(borrowCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":114,"author":{"gitID":"LeKhangTai"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":115,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":116,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":117,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":119,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"LeKhangTai"},"content":"     * 1. Borrows a {@code Book} from a filtered list."},{"lineNumber":121,"author":{"gitID":"LeKhangTai"},"content":"     * 2. Undo the borrowing."},{"lineNumber":122,"author":{"gitID":"LeKhangTai"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously borrowed book in the"},{"lineNumber":123,"author":{"gitID":"LeKhangTai"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":124,"author":{"gitID":"LeKhangTai"},"content":"     * 4. Redo the borrowing. This ensures {@code RedoCommand} borrow the book object regardless of indexing."},{"lineNumber":125,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"LeKhangTai"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameBookDeleted() throws Exception {"},{"lineNumber":128,"author":{"gitID":"LeKhangTai"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":129,"author":{"gitID":"LeKhangTai"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":130,"author":{"gitID":"LeKhangTai"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":131,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":132,"author":{"gitID":"LeKhangTai"},"content":"        Model expectedModel \u003d new ModelManager(model.getCatalogue(), new UserPrefs());"},{"lineNumber":133,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":134,"author":{"gitID":"LeKhangTai"},"content":"        showBookAtIndex(model, INDEX_SECOND_BOOK);"},{"lineNumber":135,"author":{"gitID":"LeKhangTai"},"content":"        Book bookToBorrow \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"},{"lineNumber":136,"author":{"gitID":"LeKhangTai"},"content":"        Book borrowedBook \u003d createBorrowedBook(bookToBorrow);"},{"lineNumber":137,"author":{"gitID":"LeKhangTai"},"content":"        // borrow -\u003e borrows second book in unfiltered book list / first book in filtered book list"},{"lineNumber":138,"author":{"gitID":"LeKhangTai"},"content":"        borrowCommand.execute();"},{"lineNumber":139,"author":{"gitID":"LeKhangTai"},"content":"        undoRedoStack.push(borrowCommand);"},{"lineNumber":140,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":141,"author":{"gitID":"LeKhangTai"},"content":"        // undo -\u003e reverts catalogue back to previous state and filtered book list to show all books"},{"lineNumber":142,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":143,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":144,"author":{"gitID":"LeKhangTai"},"content":"        expectedModel.borrowBook(bookToBorrow, borrowedBook);"},{"lineNumber":145,"author":{"gitID":"LeKhangTai"},"content":"        assertNotEquals(bookToBorrow, model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()));"},{"lineNumber":146,"author":{"gitID":"LeKhangTai"},"content":"        // redo -\u003e borrows same second book in unfiltered book list"},{"lineNumber":147,"author":{"gitID":"LeKhangTai"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":148,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":150,"author":{"gitID":"LeKhangTai"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"LeKhangTai"},"content":"    public void equals() throws Exception {"},{"lineNumber":152,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowFirstCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":153,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowSecondCommand \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":154,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":155,"author":{"gitID":"LeKhangTai"},"content":"        // same object -\u003e returns true"},{"lineNumber":156,"author":{"gitID":"LeKhangTai"},"content":"        assertTrue(borrowFirstCommand.equals(borrowFirstCommand));"},{"lineNumber":157,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":158,"author":{"gitID":"LeKhangTai"},"content":"        // same values -\u003e returns true"},{"lineNumber":159,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_BOOK);"},{"lineNumber":160,"author":{"gitID":"LeKhangTai"},"content":"        assertTrue(borrowFirstCommand.equals(borrowFirstCommandCopy));"},{"lineNumber":161,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":162,"author":{"gitID":"LeKhangTai"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":163,"author":{"gitID":"LeKhangTai"},"content":"        borrowFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":164,"author":{"gitID":"LeKhangTai"},"content":"        assertFalse(borrowFirstCommand.equals(borrowFirstCommandCopy));"},{"lineNumber":165,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":166,"author":{"gitID":"LeKhangTai"},"content":"        // different types -\u003e returns false"},{"lineNumber":167,"author":{"gitID":"LeKhangTai"},"content":"        assertFalse(borrowFirstCommand.equals(1));"},{"lineNumber":168,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":169,"author":{"gitID":"LeKhangTai"},"content":"        // null -\u003e returns false"},{"lineNumber":170,"author":{"gitID":"LeKhangTai"},"content":"        assertFalse(borrowFirstCommand.equals(null));"},{"lineNumber":171,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":172,"author":{"gitID":"LeKhangTai"},"content":"        // different book -\u003e returns false"},{"lineNumber":173,"author":{"gitID":"LeKhangTai"},"content":"        assertTrue(borrowFirstCommand.equals(borrowSecondCommand));"},{"lineNumber":174,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":176,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"LeKhangTai"},"content":"     * Returns a {@code BorrowCommand} with the parameter {@code index}."},{"lineNumber":178,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"LeKhangTai"},"content":"    private BorrowCommand prepareCommand(Index index) {"},{"lineNumber":180,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand borrowCommand \u003d new BorrowCommand(index);"},{"lineNumber":181,"author":{"gitID":"LeKhangTai"},"content":"        borrowCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":182,"author":{"gitID":"LeKhangTai"},"content":"        return borrowCommand;"},{"lineNumber":183,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":185,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"LeKhangTai"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":187,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"LeKhangTai"},"content":"    private void showNoBook(Model model) {"},{"lineNumber":189,"author":{"gitID":"LeKhangTai"},"content":"        model.updateFilteredBookList(p -\u003e false);"},{"lineNumber":190,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":191,"author":{"gitID":"LeKhangTai"},"content":"        assertTrue(model.getFilteredBookList().isEmpty());"},{"lineNumber":192,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":194,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"LeKhangTai"},"content":"     *"},{"lineNumber":196,"author":{"gitID":"LeKhangTai"},"content":"     * @return duplicated book with Borrowed Availability"},{"lineNumber":197,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"LeKhangTai"},"content":"    public Book createBorrowedBook(Book bookToBorrow) {"},{"lineNumber":199,"author":{"gitID":"LeKhangTai"},"content":"        assert bookToBorrow !\u003d null;"},{"lineNumber":200,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":201,"author":{"gitID":"LeKhangTai"},"content":"        Title updatedTitle \u003d bookToBorrow.getTitle();"},{"lineNumber":202,"author":{"gitID":"LeKhangTai"},"content":"        Isbn updatedIsbn \u003d bookToBorrow.getIsbn();"},{"lineNumber":203,"author":{"gitID":"LeKhangTai"},"content":"        Avail updatedAvail \u003d new Avail(BORROWED);"},{"lineNumber":204,"author":{"gitID":"LeKhangTai"},"content":"        Author updatedAuthor \u003d bookToBorrow.getAuthor();"},{"lineNumber":205,"author":{"gitID":"LeKhangTai"},"content":"        Set\u003cTag\u003e updatedTags \u003d bookToBorrow.getTags();"},{"lineNumber":206,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":207,"author":{"gitID":"LeKhangTai"},"content":"        return new Book(updatedTitle, updatedAuthor, updatedIsbn, updatedAvail, updatedTags);"},{"lineNumber":208,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":210,"author":{"gitID":"LeKhangTai"},"content":"}"}],"authorContributionMap":{"-":1,"LeKhangTai":209}},{"path":"src/test/java/seedu/address/testutil/TypicalAccounts.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":" * A utility class containing a list of {@code Account} objects to be used in tests."},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":" */"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"public class TypicalAccounts {"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":"    public static final Account HARRY \u003d new AccountBuilder()"},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"        .withName(\"Harry Potter\")"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"        .withCredential(\"harry123\", \"harry123\")"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"        .withMatricNumber(\"A1234567H\")"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"        .withPrivilegeLevel(\"1\").build();"},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"    public static final Account JERRY \u003d new AccountBuilder()"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"        .withName(\"Jerry Morgan \")"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"        .withCredential(\"jerry123\", \"jack123\")"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":"        .withMatricNumber(\"A1234567J\")"},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"        .withPrivilegeLevel(\"2\").build();"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":"    public static final Account TOM \u003d new AccountBuilder()"},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"        .withName(\"Tom Hanks\")"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"        .withCredential(\"tom123\", \"tom123\")"},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"        .withMatricNumber(\"A1234567T\")"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"        .withPrivilegeLevel(\"1\").build();"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"    public static final Account EMMA \u003d new AccountBuilder()"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"        .withName(\"Emma Thorne\")"},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"        .withCredential(\"emma123\", \"emma123\")"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"        .withMatricNumber(\"A1234567E\")"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":"        .withPrivilegeLevel(\"2\").build();"},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":"    public static final Account LARY \u003d new AccountBuilder()"},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"        .withName(\"Lary Knot\")"},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":"        .withCredential(\"lary123\", \"lary123\")"},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":"        .withMatricNumber(\"A1234567L\")"},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"        .withPrivilegeLevel(\"1\").build();"},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"    public static final Account MARIE \u003d new AccountBuilder()"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":"        .withName(\"Marie Johnson\")"},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"        .withCredential(\"marie\", \"marie123\")"},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":"        .withMatricNumber(\"A1234567M\")"},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"        .withPrivilegeLevel(\"1\").build();"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"    public static final Account NICOLE \u003d new AccountBuilder()"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":"        .withName(\"Nicole Soley\")"},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"        .withCredential(\"nicole\", \"nicole123\")"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":"        .withMatricNumber(\"A1234567N\")"},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":"        .withPrivilegeLevel(\"1\").build();"},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"    private TypicalAccounts() {"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":"    } // prevents instantiation"},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"    public static Model getTypicalAccountList() {"},{"lineNumber":65,"author":{"gitID":"victortardieu"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":66,"author":{"gitID":"victortardieu"},"content":"        for (Account account : getTypicalAccounts()) {"},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"            try {"},{"lineNumber":68,"author":{"gitID":"victortardieu"},"content":"                model.addAccount(account);"},{"lineNumber":69,"author":{"gitID":"victortardieu"},"content":"            } catch (DuplicateAccountException e) {"},{"lineNumber":70,"author":{"gitID":"victortardieu"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":71,"author":{"gitID":"victortardieu"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"victortardieu"},"content":"        return model;"},{"lineNumber":74,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":76,"author":{"gitID":"victortardieu"},"content":"    public static UniqueAccountList getTypicalAccountListUniqueAccountList() {"},{"lineNumber":77,"author":{"gitID":"victortardieu"},"content":"        UniqueAccountList uniqueAccountList \u003d new UniqueAccountList();"},{"lineNumber":78,"author":{"gitID":"victortardieu"},"content":"        for (Account account : getTypicalAccounts()) {"},{"lineNumber":79,"author":{"gitID":"victortardieu"},"content":"            try {"},{"lineNumber":80,"author":{"gitID":"victortardieu"},"content":"                uniqueAccountList.add(account);"},{"lineNumber":81,"author":{"gitID":"victortardieu"},"content":"            } catch (DuplicateAccountException e) {"},{"lineNumber":82,"author":{"gitID":"victortardieu"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":83,"author":{"gitID":"victortardieu"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"victortardieu"},"content":"        return uniqueAccountList;"},{"lineNumber":86,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":88,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":89,"author":{"gitID":"victortardieu"},"content":"    public static List\u003cAccount\u003e getTypicalAccounts() {"},{"lineNumber":90,"author":{"gitID":"victortardieu"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(HARRY, JERRY, TOM, EMMA, LARY, MARIE, NICOLE));"},{"lineNumber":91,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"victortardieu"},"content":"}"}],"authorContributionMap":{"victortardieu":92}},{"path":"src/test/java/seedu/address/testutil/AccountBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.Credential;"},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.MatricNumber;"},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.Name;"},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":" * A utility class to help with building Account objects."},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":" */"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":"public class AccountBuilder {"},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"    public static final String DEFAULT_NAME \u003d \"Victor Tardieu\";"},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":"    public static final String DEFAULT_MATRIC_NUMBER \u003d \"A1234567N\";"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"    public static final String DEFAULT_PRIVILEGE_LEVEL \u003d \"2\";"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"    public static final String DEFAULT_USERNAME \u003d \"victor\";"},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":"    public static final String DEFAULT_PASSWORD \u003d \"victor123\";"},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"    private Name name;"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"    private Credential credential;"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"    private MatricNumber matricNumber;"},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"    private PrivilegeLevel privilegeLevel;"},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"     * Constructor for account with default values"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"    public AccountBuilder() {"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":"        credential \u003d new Credential(DEFAULT_USERNAME, DEFAULT_PASSWORD);"},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"        matricNumber \u003d new MatricNumber(DEFAULT_MATRIC_NUMBER);"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"        privilegeLevel \u003d new PrivilegeLevel(Integer.parseInt(DEFAULT_PRIVILEGE_LEVEL));"},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"     * Sets the {@code Name} of the {@code Account} that we are building."},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"     * @param name"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"     * @return"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":"    public AccountBuilder withName(String name) {"},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"        return this;"},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":"     * Sets the {@code Credential} of the {@code Account} that we are building."},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":"     * @param username"},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"     * @param password"},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":"     * @return"},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":"    public AccountBuilder withCredential(String username, String password) {"},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"        this.credential \u003d new Credential(username, password);"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":"     * Sets the {@code MatricNumber} of the {@code Account} that we are building."},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":"     * @param matricNumber"},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":"     * @return"},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"victortardieu"},"content":"    public AccountBuilder withMatricNumber(String matricNumber) {"},{"lineNumber":66,"author":{"gitID":"victortardieu"},"content":"        this.matricNumber \u003d new MatricNumber(matricNumber);"},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":70,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"victortardieu"},"content":"     * Sets the {@code PrivilegeLevel} of the {@code Account} that we are building."},{"lineNumber":72,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"victortardieu"},"content":"     * @param privilegeLevel"},{"lineNumber":74,"author":{"gitID":"victortardieu"},"content":"     * @return"},{"lineNumber":75,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"victortardieu"},"content":"    public AccountBuilder withPrivilegeLevel(String privilegeLevel) {"},{"lineNumber":77,"author":{"gitID":"victortardieu"},"content":"        this.privilegeLevel \u003d new PrivilegeLevel(Integer.parseInt(privilegeLevel));"},{"lineNumber":78,"author":{"gitID":"victortardieu"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":81,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"victortardieu"},"content":"     * Create an account"},{"lineNumber":83,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"victortardieu"},"content":"     * @return"},{"lineNumber":85,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"victortardieu"},"content":"    public Account build() {"},{"lineNumber":87,"author":{"gitID":"victortardieu"},"content":"        return new Account(name, credential, matricNumber, privilegeLevel);"},{"lineNumber":88,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"victortardieu"},"content":"}"}],"authorContributionMap":{"victortardieu":89}},{"path":"src/test/java/seedu/address/testutil/TypicalBooks.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_XVI;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_YOU;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVAIL_XVI;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AVAIL_YOU;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_XVI;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ISBN_YOU;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DYSTOPIA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FICTION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_XVI;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_YOU;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Catalogue;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Book} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalBooks {"},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"    //@@author khiayi"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"    public static final Book ANIMAL \u003d new BookBuilder().withTitle(\"Animal Farm\")"},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"George Orwell\")"},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Available\")"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780736692427\")"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        .withTags(\"political\", \"satire\").build();"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"    public static final Book BREAKING \u003d new BookBuilder().withTitle(\"Breaking Dawn\")"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"Stephenie Meyer\")"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Available\")"},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780316067928\")"},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"        .withTags(\"fiction\").build();"},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"    public static final Book CALIFORNIA \u003d new BookBuilder().withTitle(\"California Girl\")"},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"Jefferson Parker\")"},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780060562373\")"},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Borrowed\")"},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":"        .withTags(\"unlabelled\").build();"},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":"    public static final Book DELIRIUM \u003d new BookBuilder().withTitle(\"Delirium\")"},{"lineNumber":43,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"Lauren Oliver\")"},{"lineNumber":44,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780061726835\")"},{"lineNumber":45,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Borrowed\").build();"},{"lineNumber":46,"author":{"gitID":"khiayi"},"content":"    public static final Book EMMA \u003d new BookBuilder().withTitle(\"Emma\")"},{"lineNumber":47,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"Jane Austen\")"},{"lineNumber":48,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780141439587\")"},{"lineNumber":49,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Borrowed\").build();"},{"lineNumber":50,"author":{"gitID":"khiayi"},"content":"    public static final Book FATEFUL \u003d new BookBuilder().withTitle(\"Fateful\")"},{"lineNumber":51,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"Claudia Gray\")"},{"lineNumber":52,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780062006202\")"},{"lineNumber":53,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Available\").build();"},{"lineNumber":54,"author":{"gitID":"khiayi"},"content":"    public static final Book GONE \u003d new BookBuilder().withTitle(\"Gone Girl\")"},{"lineNumber":55,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"Gillian Flynn\")"},{"lineNumber":56,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780753827666\")"},{"lineNumber":57,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Available\").build();"},{"lineNumber":58,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":59,"author":{"gitID":"khiayi"},"content":"    // Manually added"},{"lineNumber":60,"author":{"gitID":"khiayi"},"content":"    public static final Book HOLES \u003d new BookBuilder().withTitle(\"Holes\")"},{"lineNumber":61,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"Louis Sachar\")"},{"lineNumber":62,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780439244190\")"},{"lineNumber":63,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Available\").build();"},{"lineNumber":64,"author":{"gitID":"khiayi"},"content":"    public static final Book INVISIBLE \u003d new BookBuilder().withTitle(\"Invisible Man\")"},{"lineNumber":65,"author":{"gitID":"khiayi"},"content":"        .withAuthor(\"Ralph Ellison\")"},{"lineNumber":66,"author":{"gitID":"khiayi"},"content":"        .withIsbn(\"9780140023350\")"},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"        .withAvail(\"Available\").build();"},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":"    // Manually added - Book\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":"    public static final Book XVI \u003d new BookBuilder().withTitle(VALID_TITLE_XVI)"},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":"        .withAuthor(VALID_AUTHOR_XVI)"},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":"        .withIsbn(VALID_ISBN_XVI)"},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":"        .withAvail(VALID_AVAIL_XVI)"},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"        .withTags(VALID_TAG_DYSTOPIA).build();"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":"    public static final Book YOU \u003d new BookBuilder().withTitle(VALID_TITLE_YOU)"},{"lineNumber":76,"author":{"gitID":"khiayi"},"content":"        .withAuthor(VALID_AUTHOR_YOU)"},{"lineNumber":77,"author":{"gitID":"khiayi"},"content":"        .withIsbn(VALID_ISBN_YOU)"},{"lineNumber":78,"author":{"gitID":"khiayi"},"content":"        .withAvail(VALID_AVAIL_YOU)"},{"lineNumber":79,"author":{"gitID":"khiayi"},"content":"        .withTags(VALID_TAG_FICTION)"},{"lineNumber":80,"author":{"gitID":"khiayi"},"content":"        .build();"},{"lineNumber":81,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":82,"author":{"gitID":"khiayi"},"content":"    public static final String KEYWORD_MATCHING_GIRL \u003d \"Girl\"; // A keyword that matches GIRL"},{"lineNumber":83,"author":{"gitID":"khiayi"},"content":"    public static final String KEYWORD_MATCHING_BREAKING \u003d \"Breaking\"; // A keyword that matches BREAKING"},{"lineNumber":84,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":85,"author":{"gitID":"khiayi"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private TypicalBooks() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    } // prevents instantiation"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns an {@code Catalogue} with all the typical books."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static Catalogue getTypicalCatalogue() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Catalogue ab \u003d new Catalogue();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        for (Book book : getTypicalBooks()) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                ab.addBook(book);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            } catch (DuplicateBookException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static List\u003cBook\u003e getTypicalBooks() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ANIMAL, BREAKING, CALIFORNIA, DELIRIUM, EMMA, FATEFUL, GONE));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"khiayi":60,"-":47}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"    private boolean isFindNextField \u003d false;"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":41,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":"            //@@author victortardieu"},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":"        case TAB:"},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"            keyEvent.consume();"},{"lineNumber":65,"author":{"gitID":"victortardieu"},"content":"            replaceText(LogicManager.autoComplete(commandTextField.getText()));"},{"lineNumber":66,"author":{"gitID":"victortardieu"},"content":"            break;"},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"            //@@author"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":138,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"victortardieu":11,"-":151}},{"path":"src/main/java/seedu/address/ui/BookCard.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import java.util.Random;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":" * An UI component that displays information of a {@code Book}."},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":" */"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"public class BookCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":"    private static final String FXML \u003d \"BookListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Catalogue\u003c/a\u003e"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"    public final Book book;"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"    private Label title;"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"    private Label author;"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"    private Label isbn;"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":"    private Label avail;"},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"    public BookCard(Book book, int displayedIndex) {"},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"        this.book \u003d book;"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"        title.setText(book.getTitle().fullTitle);"},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":"        author.setText(book.getAuthor().value);"},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"        isbn.setText(book.getIsbn().value);"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":"        avail.setText(book.getAvail().toString());"},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"        colorTags(book);"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":"        // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":"            return true;"},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":65,"author":{"gitID":"victortardieu"},"content":"        // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"victortardieu"},"content":"        if (!(other instanceof BookCard)) {"},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":70,"author":{"gitID":"victortardieu"},"content":"        // state check"},{"lineNumber":71,"author":{"gitID":"victortardieu"},"content":"        BookCard card \u003d (BookCard) other;"},{"lineNumber":72,"author":{"gitID":"victortardieu"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":73,"author":{"gitID":"victortardieu"},"content":"            \u0026\u0026 book.equals(card.book);"},{"lineNumber":74,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":76,"author":{"gitID":"victortardieu"},"content":"    private String getTagColor() {"},{"lineNumber":77,"author":{"gitID":"victortardieu"},"content":"        Random rand \u003d new Random();"},{"lineNumber":78,"author":{"gitID":"victortardieu"},"content":"        int sCase \u003d rand.nextInt(10);"},{"lineNumber":79,"author":{"gitID":"victortardieu"},"content":"        switch (sCase) {"},{"lineNumber":80,"author":{"gitID":"victortardieu"},"content":"        case 0:"},{"lineNumber":81,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: blue;\";"},{"lineNumber":82,"author":{"gitID":"victortardieu"},"content":"        case 1:"},{"lineNumber":83,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: green;\";"},{"lineNumber":84,"author":{"gitID":"victortardieu"},"content":"        case 2:"},{"lineNumber":85,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: red;\";"},{"lineNumber":86,"author":{"gitID":"victortardieu"},"content":"        case 3:"},{"lineNumber":87,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: maroon;\";"},{"lineNumber":88,"author":{"gitID":"victortardieu"},"content":"        case 4:"},{"lineNumber":89,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: orange;\";"},{"lineNumber":90,"author":{"gitID":"victortardieu"},"content":"        case 5:"},{"lineNumber":91,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: violet;\";"},{"lineNumber":92,"author":{"gitID":"victortardieu"},"content":"        case 6:"},{"lineNumber":93,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: brown;\";"},{"lineNumber":94,"author":{"gitID":"victortardieu"},"content":"        case 7:"},{"lineNumber":95,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: khaki;\";"},{"lineNumber":96,"author":{"gitID":"victortardieu"},"content":"        case 8:"},{"lineNumber":97,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: olive;\";"},{"lineNumber":98,"author":{"gitID":"victortardieu"},"content":"        case 9:"},{"lineNumber":99,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: indigo;\";"},{"lineNumber":100,"author":{"gitID":"victortardieu"},"content":"        default:"},{"lineNumber":101,"author":{"gitID":"victortardieu"},"content":"            return \"-fx-background-color: pink;\";"},{"lineNumber":102,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":104,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":106,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"victortardieu"},"content":"     * Assign a new color to each new tag"},{"lineNumber":108,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"victortardieu"},"content":"     * @param book"},{"lineNumber":110,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":112,"author":{"gitID":"victortardieu"},"content":"    private void colorTags(Book book) {"},{"lineNumber":113,"author":{"gitID":"victortardieu"},"content":"        book.getTags().forEach(tag -\u003e {"},{"lineNumber":114,"author":{"gitID":"victortardieu"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":115,"author":{"gitID":"victortardieu"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":116,"author":{"gitID":"victortardieu"},"content":"            tagLabel.setStyle(getTagColor());"},{"lineNumber":117,"author":{"gitID":"victortardieu"},"content":"        });"},{"lineNumber":118,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"victortardieu"},"content":"}"},{"lineNumber":120,"author":{"gitID":"victortardieu"},"content":"//@@author"}],"authorContributionMap":{"victortardieu":120}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/catalogue_icon.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":72,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"victortardieu":1,"-":119}},{"path":"src/main/java/seedu/address/commons/events/model/AccountListChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":" * Indicates the AccountList in the model has changed"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"public class AccountListChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"    public final UniqueAccountList data;"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"    public AccountListChangedEvent(UniqueAccountList data) {"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"        this.data \u003d data;"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"        return \"Number of accounts: \" + data.size();"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":22}},{"path":"src/main/java/seedu/address/logic/parser/CatalogueParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAccountCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BorrowCommand;"},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"import seedu.address.logic.commands.ClearAccountCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"import seedu.address.logic.commands.DeleteAccountCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LogoutCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ReserveCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ReturnCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class CatalogueParser {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case LoginCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new LoginCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case LogoutCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new LogoutCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case AddAccountCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new AddAccountCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case BorrowCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new BorrowCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case ReturnCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new ReturnCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case ReserveCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new ReserveCommandParser().parse(arguments);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"victortardieu"},"content":"        case ClearAccountCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"victortardieu"},"content":"            return new ClearAccountCommand();"},{"lineNumber":115,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case DeleteAccountCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new DeleteAccountCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"victortardieu":5,"-":119}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.account.MatricNumber;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.account.exceptions.AccountNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account Level Parse Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"chantiongley"},"content":"    //@@author chantiongley"},{"lineNumber":55,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":57,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"chantiongley"},"content":"     * @throws AccountNotFoundException if the given {@code name} is invalid."},{"lineNumber":60,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"chantiongley"},"content":"    public static Name parseAccountName(String name) throws AccountNotFoundException {"},{"lineNumber":62,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(name);"},{"lineNumber":63,"author":{"gitID":"chantiongley"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":64,"author":{"gitID":"chantiongley"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":65,"author":{"gitID":"chantiongley"},"content":"            throw new AccountNotFoundException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"chantiongley"},"content":"        return new Name(trimmedName);"},{"lineNumber":68,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":70,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":72,"author":{"gitID":"chantiongley"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":73,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"chantiongley"},"content":"    public static Optional\u003cName\u003e parseAccountName(Optional\u003cString\u003e name) throws AccountNotFoundException {"},{"lineNumber":75,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(name);"},{"lineNumber":76,"author":{"gitID":"chantiongley"},"content":"        return name.isPresent() ? Optional.of(parseAccountName(name.get())) : Optional.empty();"},{"lineNumber":77,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":79,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String matricNumber} into a {@code MatricNumber}."},{"lineNumber":81,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":82,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"chantiongley"},"content":"     * @throws AccountNotFoundException if the given {@code matricNumber} is invalid."},{"lineNumber":84,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"chantiongley"},"content":"    public static MatricNumber parseAccountMatricNumber(String matricNumber) throws AccountNotFoundException {"},{"lineNumber":86,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":87,"author":{"gitID":"chantiongley"},"content":"        String trimmedMatricNumber \u003d matricNumber.trim();"},{"lineNumber":88,"author":{"gitID":"chantiongley"},"content":"        if (!MatricNumber.isValidMatricNumber(trimmedMatricNumber)) {"},{"lineNumber":89,"author":{"gitID":"chantiongley"},"content":"            throw new AccountNotFoundException(MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"chantiongley"},"content":"        return new MatricNumber(trimmedMatricNumber);"},{"lineNumber":92,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":94,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code Optional\u003cString\u003e title} into an {@code Optional\u003cTitle\u003e} if {@code title} is present."},{"lineNumber":96,"author":{"gitID":"chantiongley"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":97,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"chantiongley"},"content":"    public static Optional\u003cMatricNumber\u003e parseAccountMatricNumber(Optional\u003cString\u003e matricNumber)"},{"lineNumber":99,"author":{"gitID":"chantiongley"},"content":"        throws AccountNotFoundException {"},{"lineNumber":100,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":101,"author":{"gitID":"chantiongley"},"content":"        return matricNumber.isPresent() ? Optional.of(parseAccountMatricNumber(matricNumber.get())) : Optional.empty();"},{"lineNumber":102,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":104,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String username} into a {@code Username}."},{"lineNumber":106,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":107,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"chantiongley"},"content":"     * @throws AccountNotFoundException if the given {@code username} is invalid."},{"lineNumber":109,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"chantiongley"},"content":"    public static Username parseAccountUsername(String username) throws AccountNotFoundException {"},{"lineNumber":111,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(username);"},{"lineNumber":112,"author":{"gitID":"chantiongley"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":113,"author":{"gitID":"chantiongley"},"content":"        if (!Username.isValidUsername(trimmedUsername)) {"},{"lineNumber":114,"author":{"gitID":"chantiongley"},"content":"            throw new AccountNotFoundException (Username.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"chantiongley"},"content":"        return new Username(trimmedUsername);"},{"lineNumber":117,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":119,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cUsername\u003e} if {@code username} is present."},{"lineNumber":121,"author":{"gitID":"chantiongley"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":122,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"chantiongley"},"content":"    public static Optional\u003cUsername\u003e parseAccountUsername(Optional\u003cString\u003e username) throws AccountNotFoundException {"},{"lineNumber":124,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(username);"},{"lineNumber":125,"author":{"gitID":"chantiongley"},"content":"        return username.isPresent() ? Optional.of(parseAccountUsername(username.get())) : Optional.empty();"},{"lineNumber":126,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":128,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String password} into a {@code Password}."},{"lineNumber":130,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":131,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":132,"author":{"gitID":"chantiongley"},"content":"     * @throws AccountNotFoundException if the given {@code password} is invalid."},{"lineNumber":133,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"chantiongley"},"content":"    public static Password parseAccountPassword(String password) throws AccountNotFoundException {"},{"lineNumber":135,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(password);"},{"lineNumber":136,"author":{"gitID":"chantiongley"},"content":"        String trimmedPassword \u003d password.trim();"},{"lineNumber":137,"author":{"gitID":"chantiongley"},"content":"        if (!Password.isValidPassword(trimmedPassword)) {"},{"lineNumber":138,"author":{"gitID":"chantiongley"},"content":"            throw new AccountNotFoundException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"chantiongley"},"content":"        return new Password(trimmedPassword);"},{"lineNumber":141,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":143,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code Optional\u003cString\u003e password} into an {@code Optional\u003cPassword\u003e} if {@code password} is present."},{"lineNumber":145,"author":{"gitID":"chantiongley"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":146,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"chantiongley"},"content":"    public static Optional\u003cPassword\u003e parseAccountPassword(Optional\u003cString\u003e password) throws AccountNotFoundException {"},{"lineNumber":148,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(password);"},{"lineNumber":149,"author":{"gitID":"chantiongley"},"content":"        return password.isPresent() ? Optional.of(parseAccountPassword(password.get())) : Optional.empty();"},{"lineNumber":150,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":152,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String privilegeLevel} into a {@code PrivilegeLevel}."},{"lineNumber":154,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":155,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"chantiongley"},"content":"     * @throws AccountNotFoundException if the given {@code privilegeLevel} is invalid."},{"lineNumber":157,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"chantiongley"},"content":"    public static PrivilegeLevel parseAccountPrivilegeLevel(String privilegeLevel) throws AccountNotFoundException {"},{"lineNumber":159,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(privilegeLevel);"},{"lineNumber":160,"author":{"gitID":"chantiongley"},"content":"        int input \u003d Integer.parseInt(privilegeLevel);"},{"lineNumber":161,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":162,"author":{"gitID":"chantiongley"},"content":"        if (!PrivilegeLevel.isValidPrivilegeLevel(input)) {"},{"lineNumber":163,"author":{"gitID":"chantiongley"},"content":"            throw new AccountNotFoundException(PrivilegeLevel.MESSAGE_PRIVILEGE_LEVEL_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"chantiongley"},"content":"        return new PrivilegeLevel(input);"},{"lineNumber":166,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":168,"author":{"gitID":"chantiongley"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Book Level Parse Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":169,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":170,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String title} into a {@code Title}."},{"lineNumber":172,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":173,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":174,"author":{"gitID":"chantiongley"},"content":"     * @throws IllegalValueException if the given {@code title} is invalid."},{"lineNumber":175,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"chantiongley"},"content":"    public static Title parseTitle(String title) throws IllegalValueException {"},{"lineNumber":177,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(title);"},{"lineNumber":178,"author":{"gitID":"chantiongley"},"content":"        String trimmedTitle \u003d title.trim();"},{"lineNumber":179,"author":{"gitID":"chantiongley"},"content":"        if (!Title.isValidTitle(trimmedTitle)) {"},{"lineNumber":180,"author":{"gitID":"chantiongley"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"chantiongley"},"content":"        return new Title(trimmedTitle);"},{"lineNumber":183,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":185,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code Optional\u003cString\u003e title} into an {@code Optional\u003cTitle\u003e} if {@code title} is present."},{"lineNumber":187,"author":{"gitID":"chantiongley"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":188,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"chantiongley"},"content":"    public static Optional\u003cTitle\u003e parseTitle(Optional\u003cString\u003e title) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(title);"},{"lineNumber":191,"author":{"gitID":"chantiongley"},"content":"        return title.isPresent() ? Optional.of(parseTitle(title.get())) : Optional.empty();"},{"lineNumber":192,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":194,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String isbn} into a {@code Isbn}."},{"lineNumber":196,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":197,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":198,"author":{"gitID":"chantiongley"},"content":"     * @throws IllegalValueException if the given {@code isbn} is invalid."},{"lineNumber":199,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"chantiongley"},"content":"    public static Isbn parseIsbn(String isbn) throws IllegalValueException {"},{"lineNumber":201,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(isbn);"},{"lineNumber":202,"author":{"gitID":"chantiongley"},"content":"        String trimmedIsbn \u003d isbn.trim();"},{"lineNumber":203,"author":{"gitID":"chantiongley"},"content":"        if (!Isbn.isValidIsbn(trimmedIsbn)) {"},{"lineNumber":204,"author":{"gitID":"chantiongley"},"content":"            throw new IllegalValueException(Isbn.MESSAGE_ISBN_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"chantiongley"},"content":"        return new Isbn(trimmedIsbn);"},{"lineNumber":207,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":209,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code Optional\u003cString\u003e isbn} into an {@code Optional\u003cIsbn\u003e} if {@code isbn} is present."},{"lineNumber":211,"author":{"gitID":"chantiongley"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":212,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"chantiongley"},"content":"    public static Optional\u003cIsbn\u003e parseIsbn(Optional\u003cString\u003e isbn) throws IllegalValueException {"},{"lineNumber":214,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(isbn);"},{"lineNumber":215,"author":{"gitID":"chantiongley"},"content":"        return isbn.isPresent() ? Optional.of(parseIsbn(isbn.get())) : Optional.empty();"},{"lineNumber":216,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":218,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String address} into an {@code Author}."},{"lineNumber":220,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":221,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":222,"author":{"gitID":"chantiongley"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":223,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"chantiongley"},"content":"    public static Author parseAuthor(String address) throws IllegalValueException {"},{"lineNumber":225,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(address);"},{"lineNumber":226,"author":{"gitID":"chantiongley"},"content":"        String trimmedAuthor \u003d address.trim();"},{"lineNumber":227,"author":{"gitID":"chantiongley"},"content":"        if (!Author.isValidAuthor(trimmedAuthor)) {"},{"lineNumber":228,"author":{"gitID":"chantiongley"},"content":"            throw new IllegalValueException(Author.MESSAGE_AUTHOR_CONSTRAINTS);"},{"lineNumber":229,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"chantiongley"},"content":"        return new Author(trimmedAuthor);"},{"lineNumber":231,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":233,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code Optional\u003cString\u003e author} into an {@code Optional\u003cAuthor\u003e} if {@code author} is present."},{"lineNumber":235,"author":{"gitID":"chantiongley"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":236,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"chantiongley"},"content":"    public static Optional\u003cAuthor\u003e parseAuthor(Optional\u003cString\u003e author) throws IllegalValueException {"},{"lineNumber":238,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(author);"},{"lineNumber":239,"author":{"gitID":"chantiongley"},"content":"        return author.isPresent() ? Optional.of(parseAuthor(author.get())) : Optional.empty();"},{"lineNumber":240,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":242,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String avail} into an {@code Avail}."},{"lineNumber":244,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":245,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":246,"author":{"gitID":"chantiongley"},"content":"     * @throws IllegalValueException if the given {@code avail} is invalid."},{"lineNumber":247,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"chantiongley"},"content":"    public static Avail parseAvail(String avail) throws IllegalValueException {"},{"lineNumber":249,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(avail);"},{"lineNumber":250,"author":{"gitID":"chantiongley"},"content":"        String trimmedAvail \u003d avail.trim();"},{"lineNumber":251,"author":{"gitID":"chantiongley"},"content":"        if (!Avail.isValidAvail(trimmedAvail)) {"},{"lineNumber":252,"author":{"gitID":"chantiongley"},"content":"            throw new IllegalValueException(Avail.MESSAGE_AVAIL_CONSTRAINTS);"},{"lineNumber":253,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"chantiongley"},"content":"        return new Avail(trimmedAvail);"},{"lineNumber":255,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":257,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code Optional\u003cString\u003e avail} into an {@code Optional\u003cAvail\u003e} if {@code avail} is present."},{"lineNumber":259,"author":{"gitID":"chantiongley"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":260,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"chantiongley"},"content":"    public static Optional\u003cAvail\u003e parseAvail(Optional\u003cString\u003e avail) throws IllegalValueException {"},{"lineNumber":262,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(avail);"},{"lineNumber":263,"author":{"gitID":"chantiongley"},"content":"        return avail.isPresent() ? Optional.of(parseAvail(avail.get())) : Optional.empty();"},{"lineNumber":264,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":266,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"chantiongley"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":268,"author":{"gitID":"chantiongley"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":269,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":270,"author":{"gitID":"chantiongley"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":271,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"chantiongley"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":273,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(tag);"},{"lineNumber":274,"author":{"gitID":"chantiongley"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":275,"author":{"gitID":"chantiongley"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":276,"author":{"gitID":"chantiongley"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":277,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"chantiongley"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":279,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":281,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"chantiongley"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":283,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"chantiongley"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":285,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(tags);"},{"lineNumber":286,"author":{"gitID":"chantiongley"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":287,"author":{"gitID":"chantiongley"},"content":"        for (String tagName : tags) {"},{"lineNumber":288,"author":{"gitID":"chantiongley"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":289,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"chantiongley"},"content":"        return tagSet;"},{"lineNumber":291,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":239,"-":53}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"a/\");"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_ISBN \u003d new Prefix(\"i/\");"},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_AVAIL \u003d new Prefix(\"av/\");"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_MATRICNUMBER \u003d new Prefix(\"m/\");"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":"    public static final Prefix PREFIX_PRIVILEGE \u003d new Prefix(\"l/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"victortardieu":9,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/ReserveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.commands.ReserveCommand;"},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":" * Parses input arguments and create a new ReserveCommand object"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":"public class ReserveCommandParser implements Parser\u003cReserveCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":"     * Parses the given {@code String} of arguments in the context of the ReserveCommand"},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":"     * and returns an ReserveCommand object for execution."},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"    public ReserveCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"            return new ReserveCommand(index);"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReserveCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":"}"},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":""}],"authorContributionMap":{"-":1,"LeKhangTai":28}},{"path":"src/main/java/seedu/address/logic/parser/LoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":" * Parses input arguments and creates a new LoginCommand object"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"     * Parses the given {@code String} of arguments in the context of the LoginCommand"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"     * and returns an LoginCommand object for execution."},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    public LoginCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"        if (nameKeywords.length !\u003d 2"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"            || !Username.isValidUsername(nameKeywords[0])"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"            || !Password.isValidPassword(nameKeywords[1])) {"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        String username \u003d nameKeywords[0];"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        String password \u003d nameKeywords[1];"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"        return new LoginCommand(username, password);"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":36}},{"path":"src/main/java/seedu/address/logic/parser/DeleteAccountCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.commands.DeleteAccountCommand;"},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":" * Parses input arguments and creates a new DeleteAccountCommand object"},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":" */"},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":"public class DeleteAccountCommandParser implements Parser\u003cDeleteAccountCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":"     * Parses input arguments and creates a new DeleteAccountCommand object"},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":"     * \u003cp\u003e"},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":"     * /**"},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAccountCommand"},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":"     * and returns an DeleteAccountCommand object for execution."},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":"    public DeleteAccountCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAccountCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":"        } else {"},{"lineNumber":28,"author":{"gitID":"chantiongley"},"content":"            return new DeleteAccountCommand(trimmedArgs);"},{"lineNumber":29,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":31}},{"path":"src/main/java/seedu/address/logic/parser/BorrowCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.commands.BorrowCommand;"},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":" * Parses input arguments and create a new BorrowCommand object"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":"public class BorrowCommandParser implements Parser\u003cBorrowCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":"     * Parses the given {@code String} of arguments in the context of the BorrowCommand"},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"     * and returns an BorrowCommand object for execution."},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":"    public BorrowCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":"            return new BorrowCommand(index);"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BorrowCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":"}"},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":""}],"authorContributionMap":{"-":1,"LeKhangTai":30}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Deletes a book identified using it\u0027s last displayed index from the catalogue."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        + \": Deletes the book identified by the index number used in the last book listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Book bookToDelete;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(bookToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            model.deleteBook(bookToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target book cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            \u0026\u0026 Objects.equals(this.bookToDelete, ((DeleteCommand) other).bookToDelete));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":73,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":75,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":76,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Lists all books in the catalogue to the user."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all books\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":25}},{"path":"src/main/java/seedu/address/logic/parser/AddAccountCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICNUMBER;"},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVILEGE;"},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.commands.AddAccountCommand;"},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Credential;"},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.MatricNumber;"},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Name;"},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.exceptions.AccountNotFoundException;"},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":" * Parses input arguments and creates a new AddAccountCommand object"},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":" */"},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":"public class AddAccountCommandParser implements Parser\u003cAddAccountCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"chantiongley"},"content":"     * Returns true if none of the prefixes contains empty(@code Optional) value in the given"},{"lineNumber":30,"author":{"gitID":"chantiongley"},"content":"     * (@code ArgumentMultimap)."},{"lineNumber":31,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"chantiongley"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":33,"author":{"gitID":"chantiongley"},"content":"        return Stream.of(prefixes).allMatch((prefix -\u003e argumentMultimap.getValue(prefix).isPresent()));"},{"lineNumber":34,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":36,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"chantiongley"},"content":"     * +     * Parses the given (@code String) of arguments in the context of the AddAccountCommand"},{"lineNumber":38,"author":{"gitID":"chantiongley"},"content":"     * +     * and returns an AddAccountCommand object for execution."},{"lineNumber":39,"author":{"gitID":"chantiongley"},"content":"     * +     *"},{"lineNumber":40,"author":{"gitID":"chantiongley"},"content":"     * +     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":41,"author":{"gitID":"chantiongley"},"content":"     * +"},{"lineNumber":42,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"chantiongley"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"chantiongley"},"content":"    public AddAccountCommand parse(String args) throws ParseException {"},{"lineNumber":45,"author":{"gitID":"chantiongley"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":46,"author":{"gitID":"chantiongley"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_MATRICNUMBER,"},{"lineNumber":47,"author":{"gitID":"chantiongley"},"content":"                PREFIX_PRIVILEGE);"},{"lineNumber":48,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":49,"author":{"gitID":"chantiongley"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_MATRICNUMBER,"},{"lineNumber":50,"author":{"gitID":"chantiongley"},"content":"            PREFIX_PRIVILEGE) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":51,"author":{"gitID":"chantiongley"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"chantiongley"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"chantiongley"},"content":"            Name name \u003d ParserUtil.parseAccountName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":55,"author":{"gitID":"chantiongley"},"content":"            Username username \u003d ParserUtil.parseAccountUsername(argMultimap.getValue(PREFIX_USERNAME).get());"},{"lineNumber":56,"author":{"gitID":"chantiongley"},"content":"            Password password \u003d ParserUtil.parseAccountPassword(argMultimap.getValue(PREFIX_PASSWORD).get());"},{"lineNumber":57,"author":{"gitID":"chantiongley"},"content":"            Credential credential \u003d new Credential(username.getUsername(), password.getPassword());"},{"lineNumber":58,"author":{"gitID":"chantiongley"},"content":"            MatricNumber matricNumber \u003d ParserUtil.parseAccountMatricNumber"},{"lineNumber":59,"author":{"gitID":"chantiongley"},"content":"                (argMultimap.getValue(PREFIX_MATRICNUMBER).get());"},{"lineNumber":60,"author":{"gitID":"chantiongley"},"content":"            PrivilegeLevel privilegeLevel \u003d ParserUtil.parseAccountPrivilegeLevel"},{"lineNumber":61,"author":{"gitID":"chantiongley"},"content":"                (argMultimap.getValue(PREFIX_PRIVILEGE).get());"},{"lineNumber":62,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":63,"author":{"gitID":"chantiongley"},"content":"            Account account \u003d new Account(name, credential, matricNumber, privilegeLevel);"},{"lineNumber":64,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":65,"author":{"gitID":"chantiongley"},"content":"            return new AddAccountCommand(account);"},{"lineNumber":66,"author":{"gitID":"chantiongley"},"content":"        } catch (AccountNotFoundException ive) {"},{"lineNumber":67,"author":{"gitID":"chantiongley"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":68,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":70}},{"path":"src/main/java/seedu/address/logic/parser/ReturnCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.commands.ReturnCommand;"},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":" * Parses input arguments and create a new ReturnCommand object"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":"public class ReturnCommandParser implements Parser\u003cReturnCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":"     * Parses the given {@code String} of arguments in the context of the ReturnCommand"},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":"     * and returns an ReturnCommand object for execution."},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":"    public ReturnCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":"            return new ReturnCommand(index);"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReturnCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":32,"author":{"gitID":"LeKhangTai"},"content":"}"},{"lineNumber":33,"author":{"gitID":"LeKhangTai"},"content":""}],"authorContributionMap":{"-":1,"LeKhangTai":32}},{"path":"src/main/java/seedu/address/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.Credential;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":" * Logs in as student or librarian."},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"public class LoginCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Login as student or librarian.\\n\""},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"        + \"Parameters: USERNAME PASSWORD(both username and password should be at least 5 chars long)\\n\""},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"        + \"Example: \" + COMMAND_WORD + \" MyUsername MyPassword\";"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MESSAGE_LOGGED_IN_AS_STUTENT \u003d \"You are logged in as student\";"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MESSAGE_LOGGED_IN_AS_LIBRARIAN \u003d \"You are logged in as librarian\";"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MESSAGE_NOT_LOGGED_IN \u003d \"Wrong username/password, try again\";"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    private final Credential credential;"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    public LoginCommand(String username, String password) {"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(username);"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(password);"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"        this.credential \u003d new Credential(username, password);"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"            || (other instanceof LoginCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 credential.equals(((LoginCommand) other).credential));"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"    public CommandResult execute() {"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel newPrivilegeLevel \u003d model.authenticate(this.credential);"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"        if (newPrivilegeLevel.equals(Model.PRIVILEGE_LEVEL_GUEST)) {"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"            return new CommandResult(MESSAGE_NOT_LOGGED_IN);"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"        if (newPrivilegeLevel.equals(Model.PRIVILEGE_LEVEL_STUDENT)) {"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"            return new CommandResult(MESSAGE_LOGGED_IN_AS_STUTENT);"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"        if (newPrivilegeLevel.equals(Model.PRIVILEGE_LEVEL_LIBRARIAN)) {"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"            return new CommandResult(MESSAGE_LOGGED_IN_AS_LIBRARIAN);"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"        return new CommandResult(MESSAGE_NOT_LOGGED_IN);"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":62}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.Catalogue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Clears the catalogue."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Catalogue has been cleared!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        model.resetData(new Catalogue());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/ClearAccountCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":" * Checks if user is a librarian. If yes, it clears the list of accounts and logs out the current account."},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":" */"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"public class ClearAccountCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"    public static final String COMMAND_WORD \u003d \"cleara\";"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"AccountList has been cleared, and you are logged out!\";"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"        UniqueAccountList blankList \u003d new UniqueAccountList();"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":"            blankList.add(Account.createDefaultAdminAccount());"},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"        } catch (DuplicateAccountException e) {"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"        model.resetAccount(blankList);"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"        model.logout();"},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":"}"},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":"//@@author"}],"authorContributionMap":{"victortardieu":42}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNPRIVILEGED \u003d \"You are not allowed to execute this command,\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"        + \" login and try again\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of books."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @return summary message for books displayed"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static String getMessageForBookListShownSummary(int displaySize) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"        return Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":5,"victortardieu":1,"-":48}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"        + \"Example: \" + COMMAND_WORD;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":27}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"khiayi"},"content":"//@@author khiayi"},{"lineNumber":2,"author":{"gitID":"khiayi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":4,"author":{"gitID":"khiayi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":6,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVAIL;"},{"lineNumber":7,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"},{"lineNumber":8,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":11,"author":{"gitID":"khiayi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":14,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":15,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":16,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":17,"author":{"gitID":"khiayi"},"content":"//import static seedu.address.logic.parser.CliSyntax.;"},{"lineNumber":18,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":19,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":20,"author":{"gitID":"khiayi"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"khiayi"},"content":" * Adds a book to the catalogue."},{"lineNumber":22,"author":{"gitID":"khiayi"},"content":" */"},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the catalogue. \""},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":"        + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"        + PREFIX_TITLE + \"TITLE \""},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        + PREFIX_AUTHOR + \"AUTHOR \""},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        + PREFIX_ISBN + \"ISBN \""},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"        + PREFIX_AVAIL + \"AVAIL \""},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"        + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"        + PREFIX_TITLE + \"Animal Farm \""},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"        + PREFIX_AUTHOR + \"George Orwell \""},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"        + PREFIX_ISBN + \"9780736692427 \""},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":"        + PREFIX_AVAIL + \"Borrowed \""},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":"        + PREFIX_TAG + \"political \""},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":"        + PREFIX_TAG + \"satire \";"},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"},{"lineNumber":43,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the catalogue\";"},{"lineNumber":44,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":45,"author":{"gitID":"khiayi"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":46,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":47,"author":{"gitID":"khiayi"},"content":"    private final Book toAdd;"},{"lineNumber":48,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":49,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"khiayi"},"content":"     * Creates an AddCommand to add the specified {@code Book}"},{"lineNumber":51,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"khiayi"},"content":"    public AddCommand(Book book) {"},{"lineNumber":53,"author":{"gitID":"khiayi"},"content":"        requireNonNull(book);"},{"lineNumber":54,"author":{"gitID":"khiayi"},"content":"        toAdd \u003d book;"},{"lineNumber":55,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":57,"author":{"gitID":"khiayi"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"khiayi"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"khiayi"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitID":"khiayi"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"khiayi"},"content":"            model.addBook(toAdd);"},{"lineNumber":62,"author":{"gitID":"khiayi"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":63,"author":{"gitID":"khiayi"},"content":"        } catch (DuplicateBookException e) {"},{"lineNumber":64,"author":{"gitID":"khiayi"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":65,"author":{"gitID":"khiayi"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":"            || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":"            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":76,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":77,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":79,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":80,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"khiayi":75}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Selects a book identified using it\u0027s last displayed index from the catalogue."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        + \": Selects the book identified by the index number used in the last book listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_BOOK_SUCCESS \u003d \"Selected Book: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_BOOK_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"khiayi"},"content":"//@@author khiayi"},{"lineNumber":2,"author":{"gitID":"khiayi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":4,"author":{"gitID":"khiayi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"},{"lineNumber":6,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AVAIL;"},{"lineNumber":7,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ISBN;"},{"lineNumber":8,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"khiayi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"khiayi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"},{"lineNumber":11,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":12,"author":{"gitID":"khiayi"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"khiayi"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"khiayi"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"khiayi"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"khiayi"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"khiayi"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":19,"author":{"gitID":"khiayi"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"khiayi"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"khiayi"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"khiayi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":" * Edits the details of an existing book in the catalogue."},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":" */"},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the book identified \""},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":"        + \"by the index number used in the last book listing. \""},{"lineNumber":43,"author":{"gitID":"khiayi"},"content":"        + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":44,"author":{"gitID":"khiayi"},"content":"        + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitID":"khiayi"},"content":"        + \"[\" + PREFIX_TITLE + \"TITLE] \""},{"lineNumber":46,"author":{"gitID":"khiayi"},"content":"        + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""},{"lineNumber":47,"author":{"gitID":"khiayi"},"content":"        + \"[\" + PREFIX_ISBN + \"ISBN] \""},{"lineNumber":48,"author":{"gitID":"khiayi"},"content":"        + \"[\" + PREFIX_AVAIL + \"AVAIL] \""},{"lineNumber":49,"author":{"gitID":"khiayi"},"content":"        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":50,"author":{"gitID":"khiayi"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":51,"author":{"gitID":"khiayi"},"content":"        + PREFIX_ISBN + \"9780736692426 \""},{"lineNumber":52,"author":{"gitID":"khiayi"},"content":"        + PREFIX_AVAIL + \"Borrowed\";"},{"lineNumber":53,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":54,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_EDIT_BOOK_SUCCESS \u003d \"Edited Book: %1$s\";"},{"lineNumber":55,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":56,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the catalogue.\";"},{"lineNumber":57,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":58,"author":{"gitID":"khiayi"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":59,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":60,"author":{"gitID":"khiayi"},"content":"    private final Index index;"},{"lineNumber":61,"author":{"gitID":"khiayi"},"content":"    private final EditBookDescriptor editBookDescriptor;"},{"lineNumber":62,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":63,"author":{"gitID":"khiayi"},"content":"    private Book bookToEdit;"},{"lineNumber":64,"author":{"gitID":"khiayi"},"content":"    private Book editedBook;"},{"lineNumber":65,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":66,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"     * @param index              of the book in the filtered book list to edit"},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":"     * @param editBookDescriptor details to edit the book with"},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":"    public EditCommand(Index index, EditBookDescriptor editBookDescriptor) {"},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":"        requireNonNull(index);"},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":"        requireNonNull(editBookDescriptor);"},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"        this.index \u003d index;"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":"        this.editBookDescriptor \u003d new EditBookDescriptor(editBookDescriptor);"},{"lineNumber":76,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":78,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"khiayi"},"content":"     * Creates and returns a {@code Book} with the details of {@code bookToEdit}"},{"lineNumber":80,"author":{"gitID":"khiayi"},"content":"     * edited with {@code editBookDescriptor}."},{"lineNumber":81,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"khiayi"},"content":"    private static Book createEditedBook(Book bookToEdit, EditBookDescriptor editBookDescriptor) {"},{"lineNumber":83,"author":{"gitID":"khiayi"},"content":"        assert bookToEdit !\u003d null;"},{"lineNumber":84,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":85,"author":{"gitID":"khiayi"},"content":"        Title updatedTitle \u003d editBookDescriptor.getTitle().orElse(bookToEdit.getTitle());"},{"lineNumber":86,"author":{"gitID":"khiayi"},"content":"        Isbn updatedIsbn \u003d editBookDescriptor.getIsbn().orElse(bookToEdit.getIsbn());"},{"lineNumber":87,"author":{"gitID":"khiayi"},"content":"        Avail updatedAvail \u003d editBookDescriptor.getAvail().orElse(bookToEdit.getAvail());"},{"lineNumber":88,"author":{"gitID":"khiayi"},"content":"        Author updatedAuthor \u003d editBookDescriptor.getAuthor().orElse(bookToEdit.getAuthor());"},{"lineNumber":89,"author":{"gitID":"khiayi"},"content":"        Set\u003cTag\u003e updatedTags \u003d editBookDescriptor.getTags().orElse(bookToEdit.getTags());"},{"lineNumber":90,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":91,"author":{"gitID":"khiayi"},"content":"        return new Book(updatedTitle, updatedAuthor, updatedIsbn, updatedAvail, updatedTags);"},{"lineNumber":92,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":94,"author":{"gitID":"khiayi"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"khiayi"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":96,"author":{"gitID":"khiayi"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"khiayi"},"content":"            model.updateBook(bookToEdit, editedBook);"},{"lineNumber":98,"author":{"gitID":"khiayi"},"content":"        } catch (DuplicateBookException dpe) {"},{"lineNumber":99,"author":{"gitID":"khiayi"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"},{"lineNumber":100,"author":{"gitID":"khiayi"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":101,"author":{"gitID":"khiayi"},"content":"            throw new AssertionError(\"The target book cannot be missing\");"},{"lineNumber":102,"author":{"gitID":"khiayi"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"khiayi"},"content":"        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":104,"author":{"gitID":"khiayi"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editedBook));"},{"lineNumber":105,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":107,"author":{"gitID":"khiayi"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"khiayi"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":109,"author":{"gitID":"khiayi"},"content":"        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"},{"lineNumber":110,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":111,"author":{"gitID":"khiayi"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":112,"author":{"gitID":"khiayi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"khiayi"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":115,"author":{"gitID":"khiayi"},"content":"        bookToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":116,"author":{"gitID":"khiayi"},"content":"        editedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"},{"lineNumber":117,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":119,"author":{"gitID":"khiayi"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"khiayi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"khiayi"},"content":"        // short circuit if same object"},{"lineNumber":122,"author":{"gitID":"khiayi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitID":"khiayi"},"content":"            return true;"},{"lineNumber":124,"author":{"gitID":"khiayi"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":126,"author":{"gitID":"khiayi"},"content":"        // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"khiayi"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":128,"author":{"gitID":"khiayi"},"content":"            return false;"},{"lineNumber":129,"author":{"gitID":"khiayi"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":131,"author":{"gitID":"khiayi"},"content":"        // state check"},{"lineNumber":132,"author":{"gitID":"khiayi"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":133,"author":{"gitID":"khiayi"},"content":"        return index.equals(e.index)"},{"lineNumber":134,"author":{"gitID":"khiayi"},"content":"            \u0026\u0026 editBookDescriptor.equals(e.editBookDescriptor)"},{"lineNumber":135,"author":{"gitID":"khiayi"},"content":"            \u0026\u0026 Objects.equals(bookToEdit, e.bookToEdit);"},{"lineNumber":136,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":138,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":139,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":141,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":142,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"QiuHaohao"},"content":"    //@@author"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Stores the details to edit the book with. Each non-empty field value will replace the"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * corresponding field value of the book."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static class EditBookDescriptor {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Title title;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Author author;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Isbn isbn;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Avail avail;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public EditBookDescriptor() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":162,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public EditBookDescriptor(EditBookDescriptor toCopy) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            setTitle(toCopy.title);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            setAuthor(toCopy.author);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            setIsbn(toCopy.isbn);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            setAvail(toCopy.avail);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":173,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.title, this.author, this.isbn, this.avail, this.tags);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cTitle\u003e getTitle() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(title);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setTitle(Title title) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.title \u003d title;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cAuthor\u003e getAuthor() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(author);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setAuthor(Author author) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.author \u003d author;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cIsbn\u003e getIsbn() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(isbn);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void setIsbn(Isbn isbn) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            this.isbn \u003d isbn;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public Optional\u003cAvail\u003e getAvail() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(avail);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public void setAvail(Avail avail) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            this.avail \u003d avail;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":212,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":213,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":214,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":221,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":222,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditBookDescriptor)) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            EditBookDescriptor e \u003d (EditBookDescriptor) other;"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"            return getTitle().equals(e.getTitle())"},{"lineNumber":243,"author":{"gitID":"-"},"content":"                \u0026\u0026 getAuthor().equals(e.getAuthor())"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                \u0026\u0026 getIsbn().equals(e.getIsbn())"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                \u0026\u0026 getAvail().equals(e.getAvail())"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"khiayi":137,"-":106}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/AddAccountCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICNUMBER;"},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVILEGE;"},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":" * Adds an account"},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":"public class AddAccountCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"    public static final String COMMAND_WORD \u003d \"addAccount\";"},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an account to the system. \""},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":"        + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_PASSWORD + \"PASSWORD \""},{"lineNumber":28,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_MATRICNUMBER + \"MATRICULATION NUMBER \""},{"lineNumber":29,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_PRIVILEGE + \"PRIVILEGE LEVEL \\n\""},{"lineNumber":30,"author":{"gitID":"chantiongley"},"content":"        + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_USERNAME + \"johndoe \""},{"lineNumber":33,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_PASSWORD + \"johndoe123 \""},{"lineNumber":34,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_MATRICNUMBER + \"A0123456B \""},{"lineNumber":35,"author":{"gitID":"chantiongley"},"content":"        + PREFIX_PRIVILEGE + \"1\";"},{"lineNumber":36,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":37,"author":{"gitID":"chantiongley"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New account added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"chantiongley"},"content":"    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"This account already exists in the system\";"},{"lineNumber":39,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":40,"author":{"gitID":"chantiongley"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":41,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":42,"author":{"gitID":"chantiongley"},"content":"    private final Account toAdd;"},{"lineNumber":43,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":44,"author":{"gitID":"chantiongley"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"chantiongley"},"content":"     * Creates an AddCommand to add the specified {@code Book}"},{"lineNumber":46,"author":{"gitID":"chantiongley"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"chantiongley"},"content":"    public AddAccountCommand(Account account) {"},{"lineNumber":48,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(account);"},{"lineNumber":49,"author":{"gitID":"chantiongley"},"content":"        toAdd \u003d account;"},{"lineNumber":50,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":52,"author":{"gitID":"chantiongley"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"chantiongley"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"chantiongley"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"chantiongley"},"content":"            model.addAccount(toAdd);"},{"lineNumber":57,"author":{"gitID":"chantiongley"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitID":"chantiongley"},"content":"        } catch (DuplicateAccountException e) {"},{"lineNumber":59,"author":{"gitID":"chantiongley"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ACCOUNT);"},{"lineNumber":60,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":63,"author":{"gitID":"chantiongley"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"chantiongley"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":65,"author":{"gitID":"chantiongley"},"content":"        return super.equals(obj);"},{"lineNumber":66,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":68,"author":{"gitID":"chantiongley"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"chantiongley"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":70,"author":{"gitID":"chantiongley"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":71,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":73,"author":{"gitID":"chantiongley"},"content":"}"}],"authorContributionMap":{"chantiongley":73}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.book.TitleContainsKeywordsPredicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Finds and lists all books in catalogue whose title contains any of the argument keywords."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all books whose titles contain any of \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"        + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" animal george\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final TitleContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public FindCommand(TitleContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        model.updateFilteredBookList(predicate);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForBookListShownSummary(model.getFilteredBookList().size()));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/LogoutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.Model;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":" * Logs out as student or librarian."},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"public class LogoutCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"    public static final String COMMAND_WORD \u003d \"logout\";"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logout as student or librarian.\\n\""},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"        + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MESSAGE_LOGGED_OUT \u003d \"You are logged out.\";"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_STUDENT;"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        model.logout();"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"        return new CommandResult(MESSAGE_LOGGED_OUT);"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"            || (other instanceof LogoutCommand);"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":37}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Catalogue as requested ...\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":6,"victortardieu":1,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/ReturnCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.model.book.Avail.AVAILABLE;"},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":" * Un-mark a borrowed book to make it available for borrowing"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"public class ReturnCommand extends UndoableCommand {"},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"    public static final String COMMAND_WORD \u003d \"return\";"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_RETURN_BOOK_SUCCESS \u003d \"Book is returned: %1$s\";"},{"lineNumber":32,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":33,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns book whose title matches the input \\n\""},{"lineNumber":34,"author":{"gitID":"LeKhangTai"},"content":"        + \"Parameters: INDEX (must be a positive integer) \\n\""},{"lineNumber":35,"author":{"gitID":"LeKhangTai"},"content":"        + \"Example: \" + COMMAND_WORD + \" Harry Potter and the Half Blood Prince\";"},{"lineNumber":36,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":37,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_BOOK_CANNOT_BE_RETURNED \u003d \"Book cannot be returned as it is already available\";"},{"lineNumber":38,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":39,"author":{"gitID":"LeKhangTai"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":40,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":41,"author":{"gitID":"LeKhangTai"},"content":"    private final Index targetIndex;"},{"lineNumber":42,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":43,"author":{"gitID":"LeKhangTai"},"content":"    private Book bookToReturn;"},{"lineNumber":44,"author":{"gitID":"LeKhangTai"},"content":"    private Book returnedBook;"},{"lineNumber":45,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":46,"author":{"gitID":"LeKhangTai"},"content":"    public ReturnCommand(Index targetIndex) {"},{"lineNumber":47,"author":{"gitID":"LeKhangTai"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":48,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":50,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"LeKhangTai"},"content":"     * @param bookToBorrow"},{"lineNumber":52,"author":{"gitID":"LeKhangTai"},"content":"     * @return duplicated book with Available Availability"},{"lineNumber":53,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"LeKhangTai"},"content":"    private static Book createReturnedBook(Book bookToBorrow) {"},{"lineNumber":55,"author":{"gitID":"LeKhangTai"},"content":"        assert bookToBorrow !\u003d null;"},{"lineNumber":56,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":57,"author":{"gitID":"LeKhangTai"},"content":"        Title updatedTitle \u003d bookToBorrow.getTitle();"},{"lineNumber":58,"author":{"gitID":"LeKhangTai"},"content":"        Isbn updatedIsbn \u003d bookToBorrow.getIsbn();"},{"lineNumber":59,"author":{"gitID":"LeKhangTai"},"content":"        Avail updatedAvail \u003d new Avail(AVAILABLE);"},{"lineNumber":60,"author":{"gitID":"LeKhangTai"},"content":"        Author updatedAuthor \u003d bookToBorrow.getAuthor();"},{"lineNumber":61,"author":{"gitID":"LeKhangTai"},"content":"        Set\u003cTag\u003e updatedTags \u003d bookToBorrow.getTags();"},{"lineNumber":62,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":63,"author":{"gitID":"LeKhangTai"},"content":"        return new Book(updatedTitle, updatedAuthor, updatedIsbn, updatedAvail, updatedTags);"},{"lineNumber":64,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":66,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"LeKhangTai"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(bookToReturn);"},{"lineNumber":69,"author":{"gitID":"LeKhangTai"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"LeKhangTai"},"content":"            model.returnBook(bookToReturn, returnedBook);"},{"lineNumber":71,"author":{"gitID":"LeKhangTai"},"content":"            return new CommandResult(String.format(MESSAGE_RETURN_BOOK_SUCCESS, bookToReturn));"},{"lineNumber":72,"author":{"gitID":"LeKhangTai"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":73,"author":{"gitID":"LeKhangTai"},"content":"            throw new CommandException(MESSAGE_BOOK_CANNOT_BE_RETURNED);"},{"lineNumber":74,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":77,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"LeKhangTai"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"LeKhangTai"},"content":"        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"},{"lineNumber":80,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":81,"author":{"gitID":"LeKhangTai"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":82,"author":{"gitID":"LeKhangTai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":85,"author":{"gitID":"LeKhangTai"},"content":"        bookToReturn \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"LeKhangTai"},"content":"        returnedBook \u003d createReturnedBook(bookToReturn);"},{"lineNumber":87,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":89,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"LeKhangTai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"LeKhangTai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":92,"author":{"gitID":"LeKhangTai"},"content":"            || (other instanceof ReturnCommand // instanceof handles nulls"},{"lineNumber":93,"author":{"gitID":"LeKhangTai"},"content":"            \u0026\u0026 this.targetIndex.equals(((ReturnCommand) other).targetIndex) // state check"},{"lineNumber":94,"author":{"gitID":"LeKhangTai"},"content":"            \u0026\u0026 Objects.equals(this.bookToReturn, ((ReturnCommand) other).bookToReturn));"},{"lineNumber":95,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":97,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"LeKhangTai"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":99,"author":{"gitID":"LeKhangTai"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":100,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"LeKhangTai"},"content":"}"},{"lineNumber":102,"author":{"gitID":"LeKhangTai"},"content":""}],"authorContributionMap":{"-":1,"LeKhangTai":101}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AccountListChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CatalogueChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCatalogue;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Storage extends CatalogueStorage, UserPrefsStorage, AccountListStorage {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    String getCatalogueFilePath();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyCatalogue\u003e readCatalogue() throws DataConversionException, IOException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void saveCatalogue(ReadOnlyCatalogue catalogue) throws IOException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Saves the current version of the Catalogue to the hard disk."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Creates the data file if it is missing."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void handleCatalogueChangedEvent(CatalogueChangedEvent abce);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"    String getAccountListFilePath();"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"    Optional\u003cUniqueAccountList\u003e readAccountList() throws DataConversionException, IOException;"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"    void saveAccountList(UniqueAccountList accountList) throws IOException;"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"    void handleAccountListChangedEvent(AccountListChangedEvent event);"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":9,"-":40}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAccountCommand;"},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BorrowCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ReserveCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ReturnCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.CatalogueParser;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final CatalogueParser catalogueParser;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        catalogueParser \u003d new CatalogueParser();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":"    //@@author victortardieu"},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":"     * @param myString"},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":"     * @return auto, the string that holds the autocomplete string of the chosen command"},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":"    public static String autoComplete(String myString) {"},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"        /**"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":"         *  The auto string will hold the autocomplete string of the chosen command"},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"         */"},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":"        String auto \u003d \"\";"},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"        switch (myString) {"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"            auto \u003d \"add t/ a/ i/ av/ tag/ \";"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":"            break;"},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"        case AddAccountCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":"            auto \u003d \"addAccount n/ m/ u/ p/ l/ \";"},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":"            break;"},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"            auto \u003d \"edit 1 t/ a/ i/ av/ tag/ \";"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":"            break;"},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"            auto \u003d \"delete 1\";"},{"lineNumber":65,"author":{"gitID":"victortardieu"},"content":"            break;"},{"lineNumber":66,"author":{"gitID":"victortardieu"},"content":"        case BorrowCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"victortardieu"},"content":"            auto \u003d \"borrow 1\";"},{"lineNumber":68,"author":{"gitID":"victortardieu"},"content":"            break;"},{"lineNumber":69,"author":{"gitID":"victortardieu"},"content":"        case ReturnCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"victortardieu"},"content":"            auto \u003d \"return 1\";"},{"lineNumber":71,"author":{"gitID":"victortardieu"},"content":"            break;"},{"lineNumber":72,"author":{"gitID":"victortardieu"},"content":"        case ReserveCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"victortardieu"},"content":"            auto \u003d \"reserve 1\";"},{"lineNumber":74,"author":{"gitID":"victortardieu"},"content":"            break;"},{"lineNumber":75,"author":{"gitID":"victortardieu"},"content":"        default:"},{"lineNumber":76,"author":{"gitID":"victortardieu"},"content":"            auto \u003d myString;"},{"lineNumber":77,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"victortardieu"},"content":"        return auto;"},{"lineNumber":79,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":81,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"victortardieu"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":83,"author":{"gitID":"victortardieu"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":84,"author":{"gitID":"victortardieu"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"victortardieu"},"content":"            Command command \u003d catalogueParser.parseCommand(commandText);"},{"lineNumber":86,"author":{"gitID":"victortardieu"},"content":"            if (!isPrivileged(command)) {"},{"lineNumber":87,"author":{"gitID":"victortardieu"},"content":"                return new CommandResult(Command.MESSAGE_UNPRIVILEGED);"},{"lineNumber":88,"author":{"gitID":"victortardieu"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"victortardieu"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"victortardieu"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":91,"author":{"gitID":"victortardieu"},"content":"            undoRedoStack.push(command);"},{"lineNumber":92,"author":{"gitID":"victortardieu"},"content":"            return result;"},{"lineNumber":93,"author":{"gitID":"victortardieu"},"content":"        } finally {"},{"lineNumber":94,"author":{"gitID":"victortardieu"},"content":"            history.add(commandText);"},{"lineNumber":95,"author":{"gitID":"victortardieu"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":98,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"victortardieu"},"content":"    public ObservableList\u003cBook\u003e getFilteredBookList() {"},{"lineNumber":100,"author":{"gitID":"victortardieu"},"content":"        return model.getFilteredBookList();"},{"lineNumber":101,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":103,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"victortardieu"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":105,"author":{"gitID":"victortardieu"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":106,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"victortardieu"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":110,"author":{"gitID":"QiuHaohao"},"content":"    protected boolean isPrivileged(Command command) {"},{"lineNumber":111,"author":{"gitID":"QiuHaohao"},"content":"        return command.getPrivilegeLevel().compareTo(model.getPrivilegeLevel()) \u003c\u003d 0;"},{"lineNumber":112,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":5,"victortardieu":68,"-":40}},{"path":"src/main/java/seedu/address/storage/SerialisedAccountListStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import java.io.FileInputStream;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import java.io.FileOutputStream;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"import java.io.ObjectInputStream;"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"import java.io.ObjectOutputStream;"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":" * A class to access AccountList data stored as an .ser file on the hard disk."},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"public class SerialisedAccountListStorage implements AccountListStorage {"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(SerialisedAccountListStorage.class);"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    public SerialisedAccountListStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"    public String getAccountListFilePath() {"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"    public Optional\u003cUniqueAccountList\u003e readAccountList() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"        return readAccountList(filePath);"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    public Optional\u003cUniqueAccountList\u003e readAccountList(String filePath) throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(filePath);"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"        FileInputStream file \u003d new FileInputStream(filePath);"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"        ObjectInputStream in \u003d new ObjectInputStream(file);"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"        if (!new File(filePath).exists()) {"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"            logger.info(\"AccountList file \" + filePath + \" not found\");"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"            return Optional.empty();"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"        UniqueAccountList accountList \u003d SerialisedFileStorage.loadDataFromSaveFile(in);"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"        return Optional.of(accountList);"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"    public void saveAccountList(UniqueAccountList accountList) throws IOException {"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"        saveAccountList(accountList, filePath);"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"    public void saveAccountList(UniqueAccountList accountList, String filePath) throws IOException {"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(accountList);"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(filePath);"},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"        FileOutputStream file \u003d new FileOutputStream(filePath);"},{"lineNumber":66,"author":{"gitID":"QiuHaohao"},"content":"        ObjectOutputStream out \u003d new ObjectOutputStream(file);"},{"lineNumber":67,"author":{"gitID":"QiuHaohao"},"content":"        SerialisedFileStorage.saveDataToFile(out, accountList);"},{"lineNumber":68,"author":{"gitID":"QiuHaohao"},"content":"        out.close();"},{"lineNumber":69,"author":{"gitID":"QiuHaohao"},"content":"        file.close();"},{"lineNumber":70,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":71}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AccountListChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CatalogueChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCatalogue;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Manages storage of Catalogue data in local storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private CatalogueStorage catalogueStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private AccountListStorage accountListStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public StorageManager(CatalogueStorage catalogueStorage,"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                          UserPrefsStorage userPrefsStorage,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                          AccountListStorage accountListStorage) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.catalogueStorage \u003d catalogueStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.accountListStorage \u003d accountListStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Catalogue methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getCatalogueFilePath() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return catalogueStorage.getCatalogueFilePath();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyCatalogue\u003e readCatalogue() throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return readCatalogue(catalogueStorage.getCatalogueFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyCatalogue\u003e readCatalogue(String filePath) throws DataConversionException, IOException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return catalogueStorage.readCatalogue(filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveCatalogue(ReadOnlyCatalogue catalogue) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        saveCatalogue(catalogue, catalogueStorage.getCatalogueFilePath());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void saveCatalogue(ReadOnlyCatalogue catalogue, String filePath) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        catalogueStorage.saveCatalogue(catalogue, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void handleCatalogueChangedEvent(CatalogueChangedEvent event) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            saveCatalogue(event.data);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":98,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"QiuHaohao"},"content":"    @Subscribe"},{"lineNumber":100,"author":{"gitID":"QiuHaohao"},"content":"    public void handleAccountListChangedEvent(AccountListChangedEvent event) {"},{"lineNumber":101,"author":{"gitID":"QiuHaohao"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"AccountList data changed, saving to file\"));"},{"lineNumber":102,"author":{"gitID":"QiuHaohao"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"QiuHaohao"},"content":"            saveAccountList(event.data);"},{"lineNumber":104,"author":{"gitID":"QiuHaohao"},"content":"        } catch (IOException e) {"},{"lineNumber":105,"author":{"gitID":"QiuHaohao"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":106,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":109,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"QiuHaohao"},"content":"    public String getAccountListFilePath() {"},{"lineNumber":111,"author":{"gitID":"QiuHaohao"},"content":"        return accountListStorage.getAccountListFilePath();"},{"lineNumber":112,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":114,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"QiuHaohao"},"content":"    public Optional\u003cUniqueAccountList\u003e readAccountList() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"QiuHaohao"},"content":"        return readAccountList(accountListStorage.getAccountListFilePath());"},{"lineNumber":117,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":119,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"QiuHaohao"},"content":"    public Optional\u003cUniqueAccountList\u003e readAccountList(String filePath) throws DataConversionException, IOException {"},{"lineNumber":121,"author":{"gitID":"QiuHaohao"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":122,"author":{"gitID":"QiuHaohao"},"content":"        return accountListStorage.readAccountList(filePath);"},{"lineNumber":123,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":125,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"QiuHaohao"},"content":"    public void saveAccountList(UniqueAccountList accountList) throws IOException {"},{"lineNumber":127,"author":{"gitID":"QiuHaohao"},"content":"        saveAccountList(accountList, accountListStorage.getAccountListFilePath());"},{"lineNumber":128,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":130,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"QiuHaohao"},"content":"    public void saveAccountList(UniqueAccountList accountList, String filePath) throws IOException {"},{"lineNumber":132,"author":{"gitID":"QiuHaohao"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":133,"author":{"gitID":"QiuHaohao"},"content":"        accountListStorage.saveAccountList(accountList, filePath);"},{"lineNumber":134,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":136,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":40,"-":96}},{"path":"src/main/java/seedu/address/storage/AccountListStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"//import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":" * Represents a storage for {@link UniqueAccountList}."},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"public interface AccountListStorage {"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"    String getAccountListFilePath();"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"     * Returns AccountList data as a {@link UniqueAccountList}."},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"     * @throws IOException             if there was any problem when reading from the storage."},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"    Optional\u003cUniqueAccountList\u003e readAccountList() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"     * @see #getAccountListFilePath()"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"    Optional\u003cUniqueAccountList\u003e readAccountList(String filePath) throws DataConversionException, IOException;"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"     * Saves the given {@link UniqueAccountList} to the storage."},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"     * @param accountList cannot be null."},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    void saveAccountList(UniqueAccountList accountList) throws IOException;"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"     * @see #saveAccountList(UniqueAccountList)"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"    void saveAccountList(UniqueAccountList accountList, String filePath) throws IOException;"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":48}},{"path":"src/main/java/seedu/address/storage/SerialisedFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import java.io.ObjectInputStream;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import java.io.ObjectOutputStream;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":" * Stores accountList data in a .ser file"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"public class SerialisedFileStorage {"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"     * Saves the given catalogue data to the specified file."},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"    public static void saveDataToFile(ObjectOutputStream out, UniqueAccountList accountList) {"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"            out.writeObject(accountList);"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"        } catch (IOException e) {"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"            e.printStackTrace();"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"     * Returns catalogue in the file or an empty catalogue"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"    public static UniqueAccountList loadDataFromSaveFile(ObjectInputStream in) throws DataConversionException {"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"            return (UniqueAccountList) in.readObject();"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"            throw new DataConversionException(e);"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"        } catch (ClassNotFoundException e) {"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":38}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAccountCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chantiongley"},"content":"//@@author chantiongley"},{"lineNumber":2,"author":{"gitID":"chantiongley"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":4,"author":{"gitID":"chantiongley"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":6,"author":{"gitID":"chantiongley"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":9,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":10,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":11,"author":{"gitID":"chantiongley"},"content":"import seedu.address.model.account.exceptions.AccountNotFoundException;"},{"lineNumber":12,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":13,"author":{"gitID":"chantiongley"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"chantiongley"},"content":" * Deletes a account using it\u0027s last displayed index from the account list"},{"lineNumber":15,"author":{"gitID":"chantiongley"},"content":" */"},{"lineNumber":16,"author":{"gitID":"chantiongley"},"content":"public class DeleteAccountCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":18,"author":{"gitID":"chantiongley"},"content":"    public static final String COMMAND_WORD \u003d \"deleteAccount\";"},{"lineNumber":19,"author":{"gitID":"chantiongley"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"chantiongley"},"content":"        + \": Deletes the account identified by the name of the user stored in account list.\\n\""},{"lineNumber":21,"author":{"gitID":"chantiongley"},"content":"        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitID":"chantiongley"},"content":"        + \"Example: \" + COMMAND_WORD + \" John\";"},{"lineNumber":23,"author":{"gitID":"chantiongley"},"content":"    public static final String MESSAGE_DELETE_ACCOUNT_SUCCESS \u003d \"Deleted Account: %1$s\";"},{"lineNumber":24,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":25,"author":{"gitID":"chantiongley"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":26,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":27,"author":{"gitID":"chantiongley"},"content":"    private String username;"},{"lineNumber":28,"author":{"gitID":"chantiongley"},"content":"    private Account accountToDelete;"},{"lineNumber":29,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":30,"author":{"gitID":"chantiongley"},"content":"    public DeleteAccountCommand(String username) {"},{"lineNumber":31,"author":{"gitID":"chantiongley"},"content":"        requireNonNull(username);"},{"lineNumber":32,"author":{"gitID":"chantiongley"},"content":"        this.username \u003d username;"},{"lineNumber":33,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":35,"author":{"gitID":"chantiongley"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"chantiongley"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"chantiongley"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"chantiongley"},"content":"            model.deleteAccount(accountToDelete);"},{"lineNumber":39,"author":{"gitID":"chantiongley"},"content":"        } catch (AccountNotFoundException anfe) {"},{"lineNumber":40,"author":{"gitID":"chantiongley"},"content":"            throw new CommandException(\"Account does not exist\");"},{"lineNumber":41,"author":{"gitID":"chantiongley"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":43,"author":{"gitID":"chantiongley"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ACCOUNT_SUCCESS, accountToDelete));"},{"lineNumber":44,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":46,"author":{"gitID":"chantiongley"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"chantiongley"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"chantiongley"},"content":"        accountToDelete \u003d model.getAccountList().searchByUsername(new Username(username));"},{"lineNumber":49,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":51,"author":{"gitID":"chantiongley"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"chantiongley"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"chantiongley"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"chantiongley"},"content":"            || (other instanceof DeleteAccountCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"chantiongley"},"content":"            \u0026\u0026 accountToDelete.equals(((DeleteAccountCommand) other).accountToDelete));"},{"lineNumber":56,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"chantiongley"},"content":""},{"lineNumber":58,"author":{"gitID":"chantiongley"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"chantiongley"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":60,"author":{"gitID":"chantiongley"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":61,"author":{"gitID":"chantiongley"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"chantiongley"},"content":"}"},{"lineNumber":63,"author":{"gitID":"chantiongley"},"content":""}],"authorContributionMap":{"chantiongley":63}},{"path":"src/main/java/seedu/address/logic/commands/BorrowCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.model.book.Avail.BORROWED;"},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":" * Borrows a book"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":"public class BorrowCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":"    public static final String COMMAND_WORD \u003d \"borrow\";"},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_BORROW_BOOK_SUCCESS \u003d \"New book borrowed: %1$s\";"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Book not available for borrowing!\";"},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":32,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":33,"author":{"gitID":"LeKhangTai"},"content":"        + \": Borrows the book identified by the index number used in the last book listing.\\n\""},{"lineNumber":34,"author":{"gitID":"LeKhangTai"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":35,"author":{"gitID":"LeKhangTai"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":36,"author":{"gitID":"LeKhangTai"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_STUDENT;"},{"lineNumber":37,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":38,"author":{"gitID":"LeKhangTai"},"content":"    private final Index targetIndex;"},{"lineNumber":39,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":40,"author":{"gitID":"LeKhangTai"},"content":"    private Book bookToBorrow;"},{"lineNumber":41,"author":{"gitID":"LeKhangTai"},"content":"    private Book borrowedBook;"},{"lineNumber":42,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":43,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":44,"author":{"gitID":"LeKhangTai"},"content":"    public BorrowCommand(Index targetIndex) {"},{"lineNumber":45,"author":{"gitID":"LeKhangTai"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":46,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":48,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"LeKhangTai"},"content":"     * @param bookToBorrow"},{"lineNumber":50,"author":{"gitID":"LeKhangTai"},"content":"     * @return duplicated book with Borrowed Availability"},{"lineNumber":51,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"LeKhangTai"},"content":"    public Book createBorrowedBook(Book bookToBorrow) {"},{"lineNumber":53,"author":{"gitID":"LeKhangTai"},"content":"        assert bookToBorrow !\u003d null;"},{"lineNumber":54,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":55,"author":{"gitID":"LeKhangTai"},"content":"        Title updatedTitle \u003d bookToBorrow.getTitle();"},{"lineNumber":56,"author":{"gitID":"LeKhangTai"},"content":"        Isbn updatedIsbn \u003d bookToBorrow.getIsbn();"},{"lineNumber":57,"author":{"gitID":"LeKhangTai"},"content":"        Avail updatedAvail \u003d new Avail(BORROWED);"},{"lineNumber":58,"author":{"gitID":"LeKhangTai"},"content":"        Author updatedAuthor \u003d bookToBorrow.getAuthor();"},{"lineNumber":59,"author":{"gitID":"LeKhangTai"},"content":"        Set\u003cTag\u003e updatedTags \u003d bookToBorrow.getTags();"},{"lineNumber":60,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":61,"author":{"gitID":"LeKhangTai"},"content":"        return new Book(updatedTitle, updatedAuthor, updatedIsbn, updatedAvail, updatedTags);"},{"lineNumber":62,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":64,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":65,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"LeKhangTai"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(model);"},{"lineNumber":68,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":69,"author":{"gitID":"LeKhangTai"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"LeKhangTai"},"content":"            model.borrowBook(bookToBorrow, borrowedBook);"},{"lineNumber":71,"author":{"gitID":"LeKhangTai"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":72,"author":{"gitID":"LeKhangTai"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":73,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"LeKhangTai"},"content":"        return new CommandResult(String.format(MESSAGE_BORROW_BOOK_SUCCESS, bookToBorrow));"},{"lineNumber":75,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":77,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"LeKhangTai"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"LeKhangTai"},"content":"        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"},{"lineNumber":80,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":81,"author":{"gitID":"LeKhangTai"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":82,"author":{"gitID":"LeKhangTai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"LeKhangTai"},"content":"        bookToBorrow \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"LeKhangTai"},"content":"        borrowedBook \u003d createBorrowedBook(bookToBorrow);"},{"lineNumber":86,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":88,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"LeKhangTai"},"content":"    public boolean equals(Object o) {"},{"lineNumber":90,"author":{"gitID":"LeKhangTai"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":91,"author":{"gitID":"LeKhangTai"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"LeKhangTai"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":94,"author":{"gitID":"LeKhangTai"},"content":"            return false;"},{"lineNumber":95,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"LeKhangTai"},"content":"        BorrowCommand that \u003d (BorrowCommand) o;"},{"lineNumber":97,"author":{"gitID":"LeKhangTai"},"content":"        return Objects.equals(targetIndex, that.targetIndex)"},{"lineNumber":98,"author":{"gitID":"LeKhangTai"},"content":"            \u0026\u0026 Objects.equals(bookToBorrow, that.bookToBorrow);"},{"lineNumber":99,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":101,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"LeKhangTai"},"content":"    public int hashCode() {"},{"lineNumber":103,"author":{"gitID":"LeKhangTai"},"content":"        return Objects.hash(targetIndex, bookToBorrow);"},{"lineNumber":104,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":106,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"LeKhangTai"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":108,"author":{"gitID":"LeKhangTai"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":109,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"LeKhangTai"},"content":"}"},{"lineNumber":111,"author":{"gitID":"LeKhangTai"},"content":""}],"authorContributionMap":{"-":1,"LeKhangTai":110}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Catalogue;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCatalogue;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.AccountListStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.CatalogueStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.SerialisedAccountListStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlCatalogueStorage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":47,"author":{"gitID":"-"},"content":" */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, true);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Catalogue ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        CatalogueStorage catalogueStorage \u003d new XmlCatalogueStorage(userPrefs.getCatalogueFilePath());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AccountListStorage accountListStorage \u003d new SerialisedAccountListStorage(userPrefs.getAccountListFilePath());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(catalogueStorage, userPrefsStorage, accountListStorage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s C\\catalogue and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * The data from the sample Catalogue will be used instead if {@code storage}\u0027s Catalogue is not found,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * or an empty Catalogue will be used instead if errors occur when reading {@code storage}\u0027s Catalogue."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyCatalogue\u003e catalogueOptional;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Optional\u003cUniqueAccountList\u003e accountListOptional;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ReadOnlyCatalogue initialData;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        UniqueAccountList initlaAccountList;"},{"lineNumber":105,"author":{"gitID":"QiuHaohao"},"content":"        //@@author QiuHaohao"},{"lineNumber":106,"author":{"gitID":"QiuHaohao"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"QiuHaohao"},"content":"            catalogueOptional \u003d storage.readCatalogue();"},{"lineNumber":108,"author":{"gitID":"QiuHaohao"},"content":"            if (!catalogueOptional.isPresent()) {"},{"lineNumber":109,"author":{"gitID":"QiuHaohao"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Catalogue\");"},{"lineNumber":110,"author":{"gitID":"QiuHaohao"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"QiuHaohao"},"content":"            initialData \u003d catalogueOptional.orElseGet(SampleDataUtil::getSampleCatalogue);"},{"lineNumber":112,"author":{"gitID":"QiuHaohao"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":113,"author":{"gitID":"QiuHaohao"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Catalogue\");"},{"lineNumber":114,"author":{"gitID":"QiuHaohao"},"content":"            initialData \u003d new Catalogue();"},{"lineNumber":115,"author":{"gitID":"QiuHaohao"},"content":"        } catch (IOException e) {"},{"lineNumber":116,"author":{"gitID":"QiuHaohao"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Catalogue\");"},{"lineNumber":117,"author":{"gitID":"QiuHaohao"},"content":"            initialData \u003d new Catalogue();"},{"lineNumber":118,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":120,"author":{"gitID":"QiuHaohao"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"QiuHaohao"},"content":"            accountListOptional \u003d storage.readAccountList();"},{"lineNumber":122,"author":{"gitID":"QiuHaohao"},"content":"            if (!accountListOptional.isPresent()) {"},{"lineNumber":123,"author":{"gitID":"QiuHaohao"},"content":"                logger.info(\"AccountList file not found. Will be starting with an accountList with only admin\");"},{"lineNumber":124,"author":{"gitID":"QiuHaohao"},"content":"                initlaAccountList \u003d new UniqueAccountList();"},{"lineNumber":125,"author":{"gitID":"QiuHaohao"},"content":"            } else {"},{"lineNumber":126,"author":{"gitID":"QiuHaohao"},"content":"                initlaAccountList \u003d accountListOptional.get();"},{"lineNumber":127,"author":{"gitID":"QiuHaohao"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"QiuHaohao"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":129,"author":{"gitID":"QiuHaohao"},"content":"            logger.warning(\"AccountList file not in the correct format. \""},{"lineNumber":130,"author":{"gitID":"QiuHaohao"},"content":"                + \"Will be starting with an accountList with only admin\");"},{"lineNumber":131,"author":{"gitID":"QiuHaohao"},"content":"            initlaAccountList \u003d new UniqueAccountList();"},{"lineNumber":132,"author":{"gitID":"QiuHaohao"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitID":"QiuHaohao"},"content":"            logger.warning(\"Problem while reading from the AccountList file. \""},{"lineNumber":134,"author":{"gitID":"QiuHaohao"},"content":"                + \"Will be starting with an accountList with only admin\");"},{"lineNumber":135,"author":{"gitID":"QiuHaohao"},"content":"            System.out.print(e.getMessage());"},{"lineNumber":136,"author":{"gitID":"QiuHaohao"},"content":"            initlaAccountList \u003d new UniqueAccountList();"},{"lineNumber":137,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":139,"author":{"gitID":"QiuHaohao"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"QiuHaohao"},"content":"            if (!initlaAccountList.contains(Account.createDefaultAdminAccount())) {"},{"lineNumber":141,"author":{"gitID":"QiuHaohao"},"content":"                initlaAccountList.add(Account.createDefaultAdminAccount());"},{"lineNumber":142,"author":{"gitID":"QiuHaohao"},"content":"            }"},{"lineNumber":143,"author":{"gitID":"QiuHaohao"},"content":"        } catch (DuplicateAccountException e) {"},{"lineNumber":144,"author":{"gitID":"QiuHaohao"},"content":"            e.printStackTrace();"},{"lineNumber":145,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"QiuHaohao"},"content":"        return new ModelManager(initialData, initlaAccountList, userPrefs);"},{"lineNumber":147,"author":{"gitID":"QiuHaohao"},"content":"        //@@author"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":177,"author":{"gitID":"-"},"content":"                + \"Using default config properties\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":205,"author":{"gitID":"-"},"content":"                + \"Using default user prefs\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Catalogue\");"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        logger.info(\"Starting Catalogue \" + MainApp.VERSION);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Catalogue ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"QiuHaohao":43,"-":207}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String catalogueFilePath \u003d \"data/catalogue.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String catalogueBookTitle \u003d \"MyCatalogue\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String accountListFilePath \u003d \"data/accountList.ser\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public String getCatalogueFilePath() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return catalogueFilePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setCatalogueFilePath(String catalogueFilePath) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.catalogueFilePath \u003d catalogueFilePath;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String getCatalogueBookTitle() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return catalogueBookTitle;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void setCatalogueBookTitle(String catalogueBookTitle) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.catalogueBookTitle \u003d catalogueBookTitle;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"    public String getAccountListFilePath() {"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"        return accountListFilePath;"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"    public void setAccountListFilePath(String accountListFilePath) {"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"        this.accountListFilePath \u003d accountListFilePath;"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"    //@@author"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            \u0026\u0026 Objects.equals(catalogueFilePath, o.catalogueFilePath)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            \u0026\u0026 Objects.equals(catalogueBookTitle, o.catalogueBookTitle);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, catalogueFilePath, catalogueBookTitle);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + catalogueFilePath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCatalogue name : \" + catalogueBookTitle);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"QiuHaohao":10,"-":79}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AccountListChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CatalogueChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Credential;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.account.exceptions.AccountNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the catalogue data."},{"lineNumber":31,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Catalogue catalogue;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cBook\u003e filteredBooks;"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"    private UniqueAccountList accountList;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Account currentAccount;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given catalogue and userPrefs."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyCatalogue catalogue, UserPrefs userPrefs) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireAllNonNull(catalogue, userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with catalogue: \" + catalogue + \" and user prefs \" + userPrefs);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.catalogue \u003d new Catalogue(catalogue);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        filteredBooks \u003d new FilteredList\u003c\u003e(this.catalogue.getBookList());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.accountList \u003d new UniqueAccountList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.currentAccount \u003d Account.createGuestAccount();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        addFirstAccount();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"     * Initializes a ModelManager with the given catalogue, accountList and userPrefs."},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"    public ModelManager(ReadOnlyCatalogue catalogue, UniqueAccountList accountList, UserPrefs userPrefs) {"},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":"        super();"},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"        requireAllNonNull(catalogue, accountList, userPrefs);"},{"lineNumber":66,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":67,"author":{"gitID":"QiuHaohao"},"content":"        logger.fine(\"Initializing with catalogue: \" + catalogue"},{"lineNumber":68,"author":{"gitID":"QiuHaohao"},"content":"            + \", accountList: \" + accountList"},{"lineNumber":69,"author":{"gitID":"QiuHaohao"},"content":"            + \" and user prefs \" + userPrefs);"},{"lineNumber":70,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":71,"author":{"gitID":"QiuHaohao"},"content":"        this.catalogue \u003d new Catalogue(catalogue);"},{"lineNumber":72,"author":{"gitID":"QiuHaohao"},"content":"        filteredBooks \u003d new FilteredList\u003c\u003e(this.catalogue.getBookList());"},{"lineNumber":73,"author":{"gitID":"QiuHaohao"},"content":"        this.accountList \u003d accountList;"},{"lineNumber":74,"author":{"gitID":"QiuHaohao"},"content":"        this.currentAccount \u003d Account.createGuestAccount();"},{"lineNumber":75,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"QiuHaohao"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this(new Catalogue(), new UserPrefs());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":83,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":84,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"QiuHaohao"},"content":"     * Adds an account to the AccountList"},{"lineNumber":86,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"QiuHaohao"},"content":"     * @param account"},{"lineNumber":88,"author":{"gitID":"QiuHaohao"},"content":"     * @throws DuplicateAccountException"},{"lineNumber":89,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"QiuHaohao"},"content":"    public void addAccount(Account account) throws DuplicateAccountException {"},{"lineNumber":91,"author":{"gitID":"QiuHaohao"},"content":"        accountList.add(account);"},{"lineNumber":92,"author":{"gitID":"QiuHaohao"},"content":"        indicateAccountListChanged();"},{"lineNumber":93,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":95,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"QiuHaohao"},"content":"     * Deletes an account from the AccountList"},{"lineNumber":97,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"QiuHaohao"},"content":"     * @param account"},{"lineNumber":99,"author":{"gitID":"QiuHaohao"},"content":"     * @throws AccountNotFoundException"},{"lineNumber":100,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"QiuHaohao"},"content":"    public void deleteAccount(Account account) throws AccountNotFoundException {"},{"lineNumber":102,"author":{"gitID":"QiuHaohao"},"content":"        if (account \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitID":"QiuHaohao"},"content":"            throw new AccountNotFoundException(\"Account not Found!\");"},{"lineNumber":104,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"QiuHaohao"},"content":"        accountList.remove(account);"},{"lineNumber":106,"author":{"gitID":"QiuHaohao"},"content":"        indicateAccountListChanged();"},{"lineNumber":107,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":109,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"QiuHaohao"},"content":"     * Replaces an account with a new one"},{"lineNumber":111,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"QiuHaohao"},"content":"     * @param account"},{"lineNumber":113,"author":{"gitID":"QiuHaohao"},"content":"     * @param editedAccount"},{"lineNumber":114,"author":{"gitID":"QiuHaohao"},"content":"     * @throws DuplicateAccountException"},{"lineNumber":115,"author":{"gitID":"QiuHaohao"},"content":"     * @throws AccountNotFoundException"},{"lineNumber":116,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"QiuHaohao"},"content":"    public void updateAccount(Account account, Account editedAccount)"},{"lineNumber":118,"author":{"gitID":"QiuHaohao"},"content":"        throws DuplicateAccountException, AccountNotFoundException {"},{"lineNumber":119,"author":{"gitID":"QiuHaohao"},"content":"        accountList.setAccount(account, account);"},{"lineNumber":120,"author":{"gitID":"QiuHaohao"},"content":"        indicateAccountListChanged();"},{"lineNumber":121,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"LeKhangTai"},"content":"    //@@author LeKhangTai"},{"lineNumber":123,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"LeKhangTai"},"content":"    public synchronized void returnBook(Book target, Book returnedBook) throws BookNotFoundException {"},{"lineNumber":125,"author":{"gitID":"LeKhangTai"},"content":"        catalogue.returnBook(target, returnedBook);"},{"lineNumber":126,"author":{"gitID":"LeKhangTai"},"content":"        indicateCatalogueChanged();"},{"lineNumber":127,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"LeKhangTai"},"content":"    public synchronized void borrowBook(Book target, Book borrowedBook) throws BookNotFoundException {"},{"lineNumber":130,"author":{"gitID":"LeKhangTai"},"content":"        catalogue.borrowBook(target, borrowedBook);"},{"lineNumber":131,"author":{"gitID":"LeKhangTai"},"content":"        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":132,"author":{"gitID":"LeKhangTai"},"content":"        indicateCatalogueChanged();"},{"lineNumber":133,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"LeKhangTai"},"content":"    public synchronized void reserveBook(Book target, Book reservedBook) throws BookNotFoundException {"},{"lineNumber":136,"author":{"gitID":"LeKhangTai"},"content":"        catalogue.reserveBook(target, reservedBook);"},{"lineNumber":137,"author":{"gitID":"LeKhangTai"},"content":"        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":138,"author":{"gitID":"LeKhangTai"},"content":"        indicateCatalogueChanged();"},{"lineNumber":139,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"LeKhangTai"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Adds the initial admin account to the accountList"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void addFirstAccount() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Account admin \u003d Account.createDefaultAdminAccount();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (!this.accountList.contains(admin)) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                this.accountList.add(admin);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            } catch (DuplicateAccountException e) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"content":"    //@@author"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyCatalogue newData) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        catalogue.resetData(newData);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        indicateCatalogueChanged();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"victortardieu"},"content":"    public void resetAccount(UniqueAccountList newData) {"},{"lineNumber":164,"author":{"gitID":"victortardieu"},"content":"        this.accountList \u003d newData;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        indicateAccountListChanged();"},{"lineNumber":166,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public UniqueAccountList getAccountList() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return accountList;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public ReadOnlyCatalogue getCatalogue() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        return catalogue;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private void indicateCatalogueChanged() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        raise(new CatalogueChangedEvent(catalogue));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":186,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":187,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"QiuHaohao"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":189,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"QiuHaohao"},"content":"    private void indicateAccountListChanged() {"},{"lineNumber":191,"author":{"gitID":"QiuHaohao"},"content":"        raise(new AccountListChangedEvent(accountList));"},{"lineNumber":192,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"QiuHaohao"},"content":"    //@@author"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public synchronized void deleteBook(Book target) throws BookNotFoundException {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        catalogue.removeBook(target);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        indicateCatalogueChanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public synchronized void addBook(Book book) throws DuplicateBookException {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        catalogue.addBook(book);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        indicateCatalogueChanged();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void updateBook(Book target, Book editedBook)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        throws DuplicateBookException, BookNotFoundException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedBook);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        catalogue.updateBook(target, editedBook);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        indicateCatalogueChanged();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Book List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Book} backed by the internal list of"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * {@code catalogue}"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public ObservableList\u003cBook\u003e getFilteredBookList() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredBooks);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        filteredBooks.setPredicate(predicate);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":235,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel authenticate(Credential c) {"},{"lineNumber":237,"author":{"gitID":"QiuHaohao"},"content":"        Account matched \u003d accountList.authenticate(c);"},{"lineNumber":238,"author":{"gitID":"QiuHaohao"},"content":"        if (matched !\u003d null) {"},{"lineNumber":239,"author":{"gitID":"QiuHaohao"},"content":"            this.currentAccount \u003d matched;"},{"lineNumber":240,"author":{"gitID":"QiuHaohao"},"content":"            return currentAccount.getPrivilegeLevel();"},{"lineNumber":241,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"QiuHaohao"},"content":"        //if not found"},{"lineNumber":243,"author":{"gitID":"QiuHaohao"},"content":"        return PRIVILEGE_LEVEL_GUEST;"},{"lineNumber":244,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":246,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"QiuHaohao"},"content":"    public void logout() {"},{"lineNumber":248,"author":{"gitID":"QiuHaohao"},"content":"        currentAccount \u003d Account.createGuestAccount();"},{"lineNumber":249,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":251,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":252,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":253,"author":{"gitID":"QiuHaohao"},"content":"        return this.currentAccount.getPrivilegeLevel();"},{"lineNumber":254,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"QiuHaohao"},"content":"    //@@author"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return catalogue.equals(other.catalogue)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            \u0026\u0026 filteredBooks.equals(other.filteredBooks);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"QiuHaohao":90,"victortardieu":6,"-":159,"LeKhangTai":19}},{"path":"src/main/java/seedu/address/logic/commands/ReserveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"LeKhangTai"},"content":"//@@author LeKhangTai"},{"lineNumber":3,"author":{"gitID":"LeKhangTai"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"LeKhangTai"},"content":"import static seedu.address.model.book.Avail.RESERVED;"},{"lineNumber":5,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":6,"author":{"gitID":"LeKhangTai"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"LeKhangTai"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"LeKhangTai"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":10,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":15,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Author;"},{"lineNumber":16,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Avail;"},{"lineNumber":17,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":18,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Isbn;"},{"lineNumber":19,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.Title;"},{"lineNumber":20,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":21,"author":{"gitID":"LeKhangTai"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":23,"author":{"gitID":"LeKhangTai"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"LeKhangTai"},"content":" * Reserves a book"},{"lineNumber":25,"author":{"gitID":"LeKhangTai"},"content":" */"},{"lineNumber":26,"author":{"gitID":"LeKhangTai"},"content":"public class ReserveCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"LeKhangTai"},"content":"    public static final String COMMAND_WORD \u003d \"reserve\";"},{"lineNumber":28,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_RESERVE_BOOK_SUCCESS \u003d \"Book reserved: %1$s\";"},{"lineNumber":29,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Book not available for reserving!\";"},{"lineNumber":30,"author":{"gitID":"LeKhangTai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":31,"author":{"gitID":"LeKhangTai"},"content":"        + \": Reserves the book identified by the index number used in the last book listing.\\n\""},{"lineNumber":32,"author":{"gitID":"LeKhangTai"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":33,"author":{"gitID":"LeKhangTai"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":34,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":35,"author":{"gitID":"LeKhangTai"},"content":"    public static final PrivilegeLevel PRIVILEGE_LEVEL \u003d Model.PRIVILEGE_LEVEL_STUDENT;"},{"lineNumber":36,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":37,"author":{"gitID":"LeKhangTai"},"content":"    private final Index targetIndex;"},{"lineNumber":38,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":39,"author":{"gitID":"LeKhangTai"},"content":"    private Book bookToReserve;"},{"lineNumber":40,"author":{"gitID":"LeKhangTai"},"content":"    private Book reservedBook;"},{"lineNumber":41,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":42,"author":{"gitID":"LeKhangTai"},"content":"    public ReserveCommand(Index targetIndex) {"},{"lineNumber":43,"author":{"gitID":"LeKhangTai"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":44,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":46,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"LeKhangTai"},"content":"     * @param bookToReserve"},{"lineNumber":48,"author":{"gitID":"LeKhangTai"},"content":"     * @return duplicated book with Reserved Availability"},{"lineNumber":49,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"LeKhangTai"},"content":"    private static Book createReservedBook(Book bookToReserve) {"},{"lineNumber":51,"author":{"gitID":"LeKhangTai"},"content":"        assert bookToReserve !\u003d null;"},{"lineNumber":52,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":53,"author":{"gitID":"LeKhangTai"},"content":"        Title updatedTitle \u003d bookToReserve.getTitle();"},{"lineNumber":54,"author":{"gitID":"LeKhangTai"},"content":"        Isbn updatedIsbn \u003d bookToReserve.getIsbn();"},{"lineNumber":55,"author":{"gitID":"LeKhangTai"},"content":"        Avail updatedAvail \u003d new Avail(RESERVED);"},{"lineNumber":56,"author":{"gitID":"LeKhangTai"},"content":"        Author updatedAuthor \u003d bookToReserve.getAuthor();"},{"lineNumber":57,"author":{"gitID":"LeKhangTai"},"content":"        Set\u003cTag\u003e updatedTags \u003d bookToReserve.getTags();"},{"lineNumber":58,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":59,"author":{"gitID":"LeKhangTai"},"content":"        return new Book(updatedTitle, updatedAuthor, updatedIsbn, updatedAvail, updatedTags);"},{"lineNumber":60,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":62,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"LeKhangTai"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(bookToReserve);"},{"lineNumber":65,"author":{"gitID":"LeKhangTai"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"LeKhangTai"},"content":"            model.reserveBook(bookToReserve, reservedBook);"},{"lineNumber":67,"author":{"gitID":"LeKhangTai"},"content":"        } catch (BookNotFoundException pnfe) {"},{"lineNumber":68,"author":{"gitID":"LeKhangTai"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":69,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"LeKhangTai"},"content":"        return new CommandResult(String.format(MESSAGE_RESERVE_BOOK_SUCCESS, bookToReserve));"},{"lineNumber":71,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":73,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"LeKhangTai"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"LeKhangTai"},"content":"        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"},{"lineNumber":76,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":77,"author":{"gitID":"LeKhangTai"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":78,"author":{"gitID":"LeKhangTai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"LeKhangTai"},"content":"        bookToReserve \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"LeKhangTai"},"content":"        reservedBook \u003d createReservedBook(bookToReserve);"},{"lineNumber":82,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":84,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"LeKhangTai"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitID":"LeKhangTai"},"content":"        return Objects.hash(targetIndex, bookToReserve);"},{"lineNumber":87,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":89,"author":{"gitID":"LeKhangTai"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"LeKhangTai"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":91,"author":{"gitID":"LeKhangTai"},"content":"        return PRIVILEGE_LEVEL;"},{"lineNumber":92,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"LeKhangTai"},"content":"}"},{"lineNumber":94,"author":{"gitID":"LeKhangTai"},"content":""}],"authorContributionMap":{"-":1,"LeKhangTai":93}},{"path":"src/main/java/seedu/address/model/book/Title.java","lines":[{"lineNumber":1,"author":{"gitID":"khiayi"},"content":"//@@author khiayi"},{"lineNumber":2,"author":{"gitID":"khiayi"},"content":"package seedu.address.model.book;"},{"lineNumber":3,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":4,"author":{"gitID":"khiayi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"khiayi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":7,"author":{"gitID":"khiayi"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"khiayi"},"content":" * Represents a Book\u0027s name in the catalogue."},{"lineNumber":9,"author":{"gitID":"khiayi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"},{"lineNumber":10,"author":{"gitID":"khiayi"},"content":" */"},{"lineNumber":11,"author":{"gitID":"khiayi"},"content":"public class Title {"},{"lineNumber":12,"author":{"gitID":"khiayi"},"content":"    //@@author khiayi"},{"lineNumber":13,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"khiayi"},"content":"        \"Book titles should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":16,"author":{"gitID":"khiayi"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"khiayi"},"content":"     * The first character of the title must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"khiayi"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"khiayi"},"content":"    public static final String TITLE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":22,"author":{"gitID":"khiayi"},"content":"    public final String fullTitle;"},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"     * Constructs a {@code Title}."},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"     * @param title A valid title."},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"    public Title(String title) {"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        requireNonNull(title);"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"        this.fullTitle \u003d title;"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid book name."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return fullTitle;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            || (other instanceof Title // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.fullTitle.equals(((Title) other).fullTitle)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return fullTitle.hashCode();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"khiayi":34,"-":26}},{"path":"src/main/java/seedu/address/model/book/Book.java","lines":[{"lineNumber":1,"author":{"gitID":"khiayi"},"content":"//@@author khiayi"},{"lineNumber":2,"author":{"gitID":"khiayi"},"content":"package seedu.address.model.book;"},{"lineNumber":3,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":4,"author":{"gitID":"khiayi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":6,"author":{"gitID":"khiayi"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"khiayi"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"khiayi"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":10,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"khiayi"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":13,"author":{"gitID":"khiayi"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"khiayi"},"content":" * Represents a Book in the catalogue."},{"lineNumber":15,"author":{"gitID":"khiayi"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"khiayi"},"content":" */"},{"lineNumber":17,"author":{"gitID":"khiayi"},"content":"public class Book {"},{"lineNumber":18,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":19,"author":{"gitID":"khiayi"},"content":"    private final Title title;"},{"lineNumber":20,"author":{"gitID":"khiayi"},"content":"    private final Author author;"},{"lineNumber":21,"author":{"gitID":"khiayi"},"content":"    private final Isbn isbn;"},{"lineNumber":22,"author":{"gitID":"khiayi"},"content":"    private final Avail avail;"},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"    private final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"    public Book(Title title, Author author, Isbn isbn, Avail avail, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        requireAllNonNull(title, author, isbn, avail, tags);"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        this.title \u003d title;"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"        this.author \u003d author;"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"        this.isbn \u003d isbn;"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"        this.avail \u003d avail;"},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":"    public Title getTitle() {"},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":"        return title;"},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":43,"author":{"gitID":"khiayi"},"content":"    public Author getAuthor() {"},{"lineNumber":44,"author":{"gitID":"khiayi"},"content":"        return author;"},{"lineNumber":45,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":47,"author":{"gitID":"khiayi"},"content":"    public Isbn getIsbn() {"},{"lineNumber":48,"author":{"gitID":"khiayi"},"content":"        return isbn;"},{"lineNumber":49,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":51,"author":{"gitID":"khiayi"},"content":"    public Avail getAvail() {"},{"lineNumber":52,"author":{"gitID":"khiayi"},"content":"        return avail;"},{"lineNumber":53,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":55,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"khiayi"},"content":"     * Returns true if this book\u0027s isbn is the same as the isbn provided"},{"lineNumber":57,"author":{"gitID":"khiayi"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"khiayi"},"content":"     * @param isbn"},{"lineNumber":59,"author":{"gitID":"khiayi"},"content":"     * @return"},{"lineNumber":60,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"khiayi"},"content":"    public boolean isbnMatches(Isbn isbn) {"},{"lineNumber":62,"author":{"gitID":"khiayi"},"content":"        return this.isbn.equals(isbn);"},{"lineNumber":63,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":65,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"khiayi"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":67,"author":{"gitID":"khiayi"},"content":"     * if modification is attempted."},{"lineNumber":68,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"khiayi"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":70,"author":{"gitID":"khiayi"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":71,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":73,"author":{"gitID":"khiayi"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"khiayi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"khiayi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"khiayi"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"khiayi"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":79,"author":{"gitID":"khiayi"},"content":"        if (!(other instanceof Book)) {"},{"lineNumber":80,"author":{"gitID":"khiayi"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"khiayi"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":83,"author":{"gitID":"khiayi"},"content":"        Book otherBook \u003d (Book) other;"},{"lineNumber":84,"author":{"gitID":"khiayi"},"content":"        return otherBook.getTitle().equals(this.getTitle())"},{"lineNumber":85,"author":{"gitID":"khiayi"},"content":"            \u0026\u0026 otherBook.getAuthor().equals(this.getAuthor())"},{"lineNumber":86,"author":{"gitID":"khiayi"},"content":"            \u0026\u0026 otherBook.getIsbn().equals(this.getIsbn())"},{"lineNumber":87,"author":{"gitID":"khiayi"},"content":"            \u0026\u0026 otherBook.getAvail().equals(this.getAvail());"},{"lineNumber":88,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":90,"author":{"gitID":"khiayi"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"khiayi"},"content":"    public int hashCode() {"},{"lineNumber":92,"author":{"gitID":"khiayi"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":93,"author":{"gitID":"khiayi"},"content":"        return Objects.hash(title, author, isbn, avail, tags);"},{"lineNumber":94,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":96,"author":{"gitID":"khiayi"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"khiayi"},"content":"    public String toString() {"},{"lineNumber":98,"author":{"gitID":"khiayi"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":99,"author":{"gitID":"khiayi"},"content":"        builder.append(getTitle())"},{"lineNumber":100,"author":{"gitID":"khiayi"},"content":"            .append(\" Author: \")"},{"lineNumber":101,"author":{"gitID":"khiayi"},"content":"            .append(getAuthor())"},{"lineNumber":102,"author":{"gitID":"khiayi"},"content":"            .append(\" Isbn: \")"},{"lineNumber":103,"author":{"gitID":"khiayi"},"content":"            .append(getIsbn())"},{"lineNumber":104,"author":{"gitID":"khiayi"},"content":"            .append(\" Avail: \")"},{"lineNumber":105,"author":{"gitID":"khiayi"},"content":"            .append(getAvail())"},{"lineNumber":106,"author":{"gitID":"khiayi"},"content":"            .append(\" Tags: \");"},{"lineNumber":107,"author":{"gitID":"khiayi"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":108,"author":{"gitID":"khiayi"},"content":"        return builder.toString();"},{"lineNumber":109,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":111,"author":{"gitID":"khiayi"},"content":"}"}],"authorContributionMap":{"khiayi":111}},{"path":"src/main/java/seedu/address/model/Catalogue.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.book.UniqueBookList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the catalogue level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class Catalogue implements ReadOnlyCatalogue {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueBookList books;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"    */ {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        books \u003d new UniqueBookList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Catalogue() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an Catalogue using the Books and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Catalogue(ReadOnlyCatalogue toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setBooks(List\u003cBook\u003e books) throws DuplicateBookException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.books.setBooks(books);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code Catalogue} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyCatalogue newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cBook\u003e syncedBookList \u003d newData.getBookList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            setBooks(syncedBookList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (DuplicateBookException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Catalogue should not have duplicate books\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// book-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a book to the catalogue."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Also checks the new book\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the book to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicateBookException if an equivalent book already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addBook(Book p) throws DuplicateBookException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Book book \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any book"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the book list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        books.add(book);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Replaces the given book {@code target} in the list with {@code editedBook}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code Catalogue}\u0027s tag list will be updated with the tags of {@code editedBook}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicateBookException if updating the book\u0027s details causes the book to be equivalent to"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *                                another existing book in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws BookNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Book)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void updateBook(Book target, Book editedBook)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        throws DuplicateBookException, BookNotFoundException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(editedBook);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Book syncedEditedBook \u003d syncWithMasterTagList(editedBook);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any book"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // in the book list."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        books.setBook(target, syncedEditedBook);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code book} that are not in the list."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code book} such that every tag in this book points to a Tag object in the master"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private Book syncWithMasterTagList(Book book) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final UniqueTagList bookTags \u003d new UniqueTagList(book.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        tags.mergeFrom(bookTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // used for checking book tag references"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Rebuild the list of book tags to point to the relevant tags in the master tag list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        bookTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return new Book("},{"lineNumber":135,"author":{"gitID":"-"},"content":"            book.getTitle(), book.getAuthor(), book.getIsbn(), book.getAvail(), correctTagReferences);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code Catalogue}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @throws BookNotFoundException if the {@code key} is not in this {@code Catalogue}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public boolean removeBook(Book key) throws BookNotFoundException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (books.remove(key)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            throw new BookNotFoundException();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"LeKhangTai"},"content":"    //@@author LeKhangTai"},{"lineNumber":157,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"LeKhangTai"},"content":"     * @param target book that is selected by index to return"},{"lineNumber":159,"author":{"gitID":"LeKhangTai"},"content":"     * @param returnedBook duplicated book that will replace the original book"},{"lineNumber":160,"author":{"gitID":"LeKhangTai"},"content":"     * @throws BookNotFoundException"},{"lineNumber":161,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"LeKhangTai"},"content":"    public void returnBook(Book target, Book returnedBook)"},{"lineNumber":163,"author":{"gitID":"LeKhangTai"},"content":"        throws BookNotFoundException {"},{"lineNumber":164,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(returnedBook);"},{"lineNumber":165,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":166,"author":{"gitID":"LeKhangTai"},"content":"        Book syncedEditedBook \u003d syncWithMasterTagList(returnedBook);"},{"lineNumber":167,"author":{"gitID":"LeKhangTai"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":168,"author":{"gitID":"LeKhangTai"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any book"},{"lineNumber":169,"author":{"gitID":"LeKhangTai"},"content":"        // in the book list."},{"lineNumber":170,"author":{"gitID":"LeKhangTai"},"content":"        books.replaceReturnedBook(target, syncedEditedBook);"},{"lineNumber":171,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":173,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"LeKhangTai"},"content":"     * @param target book that is selected by index to borrow"},{"lineNumber":175,"author":{"gitID":"LeKhangTai"},"content":"     * @param borrowedBook duplicated book that will replace the original book"},{"lineNumber":176,"author":{"gitID":"LeKhangTai"},"content":"     * @throws BookNotFoundException"},{"lineNumber":177,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"LeKhangTai"},"content":"    public void borrowBook(Book target, Book borrowedBook)"},{"lineNumber":179,"author":{"gitID":"LeKhangTai"},"content":"        throws BookNotFoundException {"},{"lineNumber":180,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(borrowedBook);"},{"lineNumber":181,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":182,"author":{"gitID":"LeKhangTai"},"content":"        Book syncedEditedBook \u003d syncWithMasterTagList(borrowedBook);"},{"lineNumber":183,"author":{"gitID":"LeKhangTai"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":184,"author":{"gitID":"LeKhangTai"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any book"},{"lineNumber":185,"author":{"gitID":"LeKhangTai"},"content":"        // in the book list."},{"lineNumber":186,"author":{"gitID":"LeKhangTai"},"content":"        books.replaceBorrowedBook(target, syncedEditedBook);"},{"lineNumber":187,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":189,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"LeKhangTai"},"content":"     * @param target book that is selected by index to reserve"},{"lineNumber":191,"author":{"gitID":"LeKhangTai"},"content":"     * @param reservedBook duplicated book that will replace the original book"},{"lineNumber":192,"author":{"gitID":"LeKhangTai"},"content":"     * @throws BookNotFoundException"},{"lineNumber":193,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"LeKhangTai"},"content":"    public void reserveBook(Book target, Book reservedBook)"},{"lineNumber":195,"author":{"gitID":"LeKhangTai"},"content":"        throws BookNotFoundException {"},{"lineNumber":196,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(reservedBook);"},{"lineNumber":197,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":198,"author":{"gitID":"LeKhangTai"},"content":"        Book syncedEditedBook \u003d syncWithMasterTagList(reservedBook);"},{"lineNumber":199,"author":{"gitID":"LeKhangTai"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":200,"author":{"gitID":"LeKhangTai"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any book"},{"lineNumber":201,"author":{"gitID":"LeKhangTai"},"content":"        // in the book list."},{"lineNumber":202,"author":{"gitID":"LeKhangTai"},"content":"        books.replaceReservedBook(target, syncedEditedBook);"},{"lineNumber":203,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"LeKhangTai"},"content":"    //@@author"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        return books.asObservableList().size() + \" books, \" + tags.asObservableList().size() + \" tags\";"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public ObservableList\u003cBook\u003e getBookList() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        return books.asObservableList();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            || (other instanceof Catalogue // instanceof handles nulls"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.books.equals(((Catalogue) other).books)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.tags.equalsOrderInsensitive(((Catalogue) other).tags));"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return Objects.hash(books, tags);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":188,"LeKhangTai":49}},{"path":"src/main/java/seedu/address/model/account/UniqueAccountList.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import java.io.Serializable;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.exceptions.AccountNotFoundException;"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":" * A list of accounts that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":" * \u003cp\u003e"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":" *"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":" * @see Account#equals(Object)"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"public class UniqueAccountList implements Serializable, Iterable\u003cAccount\u003e {"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"    private final ArrayList\u003cAccount\u003e internalList \u003d new ArrayList\u003cAccount\u003e();"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if the list contains an equivalent account as the given argument."},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    public boolean contains(Account toCheck) {"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(toCheck);"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"     * Adds a account to the list."},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"     * @throws DuplicateAccountException if the account to add is an account with the same username in the list."},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"    public void add(Account toAdd) throws DuplicateAccountException {"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(toAdd);"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"        if (containsUsername(toAdd)) {"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"            throw new DuplicateAccountException();"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"        internalList.add(toAdd);"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"     * Replaces the account {@code target} in the list with {@code editedAccount}."},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"     * @throws DuplicateAccountException if the replacement is equivalent to another existing account in the list."},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"     * @throws AccountNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"    public void setAccount(Account target, Account editedAccount)"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"        throws DuplicateAccountException, AccountNotFoundException {"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(editedAccount);"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"            throw new AccountNotFoundException();"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"        if (!target.usernameMatches(editedAccount) \u0026\u0026 this.containsUsername(target)) {"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"            throw new DuplicateAccountException();"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":"        internalList.set(index, editedAccount);"},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":67,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"QiuHaohao"},"content":"     * Removes the equivalent account from the list."},{"lineNumber":69,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"QiuHaohao"},"content":"     * @throws AccountNotFoundException if no such account could be found in the list."},{"lineNumber":71,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"QiuHaohao"},"content":"    public boolean remove(Account toRemove) throws AccountNotFoundException {"},{"lineNumber":73,"author":{"gitID":"QiuHaohao"},"content":"        //if (model.getAccountList().searchIfUsernameExist(new Username(username))) {"},{"lineNumber":74,"author":{"gitID":"QiuHaohao"},"content":"        //  throw new AccountNotFoundException(\"Account not found!\");"},{"lineNumber":75,"author":{"gitID":"QiuHaohao"},"content":"        //}"},{"lineNumber":76,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"QiuHaohao"},"content":"        final boolean accountFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"QiuHaohao"},"content":"        if (!accountFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"QiuHaohao"},"content":"            throw new AccountNotFoundException();"},{"lineNumber":80,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"QiuHaohao"},"content":"        return accountFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":84,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"QiuHaohao"},"content":"     * Returns the account that matches with the provided credential,"},{"lineNumber":86,"author":{"gitID":"QiuHaohao"},"content":"     * returns null if none exists"},{"lineNumber":87,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"QiuHaohao"},"content":"     * @param c"},{"lineNumber":89,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":90,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"QiuHaohao"},"content":"    public Account authenticate(Credential c) {"},{"lineNumber":92,"author":{"gitID":"QiuHaohao"},"content":"        for (Account a : internalList) {"},{"lineNumber":93,"author":{"gitID":"QiuHaohao"},"content":"            if (a.credentialMatches(c)) {"},{"lineNumber":94,"author":{"gitID":"QiuHaohao"},"content":"                return a;"},{"lineNumber":95,"author":{"gitID":"QiuHaohao"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"QiuHaohao"},"content":"        return null;"},{"lineNumber":98,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":100,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if there is an account with the username provided"},{"lineNumber":102,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"QiuHaohao"},"content":"     * @param u"},{"lineNumber":104,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":105,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"QiuHaohao"},"content":"    public boolean containsUsername(Username u) {"},{"lineNumber":107,"author":{"gitID":"QiuHaohao"},"content":"        for (Account a : internalList) {"},{"lineNumber":108,"author":{"gitID":"QiuHaohao"},"content":"            if (a.usernameMatches(u)) {"},{"lineNumber":109,"author":{"gitID":"QiuHaohao"},"content":"                return true;"},{"lineNumber":110,"author":{"gitID":"QiuHaohao"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"QiuHaohao"},"content":"        return false;"},{"lineNumber":113,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":115,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if there is an account with an username that is the"},{"lineNumber":117,"author":{"gitID":"QiuHaohao"},"content":"     * same as that of the credential provided"},{"lineNumber":118,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"QiuHaohao"},"content":"     * @param c"},{"lineNumber":120,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":121,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"QiuHaohao"},"content":"    public boolean containsUsername(Credential c) {"},{"lineNumber":123,"author":{"gitID":"QiuHaohao"},"content":"        return containsUsername(c.getUsername());"},{"lineNumber":124,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":126,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if there is an account with an username that is the"},{"lineNumber":128,"author":{"gitID":"QiuHaohao"},"content":"     * same as that of the account provided"},{"lineNumber":129,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"QiuHaohao"},"content":"     * @param a"},{"lineNumber":131,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":132,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"QiuHaohao"},"content":"    public boolean containsUsername(Account a) {"},{"lineNumber":134,"author":{"gitID":"QiuHaohao"},"content":"        return containsUsername(a.getCredential());"},{"lineNumber":135,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":137,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"QiuHaohao"},"content":"     * Returns the account if there is an account with the username provided"},{"lineNumber":139,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":140,"author":{"gitID":"QiuHaohao"},"content":"     * @param u"},{"lineNumber":141,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":142,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"QiuHaohao"},"content":"    public Account searchByUsername(Username u) {"},{"lineNumber":144,"author":{"gitID":"QiuHaohao"},"content":"        for (Account a : internalList) {"},{"lineNumber":145,"author":{"gitID":"QiuHaohao"},"content":"            if (a.usernameMatches(u)) {"},{"lineNumber":146,"author":{"gitID":"QiuHaohao"},"content":"                return a;"},{"lineNumber":147,"author":{"gitID":"QiuHaohao"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"QiuHaohao"},"content":"        return null;"},{"lineNumber":150,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if account exists with such username provided"},{"lineNumber":153,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"QiuHaohao"},"content":"     * @param u"},{"lineNumber":155,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":156,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"QiuHaohao"},"content":"    public boolean searchIfUsernameExist (Username u) {"},{"lineNumber":158,"author":{"gitID":"QiuHaohao"},"content":"        for (Account a : internalList) {"},{"lineNumber":159,"author":{"gitID":"QiuHaohao"},"content":"            if (a.usernameMatches(u)) {"},{"lineNumber":160,"author":{"gitID":"QiuHaohao"},"content":"                return true;"},{"lineNumber":161,"author":{"gitID":"QiuHaohao"},"content":"            }"},{"lineNumber":162,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"QiuHaohao"},"content":"        return false;"},{"lineNumber":164,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":166,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":167,"author":{"gitID":"QiuHaohao"},"content":"    public int size() {"},{"lineNumber":168,"author":{"gitID":"QiuHaohao"},"content":"        return internalList.size();"},{"lineNumber":169,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":171,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":172,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":173,"author":{"gitID":"QiuHaohao"},"content":"    public Iterator\u003cAccount\u003e iterator() {"},{"lineNumber":174,"author":{"gitID":"QiuHaohao"},"content":"        return internalList.iterator();"},{"lineNumber":175,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":177,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":178,"author":{"gitID":"QiuHaohao"},"content":"    public boolean equals(Object other) {"},{"lineNumber":179,"author":{"gitID":"QiuHaohao"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":180,"author":{"gitID":"QiuHaohao"},"content":"            || (other instanceof UniqueAccountList // instanceof handles nulls"},{"lineNumber":181,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 this.internalList.equals(((UniqueAccountList) other).internalList));"},{"lineNumber":182,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":184,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"QiuHaohao"},"content":"    public int hashCode() {"},{"lineNumber":186,"author":{"gitID":"QiuHaohao"},"content":"        return internalList.hashCode();"},{"lineNumber":187,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":189,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":190,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":190}},{"path":"src/main/java/seedu/address/model/account/PrivilegeLevel.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import java.io.Serializable;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":" * Represents the privilegeLevel of an account/a command"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"public class PrivilegeLevel implements Comparable\u003cPrivilegeLevel\u003e, Serializable {"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"    public static final int PRIVILEGE_LEVEL_GUEST \u003d 0;"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    public static final int PRIVILEGE_LEVEL_STUDENT \u003d 1;"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"    public static final int PRIVILEGE_LEVEL_LIBRARIAN \u003d 2;"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MESSAGE_PRIVILEGE_LEVEL_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"        \"Privilege Level should be an integer from 0 to 2 inclusive.\";"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"    private final int privilegeLevel;"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"     * Constructs a PrivilegeLevel"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"     * @param privilegeLevel"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel(int privilegeLevel) {"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(privilegeLevel);"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        checkArgument(isValidPrivilegeLevel(privilegeLevel), MESSAGE_PRIVILEGE_LEVEL_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"        this.privilegeLevel \u003d privilegeLevel;"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if a given string is a valid PrivilegeLevel"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"    public static boolean isValidPrivilegeLevel(int test) {"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"        return test \u003e\u003d PRIVILEGE_LEVEL_GUEST"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 test \u003c\u003d PRIVILEGE_LEVEL_LIBRARIAN;"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"    public int getPrivilegeLevel() {"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"        return privilegeLevel;"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"    public boolean equals(Object o) {"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"            return true;"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel that \u003d (PrivilegeLevel) o;"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"        return privilegeLevel \u003d\u003d that.privilegeLevel;"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"        return Objects.hash(privilegeLevel);"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"    public int compareTo(PrivilegeLevel o) {"},{"lineNumber":66,"author":{"gitID":"QiuHaohao"},"content":"        return this.privilegeLevel - o.privilegeLevel;"},{"lineNumber":67,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":68}},{"path":"src/main/java/seedu/address/model/book/Author.java","lines":[{"lineNumber":1,"author":{"gitID":"khiayi"},"content":"//@@author khiayi"},{"lineNumber":2,"author":{"gitID":"khiayi"},"content":"package seedu.address.model.book;"},{"lineNumber":3,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":4,"author":{"gitID":"khiayi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"khiayi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":7,"author":{"gitID":"khiayi"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"khiayi"},"content":" * Represents a Book\u0027s author in the catalogue."},{"lineNumber":9,"author":{"gitID":"khiayi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAuthor(String)}"},{"lineNumber":10,"author":{"gitID":"khiayi"},"content":" */"},{"lineNumber":11,"author":{"gitID":"khiayi"},"content":"public class Author {"},{"lineNumber":12,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":13,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_AUTHOR_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"khiayi"},"content":"        \"Book author should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":16,"author":{"gitID":"khiayi"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"khiayi"},"content":"     * The first character of the author must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"khiayi"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"khiayi"},"content":"    public static final String AUTHOR_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":22,"author":{"gitID":"khiayi"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"     * Constructs an {@code Author}."},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"     * @param author A valid author."},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"    public Author(String author) {"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        requireNonNull(author);"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        checkArgument(isValidAuthor(author), MESSAGE_AUTHOR_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"        this.value \u003d author;"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid book author."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static boolean isValidAuthor(String test) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return test.matches(AUTHOR_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            || (other instanceof Author // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.value.equals(((Author) other).value)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"khiayi":34,"-":26}},{"path":"src/main/java/seedu/address/model/account/MatricNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import java.io.Serializable;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":" * Represents a set of username and password"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"public class MatricNumber implements Serializable {"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MESSAGE_MATRIC_NUMBER_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"        \"Matriculation number should start with \\\"A\\\", followed by 7 digits and end with uppercase letter.\";"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    public static final String MATRIC_NUMBER_VALIDATION_REGEX \u003d \"A[0-9]{7}[A-Z]\";"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"    private final String matricNumber;"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"     * Constructs a {@code Credential}"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"     * @param matricNumber A valid matric number"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"    public MatricNumber(String matricNumber) {"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"        checkArgument(isValidMatricNumber(matricNumber), MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if a given string is a valid MatricNumber."},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"    public static boolean isValidMatricNumber(String test) {"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"        return test.matches(MATRIC_NUMBER_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"     * Returns MatricNumber."},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"    public String getMatricNumber() {"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"        return matricNumber;"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"        return other \u003d\u003d this"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"            || (other instanceof MatricNumber // short circuit if same obj"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 this.getMatricNumber().equals(((MatricNumber) other).getMatricNumber()) //check status"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"                );"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"        return matricNumber;"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"        return matricNumber.hashCode();"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":63}},{"path":"src/main/java/seedu/address/model/book/Avail.java","lines":[{"lineNumber":1,"author":{"gitID":"khiayi"},"content":"//@@author khiayi"},{"lineNumber":2,"author":{"gitID":"khiayi"},"content":"package seedu.address.model.book;"},{"lineNumber":3,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":4,"author":{"gitID":"khiayi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"khiayi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":7,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":8,"author":{"gitID":"khiayi"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"khiayi"},"content":" * Represents a Book\u0027s availability in the catalogue."},{"lineNumber":10,"author":{"gitID":"khiayi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAvail(String)}"},{"lineNumber":11,"author":{"gitID":"khiayi"},"content":" */"},{"lineNumber":12,"author":{"gitID":"khiayi"},"content":"public class Avail {"},{"lineNumber":13,"author":{"gitID":"khiayi"},"content":"    public static final String AVAILABLE \u003d \"Available\";"},{"lineNumber":14,"author":{"gitID":"khiayi"},"content":"    public static final String BORROWED \u003d \"Borrowed\";"},{"lineNumber":15,"author":{"gitID":"khiayi"},"content":"    public static final String RESERVED \u003d \"Reserved\";"},{"lineNumber":16,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_AVAIL_CONSTRAINTS \u003d \"Book availability should be one of the following:\\n \""},{"lineNumber":17,"author":{"gitID":"khiayi"},"content":"        + \"1. \" + AVAILABLE + \"\\n\""},{"lineNumber":18,"author":{"gitID":"khiayi"},"content":"        + \"2. \" + BORROWED + \"\\n\""},{"lineNumber":19,"author":{"gitID":"khiayi"},"content":"        + \"3. \" + RESERVED + \"\\n\";"},{"lineNumber":20,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":21,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":22,"author":{"gitID":"khiayi"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"     * Constructs an {@code Avail}."},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"     * @param avail A valid availability ."},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"khiayi"},"content":"    public Avail(String avail) {"},{"lineNumber":30,"author":{"gitID":"khiayi"},"content":"        requireNonNull(avail);"},{"lineNumber":31,"author":{"gitID":"khiayi"},"content":"        checkArgument(isValidAvail(avail), MESSAGE_AVAIL_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"khiayi"},"content":"        this.value \u003d avail;"},{"lineNumber":33,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":35,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"khiayi"},"content":"     * Returns if a given string is a valid book avail."},{"lineNumber":37,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"khiayi"},"content":"    public static boolean isValidAvail(String test) {"},{"lineNumber":39,"author":{"gitID":"khiayi"},"content":"        return test.equals(AVAILABLE)"},{"lineNumber":40,"author":{"gitID":"khiayi"},"content":"            || test.equals(BORROWED)"},{"lineNumber":41,"author":{"gitID":"khiayi"},"content":"            || test.equals(RESERVED);"},{"lineNumber":42,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":44,"author":{"gitID":"khiayi"},"content":"    //@@author"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            || (other instanceof Avail // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.value.equals(((Avail) other).value)); // state check"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"khiayi":44,"-":18}},{"path":"src/main/java/seedu/address/model/account/exceptions/AccountNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account.exceptions;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":" * Signals that the operation is unable to find the specified account."},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"public class AccountNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"    public AccountNotFoundException (String message) {"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"        super (message);"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    public  AccountNotFoundException() {}"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":17}},{"path":"src/main/java/seedu/address/model/account/exceptions/DuplicateAccountException.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account.exceptions;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":" * Signals that the operation will result in duplicate Book objects."},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":"public class DuplicateAccountException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"    public DuplicateAccountException() {"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"        super(\"Operation would result in duplicate books\");"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":13}},{"path":"src/main/java/seedu/address/model/book/Isbn.java","lines":[{"lineNumber":1,"author":{"gitID":"khiayi"},"content":"//@@author khiayi"},{"lineNumber":2,"author":{"gitID":"khiayi"},"content":"package seedu.address.model.book;"},{"lineNumber":3,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":4,"author":{"gitID":"khiayi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"khiayi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":7,"author":{"gitID":"khiayi"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"khiayi"},"content":" * Represents a Book\u0027s isbn number in the catalogue."},{"lineNumber":9,"author":{"gitID":"khiayi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidIsbn(String)}"},{"lineNumber":10,"author":{"gitID":"khiayi"},"content":" */"},{"lineNumber":11,"author":{"gitID":"khiayi"},"content":"public class Isbn {"},{"lineNumber":12,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":13,"author":{"gitID":"khiayi"},"content":"    public static final String MESSAGE_ISBN_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"khiayi"},"content":"        \"Isbn numbers can only contain numbers, and should be at 13 digits long\";"},{"lineNumber":15,"author":{"gitID":"khiayi"},"content":"    public static final String ISBN_VALIDATION_REGEX \u003d \"\\\\d{13}\";"},{"lineNumber":16,"author":{"gitID":"khiayi"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"khiayi"},"content":""},{"lineNumber":18,"author":{"gitID":"khiayi"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"khiayi"},"content":"     * Constructs a {@code Isbn}."},{"lineNumber":20,"author":{"gitID":"khiayi"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"khiayi"},"content":"     * @param isbn A valid isbn number."},{"lineNumber":22,"author":{"gitID":"khiayi"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"khiayi"},"content":"    public Isbn(String isbn) {"},{"lineNumber":24,"author":{"gitID":"khiayi"},"content":"        requireNonNull(isbn);"},{"lineNumber":25,"author":{"gitID":"khiayi"},"content":"        checkArgument(isValidIsbn(isbn), MESSAGE_ISBN_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"khiayi"},"content":"        this.value \u003d isbn;"},{"lineNumber":27,"author":{"gitID":"khiayi"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"khiayi"},"content":"    //@@author"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid book isbn number."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static boolean isValidIsbn(String test) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return test.matches(ISBN_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            || (other instanceof Isbn // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.value.equals(((Isbn) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"khiayi":28,"-":26}},{"path":"src/main/java/seedu/address/model/account/Account.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":"import java.io.Serializable;"},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":" * Represents an account in the accountBook"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":"public class Account implements Serializable {"},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"    private final Name name;"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"    private final Credential credential;"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"    private final MatricNumber matricNumber;"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"    private final PrivilegeLevel privilegeLevel;"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"     * Constructs an Account"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"     * @param name"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"     * @param credential"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":"     * @param matricNumber"},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"     * @param privilegeLevel"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"    public Account(Name name, Credential credential, MatricNumber matricNumber, PrivilegeLevel privilegeLevel) {"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(credential);"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":"        requireNonNull(privilegeLevel);"},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"        this.credential \u003d credential;"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"        this.privilegeLevel \u003d privilegeLevel;"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"     * Returns a sample guest account"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"    public static final Account createGuestAccount() {"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"        Name name \u003d new Name(\"Guest\");"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"        Credential credential \u003d new Credential(\"Guest\", \"Guest\");"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber matricNumber \u003d new MatricNumber(\"A0000000X\");"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel privilegeLevel \u003d new PrivilegeLevel(0);"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":"        Account guest \u003d new Account(name, credential, matricNumber, privilegeLevel);"},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"        return guest;"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"     * Returns a sample admin account"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":"    public static final Account createDefaultAdminAccount() {"},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"        Name name \u003d new Name(\"Alice\");"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"        Credential credential \u003d new Credential(\"admin\", \"admin\");"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber matricNumber \u003d new MatricNumber(\"A0123456X\");"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel privilegeLevel \u003d new PrivilegeLevel(2);"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"        Account admin \u003d new Account(name, credential, matricNumber, privilegeLevel);"},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":"        return admin;"},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":67,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"QiuHaohao"},"content":"     * Returns a sample student account"},{"lineNumber":69,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":71,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"QiuHaohao"},"content":"    public static final Account createDefaultStudentAccount() {"},{"lineNumber":73,"author":{"gitID":"QiuHaohao"},"content":"        Name name \u003d new Name(\"Bob\");"},{"lineNumber":74,"author":{"gitID":"QiuHaohao"},"content":"        Credential credential \u003d new Credential(\"student\", \"student\");"},{"lineNumber":75,"author":{"gitID":"QiuHaohao"},"content":"        MatricNumber matricNumber \u003d new MatricNumber(\"A0123456X\");"},{"lineNumber":76,"author":{"gitID":"QiuHaohao"},"content":"        PrivilegeLevel privilegeLevel \u003d new PrivilegeLevel(1);"},{"lineNumber":77,"author":{"gitID":"QiuHaohao"},"content":"        Account student \u003d new Account(name, credential, matricNumber, privilegeLevel);"},{"lineNumber":78,"author":{"gitID":"QiuHaohao"},"content":"        return student;"},{"lineNumber":79,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":81,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"QiuHaohao"},"content":"     * Returns the name of the account"},{"lineNumber":83,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":85,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"QiuHaohao"},"content":"    public Name getName() {"},{"lineNumber":87,"author":{"gitID":"QiuHaohao"},"content":"        return name;"},{"lineNumber":88,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":90,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"QiuHaohao"},"content":"     * Returns the credential"},{"lineNumber":92,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":94,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"QiuHaohao"},"content":"    public Credential getCredential() {"},{"lineNumber":96,"author":{"gitID":"QiuHaohao"},"content":"        return credential;"},{"lineNumber":97,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":99,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"QiuHaohao"},"content":"     * Returns the MatricNumber"},{"lineNumber":101,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":103,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"QiuHaohao"},"content":"    public MatricNumber getMatricNumber() {"},{"lineNumber":105,"author":{"gitID":"QiuHaohao"},"content":"        return matricNumber;"},{"lineNumber":106,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":108,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"QiuHaohao"},"content":"     * Returns the privilegeLevel of this account"},{"lineNumber":110,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":112,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"QiuHaohao"},"content":"    public PrivilegeLevel getPrivilegeLevel() {"},{"lineNumber":114,"author":{"gitID":"QiuHaohao"},"content":"        return privilegeLevel;"},{"lineNumber":115,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":117,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"QiuHaohao"},"content":"     * Returns a boolean indicating whether a given credential matches with that of this account"},{"lineNumber":119,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":120,"author":{"gitID":"QiuHaohao"},"content":"     * @param c"},{"lineNumber":121,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":122,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"QiuHaohao"},"content":"    public boolean credentialMatches(Credential c) {"},{"lineNumber":124,"author":{"gitID":"QiuHaohao"},"content":"        return c.equals(this.credential);"},{"lineNumber":125,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":127,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if this account\u0027s username is the same as the username provided"},{"lineNumber":129,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"QiuHaohao"},"content":"     * @param username"},{"lineNumber":131,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":132,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"QiuHaohao"},"content":"    public boolean usernameMatches(Username username) {"},{"lineNumber":134,"author":{"gitID":"QiuHaohao"},"content":"        return this.credential.usernameEquals(username);"},{"lineNumber":135,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":137,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if this account\u0027s username is the same as that of the credential provided"},{"lineNumber":139,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":140,"author":{"gitID":"QiuHaohao"},"content":"     * @param c"},{"lineNumber":141,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":142,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"QiuHaohao"},"content":"    public boolean usernameMatches(Credential c) {"},{"lineNumber":144,"author":{"gitID":"QiuHaohao"},"content":"        return usernameMatches(c.getUsername());"},{"lineNumber":145,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":147,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if this account\u0027s username is the same as that of the account provided"},{"lineNumber":149,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"QiuHaohao"},"content":"     * @param a"},{"lineNumber":151,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":152,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"QiuHaohao"},"content":"    public boolean usernameMatches(Account a) {"},{"lineNumber":154,"author":{"gitID":"QiuHaohao"},"content":"        return usernameMatches(a.getCredential());"},{"lineNumber":155,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":157,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"QiuHaohao"},"content":"    public boolean equals(Object o) {"},{"lineNumber":159,"author":{"gitID":"QiuHaohao"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":160,"author":{"gitID":"QiuHaohao"},"content":"            return true;"},{"lineNumber":161,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"QiuHaohao"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":163,"author":{"gitID":"QiuHaohao"},"content":"            return false;"},{"lineNumber":164,"author":{"gitID":"QiuHaohao"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"QiuHaohao"},"content":"        Account account \u003d (Account) o;"},{"lineNumber":166,"author":{"gitID":"QiuHaohao"},"content":"        return Objects.equals(name, account.name)"},{"lineNumber":167,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 Objects.equals(credential, account.credential)"},{"lineNumber":168,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 Objects.equals(matricNumber, account.matricNumber)"},{"lineNumber":169,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 Objects.equals(privilegeLevel, account.privilegeLevel);"},{"lineNumber":170,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":172,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":173,"author":{"gitID":"QiuHaohao"},"content":"    public int hashCode() {"},{"lineNumber":174,"author":{"gitID":"QiuHaohao"},"content":"        return Objects.hash(name, credential, matricNumber, privilegeLevel);"},{"lineNumber":175,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":177,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":178,"author":{"gitID":"QiuHaohao"},"content":"    public String toString() {"},{"lineNumber":179,"author":{"gitID":"QiuHaohao"},"content":"        return this.credential.getUsername().toString();"},{"lineNumber":180,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"QiuHaohao"},"content":"}"}],"authorContributionMap":{"QiuHaohao":181}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the catalogue."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"victortardieu":2,"-":52}},{"path":"src/main/java/seedu/address/model/account/Credential.java","lines":[{"lineNumber":1,"author":{"gitID":"QiuHaohao"},"content":"//@@author QiuHaohao"},{"lineNumber":2,"author":{"gitID":"QiuHaohao"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":4,"author":{"gitID":"QiuHaohao"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitID":"QiuHaohao"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":7,"author":{"gitID":"QiuHaohao"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"QiuHaohao"},"content":" * Represents a set of username and password"},{"lineNumber":9,"author":{"gitID":"QiuHaohao"},"content":" */"},{"lineNumber":10,"author":{"gitID":"QiuHaohao"},"content":"public class Credential implements Serializable {"},{"lineNumber":11,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":12,"author":{"gitID":"QiuHaohao"},"content":"    private Username username;"},{"lineNumber":13,"author":{"gitID":"QiuHaohao"},"content":"    private Password password;"},{"lineNumber":14,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":15,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"QiuHaohao"},"content":"     * Constructs a {@code Credential}"},{"lineNumber":17,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"QiuHaohao"},"content":"     * @param username A valid username"},{"lineNumber":19,"author":{"gitID":"QiuHaohao"},"content":"     * @param password A valid password"},{"lineNumber":20,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"QiuHaohao"},"content":"    public Credential(String username, String password) {"},{"lineNumber":22,"author":{"gitID":"QiuHaohao"},"content":"        this.username \u003d new Username(username);"},{"lineNumber":23,"author":{"gitID":"QiuHaohao"},"content":"        this.password \u003d new Password(password);"},{"lineNumber":24,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":26,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"QiuHaohao"},"content":"     * Returns username"},{"lineNumber":28,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"QiuHaohao"},"content":"    public Username getUsername() {"},{"lineNumber":30,"author":{"gitID":"QiuHaohao"},"content":"        return username;"},{"lineNumber":31,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":33,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"QiuHaohao"},"content":"     * Returns password"},{"lineNumber":35,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"QiuHaohao"},"content":"    public Password getPassword() {"},{"lineNumber":37,"author":{"gitID":"QiuHaohao"},"content":"        return password;"},{"lineNumber":38,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":40,"author":{"gitID":"QiuHaohao"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"QiuHaohao"},"content":"     * Returns true if the username provided equals to this.username"},{"lineNumber":42,"author":{"gitID":"QiuHaohao"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"QiuHaohao"},"content":"     * @param username"},{"lineNumber":44,"author":{"gitID":"QiuHaohao"},"content":"     * @return"},{"lineNumber":45,"author":{"gitID":"QiuHaohao"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"QiuHaohao"},"content":"    public boolean usernameEquals(Username username) {"},{"lineNumber":47,"author":{"gitID":"QiuHaohao"},"content":"        return this.username.equals(username);"},{"lineNumber":48,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":50,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"QiuHaohao"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"QiuHaohao"},"content":"        return other \u003d\u003d this"},{"lineNumber":53,"author":{"gitID":"QiuHaohao"},"content":"            || (other instanceof Credential // short circuit if same obj"},{"lineNumber":54,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 this.username.equals(((Credential) other).username) // check username"},{"lineNumber":55,"author":{"gitID":"QiuHaohao"},"content":"            \u0026\u0026 this.password.equals(((Credential) other).password) //check password"},{"lineNumber":56,"author":{"gitID":"QiuHaohao"},"content":"            );"},{"lineNumber":57,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":59,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"QiuHaohao"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"QiuHaohao"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":62,"author":{"gitID":"QiuHaohao"},"content":"        return Objects.hash(username, password);"},{"lineNumber":63,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":65,"author":{"gitID":"QiuHaohao"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"QiuHaohao"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitID":"QiuHaohao"},"content":"        return \"Credential{\""},{"lineNumber":68,"author":{"gitID":"QiuHaohao"},"content":"            + \"username\u003d\" + username"},{"lineNumber":69,"author":{"gitID":"QiuHaohao"},"content":"            + \", password\u003d\" + password"},{"lineNumber":70,"author":{"gitID":"QiuHaohao"},"content":"            + \u0027}\u0027;"},{"lineNumber":71,"author":{"gitID":"QiuHaohao"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"QiuHaohao"},"content":"}"},{"lineNumber":73,"author":{"gitID":"QiuHaohao"},"content":""}],"authorContributionMap":{"QiuHaohao":73}},{"path":"src/main/java/seedu/address/model/account/Username.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":"import java.io.Serializable;"},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":" * Represents the username of an account"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":" */"},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"public class Username implements Serializable {"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":"    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"        \"Username should be at least 5 characters long.\";"},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"\\\\w{5,}\";"},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":"    private final String username;"},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"     * Constructs a Username"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"     * @param username"},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"    public Username(String username) {"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"        requireNonNull(username);"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"        this.username \u003d username;"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"     * Returns true if a given string is a valid Username."},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"    public static boolean isValidUsername(String test) {"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"        return test.matches(USERNAME_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":"     * Returns username."},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":"    public String getUsername() {"},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"        return username;"},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"        return other \u003d\u003d this"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":"            || (other instanceof Username // short circuit if same obj"},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"            \u0026\u0026 this.username.equals(((Username) other).username) // check username"},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":"            );"},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"        return username.hashCode();"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":"        return username;"},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"}"}],"authorContributionMap":{"victortardieu":64}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Credential;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.account.PrivilegeLevel;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.account.exceptions.AccountNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.account.exceptions.DuplicateAccountException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.book.Book;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    PrivilegeLevel PRIVILEGE_LEVEL_GUEST \u003d new PrivilegeLevel(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    PrivilegeLevel PRIVILEGE_LEVEL_STUDENT \u003d new PrivilegeLevel(1);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    PrivilegeLevel PRIVILEGE_LEVEL_LIBRARIAN \u003d new PrivilegeLevel(2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Clears existing backing model and replaces with the provided new data."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyCatalogue newData);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Clears existing backing model and replaces with the provided new data."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":"    void resetAccount(UniqueAccountList newData);"},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the Catalogue"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    ReadOnlyCatalogue getCatalogue();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Deletes the given book."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void deleteBook(Book target) throws BookNotFoundException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Adds the given book"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    void addBook(Book book) throws DuplicateBookException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Replaces the given book {@code target} with {@code editedBook}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws DuplicateBookException if updating the book\u0027s details causes the book to be equivalent to"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *                                another existing book in the list."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @throws BookNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    void updateBook(Book target, Book editedBook)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        throws DuplicateBookException, BookNotFoundException;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    void returnBook(Book target, Book returnedBook) throws BookNotFoundException;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    void borrowBook(Book target, Book borrowedBook) throws BookNotFoundException;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    void reserveBook(Book target, Book reservedBook) throws BookNotFoundException;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the filtered book list"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    ObservableList\u003cBook\u003e getFilteredBookList();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the account list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    UniqueAccountList getAccountList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered book list to filter by the given {@code predicate}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    void updateFilteredBookList(Predicate\u003cBook\u003e predicate);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"QiuHaohao"},"content":"    //@@author QiuHaohao"},{"lineNumber":89,"author":{"gitID":"QiuHaohao"},"content":"    void addAccount(Account account) throws DuplicateAccountException;"},{"lineNumber":90,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":91,"author":{"gitID":"QiuHaohao"},"content":"    void deleteAccount(Account account) throws AccountNotFoundException;"},{"lineNumber":92,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":93,"author":{"gitID":"QiuHaohao"},"content":"    void updateAccount(Account account, Account editedAccount)"},{"lineNumber":94,"author":{"gitID":"QiuHaohao"},"content":"        throws DuplicateAccountException, AccountNotFoundException;"},{"lineNumber":95,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":96,"author":{"gitID":"QiuHaohao"},"content":"    PrivilegeLevel authenticate(Credential credential);"},{"lineNumber":97,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":98,"author":{"gitID":"QiuHaohao"},"content":"    void logout();"},{"lineNumber":99,"author":{"gitID":"QiuHaohao"},"content":""},{"lineNumber":100,"author":{"gitID":"QiuHaohao"},"content":"    PrivilegeLevel getPrivilegeLevel();"},{"lineNumber":101,"author":{"gitID":"QiuHaohao"},"content":"    //@@author"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"QiuHaohao":14,"victortardieu":2,"-":86}},{"path":"src/main/java/seedu/address/model/account/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"victortardieu"},"content":"//@@author victortardieu"},{"lineNumber":2,"author":{"gitID":"victortardieu"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":4,"author":{"gitID":"victortardieu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"victortardieu"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":7,"author":{"gitID":"victortardieu"},"content":"import java.io.Serializable;"},{"lineNumber":8,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":9,"author":{"gitID":"victortardieu"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"victortardieu"},"content":" * Represents a password"},{"lineNumber":11,"author":{"gitID":"victortardieu"},"content":" */"},{"lineNumber":12,"author":{"gitID":"victortardieu"},"content":"public class Password implements Serializable {"},{"lineNumber":13,"author":{"gitID":"victortardieu"},"content":"    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"victortardieu"},"content":"        \"Password should be at least 5 characters long.\";"},{"lineNumber":15,"author":{"gitID":"victortardieu"},"content":"    public static final String PASSWORD_VALIDATION_REGEX \u003d \"\\\\w{5,}\";"},{"lineNumber":16,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":17,"author":{"gitID":"victortardieu"},"content":"    private final String password;"},{"lineNumber":18,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":19,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":20,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"victortardieu"},"content":"     * Construct a password"},{"lineNumber":22,"author":{"gitID":"victortardieu"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"victortardieu"},"content":"     * @param password"},{"lineNumber":24,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"victortardieu"},"content":"    public Password(String password) {"},{"lineNumber":26,"author":{"gitID":"victortardieu"},"content":"        requireNonNull(password);"},{"lineNumber":27,"author":{"gitID":"victortardieu"},"content":"        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":29,"author":{"gitID":"victortardieu"},"content":"        this.password \u003d password;"},{"lineNumber":30,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":32,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"victortardieu"},"content":"     * Returns true if a given string is a valid password."},{"lineNumber":34,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"victortardieu"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":36,"author":{"gitID":"victortardieu"},"content":"        return test.matches(PASSWORD_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":39,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"victortardieu"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"victortardieu"},"content":"        return \"Password{\""},{"lineNumber":42,"author":{"gitID":"victortardieu"},"content":"            + \"password\u003d\u0027\" + password + \u0027\\\u0027\u0027"},{"lineNumber":43,"author":{"gitID":"victortardieu"},"content":"            + \u0027}\u0027;"},{"lineNumber":44,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":46,"author":{"gitID":"victortardieu"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"victortardieu"},"content":"     * Returns password."},{"lineNumber":48,"author":{"gitID":"victortardieu"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"victortardieu"},"content":"    public String getPassword() {"},{"lineNumber":50,"author":{"gitID":"victortardieu"},"content":"        return password;"},{"lineNumber":51,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":53,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"victortardieu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"victortardieu"},"content":"        return other \u003d\u003d this"},{"lineNumber":56,"author":{"gitID":"victortardieu"},"content":"            || (other instanceof Password // short circuit if same obj"},{"lineNumber":57,"author":{"gitID":"victortardieu"},"content":"            \u0026\u0026 this.password.equals(((Password) other).password)); //check password"},{"lineNumber":58,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"victortardieu"},"content":""},{"lineNumber":60,"author":{"gitID":"victortardieu"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"victortardieu"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"victortardieu"},"content":"        return password.hashCode();"},{"lineNumber":63,"author":{"gitID":"victortardieu"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"victortardieu"},"content":"}"}],"authorContributionMap":{"victortardieu":64}},{"path":"src/main/java/seedu/address/model/book/UniqueBookList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.book;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.book.Avail.AVAILABLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.book.Avail.BORROWED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.model.book.Avail.RESERVED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.BookNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.book.exceptions.DuplicateBookException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A list of books that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":20,"author":{"gitID":"-"},"content":" * \u003cp\u003e"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitID":"-"},"content":" *"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see Book#equals(Object)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class UniqueBookList implements Iterable\u003cBook\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent book as the given argument."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean contains(Book toCheck) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns true if there is a book with the same isbn provided"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param p"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean containsIsbn(Isbn p) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        for (Book b : internalList) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            if (b.isbnMatches(p)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns true if there is a book with a isbn that is the"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * same as that of the book provided"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @param toCheck"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public boolean containsSameIsbn(Book toCheck) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return containsIsbn(toCheck.getIsbn());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Adds a book to the list."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @throws DuplicateBookException if the book to add is a duplicate of an existing book in the list."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void add(Book toAdd) throws DuplicateBookException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (contains(toAdd) || containsSameIsbn(toAdd)) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new DuplicateBookException();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Replaces the book {@code target} in the list with {@code editedBook}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws DuplicateBookException if the replacement is equivalent to another existing book in the list."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws BookNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setBook(Book target, Book editedBook)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        throws DuplicateBookException, BookNotFoundException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(editedBook);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new BookNotFoundException();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (!target.equals(editedBook) \u0026\u0026 internalList.contains(editedBook)) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new DuplicateBookException();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        internalList.set(index, editedBook);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Removes the equivalent book from the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws BookNotFoundException if no such book could be found in the list."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public boolean remove(Book toRemove) throws BookNotFoundException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final boolean bookFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!bookFoundAndDeleted) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new BookNotFoundException();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return bookFoundAndDeleted;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void setBooks(UniqueBookList replacement) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void setBooks(List\u003cBook\u003e books) throws DuplicateBookException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireAllNonNull(books);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final UniqueBookList replacement \u003d new UniqueBookList();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        for (final Book book : books) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            replacement.add(book);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        setBooks(replacement);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"LeKhangTai"},"content":"    //@@author LeKhangTai"},{"lineNumber":128,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"LeKhangTai"},"content":"     * @param target select the index book to be returned"},{"lineNumber":130,"author":{"gitID":"LeKhangTai"},"content":"     * @param returnedBook duplicated book that will replace original book"},{"lineNumber":131,"author":{"gitID":"LeKhangTai"},"content":"     * @throws BookNotFoundException"},{"lineNumber":132,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"LeKhangTai"},"content":"    public void replaceReturnedBook(Book target, Book returnedBook) throws BookNotFoundException {"},{"lineNumber":134,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(returnedBook);"},{"lineNumber":135,"author":{"gitID":"LeKhangTai"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":136,"author":{"gitID":"LeKhangTai"},"content":"        String status \u003d target.getAvail().toString();"},{"lineNumber":137,"author":{"gitID":"LeKhangTai"},"content":"        switch (status) {"},{"lineNumber":138,"author":{"gitID":"LeKhangTai"},"content":"        case (BORROWED):"},{"lineNumber":139,"author":{"gitID":"LeKhangTai"},"content":"            internalList.set(index, returnedBook);"},{"lineNumber":140,"author":{"gitID":"LeKhangTai"},"content":"            break;"},{"lineNumber":141,"author":{"gitID":"LeKhangTai"},"content":"        case (RESERVED):"},{"lineNumber":142,"author":{"gitID":"LeKhangTai"},"content":"            internalList.set(index, returnedBook);"},{"lineNumber":143,"author":{"gitID":"LeKhangTai"},"content":"            break;"},{"lineNumber":144,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":145,"author":{"gitID":"LeKhangTai"},"content":"        default:"},{"lineNumber":146,"author":{"gitID":"LeKhangTai"},"content":"            throw new BookNotFoundException();"},{"lineNumber":147,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":150,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"LeKhangTai"},"content":"     * @param target select the index book to be borrowed"},{"lineNumber":152,"author":{"gitID":"LeKhangTai"},"content":"     * @param borrowedBook duplicated book that will replace original book"},{"lineNumber":153,"author":{"gitID":"LeKhangTai"},"content":"     * @throws BookNotFoundException"},{"lineNumber":154,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"LeKhangTai"},"content":"    public void replaceBorrowedBook(Book target, Book borrowedBook) throws BookNotFoundException {"},{"lineNumber":156,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(borrowedBook);"},{"lineNumber":157,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":158,"author":{"gitID":"LeKhangTai"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":159,"author":{"gitID":"LeKhangTai"},"content":"        String status \u003d target.getAvail().toString();"},{"lineNumber":160,"author":{"gitID":"LeKhangTai"},"content":"        switch (status) {"},{"lineNumber":161,"author":{"gitID":"LeKhangTai"},"content":"        case (AVAILABLE):"},{"lineNumber":162,"author":{"gitID":"LeKhangTai"},"content":"            internalList.set(index, borrowedBook);"},{"lineNumber":163,"author":{"gitID":"LeKhangTai"},"content":"            break;"},{"lineNumber":164,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":165,"author":{"gitID":"LeKhangTai"},"content":"        default:"},{"lineNumber":166,"author":{"gitID":"LeKhangTai"},"content":"            throw new BookNotFoundException();"},{"lineNumber":167,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":170,"author":{"gitID":"LeKhangTai"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"LeKhangTai"},"content":"     * @param target select the index book to be reserved"},{"lineNumber":172,"author":{"gitID":"LeKhangTai"},"content":"     * @param reservedBook duplicated book that will replace original book"},{"lineNumber":173,"author":{"gitID":"LeKhangTai"},"content":"     * @throws BookNotFoundException"},{"lineNumber":174,"author":{"gitID":"LeKhangTai"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"LeKhangTai"},"content":"    public void replaceReservedBook(Book target, Book reservedBook) throws BookNotFoundException {"},{"lineNumber":176,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":177,"author":{"gitID":"LeKhangTai"},"content":"        requireNonNull(reservedBook);"},{"lineNumber":178,"author":{"gitID":"LeKhangTai"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":179,"author":{"gitID":"LeKhangTai"},"content":"        String status \u003d target.getAvail().toString();"},{"lineNumber":180,"author":{"gitID":"LeKhangTai"},"content":"        switch (status) {"},{"lineNumber":181,"author":{"gitID":"LeKhangTai"},"content":"        case (BORROWED):"},{"lineNumber":182,"author":{"gitID":"LeKhangTai"},"content":"            internalList.set(index, reservedBook);"},{"lineNumber":183,"author":{"gitID":"LeKhangTai"},"content":"            break;"},{"lineNumber":184,"author":{"gitID":"LeKhangTai"},"content":""},{"lineNumber":185,"author":{"gitID":"LeKhangTai"},"content":"        default:"},{"lineNumber":186,"author":{"gitID":"LeKhangTai"},"content":"            throw new BookNotFoundException();"},{"lineNumber":187,"author":{"gitID":"LeKhangTai"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"LeKhangTai"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"LeKhangTai"},"content":"    //@@author"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public ObservableList\u003cBook\u003e asObservableList() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public Iterator\u003cBook\u003e iterator() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            || (other instanceof UniqueBookList // instanceof handles nulls"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            \u0026\u0026 this.internalList.equals(((UniqueBookList) other).internalList));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":150,"LeKhangTai":63}}]
